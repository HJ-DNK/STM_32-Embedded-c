
poll_spi_cong_tx_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036fc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003838  08003838  00013838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038fc  080038fc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080038fc  080038fc  000138fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003904  08003904  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003904  08003904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800390c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000080  0800398c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  0800398c  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009847  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017fd  00000000  00000000  000298f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002b0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002b9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015fc3  00000000  00000000  0002c1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fc8  00000000  00000000  0004218b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084a8b  00000000  00000000  0004c153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0bde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b24  00000000  00000000  000d0c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000080 	.word	0x20000080
 8000158:	00000000 	.word	0x00000000
 800015c:	08003820 	.word	0x08003820

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000084 	.word	0x20000084
 8000178:	08003820 	.word	0x08003820

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048a:	f000 fab6 	bl	80009fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048e:	f000 f827 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000492:	f000 f8cb 	bl	800062c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000496:	f000 f89f 	bl	80005d8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800049a:	f000 f867 	bl	800056c <MX_SPI2_Init>


	//HAL_SPI_Transmit(&hspi2, rx_buff, 13, 1000);
	//printf("%s\r\n",tx_buff);

if( HAL_SPI_TransmitReceive(&hspi2, tx_buff, rx_buff, sizeof(tx_buff),1000)== HAL_OK)
 800049e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004a2:	9300      	str	r3, [sp, #0]
 80004a4:	230d      	movs	r3, #13
 80004a6:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <main+0x4c>)
 80004a8:	490a      	ldr	r1, [pc, #40]	; (80004d4 <main+0x50>)
 80004aa:	480b      	ldr	r0, [pc, #44]	; (80004d8 <main+0x54>)
 80004ac:	f001 fd52 	bl	8001f54 <HAL_SPI_TransmitReceive>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d10a      	bne.n	80004cc <main+0x48>
{
	 HAL_SPI_Transmit(&hspi2, rx_buff, 13,1000);
 80004b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ba:	220d      	movs	r2, #13
 80004bc:	4904      	ldr	r1, [pc, #16]	; (80004d0 <main+0x4c>)
 80004be:	4806      	ldr	r0, [pc, #24]	; (80004d8 <main+0x54>)
 80004c0:	f001 fc05 	bl	8001cce <HAL_SPI_Transmit>

	 printf("%s\r\n",rx_buff);
 80004c4:	4902      	ldr	r1, [pc, #8]	; (80004d0 <main+0x4c>)
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <main+0x58>)
 80004c8:	f002 fa16 	bl	80028f8 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <main+0x48>
 80004ce:	bf00      	nop
 80004d0:	2000013c 	.word	0x2000013c
 80004d4:	20000000 	.word	0x20000000
 80004d8:	2000009c 	.word	0x2000009c
 80004dc:	08003838 	.word	0x08003838

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b092      	sub	sp, #72	; 0x48
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	2234      	movs	r2, #52	; 0x34
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 f9fa 	bl	80028e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f4:	463b      	mov	r3, r7
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000502:	4b19      	ldr	r3, [pc, #100]	; (8000568 <SystemClock_Config+0x88>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800050a:	4a17      	ldr	r2, [pc, #92]	; (8000568 <SystemClock_Config+0x88>)
 800050c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000510:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000512:	2302      	movs	r3, #2
 8000514:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000516:	2301      	movs	r3, #1
 8000518:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051a:	2310      	movs	r3, #16
 800051c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800051e:	2300      	movs	r3, #0
 8000520:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	4618      	mov	r0, r3
 8000528:	f000 fd52 	bl	8000fd0 <HAL_RCC_OscConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000532:	f000 f8b9 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000536:	230f      	movs	r3, #15
 8000538:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800053a:	2301      	movs	r3, #1
 800053c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800054a:	463b      	mov	r3, r7
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f001 f86e 	bl	8001630 <HAL_RCC_ClockConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800055a:	f000 f8a5 	bl	80006a8 <Error_Handler>
  }
}
 800055e:	bf00      	nop
 8000560:	3748      	adds	r7, #72	; 0x48
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40007000 	.word	0x40007000

0800056c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MX_SPI2_Init+0x64>)
 8000572:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <MX_SPI2_Init+0x68>)
 8000574:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000576:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <MX_SPI2_Init+0x64>)
 8000578:	f44f 7282 	mov.w	r2, #260	; 0x104
 800057c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800057e:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <MX_SPI2_Init+0x64>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <MX_SPI2_Init+0x64>)
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_SPI2_Init+0x64>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_SPI2_Init+0x64>)
 8000592:	2200      	movs	r2, #0
 8000594:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_SPI2_Init+0x64>)
 8000598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800059c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_SPI2_Init+0x64>)
 80005a0:	2210      	movs	r2, #16
 80005a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <MX_SPI2_Init+0x64>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_SPI2_Init+0x64>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <MX_SPI2_Init+0x64>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_SPI2_Init+0x64>)
 80005b8:	220a      	movs	r2, #10
 80005ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <MX_SPI2_Init+0x64>)
 80005be:	f001 fafd 	bl	8001bbc <HAL_SPI_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80005c8:	f000 f86e 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2000009c 	.word	0x2000009c
 80005d4:	40003800 	.word	0x40003800

080005d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005de:	4a12      	ldr	r2, [pc, #72]	; (8000628 <MX_USART2_UART_Init+0x50>)
 80005e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 8000610:	f001 ff1a 	bl	8002448 <HAL_UART_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800061a:	f000 f845 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000f4 	.word	0x200000f4
 8000628:	40004400 	.word	0x40004400

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_GPIO_Init+0x74>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <MX_GPIO_Init+0x74>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_GPIO_Init+0x74>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_GPIO_Init+0x74>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <MX_GPIO_Init+0x74>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	61d3      	str	r3, [r2, #28]
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_GPIO_Init+0x74>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BSP_LED1_Pin|BSP_LED2_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	21c0      	movs	r1, #192	; 0xc0
 8000676:	480b      	ldr	r0, [pc, #44]	; (80006a4 <MX_GPIO_Init+0x78>)
 8000678:	f000 fc92 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BSP_LED1_Pin BSP_LED2_Pin */
  GPIO_InitStruct.Pin = BSP_LED1_Pin|BSP_LED2_Pin;
 800067c:	23c0      	movs	r3, #192	; 0xc0
 800067e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4619      	mov	r1, r3
 8000692:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0x78>)
 8000694:	f000 fb04 	bl	8000ca0 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020400 	.word	0x40020400

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_MspInit+0x5c>)
 80006bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <HAL_MspInit+0x5c>)
 80006c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006c4:	6253      	str	r3, [r2, #36]	; 0x24
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_MspInit+0x5c>)
 80006c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_MspInit+0x5c>)
 80006d4:	6a1b      	ldr	r3, [r3, #32]
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_MspInit+0x5c>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6213      	str	r3, [r2, #32]
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_MspInit+0x5c>)
 80006e0:	6a1b      	ldr	r3, [r3, #32]
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <HAL_MspInit+0x5c>)
 80006ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ee:	4a08      	ldr	r2, [pc, #32]	; (8000710 <HAL_MspInit+0x5c>)
 80006f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f4:	6253      	str	r3, [r2, #36]	; 0x24
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_MspInit+0x5c>)
 80006f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000702:	2007      	movs	r0, #7
 8000704:	f000 fa98 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800

08000714 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a17      	ldr	r2, [pc, #92]	; (8000790 <HAL_SPI_MspInit+0x7c>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d128      	bne.n	8000788 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <HAL_SPI_MspInit+0x80>)
 8000738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073a:	4a16      	ldr	r2, [pc, #88]	; (8000794 <HAL_SPI_MspInit+0x80>)
 800073c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000740:	6253      	str	r3, [r2, #36]	; 0x24
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <HAL_SPI_MspInit+0x80>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <HAL_SPI_MspInit+0x80>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a10      	ldr	r2, [pc, #64]	; (8000794 <HAL_SPI_MspInit+0x80>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <HAL_SPI_MspInit+0x80>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000766:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800076a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000774:	2303      	movs	r3, #3
 8000776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000778:	2305      	movs	r3, #5
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <HAL_SPI_MspInit+0x84>)
 8000784:	f000 fa8c 	bl	8000ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	; 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40003800 	.word	0x40003800
 8000794:	40023800 	.word	0x40023800
 8000798:	40020400 	.word	0x40020400

0800079c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a17      	ldr	r2, [pc, #92]	; (8000818 <HAL_UART_MspInit+0x7c>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d127      	bne.n	800080e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <HAL_UART_MspInit+0x80>)
 80007c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c2:	4a16      	ldr	r2, [pc, #88]	; (800081c <HAL_UART_MspInit+0x80>)
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c8:	6253      	str	r3, [r2, #36]	; 0x24
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <HAL_UART_MspInit+0x80>)
 80007cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <HAL_UART_MspInit+0x80>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <HAL_UART_MspInit+0x80>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	61d3      	str	r3, [r2, #28]
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_UART_MspInit+0x80>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007ee:	230c      	movs	r3, #12
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007fe:	2307      	movs	r3, #7
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <HAL_UART_MspInit+0x84>)
 800080a:	f000 fa49 	bl	8000ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40004400 	.word	0x40004400
 800081c:	40023800 	.word	0x40023800
 8000820:	40020000 	.word	0x40020000

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <NMI_Handler+0x4>

0800082a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <MemManage_Handler+0x4>

08000836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <UsageFault_Handler+0x4>

08000842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr

0800084e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr

08000866 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086a:	f000 f919 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}

08000872 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af00      	add	r7, sp, #0
 8000878:	60f8      	str	r0, [r7, #12]
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	e00a      	b.n	800089a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000884:	f3af 8000 	nop.w
 8000888:	4601      	mov	r1, r0
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	60ba      	str	r2, [r7, #8]
 8000890:	b2ca      	uxtb	r2, r1
 8000892:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	3301      	adds	r3, #1
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	429a      	cmp	r2, r3
 80008a0:	dbf0      	blt.n	8000884 <_read+0x12>
  }

  return len;
 80008a2:	687b      	ldr	r3, [r7, #4]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }

	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008c0:	68b9      	ldr	r1, [r7, #8]
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <_write+0x28>)
 80008c4:	f001 fe10 	bl	80024e8 <HAL_UART_Transmit>
  return len;
 80008c8:	687b      	ldr	r3, [r7, #4]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000f4 	.word	0x200000f4

080008d8 <_close>:

int _close(int file)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr

080008ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008fe:	605a      	str	r2, [r3, #4]
  return 0;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <_isatty>:

int _isatty(int file)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000914:	2301      	movs	r3, #1
}
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000940:	4a14      	ldr	r2, [pc, #80]	; (8000994 <_sbrk+0x5c>)
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <_sbrk+0x60>)
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <_sbrk+0x64>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <_sbrk+0x64>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <_sbrk+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	429a      	cmp	r2, r3
 8000966:	d207      	bcs.n	8000978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000968:	f001 ff94 	bl	8002894 <__errno>
 800096c:	4603      	mov	r3, r0
 800096e:	220c      	movs	r2, #12
 8000970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000976:	e009      	b.n	800098c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <_sbrk+0x64>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <_sbrk+0x64>)
 8000988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20008000 	.word	0x20008000
 8000998:	00000400 	.word	0x00000400
 800099c:	2000014c 	.word	0x2000014c
 80009a0:	20000168 	.word	0x20000168

080009a4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80009b0:	f7ff fff8 	bl	80009a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b4:	480b      	ldr	r0, [pc, #44]	; (80009e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009b6:	490c      	ldr	r1, [pc, #48]	; (80009e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009b8:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009cc:	4c09      	ldr	r4, [pc, #36]	; (80009f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009da:	f001 ff61 	bl	80028a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009de:	f7ff fd51 	bl	8000484 <main>
  bx lr
 80009e2:	4770      	bx	lr
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80009ec:	0800390c 	.word	0x0800390c
  ldr r2, =_sbss
 80009f0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80009f4:	20000164 	.word	0x20000164

080009f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC1_IRQHandler>

080009fa <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a00:	2300      	movs	r3, #0
 8000a02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f917 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f000 f80e 	bl	8000a2c <HAL_InitTick>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d002      	beq.n	8000a1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	71fb      	strb	r3, [r7, #7]
 8000a1a:	e001      	b.n	8000a20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a1c:	f7ff fe4a 	bl	80006b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a20:	79fb      	ldrb	r3, [r7, #7]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a38:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <HAL_InitTick+0x68>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d022      	beq.n	8000a86 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_InitTick+0x6c>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <HAL_InitTick+0x68>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 f916 	bl	8000c86 <HAL_SYSTICK_Config>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10f      	bne.n	8000a80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b0f      	cmp	r3, #15
 8000a64:	d809      	bhi.n	8000a7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a66:	2200      	movs	r2, #0
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a6e:	f000 f8ee 	bl	8000c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <HAL_InitTick+0x70>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	e007      	b.n	8000a8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	73fb      	strb	r3, [r7, #15]
 8000a7e:	e004      	b.n	8000a8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a80:	2301      	movs	r3, #1
 8000a82:	73fb      	strb	r3, [r7, #15]
 8000a84:	e001      	b.n	8000a8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000018 	.word	0x20000018
 8000a98:	20000010 	.word	0x20000010
 8000a9c:	20000014 	.word	0x20000014

08000aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x1c>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a03      	ldr	r2, [pc, #12]	; (8000abc <HAL_IncTick+0x1c>)
 8000ab0:	6013      	str	r3, [r2, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000150 	.word	0x20000150
 8000ac0:	20000018 	.word	0x20000018

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <HAL_GetTick+0x10>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000150 	.word	0x20000150

08000ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c18:	f7ff ff90 	bl	8000b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff49 	bl	8000ad8 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff5e 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff90 	bl	8000b90 <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5f 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffb0 	bl	8000bf4 <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cb6:	e154      	b.n	8000f62 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 8146 	beq.w	8000f5c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d005      	beq.n	8000ce8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d130      	bne.n	8000d4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d1e:	2201      	movs	r2, #1
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	091b      	lsrs	r3, r3, #4
 8000d34:	f003 0201 	and.w	r2, r3, #1
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d017      	beq.n	8000d86 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d123      	bne.n	8000dda <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	08da      	lsrs	r2, r3, #3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3208      	adds	r2, #8
 8000d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	220f      	movs	r2, #15
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	691a      	ldr	r2, [r3, #16]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	08da      	lsrs	r2, r3, #3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3208      	adds	r2, #8
 8000dd4:	6939      	ldr	r1, [r7, #16]
 8000dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0203 	and.w	r2, r3, #3
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 80a0 	beq.w	8000f5c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1c:	4b58      	ldr	r3, [pc, #352]	; (8000f80 <HAL_GPIO_Init+0x2e0>)
 8000e1e:	6a1b      	ldr	r3, [r3, #32]
 8000e20:	4a57      	ldr	r2, [pc, #348]	; (8000f80 <HAL_GPIO_Init+0x2e0>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6213      	str	r3, [r2, #32]
 8000e28:	4b55      	ldr	r3, [pc, #340]	; (8000f80 <HAL_GPIO_Init+0x2e0>)
 8000e2a:	6a1b      	ldr	r3, [r3, #32]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e34:	4a53      	ldr	r2, [pc, #332]	; (8000f84 <HAL_GPIO_Init+0x2e4>)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a4b      	ldr	r2, [pc, #300]	; (8000f88 <HAL_GPIO_Init+0x2e8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d019      	beq.n	8000e94 <HAL_GPIO_Init+0x1f4>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a4a      	ldr	r2, [pc, #296]	; (8000f8c <HAL_GPIO_Init+0x2ec>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d013      	beq.n	8000e90 <HAL_GPIO_Init+0x1f0>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a49      	ldr	r2, [pc, #292]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d00d      	beq.n	8000e8c <HAL_GPIO_Init+0x1ec>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a48      	ldr	r2, [pc, #288]	; (8000f94 <HAL_GPIO_Init+0x2f4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d007      	beq.n	8000e88 <HAL_GPIO_Init+0x1e8>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a47      	ldr	r2, [pc, #284]	; (8000f98 <HAL_GPIO_Init+0x2f8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d101      	bne.n	8000e84 <HAL_GPIO_Init+0x1e4>
 8000e80:	2304      	movs	r3, #4
 8000e82:	e008      	b.n	8000e96 <HAL_GPIO_Init+0x1f6>
 8000e84:	2305      	movs	r3, #5
 8000e86:	e006      	b.n	8000e96 <HAL_GPIO_Init+0x1f6>
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e004      	b.n	8000e96 <HAL_GPIO_Init+0x1f6>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	e002      	b.n	8000e96 <HAL_GPIO_Init+0x1f6>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e000      	b.n	8000e96 <HAL_GPIO_Init+0x1f6>
 8000e94:	2300      	movs	r3, #0
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	f002 0203 	and.w	r2, r2, #3
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	4093      	lsls	r3, r2
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ea6:	4937      	ldr	r1, [pc, #220]	; (8000f84 <HAL_GPIO_Init+0x2e4>)
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb4:	4b39      	ldr	r3, [pc, #228]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ed8:	4a30      	ldr	r2, [pc, #192]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ede:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f02:	4a26      	ldr	r2, [pc, #152]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f47f aea3 	bne.w	8000cb8 <HAL_GPIO_Init+0x18>
  }
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40010000 	.word	0x40010000
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010400 	.word	0x40010400

08000fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	4613      	mov	r3, r2
 8000fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fb0:	787b      	ldrb	r3, [r7, #1]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000fbc:	e003      	b.n	8000fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	041a      	lsls	r2, r3, #16
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	619a      	str	r2, [r3, #24]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e31d      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fe2:	4b94      	ldr	r3, [pc, #592]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
 8000fea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fec:	4b91      	ldr	r3, [pc, #580]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d07b      	beq.n	80010fa <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	2b08      	cmp	r3, #8
 8001006:	d006      	beq.n	8001016 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	2b0c      	cmp	r3, #12
 800100c:	d10f      	bne.n	800102e <HAL_RCC_OscConfig+0x5e>
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001014:	d10b      	bne.n	800102e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001016:	4b87      	ldr	r3, [pc, #540]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d06a      	beq.n	80010f8 <HAL_RCC_OscConfig+0x128>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d166      	bne.n	80010f8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e2f7      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d106      	bne.n	8001044 <HAL_RCC_OscConfig+0x74>
 8001036:	4b7f      	ldr	r3, [pc, #508]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a7e      	ldr	r2, [pc, #504]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	e02d      	b.n	80010a0 <HAL_RCC_OscConfig+0xd0>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10c      	bne.n	8001066 <HAL_RCC_OscConfig+0x96>
 800104c:	4b79      	ldr	r3, [pc, #484]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a78      	ldr	r2, [pc, #480]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b76      	ldr	r3, [pc, #472]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a75      	ldr	r2, [pc, #468]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800105e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	e01c      	b.n	80010a0 <HAL_RCC_OscConfig+0xd0>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b05      	cmp	r3, #5
 800106c:	d10c      	bne.n	8001088 <HAL_RCC_OscConfig+0xb8>
 800106e:	4b71      	ldr	r3, [pc, #452]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a70      	ldr	r2, [pc, #448]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	4b6e      	ldr	r3, [pc, #440]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a6d      	ldr	r2, [pc, #436]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e00b      	b.n	80010a0 <HAL_RCC_OscConfig+0xd0>
 8001088:	4b6a      	ldr	r3, [pc, #424]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a69      	ldr	r2, [pc, #420]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800108e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b67      	ldr	r3, [pc, #412]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a66      	ldr	r2, [pc, #408]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800109a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d013      	beq.n	80010d0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fd0c 	bl	8000ac4 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fd08 	bl	8000ac4 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b64      	cmp	r3, #100	; 0x64
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e2ad      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010c2:	4b5c      	ldr	r3, [pc, #368]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0xe0>
 80010ce:	e014      	b.n	80010fa <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fcf8 	bl	8000ac4 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fcf4 	bl	8000ac4 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b64      	cmp	r3, #100	; 0x64
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e299      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010ea:	4b52      	ldr	r3, [pc, #328]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x108>
 80010f6:	e000      	b.n	80010fa <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d05a      	beq.n	80011bc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	2b04      	cmp	r3, #4
 800110a:	d005      	beq.n	8001118 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	2b0c      	cmp	r3, #12
 8001110:	d119      	bne.n	8001146 <HAL_RCC_OscConfig+0x176>
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d116      	bne.n	8001146 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001118:	4b46      	ldr	r3, [pc, #280]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <HAL_RCC_OscConfig+0x160>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d001      	beq.n	8001130 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e276      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001130:	4b40      	ldr	r3, [pc, #256]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	493d      	ldr	r1, [pc, #244]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001140:	4313      	orrs	r3, r2
 8001142:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001144:	e03a      	b.n	80011bc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d020      	beq.n	8001190 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <HAL_RCC_OscConfig+0x268>)
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fcb6 	bl	8000ac4 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115c:	f7ff fcb2 	bl	8000ac4 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e257      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	492a      	ldr	r1, [pc, #168]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800118a:	4313      	orrs	r3, r2
 800118c:	604b      	str	r3, [r1, #4]
 800118e:	e015      	b.n	80011bc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001190:	4b29      	ldr	r3, [pc, #164]	; (8001238 <HAL_RCC_OscConfig+0x268>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff fc95 	bl	8000ac4 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119e:	f7ff fc91 	bl	8000ac4 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e236      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f0      	bne.n	800119e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80b8 	beq.w	800133a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d170      	bne.n	80012b2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <HAL_RCC_OscConfig+0x218>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e21a      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1a      	ldr	r2, [r3, #32]
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d921      	bls.n	800123c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fc7d 	bl	8001afc <RCC_SetFlashLatencyFromMSIRange>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e208      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	4906      	ldr	r1, [pc, #24]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800121a:	4313      	orrs	r3, r2
 800121c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	061b      	lsls	r3, r3, #24
 800122c:	4901      	ldr	r1, [pc, #4]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800122e:	4313      	orrs	r3, r2
 8001230:	604b      	str	r3, [r1, #4]
 8001232:	e020      	b.n	8001276 <HAL_RCC_OscConfig+0x2a6>
 8001234:	40023800 	.word	0x40023800
 8001238:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800123c:	4b99      	ldr	r3, [pc, #612]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4996      	ldr	r1, [pc, #600]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800124a:	4313      	orrs	r3, r2
 800124c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124e:	4b95      	ldr	r3, [pc, #596]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	061b      	lsls	r3, r3, #24
 800125c:	4991      	ldr	r1, [pc, #580]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800125e:	4313      	orrs	r3, r2
 8001260:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fc48 	bl	8001afc <RCC_SetFlashLatencyFromMSIRange>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e1d3      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	0b5b      	lsrs	r3, r3, #13
 800127c:	3301      	adds	r3, #1
 800127e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001286:	4a87      	ldr	r2, [pc, #540]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001288:	6892      	ldr	r2, [r2, #8]
 800128a:	0912      	lsrs	r2, r2, #4
 800128c:	f002 020f 	and.w	r2, r2, #15
 8001290:	4985      	ldr	r1, [pc, #532]	; (80014a8 <HAL_RCC_OscConfig+0x4d8>)
 8001292:	5c8a      	ldrb	r2, [r1, r2]
 8001294:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001296:	4a85      	ldr	r2, [pc, #532]	; (80014ac <HAL_RCC_OscConfig+0x4dc>)
 8001298:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800129a:	4b85      	ldr	r3, [pc, #532]	; (80014b0 <HAL_RCC_OscConfig+0x4e0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fbc4 	bl	8000a2c <HAL_InitTick>
 80012a4:	4603      	mov	r3, r0
 80012a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d045      	beq.n	800133a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	e1b5      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d029      	beq.n	800130e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012ba:	4b7e      	ldr	r3, [pc, #504]	; (80014b4 <HAL_RCC_OscConfig+0x4e4>)
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc00 	bl	8000ac4 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012c8:	f7ff fbfc 	bl	8000ac4 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e1a1      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012da:	4b72      	ldr	r3, [pc, #456]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e6:	4b6f      	ldr	r3, [pc, #444]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	496c      	ldr	r1, [pc, #432]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f8:	4b6a      	ldr	r3, [pc, #424]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	061b      	lsls	r3, r3, #24
 8001306:	4967      	ldr	r1, [pc, #412]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
 800130c:	e015      	b.n	800133a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800130e:	4b69      	ldr	r3, [pc, #420]	; (80014b4 <HAL_RCC_OscConfig+0x4e4>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fbd6 	bl	8000ac4 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800131c:	f7ff fbd2 	bl	8000ac4 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e177      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800132e:	4b5d      	ldr	r3, [pc, #372]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d030      	beq.n	80013a8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d016      	beq.n	800137c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134e:	4b5a      	ldr	r3, [pc, #360]	; (80014b8 <HAL_RCC_OscConfig+0x4e8>)
 8001350:	2201      	movs	r2, #1
 8001352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001354:	f7ff fbb6 	bl	8000ac4 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800135c:	f7ff fbb2 	bl	8000ac4 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e157      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800136e:	4b4d      	ldr	r3, [pc, #308]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f0      	beq.n	800135c <HAL_RCC_OscConfig+0x38c>
 800137a:	e015      	b.n	80013a8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800137c:	4b4e      	ldr	r3, [pc, #312]	; (80014b8 <HAL_RCC_OscConfig+0x4e8>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001382:	f7ff fb9f 	bl	8000ac4 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138a:	f7ff fb9b 	bl	8000ac4 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e140      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800139c:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800139e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1f0      	bne.n	800138a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80b5 	beq.w	8001520 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ba:	4b3a      	ldr	r3, [pc, #232]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10d      	bne.n	80013e2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	4a36      	ldr	r2, [pc, #216]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6253      	str	r3, [r2, #36]	; 0x24
 80013d2:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013de:	2301      	movs	r3, #1
 80013e0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <HAL_RCC_OscConfig+0x4ec>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d118      	bne.n	8001420 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ee:	4b33      	ldr	r3, [pc, #204]	; (80014bc <HAL_RCC_OscConfig+0x4ec>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a32      	ldr	r2, [pc, #200]	; (80014bc <HAL_RCC_OscConfig+0x4ec>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fb63 	bl	8000ac4 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001402:	f7ff fb5f 	bl	8000ac4 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b64      	cmp	r3, #100	; 0x64
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e104      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	4b29      	ldr	r3, [pc, #164]	; (80014bc <HAL_RCC_OscConfig+0x4ec>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x466>
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800142a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142c:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800142e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001432:	6353      	str	r3, [r2, #52]	; 0x34
 8001434:	e02d      	b.n	8001492 <HAL_RCC_OscConfig+0x4c2>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x488>
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001448:	6353      	str	r3, [r2, #52]	; 0x34
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800144c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144e:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001450:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001454:	6353      	str	r3, [r2, #52]	; 0x34
 8001456:	e01c      	b.n	8001492 <HAL_RCC_OscConfig+0x4c2>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b05      	cmp	r3, #5
 800145e:	d10c      	bne.n	800147a <HAL_RCC_OscConfig+0x4aa>
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001464:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146a:	6353      	str	r3, [r2, #52]	; 0x34
 800146c:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800146e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001470:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001476:	6353      	str	r3, [r2, #52]	; 0x34
 8001478:	e00b      	b.n	8001492 <HAL_RCC_OscConfig+0x4c2>
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800147c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147e:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001484:	6353      	str	r3, [r2, #52]	; 0x34
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148a:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800148c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001490:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d024      	beq.n	80014e4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149a:	f7ff fb13 	bl	8000ac4 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014a0:	e019      	b.n	80014d6 <HAL_RCC_OscConfig+0x506>
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	0800384c 	.word	0x0800384c
 80014ac:	20000010 	.word	0x20000010
 80014b0:	20000014 	.word	0x20000014
 80014b4:	42470020 	.word	0x42470020
 80014b8:	42470680 	.word	0x42470680
 80014bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c0:	f7ff fb00 	bl	8000ac4 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e0a3      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014d6:	4b54      	ldr	r3, [pc, #336]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 80014d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0ee      	beq.n	80014c0 <HAL_RCC_OscConfig+0x4f0>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff faee 	bl	8000ac4 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ec:	f7ff faea 	bl	8000ac4 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e08d      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001502:	4b49      	ldr	r3, [pc, #292]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 8001504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ee      	bne.n	80014ec <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800150e:	7ffb      	ldrb	r3, [r7, #31]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d105      	bne.n	8001520 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001514:	4b44      	ldr	r3, [pc, #272]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	4a43      	ldr	r2, [pc, #268]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 800151a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800151e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	2b00      	cmp	r3, #0
 8001526:	d079      	beq.n	800161c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2b0c      	cmp	r3, #12
 800152c:	d056      	beq.n	80015dc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	2b02      	cmp	r3, #2
 8001534:	d13b      	bne.n	80015ae <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <HAL_RCC_OscConfig+0x65c>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fac2 	bl	8000ac4 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff fabe 	bl	8000ac4 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e063      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001556:	4b34      	ldr	r3, [pc, #208]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001562:	4b31      	ldr	r3, [pc, #196]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	4319      	orrs	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	430b      	orrs	r3, r1
 800157a:	492b      	ldr	r1, [pc, #172]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 800157c:	4313      	orrs	r3, r2
 800157e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001580:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_RCC_OscConfig+0x65c>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fa9d 	bl	8000ac4 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158e:	f7ff fa99 	bl	8000ac4 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e03e      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015a0:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x5be>
 80015ac:	e036      	b.n	800161c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <HAL_RCC_OscConfig+0x65c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fa86 	bl	8000ac4 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015bc:	f7ff fa82 	bl	8000ac4 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e027      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x5ec>
 80015da:	e01f      	b.n	800161c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e01a      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d10d      	bne.n	8001618 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001606:	429a      	cmp	r2, r3
 8001608:	d106      	bne.n	8001618 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	42470060 	.word	0x42470060

08001630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e11a      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001644:	4b8f      	ldr	r3, [pc, #572]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d919      	bls.n	8001686 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d105      	bne.n	8001664 <HAL_RCC_ClockConfig+0x34>
 8001658:	4b8a      	ldr	r3, [pc, #552]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a89      	ldr	r2, [pc, #548]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b87      	ldr	r3, [pc, #540]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 0201 	bic.w	r2, r3, #1
 800166c:	4985      	ldr	r1, [pc, #532]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001674:	4b83      	ldr	r3, [pc, #524]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d001      	beq.n	8001686 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e0f9      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d008      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001692:	4b7d      	ldr	r3, [pc, #500]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	497a      	ldr	r1, [pc, #488]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 808e 	beq.w	80017ce <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016ba:	4b73      	ldr	r3, [pc, #460]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d121      	bne.n	800170a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0d7      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016d2:	4b6d      	ldr	r3, [pc, #436]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d115      	bne.n	800170a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0cb      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ea:	4b67      	ldr	r3, [pc, #412]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0bf      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016fa:	4b63      	ldr	r3, [pc, #396]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0b7      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170a:	4b5f      	ldr	r3, [pc, #380]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f023 0203 	bic.w	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	495c      	ldr	r1, [pc, #368]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 8001718:	4313      	orrs	r3, r2
 800171a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800171c:	f7ff f9d2 	bl	8000ac4 <HAL_GetTick>
 8001720:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d112      	bne.n	8001750 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800172a:	e00a      	b.n	8001742 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172c:	f7ff f9ca 	bl	8000ac4 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	; 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e09b      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001742:	4b51      	ldr	r3, [pc, #324]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b08      	cmp	r3, #8
 800174c:	d1ee      	bne.n	800172c <HAL_RCC_ClockConfig+0xfc>
 800174e:	e03e      	b.n	80017ce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b03      	cmp	r3, #3
 8001756:	d112      	bne.n	800177e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175a:	f7ff f9b3 	bl	8000ac4 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e084      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001770:	4b45      	ldr	r3, [pc, #276]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b0c      	cmp	r3, #12
 800177a:	d1ee      	bne.n	800175a <HAL_RCC_ClockConfig+0x12a>
 800177c:	e027      	b.n	80017ce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d11d      	bne.n	80017c2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001786:	e00a      	b.n	800179e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001788:	f7ff f99c 	bl	8000ac4 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	; 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e06d      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800179e:	4b3a      	ldr	r3, [pc, #232]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d1ee      	bne.n	8001788 <HAL_RCC_ClockConfig+0x158>
 80017aa:	e010      	b.n	80017ce <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ac:	f7ff f98a 	bl	8000ac4 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e05b      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017c2:	4b31      	ldr	r3, [pc, #196]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1ee      	bne.n	80017ac <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ce:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d219      	bcs.n	8001810 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d105      	bne.n	80017ee <HAL_RCC_ClockConfig+0x1be>
 80017e2:	4b28      	ldr	r3, [pc, #160]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a27      	ldr	r2, [pc, #156]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 0201 	bic.w	r2, r3, #1
 80017f6:	4923      	ldr	r1, [pc, #140]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b21      	ldr	r3, [pc, #132]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e034      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4917      	ldr	r1, [pc, #92]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	490f      	ldr	r1, [pc, #60]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800184e:	f000 f823 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 8001852:	4602      	mov	r2, r0
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	490b      	ldr	r1, [pc, #44]	; (800188c <HAL_RCC_ClockConfig+0x25c>)
 8001860:	5ccb      	ldrb	r3, [r1, r3]
 8001862:	fa22 f303 	lsr.w	r3, r2, r3
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <HAL_RCC_ClockConfig+0x260>)
 8001868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_RCC_ClockConfig+0x264>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f8dc 	bl	8000a2c <HAL_InitTick>
 8001874:	4603      	mov	r3, r0
 8001876:	72fb      	strb	r3, [r7, #11]

  return status;
 8001878:	7afb      	ldrb	r3, [r7, #11]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00
 8001888:	40023800 	.word	0x40023800
 800188c:	0800384c 	.word	0x0800384c
 8001890:	20000010 	.word	0x20000010
 8001894:	20000014 	.word	0x20000014

08001898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800189c:	b092      	sub	sp, #72	; 0x48
 800189e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80018a0:	4b79      	ldr	r3, [pc, #484]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b0c      	cmp	r3, #12
 80018ae:	d00d      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x34>
 80018b0:	2b0c      	cmp	r3, #12
 80018b2:	f200 80d5 	bhi.w	8001a60 <HAL_RCC_GetSysClockFreq+0x1c8>
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d002      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x28>
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0x2e>
 80018be:	e0cf      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c0:	4b72      	ldr	r3, [pc, #456]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80018c2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80018c4:	e0da      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018c6:	4b72      	ldr	r3, [pc, #456]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80018c8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80018ca:	e0d7      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ce:	0c9b      	lsrs	r3, r3, #18
 80018d0:	f003 020f 	and.w	r2, r3, #15
 80018d4:	4b6f      	ldr	r3, [pc, #444]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80018d6:	5c9b      	ldrb	r3, [r3, r2]
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018dc:	0d9b      	lsrs	r3, r3, #22
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	3301      	adds	r3, #1
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018e6:	4b68      	ldr	r3, [pc, #416]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d05d      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f4:	2200      	movs	r2, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	4611      	mov	r1, r2
 80018fa:	4604      	mov	r4, r0
 80018fc:	460d      	mov	r5, r1
 80018fe:	4622      	mov	r2, r4
 8001900:	462b      	mov	r3, r5
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	0159      	lsls	r1, r3, #5
 800190c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001910:	0150      	lsls	r0, r2, #5
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4621      	mov	r1, r4
 8001918:	1a51      	subs	r1, r2, r1
 800191a:	6139      	str	r1, [r7, #16]
 800191c:	4629      	mov	r1, r5
 800191e:	eb63 0301 	sbc.w	r3, r3, r1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001930:	4659      	mov	r1, fp
 8001932:	018b      	lsls	r3, r1, #6
 8001934:	4651      	mov	r1, sl
 8001936:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800193a:	4651      	mov	r1, sl
 800193c:	018a      	lsls	r2, r1, #6
 800193e:	46d4      	mov	ip, sl
 8001940:	ebb2 080c 	subs.w	r8, r2, ip
 8001944:	4659      	mov	r1, fp
 8001946:	eb63 0901 	sbc.w	r9, r3, r1
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800195a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800195e:	4690      	mov	r8, r2
 8001960:	4699      	mov	r9, r3
 8001962:	4623      	mov	r3, r4
 8001964:	eb18 0303 	adds.w	r3, r8, r3
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	462b      	mov	r3, r5
 800196c:	eb49 0303 	adc.w	r3, r9, r3
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800197e:	4629      	mov	r1, r5
 8001980:	024b      	lsls	r3, r1, #9
 8001982:	4620      	mov	r0, r4
 8001984:	4629      	mov	r1, r5
 8001986:	4604      	mov	r4, r0
 8001988:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800198c:	4601      	mov	r1, r0
 800198e:	024a      	lsls	r2, r1, #9
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	2200      	movs	r2, #0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
 800199a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800199c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019a0:	f7fe fbec 	bl	800017c <__aeabi_uldivmod>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4613      	mov	r3, r2
 80019aa:	647b      	str	r3, [r7, #68]	; 0x44
 80019ac:	e055      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b0:	2200      	movs	r2, #0
 80019b2:	623b      	str	r3, [r7, #32]
 80019b4:	627a      	str	r2, [r7, #36]	; 0x24
 80019b6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019ba:	4642      	mov	r2, r8
 80019bc:	464b      	mov	r3, r9
 80019be:	f04f 0000 	mov.w	r0, #0
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	0159      	lsls	r1, r3, #5
 80019c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019cc:	0150      	lsls	r0, r2, #5
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	46c4      	mov	ip, r8
 80019d4:	ebb2 0a0c 	subs.w	sl, r2, ip
 80019d8:	4640      	mov	r0, r8
 80019da:	4649      	mov	r1, r9
 80019dc:	468c      	mov	ip, r1
 80019de:	eb63 0b0c 	sbc.w	fp, r3, ip
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019ee:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019f2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019f6:	ebb2 040a 	subs.w	r4, r2, sl
 80019fa:	eb63 050b 	sbc.w	r5, r3, fp
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	00eb      	lsls	r3, r5, #3
 8001a08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a0c:	00e2      	lsls	r2, r4, #3
 8001a0e:	4614      	mov	r4, r2
 8001a10:	461d      	mov	r5, r3
 8001a12:	4603      	mov	r3, r0
 8001a14:	18e3      	adds	r3, r4, r3
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	eb45 0303 	adc.w	r3, r5, r3
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	028b      	lsls	r3, r1, #10
 8001a30:	4620      	mov	r0, r4
 8001a32:	4629      	mov	r1, r5
 8001a34:	4604      	mov	r4, r0
 8001a36:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001a3a:	4601      	mov	r1, r0
 8001a3c:	028a      	lsls	r2, r1, #10
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a44:	2200      	movs	r2, #0
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	61fa      	str	r2, [r7, #28]
 8001a4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a4e:	f7fe fb95 	bl	800017c <__aeabi_uldivmod>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4613      	mov	r3, r2
 8001a58:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a5c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001a5e:	e00d      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	0b5b      	lsrs	r3, r3, #13
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001a7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3748      	adds	r7, #72	; 0x48
 8001a82:	46bd      	mov	sp, r7
 8001a84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	00f42400 	.word	0x00f42400
 8001a90:	007a1200 	.word	0x007a1200
 8001a94:	08003840 	.word	0x08003840

08001a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a9c:	4b02      	ldr	r3, [pc, #8]	; (8001aa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	20000010 	.word	0x20000010

08001aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ab0:	f7ff fff2 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	4903      	ldr	r1, [pc, #12]	; (8001ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	0800385c 	.word	0x0800385c

08001ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ad8:	f7ff ffde 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	0adb      	lsrs	r3, r3, #11
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	4903      	ldr	r1, [pc, #12]	; (8001af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	0800385c 	.word	0x0800385c

08001afc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d12c      	bne.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b14:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b20:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e016      	b.n	8001b5a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b36:	6253      	str	r3, [r2, #36]	; 0x24
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b4c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4e:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	4a17      	ldr	r2, [pc, #92]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b58:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001b60:	d105      	bne.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001b68:	d101      	bne.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d105      	bne.n	8001b80 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f023 0201 	bic.w	r2, r3, #1
 8001b88:	490b      	ldr	r1, [pc, #44]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d001      	beq.n	8001ba2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e07b      	b.n	8001cc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d108      	bne.n	8001be8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bde:	d009      	beq.n	8001bf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
 8001be6:	e005      	b.n	8001bf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe fd80 	bl	8000714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c78:	ea42 0103 	orr.w	r1, r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	0c1b      	lsrs	r3, r3, #16
 8001c92:	f003 0104 	and.w	r1, r3, #4
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	f003 0210 	and.w	r2, r3, #16
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	69da      	ldr	r2, [r3, #28]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b088      	sub	sp, #32
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_SPI_Transmit+0x22>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e12d      	b.n	8001f4c <HAL_SPI_Transmit+0x27e>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cf8:	f7fe fee4 	bl	8000ac4 <HAL_GetTick>
 8001cfc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d002      	beq.n	8001d14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d12:	e116      	b.n	8001f42 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <HAL_SPI_Transmit+0x52>
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d24:	e10d      	b.n	8001f42 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2203      	movs	r2, #3
 8001d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	88fa      	ldrh	r2, [r7, #6]
 8001d3e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	88fa      	ldrh	r2, [r7, #6]
 8001d44:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d6c:	d10f      	bne.n	8001d8e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d98:	2b40      	cmp	r3, #64	; 0x40
 8001d9a:	d007      	beq.n	8001dac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001daa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001db4:	d14f      	bne.n	8001e56 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <HAL_SPI_Transmit+0xf6>
 8001dbe:	8afb      	ldrh	r3, [r7, #22]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d142      	bne.n	8001e4a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	881a      	ldrh	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	1c9a      	adds	r2, r3, #2
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001de8:	e02f      	b.n	8001e4a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d112      	bne.n	8001e1e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	881a      	ldrh	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	1c9a      	adds	r2, r3, #2
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e1c:	e015      	b.n	8001e4a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e1e:	f7fe fe51 	bl	8000ac4 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d803      	bhi.n	8001e36 <HAL_SPI_Transmit+0x168>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e34:	d102      	bne.n	8001e3c <HAL_SPI_Transmit+0x16e>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d106      	bne.n	8001e4a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001e48:	e07b      	b.n	8001f42 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1ca      	bne.n	8001dea <HAL_SPI_Transmit+0x11c>
 8001e54:	e050      	b.n	8001ef8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <HAL_SPI_Transmit+0x196>
 8001e5e:	8afb      	ldrh	r3, [r7, #22]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d144      	bne.n	8001eee <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	330c      	adds	r3, #12
 8001e6e:	7812      	ldrb	r2, [r2, #0]
 8001e70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e8a:	e030      	b.n	8001eee <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d113      	bne.n	8001ec2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	330c      	adds	r3, #12
 8001ea4:	7812      	ldrb	r2, [r2, #0]
 8001ea6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ec0:	e015      	b.n	8001eee <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ec2:	f7fe fdff 	bl	8000ac4 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d803      	bhi.n	8001eda <HAL_SPI_Transmit+0x20c>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ed8:	d102      	bne.n	8001ee0 <HAL_SPI_Transmit+0x212>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d106      	bne.n	8001eee <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001eec:	e029      	b.n	8001f42 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1c9      	bne.n	8001e8c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	6839      	ldr	r1, [r7, #0]
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 fa61 	bl	80023c4 <SPI_EndRxTxTransaction>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10a      	bne.n	8001f2c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	77fb      	strb	r3, [r7, #31]
 8001f38:	e003      	b.n	8001f42 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3720      	adds	r7, #32
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08c      	sub	sp, #48	; 0x30
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f62:	2301      	movs	r3, #1
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_SPI_TransmitReceive+0x26>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e198      	b.n	80022ac <HAL_SPI_TransmitReceive+0x358>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f82:	f7fe fd9f 	bl	8000ac4 <HAL_GetTick>
 8001f86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001f98:	887b      	ldrh	r3, [r7, #2]
 8001f9a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d00f      	beq.n	8001fc4 <HAL_SPI_TransmitReceive+0x70>
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001faa:	d107      	bne.n	8001fbc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d103      	bne.n	8001fbc <HAL_SPI_TransmitReceive+0x68>
 8001fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d003      	beq.n	8001fc4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001fc2:	e16d      	b.n	80022a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_SPI_TransmitReceive+0x82>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <HAL_SPI_TransmitReceive+0x82>
 8001fd0:	887b      	ldrh	r3, [r7, #2]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d103      	bne.n	8001fde <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001fdc:	e160      	b.n	80022a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d003      	beq.n	8001ff2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2205      	movs	r2, #5
 8001fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	887a      	ldrh	r2, [r7, #2]
 8002002:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	887a      	ldrh	r2, [r7, #2]
 8002014:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	887a      	ldrh	r2, [r7, #2]
 800201a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002032:	2b40      	cmp	r3, #64	; 0x40
 8002034:	d007      	beq.n	8002046 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002044:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800204e:	d17c      	bne.n	800214a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <HAL_SPI_TransmitReceive+0x10a>
 8002058:	8b7b      	ldrh	r3, [r7, #26]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d16a      	bne.n	8002134 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	881a      	ldrh	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	1c9a      	adds	r2, r3, #2
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002078:	b29b      	uxth	r3, r3
 800207a:	3b01      	subs	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002082:	e057      	b.n	8002134 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b02      	cmp	r3, #2
 8002090:	d11b      	bne.n	80020ca <HAL_SPI_TransmitReceive+0x176>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d016      	beq.n	80020ca <HAL_SPI_TransmitReceive+0x176>
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d113      	bne.n	80020ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	881a      	ldrh	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	1c9a      	adds	r2, r3, #2
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d119      	bne.n	800210c <HAL_SPI_TransmitReceive+0x1b8>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d014      	beq.n	800210c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ec:	b292      	uxth	r2, r2
 80020ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f4:	1c9a      	adds	r2, r3, #2
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	b29a      	uxth	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002108:	2301      	movs	r3, #1
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800210c:	f7fe fcda 	bl	8000ac4 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002118:	429a      	cmp	r2, r3
 800211a:	d80b      	bhi.n	8002134 <HAL_SPI_TransmitReceive+0x1e0>
 800211c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002122:	d007      	beq.n	8002134 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002132:	e0b5      	b.n	80022a0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1a2      	bne.n	8002084 <HAL_SPI_TransmitReceive+0x130>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002142:	b29b      	uxth	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d19d      	bne.n	8002084 <HAL_SPI_TransmitReceive+0x130>
 8002148:	e080      	b.n	800224c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <HAL_SPI_TransmitReceive+0x204>
 8002152:	8b7b      	ldrh	r3, [r7, #26]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d16f      	bne.n	8002238 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	330c      	adds	r3, #12
 8002162:	7812      	ldrb	r2, [r2, #0]
 8002164:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002174:	b29b      	uxth	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800217e:	e05b      	b.n	8002238 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b02      	cmp	r3, #2
 800218c:	d11c      	bne.n	80021c8 <HAL_SPI_TransmitReceive+0x274>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002192:	b29b      	uxth	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d017      	beq.n	80021c8 <HAL_SPI_TransmitReceive+0x274>
 8002198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219a:	2b01      	cmp	r3, #1
 800219c:	d114      	bne.n	80021c8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	330c      	adds	r3, #12
 80021a8:	7812      	ldrb	r2, [r2, #0]
 80021aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d119      	bne.n	800220a <HAL_SPI_TransmitReceive+0x2b6>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d014      	beq.n	800220a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002206:	2301      	movs	r3, #1
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800220a:	f7fe fc5b 	bl	8000ac4 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002216:	429a      	cmp	r2, r3
 8002218:	d803      	bhi.n	8002222 <HAL_SPI_TransmitReceive+0x2ce>
 800221a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002220:	d102      	bne.n	8002228 <HAL_SPI_TransmitReceive+0x2d4>
 8002222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002224:	2b00      	cmp	r3, #0
 8002226:	d107      	bne.n	8002238 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002236:	e033      	b.n	80022a0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d19e      	bne.n	8002180 <HAL_SPI_TransmitReceive+0x22c>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d199      	bne.n	8002180 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800224c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f8b7 	bl	80023c4 <SPI_EndRxTxTransaction>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2220      	movs	r2, #32
 8002266:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002268:	e01a      	b.n	80022a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10a      	bne.n	8002288 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002296:	e003      	b.n	80022a0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3730      	adds	r7, #48	; 0x30
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022c4:	f7fe fbfe 	bl	8000ac4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	4413      	add	r3, r2
 80022d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022d4:	f7fe fbf6 	bl	8000ac4 <HAL_GetTick>
 80022d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022da:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	015b      	lsls	r3, r3, #5
 80022e0:	0d1b      	lsrs	r3, r3, #20
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	fb02 f303 	mul.w	r3, r2, r3
 80022e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022ea:	e054      	b.n	8002396 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022f2:	d050      	beq.n	8002396 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022f4:	f7fe fbe6 	bl	8000ac4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	429a      	cmp	r2, r3
 8002302:	d902      	bls.n	800230a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d13d      	bne.n	8002386 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002318:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002322:	d111      	bne.n	8002348 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800232c:	d004      	beq.n	8002338 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002336:	d107      	bne.n	8002348 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002346:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002350:	d10f      	bne.n	8002372 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002370:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e017      	b.n	80023b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3b01      	subs	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4013      	ands	r3, r2
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	bf0c      	ite	eq
 80023a6:	2301      	moveq	r3, #1
 80023a8:	2300      	movne	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d19b      	bne.n	80022ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3720      	adds	r7, #32
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000010 	.word	0x20000010

080023c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <SPI_EndRxTxTransaction+0x7c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <SPI_EndRxTxTransaction+0x80>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	0d5b      	lsrs	r3, r3, #21
 80023dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023e0:	fb02 f303 	mul.w	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ee:	d112      	bne.n	8002416 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2200      	movs	r2, #0
 80023f8:	2180      	movs	r1, #128	; 0x80
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f7ff ff5a 	bl	80022b4 <SPI_WaitFlagStateUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d016      	beq.n	8002434 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240a:	f043 0220 	orr.w	r2, r3, #32
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e00f      	b.n	8002436 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3b01      	subs	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242c:	2b80      	cmp	r3, #128	; 0x80
 800242e:	d0f2      	beq.n	8002416 <SPI_EndRxTxTransaction+0x52>
 8002430:	e000      	b.n	8002434 <SPI_EndRxTxTransaction+0x70>
        break;
 8002432:	bf00      	nop
  }

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000010 	.word	0x20000010
 8002444:	165e9f81 	.word	0x165e9f81

08002448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e042      	b.n	80024e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe f994 	bl	800079c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2224      	movs	r2, #36	; 0x24
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800248a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f91d 	bl	80026cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b20      	cmp	r3, #32
 8002506:	d16d      	bne.n	80025e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_UART_Transmit+0x2c>
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e066      	b.n	80025e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2221      	movs	r2, #33	; 0x21
 8002522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002526:	f7fe facd 	bl	8000ac4 <HAL_GetTick>
 800252a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	88fa      	ldrh	r2, [r7, #6]
 8002530:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	88fa      	ldrh	r2, [r7, #6]
 8002536:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002540:	d108      	bne.n	8002554 <HAL_UART_Transmit+0x6c>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d104      	bne.n	8002554 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	e003      	b.n	800255c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002558:	2300      	movs	r3, #0
 800255a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800255c:	e02a      	b.n	80025b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2200      	movs	r2, #0
 8002566:	2180      	movs	r1, #128	; 0x80
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f840 	bl	80025ee <UART_WaitOnFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e036      	b.n	80025e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10b      	bne.n	8002596 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800258c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	3302      	adds	r3, #2
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	e007      	b.n	80025a6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	781a      	ldrb	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	3301      	adds	r3, #1
 80025a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1cf      	bne.n	800255e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2200      	movs	r2, #0
 80025c6:	2140      	movs	r1, #64	; 0x40
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f810 	bl	80025ee <UART_WaitOnFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e006      	b.n	80025e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	e000      	b.n	80025e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80025e4:	2302      	movs	r3, #2
  }
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b090      	sub	sp, #64	; 0x40
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	4613      	mov	r3, r2
 80025fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025fe:	e050      	b.n	80026a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002606:	d04c      	beq.n	80026a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <UART_WaitOnFlagUntilTimeout+0x30>
 800260e:	f7fe fa59 	bl	8000ac4 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800261a:	429a      	cmp	r2, r3
 800261c:	d241      	bcs.n	80026a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	330c      	adds	r3, #12
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	e853 3f00 	ldrex	r3, [r3]
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	330c      	adds	r3, #12
 800263c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800263e:	637a      	str	r2, [r7, #52]	; 0x34
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002642:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002646:	e841 2300 	strex	r3, r2, [r1]
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1e5      	bne.n	800261e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3314      	adds	r3, #20
 8002658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	e853 3f00 	ldrex	r3, [r3]
 8002660:	613b      	str	r3, [r7, #16]
   return(result);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	63bb      	str	r3, [r7, #56]	; 0x38
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	3314      	adds	r3, #20
 8002670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002672:	623a      	str	r2, [r7, #32]
 8002674:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002676:	69f9      	ldr	r1, [r7, #28]
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	e841 2300 	strex	r3, r2, [r1]
 800267e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1e5      	bne.n	8002652 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e00f      	b.n	80026c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4013      	ands	r3, r2
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d09f      	beq.n	8002600 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3740      	adds	r7, #64	; 0x40
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800270c:	f023 030c 	bic.w	r3, r3, #12
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	430b      	orrs	r3, r1
 8002718:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a55      	ldr	r2, [pc, #340]	; (800288c <UART_SetConfig+0x1c0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d103      	bne.n	8002742 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800273a:	f7ff f9cb 	bl	8001ad4 <HAL_RCC_GetPCLK2Freq>
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	e002      	b.n	8002748 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002742:	f7ff f9b3 	bl	8001aac <HAL_RCC_GetPCLK1Freq>
 8002746:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002750:	d14c      	bne.n	80027ec <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	009a      	lsls	r2, r3, #2
 800275c:	441a      	add	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	4a49      	ldr	r2, [pc, #292]	; (8002890 <UART_SetConfig+0x1c4>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	0119      	lsls	r1, r3, #4
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	009a      	lsls	r2, r3, #2
 800277c:	441a      	add	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	fbb2 f2f3 	udiv	r2, r2, r3
 8002788:	4b41      	ldr	r3, [pc, #260]	; (8002890 <UART_SetConfig+0x1c4>)
 800278a:	fba3 0302 	umull	r0, r3, r3, r2
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2064      	movs	r0, #100	; 0x64
 8002792:	fb00 f303 	mul.w	r3, r0, r3
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	3332      	adds	r3, #50	; 0x32
 800279c:	4a3c      	ldr	r2, [pc, #240]	; (8002890 <UART_SetConfig+0x1c4>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027aa:	4419      	add	r1, r3
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	009a      	lsls	r2, r3, #2
 80027b6:	441a      	add	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fbb2 f2f3 	udiv	r2, r2, r3
 80027c2:	4b33      	ldr	r3, [pc, #204]	; (8002890 <UART_SetConfig+0x1c4>)
 80027c4:	fba3 0302 	umull	r0, r3, r3, r2
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	2064      	movs	r0, #100	; 0x64
 80027cc:	fb00 f303 	mul.w	r3, r0, r3
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	3332      	adds	r3, #50	; 0x32
 80027d6:	4a2e      	ldr	r2, [pc, #184]	; (8002890 <UART_SetConfig+0x1c4>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	f003 0207 	and.w	r2, r3, #7
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	440a      	add	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027ea:	e04a      	b.n	8002882 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	009a      	lsls	r2, r3, #2
 80027f6:	441a      	add	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002802:	4a23      	ldr	r2, [pc, #140]	; (8002890 <UART_SetConfig+0x1c4>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	0119      	lsls	r1, r3, #4
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	009a      	lsls	r2, r3, #2
 8002816:	441a      	add	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002822:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <UART_SetConfig+0x1c4>)
 8002824:	fba3 0302 	umull	r0, r3, r3, r2
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	2064      	movs	r0, #100	; 0x64
 800282c:	fb00 f303 	mul.w	r3, r0, r3
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	3332      	adds	r3, #50	; 0x32
 8002836:	4a16      	ldr	r2, [pc, #88]	; (8002890 <UART_SetConfig+0x1c4>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002842:	4419      	add	r1, r3
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	009a      	lsls	r2, r3, #2
 800284e:	441a      	add	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	fbb2 f2f3 	udiv	r2, r2, r3
 800285a:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <UART_SetConfig+0x1c4>)
 800285c:	fba3 0302 	umull	r0, r3, r3, r2
 8002860:	095b      	lsrs	r3, r3, #5
 8002862:	2064      	movs	r0, #100	; 0x64
 8002864:	fb00 f303 	mul.w	r3, r0, r3
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	3332      	adds	r3, #50	; 0x32
 800286e:	4a08      	ldr	r2, [pc, #32]	; (8002890 <UART_SetConfig+0x1c4>)
 8002870:	fba2 2303 	umull	r2, r3, r2, r3
 8002874:	095b      	lsrs	r3, r3, #5
 8002876:	f003 020f 	and.w	r2, r3, #15
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	440a      	add	r2, r1
 8002880:	609a      	str	r2, [r3, #8]
}
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40013800 	.word	0x40013800
 8002890:	51eb851f 	.word	0x51eb851f

08002894 <__errno>:
 8002894:	4b01      	ldr	r3, [pc, #4]	; (800289c <__errno+0x8>)
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	2000001c 	.word	0x2000001c

080028a0 <__libc_init_array>:
 80028a0:	b570      	push	{r4, r5, r6, lr}
 80028a2:	2600      	movs	r6, #0
 80028a4:	4d0c      	ldr	r5, [pc, #48]	; (80028d8 <__libc_init_array+0x38>)
 80028a6:	4c0d      	ldr	r4, [pc, #52]	; (80028dc <__libc_init_array+0x3c>)
 80028a8:	1b64      	subs	r4, r4, r5
 80028aa:	10a4      	asrs	r4, r4, #2
 80028ac:	42a6      	cmp	r6, r4
 80028ae:	d109      	bne.n	80028c4 <__libc_init_array+0x24>
 80028b0:	f000 ffb6 	bl	8003820 <_init>
 80028b4:	2600      	movs	r6, #0
 80028b6:	4d0a      	ldr	r5, [pc, #40]	; (80028e0 <__libc_init_array+0x40>)
 80028b8:	4c0a      	ldr	r4, [pc, #40]	; (80028e4 <__libc_init_array+0x44>)
 80028ba:	1b64      	subs	r4, r4, r5
 80028bc:	10a4      	asrs	r4, r4, #2
 80028be:	42a6      	cmp	r6, r4
 80028c0:	d105      	bne.n	80028ce <__libc_init_array+0x2e>
 80028c2:	bd70      	pop	{r4, r5, r6, pc}
 80028c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c8:	4798      	blx	r3
 80028ca:	3601      	adds	r6, #1
 80028cc:	e7ee      	b.n	80028ac <__libc_init_array+0xc>
 80028ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d2:	4798      	blx	r3
 80028d4:	3601      	adds	r6, #1
 80028d6:	e7f2      	b.n	80028be <__libc_init_array+0x1e>
 80028d8:	08003904 	.word	0x08003904
 80028dc:	08003904 	.word	0x08003904
 80028e0:	08003904 	.word	0x08003904
 80028e4:	08003908 	.word	0x08003908

080028e8 <memset>:
 80028e8:	4603      	mov	r3, r0
 80028ea:	4402      	add	r2, r0
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d100      	bne.n	80028f2 <memset+0xa>
 80028f0:	4770      	bx	lr
 80028f2:	f803 1b01 	strb.w	r1, [r3], #1
 80028f6:	e7f9      	b.n	80028ec <memset+0x4>

080028f8 <iprintf>:
 80028f8:	b40f      	push	{r0, r1, r2, r3}
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <iprintf+0x2c>)
 80028fc:	b513      	push	{r0, r1, r4, lr}
 80028fe:	681c      	ldr	r4, [r3, #0]
 8002900:	b124      	cbz	r4, 800290c <iprintf+0x14>
 8002902:	69a3      	ldr	r3, [r4, #24]
 8002904:	b913      	cbnz	r3, 800290c <iprintf+0x14>
 8002906:	4620      	mov	r0, r4
 8002908:	f000 f866 	bl	80029d8 <__sinit>
 800290c:	ab05      	add	r3, sp, #20
 800290e:	4620      	mov	r0, r4
 8002910:	9a04      	ldr	r2, [sp, #16]
 8002912:	68a1      	ldr	r1, [r4, #8]
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	f000 f9bb 	bl	8002c90 <_vfiprintf_r>
 800291a:	b002      	add	sp, #8
 800291c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002920:	b004      	add	sp, #16
 8002922:	4770      	bx	lr
 8002924:	2000001c 	.word	0x2000001c

08002928 <std>:
 8002928:	2300      	movs	r3, #0
 800292a:	b510      	push	{r4, lr}
 800292c:	4604      	mov	r4, r0
 800292e:	e9c0 3300 	strd	r3, r3, [r0]
 8002932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002936:	6083      	str	r3, [r0, #8]
 8002938:	8181      	strh	r1, [r0, #12]
 800293a:	6643      	str	r3, [r0, #100]	; 0x64
 800293c:	81c2      	strh	r2, [r0, #14]
 800293e:	6183      	str	r3, [r0, #24]
 8002940:	4619      	mov	r1, r3
 8002942:	2208      	movs	r2, #8
 8002944:	305c      	adds	r0, #92	; 0x5c
 8002946:	f7ff ffcf 	bl	80028e8 <memset>
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <std+0x38>)
 800294c:	6224      	str	r4, [r4, #32]
 800294e:	6263      	str	r3, [r4, #36]	; 0x24
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <std+0x3c>)
 8002952:	62a3      	str	r3, [r4, #40]	; 0x28
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <std+0x40>)
 8002956:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <std+0x44>)
 800295a:	6323      	str	r3, [r4, #48]	; 0x30
 800295c:	bd10      	pop	{r4, pc}
 800295e:	bf00      	nop
 8002960:	0800323d 	.word	0x0800323d
 8002964:	0800325f 	.word	0x0800325f
 8002968:	08003297 	.word	0x08003297
 800296c:	080032bb 	.word	0x080032bb

08002970 <_cleanup_r>:
 8002970:	4901      	ldr	r1, [pc, #4]	; (8002978 <_cleanup_r+0x8>)
 8002972:	f000 b8af 	b.w	8002ad4 <_fwalk_reent>
 8002976:	bf00      	nop
 8002978:	0800358d 	.word	0x0800358d

0800297c <__sfmoreglue>:
 800297c:	2268      	movs	r2, #104	; 0x68
 800297e:	b570      	push	{r4, r5, r6, lr}
 8002980:	1e4d      	subs	r5, r1, #1
 8002982:	4355      	muls	r5, r2
 8002984:	460e      	mov	r6, r1
 8002986:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800298a:	f000 f8e5 	bl	8002b58 <_malloc_r>
 800298e:	4604      	mov	r4, r0
 8002990:	b140      	cbz	r0, 80029a4 <__sfmoreglue+0x28>
 8002992:	2100      	movs	r1, #0
 8002994:	e9c0 1600 	strd	r1, r6, [r0]
 8002998:	300c      	adds	r0, #12
 800299a:	60a0      	str	r0, [r4, #8]
 800299c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80029a0:	f7ff ffa2 	bl	80028e8 <memset>
 80029a4:	4620      	mov	r0, r4
 80029a6:	bd70      	pop	{r4, r5, r6, pc}

080029a8 <__sfp_lock_acquire>:
 80029a8:	4801      	ldr	r0, [pc, #4]	; (80029b0 <__sfp_lock_acquire+0x8>)
 80029aa:	f000 b8b3 	b.w	8002b14 <__retarget_lock_acquire_recursive>
 80029ae:	bf00      	nop
 80029b0:	20000155 	.word	0x20000155

080029b4 <__sfp_lock_release>:
 80029b4:	4801      	ldr	r0, [pc, #4]	; (80029bc <__sfp_lock_release+0x8>)
 80029b6:	f000 b8ae 	b.w	8002b16 <__retarget_lock_release_recursive>
 80029ba:	bf00      	nop
 80029bc:	20000155 	.word	0x20000155

080029c0 <__sinit_lock_acquire>:
 80029c0:	4801      	ldr	r0, [pc, #4]	; (80029c8 <__sinit_lock_acquire+0x8>)
 80029c2:	f000 b8a7 	b.w	8002b14 <__retarget_lock_acquire_recursive>
 80029c6:	bf00      	nop
 80029c8:	20000156 	.word	0x20000156

080029cc <__sinit_lock_release>:
 80029cc:	4801      	ldr	r0, [pc, #4]	; (80029d4 <__sinit_lock_release+0x8>)
 80029ce:	f000 b8a2 	b.w	8002b16 <__retarget_lock_release_recursive>
 80029d2:	bf00      	nop
 80029d4:	20000156 	.word	0x20000156

080029d8 <__sinit>:
 80029d8:	b510      	push	{r4, lr}
 80029da:	4604      	mov	r4, r0
 80029dc:	f7ff fff0 	bl	80029c0 <__sinit_lock_acquire>
 80029e0:	69a3      	ldr	r3, [r4, #24]
 80029e2:	b11b      	cbz	r3, 80029ec <__sinit+0x14>
 80029e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029e8:	f7ff bff0 	b.w	80029cc <__sinit_lock_release>
 80029ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80029f0:	6523      	str	r3, [r4, #80]	; 0x50
 80029f2:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <__sinit+0x68>)
 80029f4:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <__sinit+0x6c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80029fa:	42a3      	cmp	r3, r4
 80029fc:	bf08      	it	eq
 80029fe:	2301      	moveq	r3, #1
 8002a00:	4620      	mov	r0, r4
 8002a02:	bf08      	it	eq
 8002a04:	61a3      	streq	r3, [r4, #24]
 8002a06:	f000 f81f 	bl	8002a48 <__sfp>
 8002a0a:	6060      	str	r0, [r4, #4]
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f000 f81b 	bl	8002a48 <__sfp>
 8002a12:	60a0      	str	r0, [r4, #8]
 8002a14:	4620      	mov	r0, r4
 8002a16:	f000 f817 	bl	8002a48 <__sfp>
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	60e0      	str	r0, [r4, #12]
 8002a20:	6860      	ldr	r0, [r4, #4]
 8002a22:	f7ff ff81 	bl	8002928 <std>
 8002a26:	2201      	movs	r2, #1
 8002a28:	2109      	movs	r1, #9
 8002a2a:	68a0      	ldr	r0, [r4, #8]
 8002a2c:	f7ff ff7c 	bl	8002928 <std>
 8002a30:	2202      	movs	r2, #2
 8002a32:	2112      	movs	r1, #18
 8002a34:	68e0      	ldr	r0, [r4, #12]
 8002a36:	f7ff ff77 	bl	8002928 <std>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61a3      	str	r3, [r4, #24]
 8002a3e:	e7d1      	b.n	80029e4 <__sinit+0xc>
 8002a40:	08003864 	.word	0x08003864
 8002a44:	08002971 	.word	0x08002971

08002a48 <__sfp>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	4607      	mov	r7, r0
 8002a4c:	f7ff ffac 	bl	80029a8 <__sfp_lock_acquire>
 8002a50:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <__sfp+0x84>)
 8002a52:	681e      	ldr	r6, [r3, #0]
 8002a54:	69b3      	ldr	r3, [r6, #24]
 8002a56:	b913      	cbnz	r3, 8002a5e <__sfp+0x16>
 8002a58:	4630      	mov	r0, r6
 8002a5a:	f7ff ffbd 	bl	80029d8 <__sinit>
 8002a5e:	3648      	adds	r6, #72	; 0x48
 8002a60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	d503      	bpl.n	8002a70 <__sfp+0x28>
 8002a68:	6833      	ldr	r3, [r6, #0]
 8002a6a:	b30b      	cbz	r3, 8002ab0 <__sfp+0x68>
 8002a6c:	6836      	ldr	r6, [r6, #0]
 8002a6e:	e7f7      	b.n	8002a60 <__sfp+0x18>
 8002a70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a74:	b9d5      	cbnz	r5, 8002aac <__sfp+0x64>
 8002a76:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <__sfp+0x88>)
 8002a78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a7c:	60e3      	str	r3, [r4, #12]
 8002a7e:	6665      	str	r5, [r4, #100]	; 0x64
 8002a80:	f000 f847 	bl	8002b12 <__retarget_lock_init_recursive>
 8002a84:	f7ff ff96 	bl	80029b4 <__sfp_lock_release>
 8002a88:	2208      	movs	r2, #8
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002a90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002a94:	6025      	str	r5, [r4, #0]
 8002a96:	61a5      	str	r5, [r4, #24]
 8002a98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002a9c:	f7ff ff24 	bl	80028e8 <memset>
 8002aa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002aa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aac:	3468      	adds	r4, #104	; 0x68
 8002aae:	e7d9      	b.n	8002a64 <__sfp+0x1c>
 8002ab0:	2104      	movs	r1, #4
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	f7ff ff62 	bl	800297c <__sfmoreglue>
 8002ab8:	4604      	mov	r4, r0
 8002aba:	6030      	str	r0, [r6, #0]
 8002abc:	2800      	cmp	r0, #0
 8002abe:	d1d5      	bne.n	8002a6c <__sfp+0x24>
 8002ac0:	f7ff ff78 	bl	80029b4 <__sfp_lock_release>
 8002ac4:	230c      	movs	r3, #12
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	e7ee      	b.n	8002aa8 <__sfp+0x60>
 8002aca:	bf00      	nop
 8002acc:	08003864 	.word	0x08003864
 8002ad0:	ffff0001 	.word	0xffff0001

08002ad4 <_fwalk_reent>:
 8002ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ad8:	4606      	mov	r6, r0
 8002ada:	4688      	mov	r8, r1
 8002adc:	2700      	movs	r7, #0
 8002ade:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002ae2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ae6:	f1b9 0901 	subs.w	r9, r9, #1
 8002aea:	d505      	bpl.n	8002af8 <_fwalk_reent+0x24>
 8002aec:	6824      	ldr	r4, [r4, #0]
 8002aee:	2c00      	cmp	r4, #0
 8002af0:	d1f7      	bne.n	8002ae2 <_fwalk_reent+0xe>
 8002af2:	4638      	mov	r0, r7
 8002af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002af8:	89ab      	ldrh	r3, [r5, #12]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d907      	bls.n	8002b0e <_fwalk_reent+0x3a>
 8002afe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b02:	3301      	adds	r3, #1
 8002b04:	d003      	beq.n	8002b0e <_fwalk_reent+0x3a>
 8002b06:	4629      	mov	r1, r5
 8002b08:	4630      	mov	r0, r6
 8002b0a:	47c0      	blx	r8
 8002b0c:	4307      	orrs	r7, r0
 8002b0e:	3568      	adds	r5, #104	; 0x68
 8002b10:	e7e9      	b.n	8002ae6 <_fwalk_reent+0x12>

08002b12 <__retarget_lock_init_recursive>:
 8002b12:	4770      	bx	lr

08002b14 <__retarget_lock_acquire_recursive>:
 8002b14:	4770      	bx	lr

08002b16 <__retarget_lock_release_recursive>:
 8002b16:	4770      	bx	lr

08002b18 <sbrk_aligned>:
 8002b18:	b570      	push	{r4, r5, r6, lr}
 8002b1a:	4e0e      	ldr	r6, [pc, #56]	; (8002b54 <sbrk_aligned+0x3c>)
 8002b1c:	460c      	mov	r4, r1
 8002b1e:	6831      	ldr	r1, [r6, #0]
 8002b20:	4605      	mov	r5, r0
 8002b22:	b911      	cbnz	r1, 8002b2a <sbrk_aligned+0x12>
 8002b24:	f000 fb7a 	bl	800321c <_sbrk_r>
 8002b28:	6030      	str	r0, [r6, #0]
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	f000 fb75 	bl	800321c <_sbrk_r>
 8002b32:	1c43      	adds	r3, r0, #1
 8002b34:	d00a      	beq.n	8002b4c <sbrk_aligned+0x34>
 8002b36:	1cc4      	adds	r4, r0, #3
 8002b38:	f024 0403 	bic.w	r4, r4, #3
 8002b3c:	42a0      	cmp	r0, r4
 8002b3e:	d007      	beq.n	8002b50 <sbrk_aligned+0x38>
 8002b40:	1a21      	subs	r1, r4, r0
 8002b42:	4628      	mov	r0, r5
 8002b44:	f000 fb6a 	bl	800321c <_sbrk_r>
 8002b48:	3001      	adds	r0, #1
 8002b4a:	d101      	bne.n	8002b50 <sbrk_aligned+0x38>
 8002b4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002b50:	4620      	mov	r0, r4
 8002b52:	bd70      	pop	{r4, r5, r6, pc}
 8002b54:	2000015c 	.word	0x2000015c

08002b58 <_malloc_r>:
 8002b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b5c:	1ccd      	adds	r5, r1, #3
 8002b5e:	f025 0503 	bic.w	r5, r5, #3
 8002b62:	3508      	adds	r5, #8
 8002b64:	2d0c      	cmp	r5, #12
 8002b66:	bf38      	it	cc
 8002b68:	250c      	movcc	r5, #12
 8002b6a:	2d00      	cmp	r5, #0
 8002b6c:	4607      	mov	r7, r0
 8002b6e:	db01      	blt.n	8002b74 <_malloc_r+0x1c>
 8002b70:	42a9      	cmp	r1, r5
 8002b72:	d905      	bls.n	8002b80 <_malloc_r+0x28>
 8002b74:	230c      	movs	r3, #12
 8002b76:	2600      	movs	r6, #0
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	4630      	mov	r0, r6
 8002b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b80:	4e2e      	ldr	r6, [pc, #184]	; (8002c3c <_malloc_r+0xe4>)
 8002b82:	f000 fdc5 	bl	8003710 <__malloc_lock>
 8002b86:	6833      	ldr	r3, [r6, #0]
 8002b88:	461c      	mov	r4, r3
 8002b8a:	bb34      	cbnz	r4, 8002bda <_malloc_r+0x82>
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	4638      	mov	r0, r7
 8002b90:	f7ff ffc2 	bl	8002b18 <sbrk_aligned>
 8002b94:	1c43      	adds	r3, r0, #1
 8002b96:	4604      	mov	r4, r0
 8002b98:	d14d      	bne.n	8002c36 <_malloc_r+0xde>
 8002b9a:	6834      	ldr	r4, [r6, #0]
 8002b9c:	4626      	mov	r6, r4
 8002b9e:	2e00      	cmp	r6, #0
 8002ba0:	d140      	bne.n	8002c24 <_malloc_r+0xcc>
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	4631      	mov	r1, r6
 8002ba6:	4638      	mov	r0, r7
 8002ba8:	eb04 0803 	add.w	r8, r4, r3
 8002bac:	f000 fb36 	bl	800321c <_sbrk_r>
 8002bb0:	4580      	cmp	r8, r0
 8002bb2:	d13a      	bne.n	8002c2a <_malloc_r+0xd2>
 8002bb4:	6821      	ldr	r1, [r4, #0]
 8002bb6:	3503      	adds	r5, #3
 8002bb8:	1a6d      	subs	r5, r5, r1
 8002bba:	f025 0503 	bic.w	r5, r5, #3
 8002bbe:	3508      	adds	r5, #8
 8002bc0:	2d0c      	cmp	r5, #12
 8002bc2:	bf38      	it	cc
 8002bc4:	250c      	movcc	r5, #12
 8002bc6:	4638      	mov	r0, r7
 8002bc8:	4629      	mov	r1, r5
 8002bca:	f7ff ffa5 	bl	8002b18 <sbrk_aligned>
 8002bce:	3001      	adds	r0, #1
 8002bd0:	d02b      	beq.n	8002c2a <_malloc_r+0xd2>
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	442b      	add	r3, r5
 8002bd6:	6023      	str	r3, [r4, #0]
 8002bd8:	e00e      	b.n	8002bf8 <_malloc_r+0xa0>
 8002bda:	6822      	ldr	r2, [r4, #0]
 8002bdc:	1b52      	subs	r2, r2, r5
 8002bde:	d41e      	bmi.n	8002c1e <_malloc_r+0xc6>
 8002be0:	2a0b      	cmp	r2, #11
 8002be2:	d916      	bls.n	8002c12 <_malloc_r+0xba>
 8002be4:	1961      	adds	r1, r4, r5
 8002be6:	42a3      	cmp	r3, r4
 8002be8:	6025      	str	r5, [r4, #0]
 8002bea:	bf18      	it	ne
 8002bec:	6059      	strne	r1, [r3, #4]
 8002bee:	6863      	ldr	r3, [r4, #4]
 8002bf0:	bf08      	it	eq
 8002bf2:	6031      	streq	r1, [r6, #0]
 8002bf4:	5162      	str	r2, [r4, r5]
 8002bf6:	604b      	str	r3, [r1, #4]
 8002bf8:	4638      	mov	r0, r7
 8002bfa:	f104 060b 	add.w	r6, r4, #11
 8002bfe:	f000 fd8d 	bl	800371c <__malloc_unlock>
 8002c02:	f026 0607 	bic.w	r6, r6, #7
 8002c06:	1d23      	adds	r3, r4, #4
 8002c08:	1af2      	subs	r2, r6, r3
 8002c0a:	d0b6      	beq.n	8002b7a <_malloc_r+0x22>
 8002c0c:	1b9b      	subs	r3, r3, r6
 8002c0e:	50a3      	str	r3, [r4, r2]
 8002c10:	e7b3      	b.n	8002b7a <_malloc_r+0x22>
 8002c12:	6862      	ldr	r2, [r4, #4]
 8002c14:	42a3      	cmp	r3, r4
 8002c16:	bf0c      	ite	eq
 8002c18:	6032      	streq	r2, [r6, #0]
 8002c1a:	605a      	strne	r2, [r3, #4]
 8002c1c:	e7ec      	b.n	8002bf8 <_malloc_r+0xa0>
 8002c1e:	4623      	mov	r3, r4
 8002c20:	6864      	ldr	r4, [r4, #4]
 8002c22:	e7b2      	b.n	8002b8a <_malloc_r+0x32>
 8002c24:	4634      	mov	r4, r6
 8002c26:	6876      	ldr	r6, [r6, #4]
 8002c28:	e7b9      	b.n	8002b9e <_malloc_r+0x46>
 8002c2a:	230c      	movs	r3, #12
 8002c2c:	4638      	mov	r0, r7
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	f000 fd74 	bl	800371c <__malloc_unlock>
 8002c34:	e7a1      	b.n	8002b7a <_malloc_r+0x22>
 8002c36:	6025      	str	r5, [r4, #0]
 8002c38:	e7de      	b.n	8002bf8 <_malloc_r+0xa0>
 8002c3a:	bf00      	nop
 8002c3c:	20000158 	.word	0x20000158

08002c40 <__sfputc_r>:
 8002c40:	6893      	ldr	r3, [r2, #8]
 8002c42:	b410      	push	{r4}
 8002c44:	3b01      	subs	r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	6093      	str	r3, [r2, #8]
 8002c4a:	da07      	bge.n	8002c5c <__sfputc_r+0x1c>
 8002c4c:	6994      	ldr	r4, [r2, #24]
 8002c4e:	42a3      	cmp	r3, r4
 8002c50:	db01      	blt.n	8002c56 <__sfputc_r+0x16>
 8002c52:	290a      	cmp	r1, #10
 8002c54:	d102      	bne.n	8002c5c <__sfputc_r+0x1c>
 8002c56:	bc10      	pop	{r4}
 8002c58:	f000 bb34 	b.w	80032c4 <__swbuf_r>
 8002c5c:	6813      	ldr	r3, [r2, #0]
 8002c5e:	1c58      	adds	r0, r3, #1
 8002c60:	6010      	str	r0, [r2, #0]
 8002c62:	7019      	strb	r1, [r3, #0]
 8002c64:	4608      	mov	r0, r1
 8002c66:	bc10      	pop	{r4}
 8002c68:	4770      	bx	lr

08002c6a <__sfputs_r>:
 8002c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6c:	4606      	mov	r6, r0
 8002c6e:	460f      	mov	r7, r1
 8002c70:	4614      	mov	r4, r2
 8002c72:	18d5      	adds	r5, r2, r3
 8002c74:	42ac      	cmp	r4, r5
 8002c76:	d101      	bne.n	8002c7c <__sfputs_r+0x12>
 8002c78:	2000      	movs	r0, #0
 8002c7a:	e007      	b.n	8002c8c <__sfputs_r+0x22>
 8002c7c:	463a      	mov	r2, r7
 8002c7e:	4630      	mov	r0, r6
 8002c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c84:	f7ff ffdc 	bl	8002c40 <__sfputc_r>
 8002c88:	1c43      	adds	r3, r0, #1
 8002c8a:	d1f3      	bne.n	8002c74 <__sfputs_r+0xa>
 8002c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c90 <_vfiprintf_r>:
 8002c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c94:	460d      	mov	r5, r1
 8002c96:	4614      	mov	r4, r2
 8002c98:	4698      	mov	r8, r3
 8002c9a:	4606      	mov	r6, r0
 8002c9c:	b09d      	sub	sp, #116	; 0x74
 8002c9e:	b118      	cbz	r0, 8002ca8 <_vfiprintf_r+0x18>
 8002ca0:	6983      	ldr	r3, [r0, #24]
 8002ca2:	b90b      	cbnz	r3, 8002ca8 <_vfiprintf_r+0x18>
 8002ca4:	f7ff fe98 	bl	80029d8 <__sinit>
 8002ca8:	4b89      	ldr	r3, [pc, #548]	; (8002ed0 <_vfiprintf_r+0x240>)
 8002caa:	429d      	cmp	r5, r3
 8002cac:	d11b      	bne.n	8002ce6 <_vfiprintf_r+0x56>
 8002cae:	6875      	ldr	r5, [r6, #4]
 8002cb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002cb2:	07d9      	lsls	r1, r3, #31
 8002cb4:	d405      	bmi.n	8002cc2 <_vfiprintf_r+0x32>
 8002cb6:	89ab      	ldrh	r3, [r5, #12]
 8002cb8:	059a      	lsls	r2, r3, #22
 8002cba:	d402      	bmi.n	8002cc2 <_vfiprintf_r+0x32>
 8002cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cbe:	f7ff ff29 	bl	8002b14 <__retarget_lock_acquire_recursive>
 8002cc2:	89ab      	ldrh	r3, [r5, #12]
 8002cc4:	071b      	lsls	r3, r3, #28
 8002cc6:	d501      	bpl.n	8002ccc <_vfiprintf_r+0x3c>
 8002cc8:	692b      	ldr	r3, [r5, #16]
 8002cca:	b9eb      	cbnz	r3, 8002d08 <_vfiprintf_r+0x78>
 8002ccc:	4629      	mov	r1, r5
 8002cce:	4630      	mov	r0, r6
 8002cd0:	f000 fb5c 	bl	800338c <__swsetup_r>
 8002cd4:	b1c0      	cbz	r0, 8002d08 <_vfiprintf_r+0x78>
 8002cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002cd8:	07dc      	lsls	r4, r3, #31
 8002cda:	d50e      	bpl.n	8002cfa <_vfiprintf_r+0x6a>
 8002cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ce0:	b01d      	add	sp, #116	; 0x74
 8002ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ce6:	4b7b      	ldr	r3, [pc, #492]	; (8002ed4 <_vfiprintf_r+0x244>)
 8002ce8:	429d      	cmp	r5, r3
 8002cea:	d101      	bne.n	8002cf0 <_vfiprintf_r+0x60>
 8002cec:	68b5      	ldr	r5, [r6, #8]
 8002cee:	e7df      	b.n	8002cb0 <_vfiprintf_r+0x20>
 8002cf0:	4b79      	ldr	r3, [pc, #484]	; (8002ed8 <_vfiprintf_r+0x248>)
 8002cf2:	429d      	cmp	r5, r3
 8002cf4:	bf08      	it	eq
 8002cf6:	68f5      	ldreq	r5, [r6, #12]
 8002cf8:	e7da      	b.n	8002cb0 <_vfiprintf_r+0x20>
 8002cfa:	89ab      	ldrh	r3, [r5, #12]
 8002cfc:	0598      	lsls	r0, r3, #22
 8002cfe:	d4ed      	bmi.n	8002cdc <_vfiprintf_r+0x4c>
 8002d00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d02:	f7ff ff08 	bl	8002b16 <__retarget_lock_release_recursive>
 8002d06:	e7e9      	b.n	8002cdc <_vfiprintf_r+0x4c>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d12:	2330      	movs	r3, #48	; 0x30
 8002d14:	f04f 0901 	mov.w	r9, #1
 8002d18:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d1c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002edc <_vfiprintf_r+0x24c>
 8002d20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d24:	4623      	mov	r3, r4
 8002d26:	469a      	mov	sl, r3
 8002d28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d2c:	b10a      	cbz	r2, 8002d32 <_vfiprintf_r+0xa2>
 8002d2e:	2a25      	cmp	r2, #37	; 0x25
 8002d30:	d1f9      	bne.n	8002d26 <_vfiprintf_r+0x96>
 8002d32:	ebba 0b04 	subs.w	fp, sl, r4
 8002d36:	d00b      	beq.n	8002d50 <_vfiprintf_r+0xc0>
 8002d38:	465b      	mov	r3, fp
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	4630      	mov	r0, r6
 8002d40:	f7ff ff93 	bl	8002c6a <__sfputs_r>
 8002d44:	3001      	adds	r0, #1
 8002d46:	f000 80aa 	beq.w	8002e9e <_vfiprintf_r+0x20e>
 8002d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d4c:	445a      	add	r2, fp
 8002d4e:	9209      	str	r2, [sp, #36]	; 0x24
 8002d50:	f89a 3000 	ldrb.w	r3, [sl]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80a2 	beq.w	8002e9e <_vfiprintf_r+0x20e>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d64:	f10a 0a01 	add.w	sl, sl, #1
 8002d68:	9304      	str	r3, [sp, #16]
 8002d6a:	9307      	str	r3, [sp, #28]
 8002d6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d70:	931a      	str	r3, [sp, #104]	; 0x68
 8002d72:	4654      	mov	r4, sl
 8002d74:	2205      	movs	r2, #5
 8002d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d7a:	4858      	ldr	r0, [pc, #352]	; (8002edc <_vfiprintf_r+0x24c>)
 8002d7c:	f000 fcba 	bl	80036f4 <memchr>
 8002d80:	9a04      	ldr	r2, [sp, #16]
 8002d82:	b9d8      	cbnz	r0, 8002dbc <_vfiprintf_r+0x12c>
 8002d84:	06d1      	lsls	r1, r2, #27
 8002d86:	bf44      	itt	mi
 8002d88:	2320      	movmi	r3, #32
 8002d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d8e:	0713      	lsls	r3, r2, #28
 8002d90:	bf44      	itt	mi
 8002d92:	232b      	movmi	r3, #43	; 0x2b
 8002d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d98:	f89a 3000 	ldrb.w	r3, [sl]
 8002d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d9e:	d015      	beq.n	8002dcc <_vfiprintf_r+0x13c>
 8002da0:	4654      	mov	r4, sl
 8002da2:	2000      	movs	r0, #0
 8002da4:	f04f 0c0a 	mov.w	ip, #10
 8002da8:	9a07      	ldr	r2, [sp, #28]
 8002daa:	4621      	mov	r1, r4
 8002dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002db0:	3b30      	subs	r3, #48	; 0x30
 8002db2:	2b09      	cmp	r3, #9
 8002db4:	d94e      	bls.n	8002e54 <_vfiprintf_r+0x1c4>
 8002db6:	b1b0      	cbz	r0, 8002de6 <_vfiprintf_r+0x156>
 8002db8:	9207      	str	r2, [sp, #28]
 8002dba:	e014      	b.n	8002de6 <_vfiprintf_r+0x156>
 8002dbc:	eba0 0308 	sub.w	r3, r0, r8
 8002dc0:	fa09 f303 	lsl.w	r3, r9, r3
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	46a2      	mov	sl, r4
 8002dc8:	9304      	str	r3, [sp, #16]
 8002dca:	e7d2      	b.n	8002d72 <_vfiprintf_r+0xe2>
 8002dcc:	9b03      	ldr	r3, [sp, #12]
 8002dce:	1d19      	adds	r1, r3, #4
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	9103      	str	r1, [sp, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bfbb      	ittet	lt
 8002dd8:	425b      	neglt	r3, r3
 8002dda:	f042 0202 	orrlt.w	r2, r2, #2
 8002dde:	9307      	strge	r3, [sp, #28]
 8002de0:	9307      	strlt	r3, [sp, #28]
 8002de2:	bfb8      	it	lt
 8002de4:	9204      	strlt	r2, [sp, #16]
 8002de6:	7823      	ldrb	r3, [r4, #0]
 8002de8:	2b2e      	cmp	r3, #46	; 0x2e
 8002dea:	d10c      	bne.n	8002e06 <_vfiprintf_r+0x176>
 8002dec:	7863      	ldrb	r3, [r4, #1]
 8002dee:	2b2a      	cmp	r3, #42	; 0x2a
 8002df0:	d135      	bne.n	8002e5e <_vfiprintf_r+0x1ce>
 8002df2:	9b03      	ldr	r3, [sp, #12]
 8002df4:	3402      	adds	r4, #2
 8002df6:	1d1a      	adds	r2, r3, #4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	9203      	str	r2, [sp, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bfb8      	it	lt
 8002e00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002e04:	9305      	str	r3, [sp, #20]
 8002e06:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002ee0 <_vfiprintf_r+0x250>
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	4650      	mov	r0, sl
 8002e0e:	7821      	ldrb	r1, [r4, #0]
 8002e10:	f000 fc70 	bl	80036f4 <memchr>
 8002e14:	b140      	cbz	r0, 8002e28 <_vfiprintf_r+0x198>
 8002e16:	2340      	movs	r3, #64	; 0x40
 8002e18:	eba0 000a 	sub.w	r0, r0, sl
 8002e1c:	fa03 f000 	lsl.w	r0, r3, r0
 8002e20:	9b04      	ldr	r3, [sp, #16]
 8002e22:	3401      	adds	r4, #1
 8002e24:	4303      	orrs	r3, r0
 8002e26:	9304      	str	r3, [sp, #16]
 8002e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e2c:	2206      	movs	r2, #6
 8002e2e:	482d      	ldr	r0, [pc, #180]	; (8002ee4 <_vfiprintf_r+0x254>)
 8002e30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e34:	f000 fc5e 	bl	80036f4 <memchr>
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	d03f      	beq.n	8002ebc <_vfiprintf_r+0x22c>
 8002e3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <_vfiprintf_r+0x258>)
 8002e3e:	bb1b      	cbnz	r3, 8002e88 <_vfiprintf_r+0x1f8>
 8002e40:	9b03      	ldr	r3, [sp, #12]
 8002e42:	3307      	adds	r3, #7
 8002e44:	f023 0307 	bic.w	r3, r3, #7
 8002e48:	3308      	adds	r3, #8
 8002e4a:	9303      	str	r3, [sp, #12]
 8002e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e4e:	443b      	add	r3, r7
 8002e50:	9309      	str	r3, [sp, #36]	; 0x24
 8002e52:	e767      	b.n	8002d24 <_vfiprintf_r+0x94>
 8002e54:	460c      	mov	r4, r1
 8002e56:	2001      	movs	r0, #1
 8002e58:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e5c:	e7a5      	b.n	8002daa <_vfiprintf_r+0x11a>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f04f 0c0a 	mov.w	ip, #10
 8002e64:	4619      	mov	r1, r3
 8002e66:	3401      	adds	r4, #1
 8002e68:	9305      	str	r3, [sp, #20]
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e70:	3a30      	subs	r2, #48	; 0x30
 8002e72:	2a09      	cmp	r2, #9
 8002e74:	d903      	bls.n	8002e7e <_vfiprintf_r+0x1ee>
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0c5      	beq.n	8002e06 <_vfiprintf_r+0x176>
 8002e7a:	9105      	str	r1, [sp, #20]
 8002e7c:	e7c3      	b.n	8002e06 <_vfiprintf_r+0x176>
 8002e7e:	4604      	mov	r4, r0
 8002e80:	2301      	movs	r3, #1
 8002e82:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e86:	e7f0      	b.n	8002e6a <_vfiprintf_r+0x1da>
 8002e88:	ab03      	add	r3, sp, #12
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	462a      	mov	r2, r5
 8002e8e:	4630      	mov	r0, r6
 8002e90:	4b16      	ldr	r3, [pc, #88]	; (8002eec <_vfiprintf_r+0x25c>)
 8002e92:	a904      	add	r1, sp, #16
 8002e94:	f3af 8000 	nop.w
 8002e98:	4607      	mov	r7, r0
 8002e9a:	1c78      	adds	r0, r7, #1
 8002e9c:	d1d6      	bne.n	8002e4c <_vfiprintf_r+0x1bc>
 8002e9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ea0:	07d9      	lsls	r1, r3, #31
 8002ea2:	d405      	bmi.n	8002eb0 <_vfiprintf_r+0x220>
 8002ea4:	89ab      	ldrh	r3, [r5, #12]
 8002ea6:	059a      	lsls	r2, r3, #22
 8002ea8:	d402      	bmi.n	8002eb0 <_vfiprintf_r+0x220>
 8002eaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002eac:	f7ff fe33 	bl	8002b16 <__retarget_lock_release_recursive>
 8002eb0:	89ab      	ldrh	r3, [r5, #12]
 8002eb2:	065b      	lsls	r3, r3, #25
 8002eb4:	f53f af12 	bmi.w	8002cdc <_vfiprintf_r+0x4c>
 8002eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002eba:	e711      	b.n	8002ce0 <_vfiprintf_r+0x50>
 8002ebc:	ab03      	add	r3, sp, #12
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	462a      	mov	r2, r5
 8002ec2:	4630      	mov	r0, r6
 8002ec4:	4b09      	ldr	r3, [pc, #36]	; (8002eec <_vfiprintf_r+0x25c>)
 8002ec6:	a904      	add	r1, sp, #16
 8002ec8:	f000 f882 	bl	8002fd0 <_printf_i>
 8002ecc:	e7e4      	b.n	8002e98 <_vfiprintf_r+0x208>
 8002ece:	bf00      	nop
 8002ed0:	08003888 	.word	0x08003888
 8002ed4:	080038a8 	.word	0x080038a8
 8002ed8:	08003868 	.word	0x08003868
 8002edc:	080038c8 	.word	0x080038c8
 8002ee0:	080038ce 	.word	0x080038ce
 8002ee4:	080038d2 	.word	0x080038d2
 8002ee8:	00000000 	.word	0x00000000
 8002eec:	08002c6b 	.word	0x08002c6b

08002ef0 <_printf_common>:
 8002ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef4:	4616      	mov	r6, r2
 8002ef6:	4699      	mov	r9, r3
 8002ef8:	688a      	ldr	r2, [r1, #8]
 8002efa:	690b      	ldr	r3, [r1, #16]
 8002efc:	4607      	mov	r7, r0
 8002efe:	4293      	cmp	r3, r2
 8002f00:	bfb8      	it	lt
 8002f02:	4613      	movlt	r3, r2
 8002f04:	6033      	str	r3, [r6, #0]
 8002f06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f0a:	460c      	mov	r4, r1
 8002f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f10:	b10a      	cbz	r2, 8002f16 <_printf_common+0x26>
 8002f12:	3301      	adds	r3, #1
 8002f14:	6033      	str	r3, [r6, #0]
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	0699      	lsls	r1, r3, #26
 8002f1a:	bf42      	ittt	mi
 8002f1c:	6833      	ldrmi	r3, [r6, #0]
 8002f1e:	3302      	addmi	r3, #2
 8002f20:	6033      	strmi	r3, [r6, #0]
 8002f22:	6825      	ldr	r5, [r4, #0]
 8002f24:	f015 0506 	ands.w	r5, r5, #6
 8002f28:	d106      	bne.n	8002f38 <_printf_common+0x48>
 8002f2a:	f104 0a19 	add.w	sl, r4, #25
 8002f2e:	68e3      	ldr	r3, [r4, #12]
 8002f30:	6832      	ldr	r2, [r6, #0]
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	42ab      	cmp	r3, r5
 8002f36:	dc28      	bgt.n	8002f8a <_printf_common+0x9a>
 8002f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f3c:	1e13      	subs	r3, r2, #0
 8002f3e:	6822      	ldr	r2, [r4, #0]
 8002f40:	bf18      	it	ne
 8002f42:	2301      	movne	r3, #1
 8002f44:	0692      	lsls	r2, r2, #26
 8002f46:	d42d      	bmi.n	8002fa4 <_printf_common+0xb4>
 8002f48:	4649      	mov	r1, r9
 8002f4a:	4638      	mov	r0, r7
 8002f4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f50:	47c0      	blx	r8
 8002f52:	3001      	adds	r0, #1
 8002f54:	d020      	beq.n	8002f98 <_printf_common+0xa8>
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	68e5      	ldr	r5, [r4, #12]
 8002f5a:	f003 0306 	and.w	r3, r3, #6
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	bf18      	it	ne
 8002f62:	2500      	movne	r5, #0
 8002f64:	6832      	ldr	r2, [r6, #0]
 8002f66:	f04f 0600 	mov.w	r6, #0
 8002f6a:	68a3      	ldr	r3, [r4, #8]
 8002f6c:	bf08      	it	eq
 8002f6e:	1aad      	subeq	r5, r5, r2
 8002f70:	6922      	ldr	r2, [r4, #16]
 8002f72:	bf08      	it	eq
 8002f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	bfc4      	itt	gt
 8002f7c:	1a9b      	subgt	r3, r3, r2
 8002f7e:	18ed      	addgt	r5, r5, r3
 8002f80:	341a      	adds	r4, #26
 8002f82:	42b5      	cmp	r5, r6
 8002f84:	d11a      	bne.n	8002fbc <_printf_common+0xcc>
 8002f86:	2000      	movs	r0, #0
 8002f88:	e008      	b.n	8002f9c <_printf_common+0xac>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	4652      	mov	r2, sl
 8002f8e:	4649      	mov	r1, r9
 8002f90:	4638      	mov	r0, r7
 8002f92:	47c0      	blx	r8
 8002f94:	3001      	adds	r0, #1
 8002f96:	d103      	bne.n	8002fa0 <_printf_common+0xb0>
 8002f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fa0:	3501      	adds	r5, #1
 8002fa2:	e7c4      	b.n	8002f2e <_printf_common+0x3e>
 8002fa4:	2030      	movs	r0, #48	; 0x30
 8002fa6:	18e1      	adds	r1, r4, r3
 8002fa8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fb2:	4422      	add	r2, r4
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fba:	e7c5      	b.n	8002f48 <_printf_common+0x58>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	4622      	mov	r2, r4
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	4638      	mov	r0, r7
 8002fc4:	47c0      	blx	r8
 8002fc6:	3001      	adds	r0, #1
 8002fc8:	d0e6      	beq.n	8002f98 <_printf_common+0xa8>
 8002fca:	3601      	adds	r6, #1
 8002fcc:	e7d9      	b.n	8002f82 <_printf_common+0x92>
	...

08002fd0 <_printf_i>:
 8002fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd4:	7e0f      	ldrb	r7, [r1, #24]
 8002fd6:	4691      	mov	r9, r2
 8002fd8:	2f78      	cmp	r7, #120	; 0x78
 8002fda:	4680      	mov	r8, r0
 8002fdc:	460c      	mov	r4, r1
 8002fde:	469a      	mov	sl, r3
 8002fe0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002fe2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002fe6:	d807      	bhi.n	8002ff8 <_printf_i+0x28>
 8002fe8:	2f62      	cmp	r7, #98	; 0x62
 8002fea:	d80a      	bhi.n	8003002 <_printf_i+0x32>
 8002fec:	2f00      	cmp	r7, #0
 8002fee:	f000 80d9 	beq.w	80031a4 <_printf_i+0x1d4>
 8002ff2:	2f58      	cmp	r7, #88	; 0x58
 8002ff4:	f000 80a4 	beq.w	8003140 <_printf_i+0x170>
 8002ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ffc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003000:	e03a      	b.n	8003078 <_printf_i+0xa8>
 8003002:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003006:	2b15      	cmp	r3, #21
 8003008:	d8f6      	bhi.n	8002ff8 <_printf_i+0x28>
 800300a:	a101      	add	r1, pc, #4	; (adr r1, 8003010 <_printf_i+0x40>)
 800300c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003010:	08003069 	.word	0x08003069
 8003014:	0800307d 	.word	0x0800307d
 8003018:	08002ff9 	.word	0x08002ff9
 800301c:	08002ff9 	.word	0x08002ff9
 8003020:	08002ff9 	.word	0x08002ff9
 8003024:	08002ff9 	.word	0x08002ff9
 8003028:	0800307d 	.word	0x0800307d
 800302c:	08002ff9 	.word	0x08002ff9
 8003030:	08002ff9 	.word	0x08002ff9
 8003034:	08002ff9 	.word	0x08002ff9
 8003038:	08002ff9 	.word	0x08002ff9
 800303c:	0800318b 	.word	0x0800318b
 8003040:	080030ad 	.word	0x080030ad
 8003044:	0800316d 	.word	0x0800316d
 8003048:	08002ff9 	.word	0x08002ff9
 800304c:	08002ff9 	.word	0x08002ff9
 8003050:	080031ad 	.word	0x080031ad
 8003054:	08002ff9 	.word	0x08002ff9
 8003058:	080030ad 	.word	0x080030ad
 800305c:	08002ff9 	.word	0x08002ff9
 8003060:	08002ff9 	.word	0x08002ff9
 8003064:	08003175 	.word	0x08003175
 8003068:	682b      	ldr	r3, [r5, #0]
 800306a:	1d1a      	adds	r2, r3, #4
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	602a      	str	r2, [r5, #0]
 8003070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003078:	2301      	movs	r3, #1
 800307a:	e0a4      	b.n	80031c6 <_printf_i+0x1f6>
 800307c:	6820      	ldr	r0, [r4, #0]
 800307e:	6829      	ldr	r1, [r5, #0]
 8003080:	0606      	lsls	r6, r0, #24
 8003082:	f101 0304 	add.w	r3, r1, #4
 8003086:	d50a      	bpl.n	800309e <_printf_i+0xce>
 8003088:	680e      	ldr	r6, [r1, #0]
 800308a:	602b      	str	r3, [r5, #0]
 800308c:	2e00      	cmp	r6, #0
 800308e:	da03      	bge.n	8003098 <_printf_i+0xc8>
 8003090:	232d      	movs	r3, #45	; 0x2d
 8003092:	4276      	negs	r6, r6
 8003094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003098:	230a      	movs	r3, #10
 800309a:	485e      	ldr	r0, [pc, #376]	; (8003214 <_printf_i+0x244>)
 800309c:	e019      	b.n	80030d2 <_printf_i+0x102>
 800309e:	680e      	ldr	r6, [r1, #0]
 80030a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030a4:	602b      	str	r3, [r5, #0]
 80030a6:	bf18      	it	ne
 80030a8:	b236      	sxthne	r6, r6
 80030aa:	e7ef      	b.n	800308c <_printf_i+0xbc>
 80030ac:	682b      	ldr	r3, [r5, #0]
 80030ae:	6820      	ldr	r0, [r4, #0]
 80030b0:	1d19      	adds	r1, r3, #4
 80030b2:	6029      	str	r1, [r5, #0]
 80030b4:	0601      	lsls	r1, r0, #24
 80030b6:	d501      	bpl.n	80030bc <_printf_i+0xec>
 80030b8:	681e      	ldr	r6, [r3, #0]
 80030ba:	e002      	b.n	80030c2 <_printf_i+0xf2>
 80030bc:	0646      	lsls	r6, r0, #25
 80030be:	d5fb      	bpl.n	80030b8 <_printf_i+0xe8>
 80030c0:	881e      	ldrh	r6, [r3, #0]
 80030c2:	2f6f      	cmp	r7, #111	; 0x6f
 80030c4:	bf0c      	ite	eq
 80030c6:	2308      	moveq	r3, #8
 80030c8:	230a      	movne	r3, #10
 80030ca:	4852      	ldr	r0, [pc, #328]	; (8003214 <_printf_i+0x244>)
 80030cc:	2100      	movs	r1, #0
 80030ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030d2:	6865      	ldr	r5, [r4, #4]
 80030d4:	2d00      	cmp	r5, #0
 80030d6:	bfa8      	it	ge
 80030d8:	6821      	ldrge	r1, [r4, #0]
 80030da:	60a5      	str	r5, [r4, #8]
 80030dc:	bfa4      	itt	ge
 80030de:	f021 0104 	bicge.w	r1, r1, #4
 80030e2:	6021      	strge	r1, [r4, #0]
 80030e4:	b90e      	cbnz	r6, 80030ea <_printf_i+0x11a>
 80030e6:	2d00      	cmp	r5, #0
 80030e8:	d04d      	beq.n	8003186 <_printf_i+0x1b6>
 80030ea:	4615      	mov	r5, r2
 80030ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80030f0:	fb03 6711 	mls	r7, r3, r1, r6
 80030f4:	5dc7      	ldrb	r7, [r0, r7]
 80030f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80030fa:	4637      	mov	r7, r6
 80030fc:	42bb      	cmp	r3, r7
 80030fe:	460e      	mov	r6, r1
 8003100:	d9f4      	bls.n	80030ec <_printf_i+0x11c>
 8003102:	2b08      	cmp	r3, #8
 8003104:	d10b      	bne.n	800311e <_printf_i+0x14e>
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	07de      	lsls	r6, r3, #31
 800310a:	d508      	bpl.n	800311e <_printf_i+0x14e>
 800310c:	6923      	ldr	r3, [r4, #16]
 800310e:	6861      	ldr	r1, [r4, #4]
 8003110:	4299      	cmp	r1, r3
 8003112:	bfde      	ittt	le
 8003114:	2330      	movle	r3, #48	; 0x30
 8003116:	f805 3c01 	strble.w	r3, [r5, #-1]
 800311a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800311e:	1b52      	subs	r2, r2, r5
 8003120:	6122      	str	r2, [r4, #16]
 8003122:	464b      	mov	r3, r9
 8003124:	4621      	mov	r1, r4
 8003126:	4640      	mov	r0, r8
 8003128:	f8cd a000 	str.w	sl, [sp]
 800312c:	aa03      	add	r2, sp, #12
 800312e:	f7ff fedf 	bl	8002ef0 <_printf_common>
 8003132:	3001      	adds	r0, #1
 8003134:	d14c      	bne.n	80031d0 <_printf_i+0x200>
 8003136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800313a:	b004      	add	sp, #16
 800313c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003140:	4834      	ldr	r0, [pc, #208]	; (8003214 <_printf_i+0x244>)
 8003142:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003146:	6829      	ldr	r1, [r5, #0]
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	f851 6b04 	ldr.w	r6, [r1], #4
 800314e:	6029      	str	r1, [r5, #0]
 8003150:	061d      	lsls	r5, r3, #24
 8003152:	d514      	bpl.n	800317e <_printf_i+0x1ae>
 8003154:	07df      	lsls	r7, r3, #31
 8003156:	bf44      	itt	mi
 8003158:	f043 0320 	orrmi.w	r3, r3, #32
 800315c:	6023      	strmi	r3, [r4, #0]
 800315e:	b91e      	cbnz	r6, 8003168 <_printf_i+0x198>
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	f023 0320 	bic.w	r3, r3, #32
 8003166:	6023      	str	r3, [r4, #0]
 8003168:	2310      	movs	r3, #16
 800316a:	e7af      	b.n	80030cc <_printf_i+0xfc>
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	f043 0320 	orr.w	r3, r3, #32
 8003172:	6023      	str	r3, [r4, #0]
 8003174:	2378      	movs	r3, #120	; 0x78
 8003176:	4828      	ldr	r0, [pc, #160]	; (8003218 <_printf_i+0x248>)
 8003178:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800317c:	e7e3      	b.n	8003146 <_printf_i+0x176>
 800317e:	0659      	lsls	r1, r3, #25
 8003180:	bf48      	it	mi
 8003182:	b2b6      	uxthmi	r6, r6
 8003184:	e7e6      	b.n	8003154 <_printf_i+0x184>
 8003186:	4615      	mov	r5, r2
 8003188:	e7bb      	b.n	8003102 <_printf_i+0x132>
 800318a:	682b      	ldr	r3, [r5, #0]
 800318c:	6826      	ldr	r6, [r4, #0]
 800318e:	1d18      	adds	r0, r3, #4
 8003190:	6961      	ldr	r1, [r4, #20]
 8003192:	6028      	str	r0, [r5, #0]
 8003194:	0635      	lsls	r5, r6, #24
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	d501      	bpl.n	800319e <_printf_i+0x1ce>
 800319a:	6019      	str	r1, [r3, #0]
 800319c:	e002      	b.n	80031a4 <_printf_i+0x1d4>
 800319e:	0670      	lsls	r0, r6, #25
 80031a0:	d5fb      	bpl.n	800319a <_printf_i+0x1ca>
 80031a2:	8019      	strh	r1, [r3, #0]
 80031a4:	2300      	movs	r3, #0
 80031a6:	4615      	mov	r5, r2
 80031a8:	6123      	str	r3, [r4, #16]
 80031aa:	e7ba      	b.n	8003122 <_printf_i+0x152>
 80031ac:	682b      	ldr	r3, [r5, #0]
 80031ae:	2100      	movs	r1, #0
 80031b0:	1d1a      	adds	r2, r3, #4
 80031b2:	602a      	str	r2, [r5, #0]
 80031b4:	681d      	ldr	r5, [r3, #0]
 80031b6:	6862      	ldr	r2, [r4, #4]
 80031b8:	4628      	mov	r0, r5
 80031ba:	f000 fa9b 	bl	80036f4 <memchr>
 80031be:	b108      	cbz	r0, 80031c4 <_printf_i+0x1f4>
 80031c0:	1b40      	subs	r0, r0, r5
 80031c2:	6060      	str	r0, [r4, #4]
 80031c4:	6863      	ldr	r3, [r4, #4]
 80031c6:	6123      	str	r3, [r4, #16]
 80031c8:	2300      	movs	r3, #0
 80031ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031ce:	e7a8      	b.n	8003122 <_printf_i+0x152>
 80031d0:	462a      	mov	r2, r5
 80031d2:	4649      	mov	r1, r9
 80031d4:	4640      	mov	r0, r8
 80031d6:	6923      	ldr	r3, [r4, #16]
 80031d8:	47d0      	blx	sl
 80031da:	3001      	adds	r0, #1
 80031dc:	d0ab      	beq.n	8003136 <_printf_i+0x166>
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	079b      	lsls	r3, r3, #30
 80031e2:	d413      	bmi.n	800320c <_printf_i+0x23c>
 80031e4:	68e0      	ldr	r0, [r4, #12]
 80031e6:	9b03      	ldr	r3, [sp, #12]
 80031e8:	4298      	cmp	r0, r3
 80031ea:	bfb8      	it	lt
 80031ec:	4618      	movlt	r0, r3
 80031ee:	e7a4      	b.n	800313a <_printf_i+0x16a>
 80031f0:	2301      	movs	r3, #1
 80031f2:	4632      	mov	r2, r6
 80031f4:	4649      	mov	r1, r9
 80031f6:	4640      	mov	r0, r8
 80031f8:	47d0      	blx	sl
 80031fa:	3001      	adds	r0, #1
 80031fc:	d09b      	beq.n	8003136 <_printf_i+0x166>
 80031fe:	3501      	adds	r5, #1
 8003200:	68e3      	ldr	r3, [r4, #12]
 8003202:	9903      	ldr	r1, [sp, #12]
 8003204:	1a5b      	subs	r3, r3, r1
 8003206:	42ab      	cmp	r3, r5
 8003208:	dcf2      	bgt.n	80031f0 <_printf_i+0x220>
 800320a:	e7eb      	b.n	80031e4 <_printf_i+0x214>
 800320c:	2500      	movs	r5, #0
 800320e:	f104 0619 	add.w	r6, r4, #25
 8003212:	e7f5      	b.n	8003200 <_printf_i+0x230>
 8003214:	080038d9 	.word	0x080038d9
 8003218:	080038ea 	.word	0x080038ea

0800321c <_sbrk_r>:
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	2300      	movs	r3, #0
 8003220:	4d05      	ldr	r5, [pc, #20]	; (8003238 <_sbrk_r+0x1c>)
 8003222:	4604      	mov	r4, r0
 8003224:	4608      	mov	r0, r1
 8003226:	602b      	str	r3, [r5, #0]
 8003228:	f7fd fb86 	bl	8000938 <_sbrk>
 800322c:	1c43      	adds	r3, r0, #1
 800322e:	d102      	bne.n	8003236 <_sbrk_r+0x1a>
 8003230:	682b      	ldr	r3, [r5, #0]
 8003232:	b103      	cbz	r3, 8003236 <_sbrk_r+0x1a>
 8003234:	6023      	str	r3, [r4, #0]
 8003236:	bd38      	pop	{r3, r4, r5, pc}
 8003238:	20000160 	.word	0x20000160

0800323c <__sread>:
 800323c:	b510      	push	{r4, lr}
 800323e:	460c      	mov	r4, r1
 8003240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003244:	f000 fab8 	bl	80037b8 <_read_r>
 8003248:	2800      	cmp	r0, #0
 800324a:	bfab      	itete	ge
 800324c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800324e:	89a3      	ldrhlt	r3, [r4, #12]
 8003250:	181b      	addge	r3, r3, r0
 8003252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003256:	bfac      	ite	ge
 8003258:	6563      	strge	r3, [r4, #84]	; 0x54
 800325a:	81a3      	strhlt	r3, [r4, #12]
 800325c:	bd10      	pop	{r4, pc}

0800325e <__swrite>:
 800325e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003262:	461f      	mov	r7, r3
 8003264:	898b      	ldrh	r3, [r1, #12]
 8003266:	4605      	mov	r5, r0
 8003268:	05db      	lsls	r3, r3, #23
 800326a:	460c      	mov	r4, r1
 800326c:	4616      	mov	r6, r2
 800326e:	d505      	bpl.n	800327c <__swrite+0x1e>
 8003270:	2302      	movs	r3, #2
 8003272:	2200      	movs	r2, #0
 8003274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003278:	f000 f9c4 	bl	8003604 <_lseek_r>
 800327c:	89a3      	ldrh	r3, [r4, #12]
 800327e:	4632      	mov	r2, r6
 8003280:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003284:	81a3      	strh	r3, [r4, #12]
 8003286:	4628      	mov	r0, r5
 8003288:	463b      	mov	r3, r7
 800328a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800328e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003292:	f000 b869 	b.w	8003368 <_write_r>

08003296 <__sseek>:
 8003296:	b510      	push	{r4, lr}
 8003298:	460c      	mov	r4, r1
 800329a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800329e:	f000 f9b1 	bl	8003604 <_lseek_r>
 80032a2:	1c43      	adds	r3, r0, #1
 80032a4:	89a3      	ldrh	r3, [r4, #12]
 80032a6:	bf15      	itete	ne
 80032a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80032aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032b2:	81a3      	strheq	r3, [r4, #12]
 80032b4:	bf18      	it	ne
 80032b6:	81a3      	strhne	r3, [r4, #12]
 80032b8:	bd10      	pop	{r4, pc}

080032ba <__sclose>:
 80032ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032be:	f000 b8d3 	b.w	8003468 <_close_r>
	...

080032c4 <__swbuf_r>:
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	460e      	mov	r6, r1
 80032c8:	4614      	mov	r4, r2
 80032ca:	4605      	mov	r5, r0
 80032cc:	b118      	cbz	r0, 80032d6 <__swbuf_r+0x12>
 80032ce:	6983      	ldr	r3, [r0, #24]
 80032d0:	b90b      	cbnz	r3, 80032d6 <__swbuf_r+0x12>
 80032d2:	f7ff fb81 	bl	80029d8 <__sinit>
 80032d6:	4b21      	ldr	r3, [pc, #132]	; (800335c <__swbuf_r+0x98>)
 80032d8:	429c      	cmp	r4, r3
 80032da:	d12b      	bne.n	8003334 <__swbuf_r+0x70>
 80032dc:	686c      	ldr	r4, [r5, #4]
 80032de:	69a3      	ldr	r3, [r4, #24]
 80032e0:	60a3      	str	r3, [r4, #8]
 80032e2:	89a3      	ldrh	r3, [r4, #12]
 80032e4:	071a      	lsls	r2, r3, #28
 80032e6:	d52f      	bpl.n	8003348 <__swbuf_r+0x84>
 80032e8:	6923      	ldr	r3, [r4, #16]
 80032ea:	b36b      	cbz	r3, 8003348 <__swbuf_r+0x84>
 80032ec:	6923      	ldr	r3, [r4, #16]
 80032ee:	6820      	ldr	r0, [r4, #0]
 80032f0:	b2f6      	uxtb	r6, r6
 80032f2:	1ac0      	subs	r0, r0, r3
 80032f4:	6963      	ldr	r3, [r4, #20]
 80032f6:	4637      	mov	r7, r6
 80032f8:	4283      	cmp	r3, r0
 80032fa:	dc04      	bgt.n	8003306 <__swbuf_r+0x42>
 80032fc:	4621      	mov	r1, r4
 80032fe:	4628      	mov	r0, r5
 8003300:	f000 f944 	bl	800358c <_fflush_r>
 8003304:	bb30      	cbnz	r0, 8003354 <__swbuf_r+0x90>
 8003306:	68a3      	ldr	r3, [r4, #8]
 8003308:	3001      	adds	r0, #1
 800330a:	3b01      	subs	r3, #1
 800330c:	60a3      	str	r3, [r4, #8]
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	6022      	str	r2, [r4, #0]
 8003314:	701e      	strb	r6, [r3, #0]
 8003316:	6963      	ldr	r3, [r4, #20]
 8003318:	4283      	cmp	r3, r0
 800331a:	d004      	beq.n	8003326 <__swbuf_r+0x62>
 800331c:	89a3      	ldrh	r3, [r4, #12]
 800331e:	07db      	lsls	r3, r3, #31
 8003320:	d506      	bpl.n	8003330 <__swbuf_r+0x6c>
 8003322:	2e0a      	cmp	r6, #10
 8003324:	d104      	bne.n	8003330 <__swbuf_r+0x6c>
 8003326:	4621      	mov	r1, r4
 8003328:	4628      	mov	r0, r5
 800332a:	f000 f92f 	bl	800358c <_fflush_r>
 800332e:	b988      	cbnz	r0, 8003354 <__swbuf_r+0x90>
 8003330:	4638      	mov	r0, r7
 8003332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003334:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <__swbuf_r+0x9c>)
 8003336:	429c      	cmp	r4, r3
 8003338:	d101      	bne.n	800333e <__swbuf_r+0x7a>
 800333a:	68ac      	ldr	r4, [r5, #8]
 800333c:	e7cf      	b.n	80032de <__swbuf_r+0x1a>
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <__swbuf_r+0xa0>)
 8003340:	429c      	cmp	r4, r3
 8003342:	bf08      	it	eq
 8003344:	68ec      	ldreq	r4, [r5, #12]
 8003346:	e7ca      	b.n	80032de <__swbuf_r+0x1a>
 8003348:	4621      	mov	r1, r4
 800334a:	4628      	mov	r0, r5
 800334c:	f000 f81e 	bl	800338c <__swsetup_r>
 8003350:	2800      	cmp	r0, #0
 8003352:	d0cb      	beq.n	80032ec <__swbuf_r+0x28>
 8003354:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003358:	e7ea      	b.n	8003330 <__swbuf_r+0x6c>
 800335a:	bf00      	nop
 800335c:	08003888 	.word	0x08003888
 8003360:	080038a8 	.word	0x080038a8
 8003364:	08003868 	.word	0x08003868

08003368 <_write_r>:
 8003368:	b538      	push	{r3, r4, r5, lr}
 800336a:	4604      	mov	r4, r0
 800336c:	4608      	mov	r0, r1
 800336e:	4611      	mov	r1, r2
 8003370:	2200      	movs	r2, #0
 8003372:	4d05      	ldr	r5, [pc, #20]	; (8003388 <_write_r+0x20>)
 8003374:	602a      	str	r2, [r5, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	f7fd fa98 	bl	80008ac <_write>
 800337c:	1c43      	adds	r3, r0, #1
 800337e:	d102      	bne.n	8003386 <_write_r+0x1e>
 8003380:	682b      	ldr	r3, [r5, #0]
 8003382:	b103      	cbz	r3, 8003386 <_write_r+0x1e>
 8003384:	6023      	str	r3, [r4, #0]
 8003386:	bd38      	pop	{r3, r4, r5, pc}
 8003388:	20000160 	.word	0x20000160

0800338c <__swsetup_r>:
 800338c:	4b32      	ldr	r3, [pc, #200]	; (8003458 <__swsetup_r+0xcc>)
 800338e:	b570      	push	{r4, r5, r6, lr}
 8003390:	681d      	ldr	r5, [r3, #0]
 8003392:	4606      	mov	r6, r0
 8003394:	460c      	mov	r4, r1
 8003396:	b125      	cbz	r5, 80033a2 <__swsetup_r+0x16>
 8003398:	69ab      	ldr	r3, [r5, #24]
 800339a:	b913      	cbnz	r3, 80033a2 <__swsetup_r+0x16>
 800339c:	4628      	mov	r0, r5
 800339e:	f7ff fb1b 	bl	80029d8 <__sinit>
 80033a2:	4b2e      	ldr	r3, [pc, #184]	; (800345c <__swsetup_r+0xd0>)
 80033a4:	429c      	cmp	r4, r3
 80033a6:	d10f      	bne.n	80033c8 <__swsetup_r+0x3c>
 80033a8:	686c      	ldr	r4, [r5, #4]
 80033aa:	89a3      	ldrh	r3, [r4, #12]
 80033ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033b0:	0719      	lsls	r1, r3, #28
 80033b2:	d42c      	bmi.n	800340e <__swsetup_r+0x82>
 80033b4:	06dd      	lsls	r5, r3, #27
 80033b6:	d411      	bmi.n	80033dc <__swsetup_r+0x50>
 80033b8:	2309      	movs	r3, #9
 80033ba:	6033      	str	r3, [r6, #0]
 80033bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033c4:	81a3      	strh	r3, [r4, #12]
 80033c6:	e03e      	b.n	8003446 <__swsetup_r+0xba>
 80033c8:	4b25      	ldr	r3, [pc, #148]	; (8003460 <__swsetup_r+0xd4>)
 80033ca:	429c      	cmp	r4, r3
 80033cc:	d101      	bne.n	80033d2 <__swsetup_r+0x46>
 80033ce:	68ac      	ldr	r4, [r5, #8]
 80033d0:	e7eb      	b.n	80033aa <__swsetup_r+0x1e>
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <__swsetup_r+0xd8>)
 80033d4:	429c      	cmp	r4, r3
 80033d6:	bf08      	it	eq
 80033d8:	68ec      	ldreq	r4, [r5, #12]
 80033da:	e7e6      	b.n	80033aa <__swsetup_r+0x1e>
 80033dc:	0758      	lsls	r0, r3, #29
 80033de:	d512      	bpl.n	8003406 <__swsetup_r+0x7a>
 80033e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033e2:	b141      	cbz	r1, 80033f6 <__swsetup_r+0x6a>
 80033e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033e8:	4299      	cmp	r1, r3
 80033ea:	d002      	beq.n	80033f2 <__swsetup_r+0x66>
 80033ec:	4630      	mov	r0, r6
 80033ee:	f000 f99b 	bl	8003728 <_free_r>
 80033f2:	2300      	movs	r3, #0
 80033f4:	6363      	str	r3, [r4, #52]	; 0x34
 80033f6:	89a3      	ldrh	r3, [r4, #12]
 80033f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80033fc:	81a3      	strh	r3, [r4, #12]
 80033fe:	2300      	movs	r3, #0
 8003400:	6063      	str	r3, [r4, #4]
 8003402:	6923      	ldr	r3, [r4, #16]
 8003404:	6023      	str	r3, [r4, #0]
 8003406:	89a3      	ldrh	r3, [r4, #12]
 8003408:	f043 0308 	orr.w	r3, r3, #8
 800340c:	81a3      	strh	r3, [r4, #12]
 800340e:	6923      	ldr	r3, [r4, #16]
 8003410:	b94b      	cbnz	r3, 8003426 <__swsetup_r+0x9a>
 8003412:	89a3      	ldrh	r3, [r4, #12]
 8003414:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800341c:	d003      	beq.n	8003426 <__swsetup_r+0x9a>
 800341e:	4621      	mov	r1, r4
 8003420:	4630      	mov	r0, r6
 8003422:	f000 f927 	bl	8003674 <__smakebuf_r>
 8003426:	89a0      	ldrh	r0, [r4, #12]
 8003428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800342c:	f010 0301 	ands.w	r3, r0, #1
 8003430:	d00a      	beq.n	8003448 <__swsetup_r+0xbc>
 8003432:	2300      	movs	r3, #0
 8003434:	60a3      	str	r3, [r4, #8]
 8003436:	6963      	ldr	r3, [r4, #20]
 8003438:	425b      	negs	r3, r3
 800343a:	61a3      	str	r3, [r4, #24]
 800343c:	6923      	ldr	r3, [r4, #16]
 800343e:	b943      	cbnz	r3, 8003452 <__swsetup_r+0xc6>
 8003440:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003444:	d1ba      	bne.n	80033bc <__swsetup_r+0x30>
 8003446:	bd70      	pop	{r4, r5, r6, pc}
 8003448:	0781      	lsls	r1, r0, #30
 800344a:	bf58      	it	pl
 800344c:	6963      	ldrpl	r3, [r4, #20]
 800344e:	60a3      	str	r3, [r4, #8]
 8003450:	e7f4      	b.n	800343c <__swsetup_r+0xb0>
 8003452:	2000      	movs	r0, #0
 8003454:	e7f7      	b.n	8003446 <__swsetup_r+0xba>
 8003456:	bf00      	nop
 8003458:	2000001c 	.word	0x2000001c
 800345c:	08003888 	.word	0x08003888
 8003460:	080038a8 	.word	0x080038a8
 8003464:	08003868 	.word	0x08003868

08003468 <_close_r>:
 8003468:	b538      	push	{r3, r4, r5, lr}
 800346a:	2300      	movs	r3, #0
 800346c:	4d05      	ldr	r5, [pc, #20]	; (8003484 <_close_r+0x1c>)
 800346e:	4604      	mov	r4, r0
 8003470:	4608      	mov	r0, r1
 8003472:	602b      	str	r3, [r5, #0]
 8003474:	f7fd fa30 	bl	80008d8 <_close>
 8003478:	1c43      	adds	r3, r0, #1
 800347a:	d102      	bne.n	8003482 <_close_r+0x1a>
 800347c:	682b      	ldr	r3, [r5, #0]
 800347e:	b103      	cbz	r3, 8003482 <_close_r+0x1a>
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	bd38      	pop	{r3, r4, r5, pc}
 8003484:	20000160 	.word	0x20000160

08003488 <__sflush_r>:
 8003488:	898a      	ldrh	r2, [r1, #12]
 800348a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348c:	4605      	mov	r5, r0
 800348e:	0710      	lsls	r0, r2, #28
 8003490:	460c      	mov	r4, r1
 8003492:	d457      	bmi.n	8003544 <__sflush_r+0xbc>
 8003494:	684b      	ldr	r3, [r1, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	dc04      	bgt.n	80034a4 <__sflush_r+0x1c>
 800349a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	dc01      	bgt.n	80034a4 <__sflush_r+0x1c>
 80034a0:	2000      	movs	r0, #0
 80034a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034a6:	2e00      	cmp	r6, #0
 80034a8:	d0fa      	beq.n	80034a0 <__sflush_r+0x18>
 80034aa:	2300      	movs	r3, #0
 80034ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034b0:	682f      	ldr	r7, [r5, #0]
 80034b2:	602b      	str	r3, [r5, #0]
 80034b4:	d032      	beq.n	800351c <__sflush_r+0x94>
 80034b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034b8:	89a3      	ldrh	r3, [r4, #12]
 80034ba:	075a      	lsls	r2, r3, #29
 80034bc:	d505      	bpl.n	80034ca <__sflush_r+0x42>
 80034be:	6863      	ldr	r3, [r4, #4]
 80034c0:	1ac0      	subs	r0, r0, r3
 80034c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034c4:	b10b      	cbz	r3, 80034ca <__sflush_r+0x42>
 80034c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034c8:	1ac0      	subs	r0, r0, r3
 80034ca:	2300      	movs	r3, #0
 80034cc:	4602      	mov	r2, r0
 80034ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034d0:	4628      	mov	r0, r5
 80034d2:	6a21      	ldr	r1, [r4, #32]
 80034d4:	47b0      	blx	r6
 80034d6:	1c43      	adds	r3, r0, #1
 80034d8:	89a3      	ldrh	r3, [r4, #12]
 80034da:	d106      	bne.n	80034ea <__sflush_r+0x62>
 80034dc:	6829      	ldr	r1, [r5, #0]
 80034de:	291d      	cmp	r1, #29
 80034e0:	d82c      	bhi.n	800353c <__sflush_r+0xb4>
 80034e2:	4a29      	ldr	r2, [pc, #164]	; (8003588 <__sflush_r+0x100>)
 80034e4:	40ca      	lsrs	r2, r1
 80034e6:	07d6      	lsls	r6, r2, #31
 80034e8:	d528      	bpl.n	800353c <__sflush_r+0xb4>
 80034ea:	2200      	movs	r2, #0
 80034ec:	6062      	str	r2, [r4, #4]
 80034ee:	6922      	ldr	r2, [r4, #16]
 80034f0:	04d9      	lsls	r1, r3, #19
 80034f2:	6022      	str	r2, [r4, #0]
 80034f4:	d504      	bpl.n	8003500 <__sflush_r+0x78>
 80034f6:	1c42      	adds	r2, r0, #1
 80034f8:	d101      	bne.n	80034fe <__sflush_r+0x76>
 80034fa:	682b      	ldr	r3, [r5, #0]
 80034fc:	b903      	cbnz	r3, 8003500 <__sflush_r+0x78>
 80034fe:	6560      	str	r0, [r4, #84]	; 0x54
 8003500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003502:	602f      	str	r7, [r5, #0]
 8003504:	2900      	cmp	r1, #0
 8003506:	d0cb      	beq.n	80034a0 <__sflush_r+0x18>
 8003508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800350c:	4299      	cmp	r1, r3
 800350e:	d002      	beq.n	8003516 <__sflush_r+0x8e>
 8003510:	4628      	mov	r0, r5
 8003512:	f000 f909 	bl	8003728 <_free_r>
 8003516:	2000      	movs	r0, #0
 8003518:	6360      	str	r0, [r4, #52]	; 0x34
 800351a:	e7c2      	b.n	80034a2 <__sflush_r+0x1a>
 800351c:	6a21      	ldr	r1, [r4, #32]
 800351e:	2301      	movs	r3, #1
 8003520:	4628      	mov	r0, r5
 8003522:	47b0      	blx	r6
 8003524:	1c41      	adds	r1, r0, #1
 8003526:	d1c7      	bne.n	80034b8 <__sflush_r+0x30>
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0c4      	beq.n	80034b8 <__sflush_r+0x30>
 800352e:	2b1d      	cmp	r3, #29
 8003530:	d001      	beq.n	8003536 <__sflush_r+0xae>
 8003532:	2b16      	cmp	r3, #22
 8003534:	d101      	bne.n	800353a <__sflush_r+0xb2>
 8003536:	602f      	str	r7, [r5, #0]
 8003538:	e7b2      	b.n	80034a0 <__sflush_r+0x18>
 800353a:	89a3      	ldrh	r3, [r4, #12]
 800353c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003540:	81a3      	strh	r3, [r4, #12]
 8003542:	e7ae      	b.n	80034a2 <__sflush_r+0x1a>
 8003544:	690f      	ldr	r7, [r1, #16]
 8003546:	2f00      	cmp	r7, #0
 8003548:	d0aa      	beq.n	80034a0 <__sflush_r+0x18>
 800354a:	0793      	lsls	r3, r2, #30
 800354c:	bf18      	it	ne
 800354e:	2300      	movne	r3, #0
 8003550:	680e      	ldr	r6, [r1, #0]
 8003552:	bf08      	it	eq
 8003554:	694b      	ldreq	r3, [r1, #20]
 8003556:	1bf6      	subs	r6, r6, r7
 8003558:	600f      	str	r7, [r1, #0]
 800355a:	608b      	str	r3, [r1, #8]
 800355c:	2e00      	cmp	r6, #0
 800355e:	dd9f      	ble.n	80034a0 <__sflush_r+0x18>
 8003560:	4633      	mov	r3, r6
 8003562:	463a      	mov	r2, r7
 8003564:	4628      	mov	r0, r5
 8003566:	6a21      	ldr	r1, [r4, #32]
 8003568:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800356c:	47e0      	blx	ip
 800356e:	2800      	cmp	r0, #0
 8003570:	dc06      	bgt.n	8003580 <__sflush_r+0xf8>
 8003572:	89a3      	ldrh	r3, [r4, #12]
 8003574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800357c:	81a3      	strh	r3, [r4, #12]
 800357e:	e790      	b.n	80034a2 <__sflush_r+0x1a>
 8003580:	4407      	add	r7, r0
 8003582:	1a36      	subs	r6, r6, r0
 8003584:	e7ea      	b.n	800355c <__sflush_r+0xd4>
 8003586:	bf00      	nop
 8003588:	20400001 	.word	0x20400001

0800358c <_fflush_r>:
 800358c:	b538      	push	{r3, r4, r5, lr}
 800358e:	690b      	ldr	r3, [r1, #16]
 8003590:	4605      	mov	r5, r0
 8003592:	460c      	mov	r4, r1
 8003594:	b913      	cbnz	r3, 800359c <_fflush_r+0x10>
 8003596:	2500      	movs	r5, #0
 8003598:	4628      	mov	r0, r5
 800359a:	bd38      	pop	{r3, r4, r5, pc}
 800359c:	b118      	cbz	r0, 80035a6 <_fflush_r+0x1a>
 800359e:	6983      	ldr	r3, [r0, #24]
 80035a0:	b90b      	cbnz	r3, 80035a6 <_fflush_r+0x1a>
 80035a2:	f7ff fa19 	bl	80029d8 <__sinit>
 80035a6:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <_fflush_r+0x6c>)
 80035a8:	429c      	cmp	r4, r3
 80035aa:	d11b      	bne.n	80035e4 <_fflush_r+0x58>
 80035ac:	686c      	ldr	r4, [r5, #4]
 80035ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0ef      	beq.n	8003596 <_fflush_r+0xa>
 80035b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035b8:	07d0      	lsls	r0, r2, #31
 80035ba:	d404      	bmi.n	80035c6 <_fflush_r+0x3a>
 80035bc:	0599      	lsls	r1, r3, #22
 80035be:	d402      	bmi.n	80035c6 <_fflush_r+0x3a>
 80035c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035c2:	f7ff faa7 	bl	8002b14 <__retarget_lock_acquire_recursive>
 80035c6:	4628      	mov	r0, r5
 80035c8:	4621      	mov	r1, r4
 80035ca:	f7ff ff5d 	bl	8003488 <__sflush_r>
 80035ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035d0:	4605      	mov	r5, r0
 80035d2:	07da      	lsls	r2, r3, #31
 80035d4:	d4e0      	bmi.n	8003598 <_fflush_r+0xc>
 80035d6:	89a3      	ldrh	r3, [r4, #12]
 80035d8:	059b      	lsls	r3, r3, #22
 80035da:	d4dd      	bmi.n	8003598 <_fflush_r+0xc>
 80035dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035de:	f7ff fa9a 	bl	8002b16 <__retarget_lock_release_recursive>
 80035e2:	e7d9      	b.n	8003598 <_fflush_r+0xc>
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <_fflush_r+0x70>)
 80035e6:	429c      	cmp	r4, r3
 80035e8:	d101      	bne.n	80035ee <_fflush_r+0x62>
 80035ea:	68ac      	ldr	r4, [r5, #8]
 80035ec:	e7df      	b.n	80035ae <_fflush_r+0x22>
 80035ee:	4b04      	ldr	r3, [pc, #16]	; (8003600 <_fflush_r+0x74>)
 80035f0:	429c      	cmp	r4, r3
 80035f2:	bf08      	it	eq
 80035f4:	68ec      	ldreq	r4, [r5, #12]
 80035f6:	e7da      	b.n	80035ae <_fflush_r+0x22>
 80035f8:	08003888 	.word	0x08003888
 80035fc:	080038a8 	.word	0x080038a8
 8003600:	08003868 	.word	0x08003868

08003604 <_lseek_r>:
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	4604      	mov	r4, r0
 8003608:	4608      	mov	r0, r1
 800360a:	4611      	mov	r1, r2
 800360c:	2200      	movs	r2, #0
 800360e:	4d05      	ldr	r5, [pc, #20]	; (8003624 <_lseek_r+0x20>)
 8003610:	602a      	str	r2, [r5, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	f7fd f984 	bl	8000920 <_lseek>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d102      	bne.n	8003622 <_lseek_r+0x1e>
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	b103      	cbz	r3, 8003622 <_lseek_r+0x1e>
 8003620:	6023      	str	r3, [r4, #0]
 8003622:	bd38      	pop	{r3, r4, r5, pc}
 8003624:	20000160 	.word	0x20000160

08003628 <__swhatbuf_r>:
 8003628:	b570      	push	{r4, r5, r6, lr}
 800362a:	460e      	mov	r6, r1
 800362c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003630:	4614      	mov	r4, r2
 8003632:	2900      	cmp	r1, #0
 8003634:	461d      	mov	r5, r3
 8003636:	b096      	sub	sp, #88	; 0x58
 8003638:	da08      	bge.n	800364c <__swhatbuf_r+0x24>
 800363a:	2200      	movs	r2, #0
 800363c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003640:	602a      	str	r2, [r5, #0]
 8003642:	061a      	lsls	r2, r3, #24
 8003644:	d410      	bmi.n	8003668 <__swhatbuf_r+0x40>
 8003646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800364a:	e00e      	b.n	800366a <__swhatbuf_r+0x42>
 800364c:	466a      	mov	r2, sp
 800364e:	f000 f8c5 	bl	80037dc <_fstat_r>
 8003652:	2800      	cmp	r0, #0
 8003654:	dbf1      	blt.n	800363a <__swhatbuf_r+0x12>
 8003656:	9a01      	ldr	r2, [sp, #4]
 8003658:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800365c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003660:	425a      	negs	r2, r3
 8003662:	415a      	adcs	r2, r3
 8003664:	602a      	str	r2, [r5, #0]
 8003666:	e7ee      	b.n	8003646 <__swhatbuf_r+0x1e>
 8003668:	2340      	movs	r3, #64	; 0x40
 800366a:	2000      	movs	r0, #0
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	b016      	add	sp, #88	; 0x58
 8003670:	bd70      	pop	{r4, r5, r6, pc}
	...

08003674 <__smakebuf_r>:
 8003674:	898b      	ldrh	r3, [r1, #12]
 8003676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003678:	079d      	lsls	r5, r3, #30
 800367a:	4606      	mov	r6, r0
 800367c:	460c      	mov	r4, r1
 800367e:	d507      	bpl.n	8003690 <__smakebuf_r+0x1c>
 8003680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003684:	6023      	str	r3, [r4, #0]
 8003686:	6123      	str	r3, [r4, #16]
 8003688:	2301      	movs	r3, #1
 800368a:	6163      	str	r3, [r4, #20]
 800368c:	b002      	add	sp, #8
 800368e:	bd70      	pop	{r4, r5, r6, pc}
 8003690:	466a      	mov	r2, sp
 8003692:	ab01      	add	r3, sp, #4
 8003694:	f7ff ffc8 	bl	8003628 <__swhatbuf_r>
 8003698:	9900      	ldr	r1, [sp, #0]
 800369a:	4605      	mov	r5, r0
 800369c:	4630      	mov	r0, r6
 800369e:	f7ff fa5b 	bl	8002b58 <_malloc_r>
 80036a2:	b948      	cbnz	r0, 80036b8 <__smakebuf_r+0x44>
 80036a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036a8:	059a      	lsls	r2, r3, #22
 80036aa:	d4ef      	bmi.n	800368c <__smakebuf_r+0x18>
 80036ac:	f023 0303 	bic.w	r3, r3, #3
 80036b0:	f043 0302 	orr.w	r3, r3, #2
 80036b4:	81a3      	strh	r3, [r4, #12]
 80036b6:	e7e3      	b.n	8003680 <__smakebuf_r+0xc>
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <__smakebuf_r+0x7c>)
 80036ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80036bc:	89a3      	ldrh	r3, [r4, #12]
 80036be:	6020      	str	r0, [r4, #0]
 80036c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c4:	81a3      	strh	r3, [r4, #12]
 80036c6:	9b00      	ldr	r3, [sp, #0]
 80036c8:	6120      	str	r0, [r4, #16]
 80036ca:	6163      	str	r3, [r4, #20]
 80036cc:	9b01      	ldr	r3, [sp, #4]
 80036ce:	b15b      	cbz	r3, 80036e8 <__smakebuf_r+0x74>
 80036d0:	4630      	mov	r0, r6
 80036d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036d6:	f000 f893 	bl	8003800 <_isatty_r>
 80036da:	b128      	cbz	r0, 80036e8 <__smakebuf_r+0x74>
 80036dc:	89a3      	ldrh	r3, [r4, #12]
 80036de:	f023 0303 	bic.w	r3, r3, #3
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	81a3      	strh	r3, [r4, #12]
 80036e8:	89a0      	ldrh	r0, [r4, #12]
 80036ea:	4305      	orrs	r5, r0
 80036ec:	81a5      	strh	r5, [r4, #12]
 80036ee:	e7cd      	b.n	800368c <__smakebuf_r+0x18>
 80036f0:	08002971 	.word	0x08002971

080036f4 <memchr>:
 80036f4:	4603      	mov	r3, r0
 80036f6:	b510      	push	{r4, lr}
 80036f8:	b2c9      	uxtb	r1, r1
 80036fa:	4402      	add	r2, r0
 80036fc:	4293      	cmp	r3, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	d101      	bne.n	8003706 <memchr+0x12>
 8003702:	2000      	movs	r0, #0
 8003704:	e003      	b.n	800370e <memchr+0x1a>
 8003706:	7804      	ldrb	r4, [r0, #0]
 8003708:	3301      	adds	r3, #1
 800370a:	428c      	cmp	r4, r1
 800370c:	d1f6      	bne.n	80036fc <memchr+0x8>
 800370e:	bd10      	pop	{r4, pc}

08003710 <__malloc_lock>:
 8003710:	4801      	ldr	r0, [pc, #4]	; (8003718 <__malloc_lock+0x8>)
 8003712:	f7ff b9ff 	b.w	8002b14 <__retarget_lock_acquire_recursive>
 8003716:	bf00      	nop
 8003718:	20000154 	.word	0x20000154

0800371c <__malloc_unlock>:
 800371c:	4801      	ldr	r0, [pc, #4]	; (8003724 <__malloc_unlock+0x8>)
 800371e:	f7ff b9fa 	b.w	8002b16 <__retarget_lock_release_recursive>
 8003722:	bf00      	nop
 8003724:	20000154 	.word	0x20000154

08003728 <_free_r>:
 8003728:	b538      	push	{r3, r4, r5, lr}
 800372a:	4605      	mov	r5, r0
 800372c:	2900      	cmp	r1, #0
 800372e:	d040      	beq.n	80037b2 <_free_r+0x8a>
 8003730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003734:	1f0c      	subs	r4, r1, #4
 8003736:	2b00      	cmp	r3, #0
 8003738:	bfb8      	it	lt
 800373a:	18e4      	addlt	r4, r4, r3
 800373c:	f7ff ffe8 	bl	8003710 <__malloc_lock>
 8003740:	4a1c      	ldr	r2, [pc, #112]	; (80037b4 <_free_r+0x8c>)
 8003742:	6813      	ldr	r3, [r2, #0]
 8003744:	b933      	cbnz	r3, 8003754 <_free_r+0x2c>
 8003746:	6063      	str	r3, [r4, #4]
 8003748:	6014      	str	r4, [r2, #0]
 800374a:	4628      	mov	r0, r5
 800374c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003750:	f7ff bfe4 	b.w	800371c <__malloc_unlock>
 8003754:	42a3      	cmp	r3, r4
 8003756:	d908      	bls.n	800376a <_free_r+0x42>
 8003758:	6820      	ldr	r0, [r4, #0]
 800375a:	1821      	adds	r1, r4, r0
 800375c:	428b      	cmp	r3, r1
 800375e:	bf01      	itttt	eq
 8003760:	6819      	ldreq	r1, [r3, #0]
 8003762:	685b      	ldreq	r3, [r3, #4]
 8003764:	1809      	addeq	r1, r1, r0
 8003766:	6021      	streq	r1, [r4, #0]
 8003768:	e7ed      	b.n	8003746 <_free_r+0x1e>
 800376a:	461a      	mov	r2, r3
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	b10b      	cbz	r3, 8003774 <_free_r+0x4c>
 8003770:	42a3      	cmp	r3, r4
 8003772:	d9fa      	bls.n	800376a <_free_r+0x42>
 8003774:	6811      	ldr	r1, [r2, #0]
 8003776:	1850      	adds	r0, r2, r1
 8003778:	42a0      	cmp	r0, r4
 800377a:	d10b      	bne.n	8003794 <_free_r+0x6c>
 800377c:	6820      	ldr	r0, [r4, #0]
 800377e:	4401      	add	r1, r0
 8003780:	1850      	adds	r0, r2, r1
 8003782:	4283      	cmp	r3, r0
 8003784:	6011      	str	r1, [r2, #0]
 8003786:	d1e0      	bne.n	800374a <_free_r+0x22>
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4401      	add	r1, r0
 800378e:	6011      	str	r1, [r2, #0]
 8003790:	6053      	str	r3, [r2, #4]
 8003792:	e7da      	b.n	800374a <_free_r+0x22>
 8003794:	d902      	bls.n	800379c <_free_r+0x74>
 8003796:	230c      	movs	r3, #12
 8003798:	602b      	str	r3, [r5, #0]
 800379a:	e7d6      	b.n	800374a <_free_r+0x22>
 800379c:	6820      	ldr	r0, [r4, #0]
 800379e:	1821      	adds	r1, r4, r0
 80037a0:	428b      	cmp	r3, r1
 80037a2:	bf01      	itttt	eq
 80037a4:	6819      	ldreq	r1, [r3, #0]
 80037a6:	685b      	ldreq	r3, [r3, #4]
 80037a8:	1809      	addeq	r1, r1, r0
 80037aa:	6021      	streq	r1, [r4, #0]
 80037ac:	6063      	str	r3, [r4, #4]
 80037ae:	6054      	str	r4, [r2, #4]
 80037b0:	e7cb      	b.n	800374a <_free_r+0x22>
 80037b2:	bd38      	pop	{r3, r4, r5, pc}
 80037b4:	20000158 	.word	0x20000158

080037b8 <_read_r>:
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4604      	mov	r4, r0
 80037bc:	4608      	mov	r0, r1
 80037be:	4611      	mov	r1, r2
 80037c0:	2200      	movs	r2, #0
 80037c2:	4d05      	ldr	r5, [pc, #20]	; (80037d8 <_read_r+0x20>)
 80037c4:	602a      	str	r2, [r5, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f7fd f853 	bl	8000872 <_read>
 80037cc:	1c43      	adds	r3, r0, #1
 80037ce:	d102      	bne.n	80037d6 <_read_r+0x1e>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	b103      	cbz	r3, 80037d6 <_read_r+0x1e>
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
 80037d8:	20000160 	.word	0x20000160

080037dc <_fstat_r>:
 80037dc:	b538      	push	{r3, r4, r5, lr}
 80037de:	2300      	movs	r3, #0
 80037e0:	4d06      	ldr	r5, [pc, #24]	; (80037fc <_fstat_r+0x20>)
 80037e2:	4604      	mov	r4, r0
 80037e4:	4608      	mov	r0, r1
 80037e6:	4611      	mov	r1, r2
 80037e8:	602b      	str	r3, [r5, #0]
 80037ea:	f7fd f880 	bl	80008ee <_fstat>
 80037ee:	1c43      	adds	r3, r0, #1
 80037f0:	d102      	bne.n	80037f8 <_fstat_r+0x1c>
 80037f2:	682b      	ldr	r3, [r5, #0]
 80037f4:	b103      	cbz	r3, 80037f8 <_fstat_r+0x1c>
 80037f6:	6023      	str	r3, [r4, #0]
 80037f8:	bd38      	pop	{r3, r4, r5, pc}
 80037fa:	bf00      	nop
 80037fc:	20000160 	.word	0x20000160

08003800 <_isatty_r>:
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	2300      	movs	r3, #0
 8003804:	4d05      	ldr	r5, [pc, #20]	; (800381c <_isatty_r+0x1c>)
 8003806:	4604      	mov	r4, r0
 8003808:	4608      	mov	r0, r1
 800380a:	602b      	str	r3, [r5, #0]
 800380c:	f7fd f87e 	bl	800090c <_isatty>
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	d102      	bne.n	800381a <_isatty_r+0x1a>
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	b103      	cbz	r3, 800381a <_isatty_r+0x1a>
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	bd38      	pop	{r3, r4, r5, pc}
 800381c:	20000160 	.word	0x20000160

08003820 <_init>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr

0800382c <_fini>:
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	bf00      	nop
 8003830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003832:	bc08      	pop	{r3}
 8003834:	469e      	mov	lr, r3
 8003836:	4770      	bx	lr
