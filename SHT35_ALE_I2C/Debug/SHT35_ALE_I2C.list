
SHT35_ALE_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074c0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  08007600  08007600  00017600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ae8  08007ae8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ae8  08007ae8  00017ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007af0  08007af0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007af0  08007af0  00017af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007af4  08007af4  00017af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  200001dc  08007cd4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08007cd4  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b052  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a76  00000000  00000000  0002b257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002ccd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002d6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163c9  00000000  00000000  0002e000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c683  00000000  00000000  000443c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085eb0  00000000  00000000  00050a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d68fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab4  00000000  00000000  000d694c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	080075e8 	.word	0x080075e8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	080075e8 	.word	0x080075e8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	; 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d26:	2afd      	cmp	r2, #253	; 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	; 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	; 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__aeabi_uldivmod>:
 8000f74:	b953      	cbnz	r3, 8000f8c <__aeabi_uldivmod+0x18>
 8000f76:	b94a      	cbnz	r2, 8000f8c <__aeabi_uldivmod+0x18>
 8000f78:	2900      	cmp	r1, #0
 8000f7a:	bf08      	it	eq
 8000f7c:	2800      	cmpeq	r0, #0
 8000f7e:	bf1c      	itt	ne
 8000f80:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000f84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f88:	f000 b976 	b.w	8001278 <__aeabi_idiv0>
 8000f8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f94:	f000 f806 	bl	8000fa4 <__udivmoddi4>
 8000f98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fa0:	b004      	add	sp, #16
 8000fa2:	4770      	bx	lr

08000fa4 <__udivmoddi4>:
 8000fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fa8:	9e08      	ldr	r6, [sp, #32]
 8000faa:	460d      	mov	r5, r1
 8000fac:	4604      	mov	r4, r0
 8000fae:	4688      	mov	r8, r1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d14d      	bne.n	8001050 <__udivmoddi4+0xac>
 8000fb4:	428a      	cmp	r2, r1
 8000fb6:	4694      	mov	ip, r2
 8000fb8:	d968      	bls.n	800108c <__udivmoddi4+0xe8>
 8000fba:	fab2 f282 	clz	r2, r2
 8000fbe:	b152      	cbz	r2, 8000fd6 <__udivmoddi4+0x32>
 8000fc0:	fa01 f302 	lsl.w	r3, r1, r2
 8000fc4:	f1c2 0120 	rsb	r1, r2, #32
 8000fc8:	fa20 f101 	lsr.w	r1, r0, r1
 8000fcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fd0:	ea41 0803 	orr.w	r8, r1, r3
 8000fd4:	4094      	lsls	r4, r2
 8000fd6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000fda:	fbb8 f7f1 	udiv	r7, r8, r1
 8000fde:	fa1f fe8c 	uxth.w	lr, ip
 8000fe2:	fb01 8817 	mls	r8, r1, r7, r8
 8000fe6:	fb07 f00e 	mul.w	r0, r7, lr
 8000fea:	0c23      	lsrs	r3, r4, #16
 8000fec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ff0:	4298      	cmp	r0, r3
 8000ff2:	d90a      	bls.n	800100a <__udivmoddi4+0x66>
 8000ff4:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff8:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000ffc:	f080 811e 	bcs.w	800123c <__udivmoddi4+0x298>
 8001000:	4298      	cmp	r0, r3
 8001002:	f240 811b 	bls.w	800123c <__udivmoddi4+0x298>
 8001006:	3f02      	subs	r7, #2
 8001008:	4463      	add	r3, ip
 800100a:	1a1b      	subs	r3, r3, r0
 800100c:	fbb3 f0f1 	udiv	r0, r3, r1
 8001010:	fb01 3310 	mls	r3, r1, r0, r3
 8001014:	fb00 fe0e 	mul.w	lr, r0, lr
 8001018:	b2a4      	uxth	r4, r4
 800101a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800101e:	45a6      	cmp	lr, r4
 8001020:	d90a      	bls.n	8001038 <__udivmoddi4+0x94>
 8001022:	eb1c 0404 	adds.w	r4, ip, r4
 8001026:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800102a:	f080 8109 	bcs.w	8001240 <__udivmoddi4+0x29c>
 800102e:	45a6      	cmp	lr, r4
 8001030:	f240 8106 	bls.w	8001240 <__udivmoddi4+0x29c>
 8001034:	4464      	add	r4, ip
 8001036:	3802      	subs	r0, #2
 8001038:	2100      	movs	r1, #0
 800103a:	eba4 040e 	sub.w	r4, r4, lr
 800103e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001042:	b11e      	cbz	r6, 800104c <__udivmoddi4+0xa8>
 8001044:	2300      	movs	r3, #0
 8001046:	40d4      	lsrs	r4, r2
 8001048:	e9c6 4300 	strd	r4, r3, [r6]
 800104c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001050:	428b      	cmp	r3, r1
 8001052:	d908      	bls.n	8001066 <__udivmoddi4+0xc2>
 8001054:	2e00      	cmp	r6, #0
 8001056:	f000 80ee 	beq.w	8001236 <__udivmoddi4+0x292>
 800105a:	2100      	movs	r1, #0
 800105c:	e9c6 0500 	strd	r0, r5, [r6]
 8001060:	4608      	mov	r0, r1
 8001062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001066:	fab3 f183 	clz	r1, r3
 800106a:	2900      	cmp	r1, #0
 800106c:	d14a      	bne.n	8001104 <__udivmoddi4+0x160>
 800106e:	42ab      	cmp	r3, r5
 8001070:	d302      	bcc.n	8001078 <__udivmoddi4+0xd4>
 8001072:	4282      	cmp	r2, r0
 8001074:	f200 80fc 	bhi.w	8001270 <__udivmoddi4+0x2cc>
 8001078:	1a84      	subs	r4, r0, r2
 800107a:	eb65 0303 	sbc.w	r3, r5, r3
 800107e:	2001      	movs	r0, #1
 8001080:	4698      	mov	r8, r3
 8001082:	2e00      	cmp	r6, #0
 8001084:	d0e2      	beq.n	800104c <__udivmoddi4+0xa8>
 8001086:	e9c6 4800 	strd	r4, r8, [r6]
 800108a:	e7df      	b.n	800104c <__udivmoddi4+0xa8>
 800108c:	b902      	cbnz	r2, 8001090 <__udivmoddi4+0xec>
 800108e:	deff      	udf	#255	; 0xff
 8001090:	fab2 f282 	clz	r2, r2
 8001094:	2a00      	cmp	r2, #0
 8001096:	f040 8091 	bne.w	80011bc <__udivmoddi4+0x218>
 800109a:	eba1 000c 	sub.w	r0, r1, ip
 800109e:	2101      	movs	r1, #1
 80010a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010a4:	fa1f fe8c 	uxth.w	lr, ip
 80010a8:	fbb0 f3f7 	udiv	r3, r0, r7
 80010ac:	fb07 0013 	mls	r0, r7, r3, r0
 80010b0:	0c25      	lsrs	r5, r4, #16
 80010b2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80010b6:	fb0e f003 	mul.w	r0, lr, r3
 80010ba:	42a8      	cmp	r0, r5
 80010bc:	d908      	bls.n	80010d0 <__udivmoddi4+0x12c>
 80010be:	eb1c 0505 	adds.w	r5, ip, r5
 80010c2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80010c6:	d202      	bcs.n	80010ce <__udivmoddi4+0x12a>
 80010c8:	42a8      	cmp	r0, r5
 80010ca:	f200 80ce 	bhi.w	800126a <__udivmoddi4+0x2c6>
 80010ce:	4643      	mov	r3, r8
 80010d0:	1a2d      	subs	r5, r5, r0
 80010d2:	fbb5 f0f7 	udiv	r0, r5, r7
 80010d6:	fb07 5510 	mls	r5, r7, r0, r5
 80010da:	fb0e fe00 	mul.w	lr, lr, r0
 80010de:	b2a4      	uxth	r4, r4
 80010e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010e4:	45a6      	cmp	lr, r4
 80010e6:	d908      	bls.n	80010fa <__udivmoddi4+0x156>
 80010e8:	eb1c 0404 	adds.w	r4, ip, r4
 80010ec:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80010f0:	d202      	bcs.n	80010f8 <__udivmoddi4+0x154>
 80010f2:	45a6      	cmp	lr, r4
 80010f4:	f200 80b6 	bhi.w	8001264 <__udivmoddi4+0x2c0>
 80010f8:	4628      	mov	r0, r5
 80010fa:	eba4 040e 	sub.w	r4, r4, lr
 80010fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001102:	e79e      	b.n	8001042 <__udivmoddi4+0x9e>
 8001104:	f1c1 0720 	rsb	r7, r1, #32
 8001108:	408b      	lsls	r3, r1
 800110a:	fa22 fc07 	lsr.w	ip, r2, r7
 800110e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001112:	fa25 fa07 	lsr.w	sl, r5, r7
 8001116:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800111a:	fbba f8f9 	udiv	r8, sl, r9
 800111e:	fa20 f307 	lsr.w	r3, r0, r7
 8001122:	fb09 aa18 	mls	sl, r9, r8, sl
 8001126:	408d      	lsls	r5, r1
 8001128:	fa1f fe8c 	uxth.w	lr, ip
 800112c:	431d      	orrs	r5, r3
 800112e:	fa00 f301 	lsl.w	r3, r0, r1
 8001132:	fb08 f00e 	mul.w	r0, r8, lr
 8001136:	0c2c      	lsrs	r4, r5, #16
 8001138:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800113c:	42a0      	cmp	r0, r4
 800113e:	fa02 f201 	lsl.w	r2, r2, r1
 8001142:	d90b      	bls.n	800115c <__udivmoddi4+0x1b8>
 8001144:	eb1c 0404 	adds.w	r4, ip, r4
 8001148:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800114c:	f080 8088 	bcs.w	8001260 <__udivmoddi4+0x2bc>
 8001150:	42a0      	cmp	r0, r4
 8001152:	f240 8085 	bls.w	8001260 <__udivmoddi4+0x2bc>
 8001156:	f1a8 0802 	sub.w	r8, r8, #2
 800115a:	4464      	add	r4, ip
 800115c:	1a24      	subs	r4, r4, r0
 800115e:	fbb4 f0f9 	udiv	r0, r4, r9
 8001162:	fb09 4410 	mls	r4, r9, r0, r4
 8001166:	fb00 fe0e 	mul.w	lr, r0, lr
 800116a:	b2ad      	uxth	r5, r5
 800116c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001170:	45a6      	cmp	lr, r4
 8001172:	d908      	bls.n	8001186 <__udivmoddi4+0x1e2>
 8001174:	eb1c 0404 	adds.w	r4, ip, r4
 8001178:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800117c:	d26c      	bcs.n	8001258 <__udivmoddi4+0x2b4>
 800117e:	45a6      	cmp	lr, r4
 8001180:	d96a      	bls.n	8001258 <__udivmoddi4+0x2b4>
 8001182:	3802      	subs	r0, #2
 8001184:	4464      	add	r4, ip
 8001186:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800118a:	fba0 9502 	umull	r9, r5, r0, r2
 800118e:	eba4 040e 	sub.w	r4, r4, lr
 8001192:	42ac      	cmp	r4, r5
 8001194:	46c8      	mov	r8, r9
 8001196:	46ae      	mov	lr, r5
 8001198:	d356      	bcc.n	8001248 <__udivmoddi4+0x2a4>
 800119a:	d053      	beq.n	8001244 <__udivmoddi4+0x2a0>
 800119c:	2e00      	cmp	r6, #0
 800119e:	d069      	beq.n	8001274 <__udivmoddi4+0x2d0>
 80011a0:	ebb3 0208 	subs.w	r2, r3, r8
 80011a4:	eb64 040e 	sbc.w	r4, r4, lr
 80011a8:	fa22 f301 	lsr.w	r3, r2, r1
 80011ac:	fa04 f707 	lsl.w	r7, r4, r7
 80011b0:	431f      	orrs	r7, r3
 80011b2:	40cc      	lsrs	r4, r1
 80011b4:	e9c6 7400 	strd	r7, r4, [r6]
 80011b8:	2100      	movs	r1, #0
 80011ba:	e747      	b.n	800104c <__udivmoddi4+0xa8>
 80011bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80011c0:	f1c2 0120 	rsb	r1, r2, #32
 80011c4:	fa25 f301 	lsr.w	r3, r5, r1
 80011c8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011cc:	fa20 f101 	lsr.w	r1, r0, r1
 80011d0:	4095      	lsls	r5, r2
 80011d2:	430d      	orrs	r5, r1
 80011d4:	fbb3 f1f7 	udiv	r1, r3, r7
 80011d8:	fb07 3311 	mls	r3, r7, r1, r3
 80011dc:	fa1f fe8c 	uxth.w	lr, ip
 80011e0:	0c28      	lsrs	r0, r5, #16
 80011e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80011e6:	fb01 f30e 	mul.w	r3, r1, lr
 80011ea:	4283      	cmp	r3, r0
 80011ec:	fa04 f402 	lsl.w	r4, r4, r2
 80011f0:	d908      	bls.n	8001204 <__udivmoddi4+0x260>
 80011f2:	eb1c 0000 	adds.w	r0, ip, r0
 80011f6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80011fa:	d22f      	bcs.n	800125c <__udivmoddi4+0x2b8>
 80011fc:	4283      	cmp	r3, r0
 80011fe:	d92d      	bls.n	800125c <__udivmoddi4+0x2b8>
 8001200:	3902      	subs	r1, #2
 8001202:	4460      	add	r0, ip
 8001204:	1ac0      	subs	r0, r0, r3
 8001206:	fbb0 f3f7 	udiv	r3, r0, r7
 800120a:	fb07 0013 	mls	r0, r7, r3, r0
 800120e:	b2ad      	uxth	r5, r5
 8001210:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001214:	fb03 f00e 	mul.w	r0, r3, lr
 8001218:	42a8      	cmp	r0, r5
 800121a:	d908      	bls.n	800122e <__udivmoddi4+0x28a>
 800121c:	eb1c 0505 	adds.w	r5, ip, r5
 8001220:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8001224:	d216      	bcs.n	8001254 <__udivmoddi4+0x2b0>
 8001226:	42a8      	cmp	r0, r5
 8001228:	d914      	bls.n	8001254 <__udivmoddi4+0x2b0>
 800122a:	3b02      	subs	r3, #2
 800122c:	4465      	add	r5, ip
 800122e:	1a28      	subs	r0, r5, r0
 8001230:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001234:	e738      	b.n	80010a8 <__udivmoddi4+0x104>
 8001236:	4631      	mov	r1, r6
 8001238:	4630      	mov	r0, r6
 800123a:	e707      	b.n	800104c <__udivmoddi4+0xa8>
 800123c:	462f      	mov	r7, r5
 800123e:	e6e4      	b.n	800100a <__udivmoddi4+0x66>
 8001240:	4618      	mov	r0, r3
 8001242:	e6f9      	b.n	8001038 <__udivmoddi4+0x94>
 8001244:	454b      	cmp	r3, r9
 8001246:	d2a9      	bcs.n	800119c <__udivmoddi4+0x1f8>
 8001248:	ebb9 0802 	subs.w	r8, r9, r2
 800124c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001250:	3801      	subs	r0, #1
 8001252:	e7a3      	b.n	800119c <__udivmoddi4+0x1f8>
 8001254:	4643      	mov	r3, r8
 8001256:	e7ea      	b.n	800122e <__udivmoddi4+0x28a>
 8001258:	4628      	mov	r0, r5
 800125a:	e794      	b.n	8001186 <__udivmoddi4+0x1e2>
 800125c:	4641      	mov	r1, r8
 800125e:	e7d1      	b.n	8001204 <__udivmoddi4+0x260>
 8001260:	46d0      	mov	r8, sl
 8001262:	e77b      	b.n	800115c <__udivmoddi4+0x1b8>
 8001264:	4464      	add	r4, ip
 8001266:	3802      	subs	r0, #2
 8001268:	e747      	b.n	80010fa <__udivmoddi4+0x156>
 800126a:	3b02      	subs	r3, #2
 800126c:	4465      	add	r5, ip
 800126e:	e72f      	b.n	80010d0 <__udivmoddi4+0x12c>
 8001270:	4608      	mov	r0, r1
 8001272:	e706      	b.n	8001082 <__udivmoddi4+0xde>
 8001274:	4631      	mov	r1, r6
 8001276:	e6e9      	b.n	800104c <__udivmoddi4+0xa8>

08001278 <__aeabi_idiv0>:
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop

0800127c <i2c_scanner>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void i2c_scanner(I2C_HandleTypeDef *i2c) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

	printf("Scanning I2C bus----->:\r\n");
 8001284:	4816      	ldr	r0, [pc, #88]	; (80012e0 <i2c_scanner+0x64>)
 8001286:	f004 fa3b 	bl	8005700 <puts>
	HAL_StatusTypeDef ret;
	uint16_t i = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	81fb      	strh	r3, [r7, #14]

	for (i = 1; i < 128; i++) {
 800128e:	2301      	movs	r3, #1
 8001290:	81fb      	strh	r3, [r7, #14]
 8001292:	e01b      	b.n	80012cc <i2c_scanner+0x50>
		ret = HAL_I2C_IsDeviceReady(i2c, (uint16_t) (i << 1), 3, 10);
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	b299      	uxth	r1, r3
 800129a:	230a      	movs	r3, #10
 800129c:	2203      	movs	r2, #3
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f001 fdc2 	bl	8002e28 <HAL_I2C_IsDeviceReady>
 80012a4:	4603      	mov	r3, r0
 80012a6:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) /* No ACK Received At That Address */
 80012a8:	7b7b      	ldrb	r3, [r7, #13]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <i2c_scanner+0x3a>
		{
			printf("-");
 80012ae:	202d      	movs	r0, #45	; 0x2d
 80012b0:	f004 f9a4 	bl	80055fc <putchar>
 80012b4:	e007      	b.n	80012c6 <i2c_scanner+0x4a>
		} else if (ret == HAL_OK) {
 80012b6:	7b7b      	ldrb	r3, [r7, #13]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d104      	bne.n	80012c6 <i2c_scanner+0x4a>
			printf("0x%X", i);
 80012bc:	89fb      	ldrh	r3, [r7, #14]
 80012be:	4619      	mov	r1, r3
 80012c0:	4808      	ldr	r0, [pc, #32]	; (80012e4 <i2c_scanner+0x68>)
 80012c2:	f004 f983 	bl	80055cc <iprintf>
	for (i = 1; i < 128; i++) {
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	3301      	adds	r3, #1
 80012ca:	81fb      	strh	r3, [r7, #14]
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	2b7f      	cmp	r3, #127	; 0x7f
 80012d0:	d9e0      	bls.n	8001294 <i2c_scanner+0x18>
		}
	}
	printf("\r\n");
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <i2c_scanner+0x6c>)
 80012d4:	f004 fa14 	bl	8005700 <puts>
}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	08007600 	.word	0x08007600
 80012e4:	0800761c 	.word	0x0800761c
 80012e8:	08007624 	.word	0x08007624

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f2:	f000 fc0b 	bl	8001b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f6:	f000 f845 	bl	8001384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fa:	f000 f8e9 	bl	80014d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012fe:	f000 f88f 	bl	8001420 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001302:	f000 f8bb 	bl	800147c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  i2c_scanner(&hi2c1);
 8001306:	481b      	ldr	r0, [pc, #108]	; (8001374 <main+0x88>)
 8001308:	f7ff ffb8 	bl	800127c <i2c_scanner>



  // Create the handle for the sensor.
  sht3x_handle_t handle = {
 800130c:	4a1a      	ldr	r2, [pc, #104]	; (8001378 <main+0x8c>)
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001316:	e883 0003 	stmia.w	r3, {r0, r1}
      .i2c_handle = &hi2c1,
      .device_address = SHT3X_I2C_DEVICE_ADDRESS_ADDR_PIN_LOW
  };

  // Initialise sensor (tests connection by reading the status register).
  if (!sht3x_init(&handle)) {
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fb32 	bl	8001988 <sht3x_init>
 8001324:	4603      	mov	r3, r0
 8001326:	f083 0301 	eor.w	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <main+0x4a>
      printf("SHT3x access failed.\n\r");
 8001330:	4812      	ldr	r0, [pc, #72]	; (800137c <main+0x90>)
 8001332:	f004 f94b 	bl	80055cc <iprintf>

    /* USER CODE BEGIN 3 */

	  // Read temperature and humidity.
	  float temperature, humidity;
	  sht3x_read_temperature_and_humidity(&handle, &temperature, &humidity);
 8001336:	463a      	mov	r2, r7
 8001338:	1d39      	adds	r1, r7, #4
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fb62 	bl	8001a08 <sht3x_read_temperature_and_humidity>
	  printf("Initial temperature: %.2fC, humidity: %.2f%%RH\n\r", temperature, humidity);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f886 	bl	8000458 <__aeabi_f2d>
 800134c:	4604      	mov	r4, r0
 800134e:	460d      	mov	r5, r1
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f880 	bl	8000458 <__aeabi_f2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	e9cd 2300 	strd	r2, r3, [sp]
 8001360:	4622      	mov	r2, r4
 8001362:	462b      	mov	r3, r5
 8001364:	4806      	ldr	r0, [pc, #24]	; (8001380 <main+0x94>)
 8001366:	f004 f931 	bl	80055cc <iprintf>
	  HAL_Delay(1000);
 800136a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800136e:	f000 fc3b 	bl	8001be8 <HAL_Delay>
  {
 8001372:	e7e0      	b.n	8001336 <main+0x4a>
 8001374:	200001f8 	.word	0x200001f8
 8001378:	08007674 	.word	0x08007674
 800137c:	08007628 	.word	0x08007628
 8001380:	08007640 	.word	0x08007640

08001384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b092      	sub	sp, #72	; 0x48
 8001388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	2234      	movs	r2, #52	; 0x34
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f003 fb5a 	bl	8004a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001398:	463b      	mov	r3, r7
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <SystemClock_Config+0x98>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80013ae:	4a1b      	ldr	r2, [pc, #108]	; (800141c <SystemClock_Config+0x98>)
 80013b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013b4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b6:	2302      	movs	r3, #2
 80013b8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ba:	2301      	movs	r3, #1
 80013bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013be:	2310      	movs	r3, #16
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c2:	2302      	movs	r3, #2
 80013c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c6:	2300      	movs	r3, #0
 80013c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80013ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80013ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80013d0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80013d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 fac0 	bl	8003960 <HAL_RCC_OscConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013e6:	f000 f895 	bl	8001514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ea:	230f      	movs	r3, #15
 80013ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ee:	2303      	movs	r3, #3
 80013f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013fe:	463b      	mov	r3, r7
 8001400:	2101      	movs	r1, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f002 fddc 	bl	8003fc0 <HAL_RCC_ClockConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800140e:	f000 f881 	bl	8001514 <Error_Handler>
  }
}
 8001412:	bf00      	nop
 8001414:	3748      	adds	r7, #72	; 0x48
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40007000 	.word	0x40007000

08001420 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MX_I2C1_Init+0x50>)
 8001426:	4a13      	ldr	r2, [pc, #76]	; (8001474 <MX_I2C1_Init+0x54>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_I2C1_Init+0x50>)
 800142c:	4a12      	ldr	r2, [pc, #72]	; (8001478 <MX_I2C1_Init+0x58>)
 800142e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_I2C1_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_I2C1_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_I2C1_Init+0x50>)
 800143e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001442:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <MX_I2C1_Init+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_I2C1_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_I2C1_Init+0x50>)
 800145e:	f000 fe49 	bl	80020f4 <HAL_I2C_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001468:	f000 f854 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200001f8 	.word	0x200001f8
 8001474:	40005400 	.word	0x40005400
 8001478:	000186a0 	.word	0x000186a0

0800147c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_USART2_UART_Init+0x4c>)
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <MX_USART2_UART_Init+0x50>)
 8001484:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_USART2_UART_Init+0x4c>)
 8001488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800148c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_USART2_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_USART2_UART_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_USART2_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_USART2_UART_Init+0x4c>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_USART2_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_USART2_UART_Init+0x4c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_USART2_UART_Init+0x4c>)
 80014b4:	f003 f84a 	bl	800454c <HAL_UART_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014be:	f000 f829 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000024c 	.word	0x2000024c
 80014cc:	40004400 	.word	0x40004400

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_GPIO_Init+0x40>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <MX_GPIO_Init+0x40>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_GPIO_Init+0x40>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_GPIO_Init+0x40>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4a07      	ldr	r2, [pc, #28]	; (8001510 <MX_GPIO_Init+0x40>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	61d3      	str	r3, [r2, #28]
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <MX_GPIO_Init+0x40>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]

}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	40023800 	.word	0x40023800

08001514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001518:	b672      	cpsid	i
}
 800151a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800151c:	e7fe      	b.n	800151c <Error_Handler+0x8>
	...

08001520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_MspInit+0x5c>)
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	4a14      	ldr	r2, [pc, #80]	; (800157c <HAL_MspInit+0x5c>)
 800152c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001530:	6253      	str	r3, [r2, #36]	; 0x24
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_MspInit+0x5c>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_MspInit+0x5c>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4a0e      	ldr	r2, [pc, #56]	; (800157c <HAL_MspInit+0x5c>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6213      	str	r3, [r2, #32]
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <HAL_MspInit+0x5c>)
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_MspInit+0x5c>)
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_MspInit+0x5c>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	6253      	str	r3, [r2, #36]	; 0x24
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_MspInit+0x5c>)
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800156e:	2007      	movs	r0, #7
 8001570:	f000 fc0c 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800

08001580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a17      	ldr	r2, [pc, #92]	; (80015fc <HAL_I2C_MspInit+0x7c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d127      	bne.n	80015f2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_I2C_MspInit+0x80>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a16      	ldr	r2, [pc, #88]	; (8001600 <HAL_I2C_MspInit+0x80>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	61d3      	str	r3, [r2, #28]
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_I2C_MspInit+0x80>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ba:	23c0      	movs	r3, #192	; 0xc0
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015be:	2312      	movs	r3, #18
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ca:	2304      	movs	r3, #4
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	480b      	ldr	r0, [pc, #44]	; (8001604 <HAL_I2C_MspInit+0x84>)
 80015d6:	f000 fc0d 	bl	8001df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_I2C_MspInit+0x80>)
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_I2C_MspInit+0x80>)
 80015e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e4:	6253      	str	r3, [r2, #36]	; 0x24
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_I2C_MspInit+0x80>)
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40005400 	.word	0x40005400
 8001600:	40023800 	.word	0x40023800
 8001604:	40020400 	.word	0x40020400

08001608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a17      	ldr	r2, [pc, #92]	; (8001684 <HAL_UART_MspInit+0x7c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d127      	bne.n	800167a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_UART_MspInit+0x80>)
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	4a16      	ldr	r2, [pc, #88]	; (8001688 <HAL_UART_MspInit+0x80>)
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	6253      	str	r3, [r2, #36]	; 0x24
 8001636:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_UART_MspInit+0x80>)
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_UART_MspInit+0x80>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_UART_MspInit+0x80>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	61d3      	str	r3, [r2, #28]
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_UART_MspInit+0x80>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800165a:	230c      	movs	r3, #12
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800166a:	2307      	movs	r3, #7
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <HAL_UART_MspInit+0x84>)
 8001676:	f000 fbbd 	bl	8001df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40004400 	.word	0x40004400
 8001688:	40023800 	.word	0x40023800
 800168c:	40020000 	.word	0x40020000

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <NMI_Handler+0x4>

08001696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <HardFault_Handler+0x4>

0800169c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <MemManage_Handler+0x4>

080016a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <BusFault_Handler+0x4>

080016a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <UsageFault_Handler+0x4>

080016ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d6:	f000 fa6b 	bl	8001bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}

080016de <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  return 1;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <_kill>:

int _kill(int pid, int sig)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016f6:	f003 f96d 	bl	80049d4 <__errno>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2216      	movs	r2, #22
 80016fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_exit>:

void _exit (int status)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ffe7 	bl	80016ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800171e:	e7fe      	b.n	800171e <_exit+0x12>

08001720 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e00a      	b.n	8001748 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001732:	f3af 8000 	nop.w
 8001736:	4601      	mov	r1, r0
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	60ba      	str	r2, [r7, #8]
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf0      	blt.n	8001732 <_read+0x12>
  }

  return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
//  {
//    __io_putchar(*ptr++);
//  }


	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	b29a      	uxth	r2, r3
 800176c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	4804      	ldr	r0, [pc, #16]	; (8001784 <_write+0x28>)
 8001774:	f002 ff3a 	bl	80045ec <HAL_UART_Transmit>

  return len;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000024c 	.word	0x2000024c

08001788 <_close>:

int _close(int file)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr

0800179e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ae:	605a      	str	r2, [r3, #4]
  return 0;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <_isatty>:

int _isatty(int file)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017c4:	2301      	movs	r3, #1
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f0:	4a14      	ldr	r2, [pc, #80]	; (8001844 <_sbrk+0x5c>)
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <_sbrk+0x60>)
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <_sbrk+0x64>)
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <_sbrk+0x68>)
 8001808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	429a      	cmp	r2, r3
 8001816:	d207      	bcs.n	8001828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001818:	f003 f8dc 	bl	80049d4 <__errno>
 800181c:	4603      	mov	r3, r0
 800181e:	220c      	movs	r2, #12
 8001820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001826:	e009      	b.n	800183c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <_sbrk+0x64>)
 8001838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183a:	68fb      	ldr	r3, [r7, #12]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20008000 	.word	0x20008000
 8001848:	00000400 	.word	0x00000400
 800184c:	20000294 	.word	0x20000294
 8001850:	200002b0 	.word	0x200002b0

08001854 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001860:	f7ff fff8 	bl	8001854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001864:	480b      	ldr	r0, [pc, #44]	; (8001894 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001866:	490c      	ldr	r1, [pc, #48]	; (8001898 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001868:	4a0c      	ldr	r2, [pc, #48]	; (800189c <LoopFillZerobss+0x16>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800186c:	e002      	b.n	8001874 <LoopCopyDataInit>

0800186e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001872:	3304      	adds	r3, #4

08001874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001878:	d3f9      	bcc.n	800186e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187a:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800187c:	4c09      	ldr	r4, [pc, #36]	; (80018a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001880:	e001      	b.n	8001886 <LoopFillZerobss>

08001882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001884:	3204      	adds	r2, #4

08001886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001888:	d3fb      	bcc.n	8001882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188a:	f003 f8bb 	bl	8004a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800188e:	f7ff fd2d 	bl	80012ec <main>
  bx lr
 8001892:	4770      	bx	lr
  ldr r0, =_sdata
 8001894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001898:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800189c:	08007af8 	.word	0x08007af8
  ldr r2, =_sbss
 80018a0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80018a4:	200002ac 	.word	0x200002ac

080018a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC1_IRQHandler>

080018aa <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b087      	sub	sp, #28
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 80018b4:	23ff      	movs	r3, #255	; 0xff
 80018b6:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	e020      	b.n	8001900 <calculate_crc+0x56>
		crc ^= data[i];
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4413      	add	r3, r2
 80018c4:	781a      	ldrb	r2, [r3, #0]
 80018c6:	7dfb      	ldrb	r3, [r7, #23]
 80018c8:	4053      	eors	r3, r2
 80018ca:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	e010      	b.n	80018f4 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 80018d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	da06      	bge.n	80018e8 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 80018da:	7dfb      	ldrb	r3, [r7, #23]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80018e4:	75fb      	strb	r3, [r7, #23]
 80018e6:	e002      	b.n	80018ee <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3301      	adds	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b07      	cmp	r3, #7
 80018f8:	d9eb      	bls.n	80018d2 <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	3301      	adds	r3, #1
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d3da      	bcc.n	80018be <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8001908:	7dfb      	ldrb	r3, [r7, #23]
}
 800190a:	4618      	mov	r0, r3
 800190c:	371c      	adds	r7, #28
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af02      	add	r7, sp, #8
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8001920:	887b      	ldrh	r3, [r7, #2]
 8001922:	0a1b      	lsrs	r3, r3, #8
 8001924:	b29b      	uxth	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	733b      	strb	r3, [r7, #12]
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	889b      	ldrh	r3, [r3, #4]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	b299      	uxth	r1, r3
 800193c:	f107 020c 	add.w	r2, r7, #12
 8001940:	231e      	movs	r3, #30
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2302      	movs	r3, #2
 8001946:	f000 fd19 	bl	800237c <HAL_I2C_Master_Transmit>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8001950:	2300      	movs	r3, #0
 8001952:	e000      	b.n	8001956 <sht3x_send_command+0x42>
	}

	return true;
 8001954:	2301      	movs	r3, #1
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	460a      	mov	r2, r1
 8001968:	71fb      	strb	r3, [r7, #7]
 800196a:	4613      	mov	r3, r2
 800196c:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	b29b      	uxth	r3, r3
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	b29a      	uxth	r2, r3
 8001976:	79bb      	ldrb	r3, [r7, #6]
 8001978:	b29b      	uxth	r3, r3
 800197a:	4313      	orrs	r3, r2
 800197c:	b29b      	uxth	r3, r3
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af04      	add	r7, sp, #16
 800198e:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <sht3x_init+0x1e>
 800199a:	4b18      	ldr	r3, [pc, #96]	; (80019fc <sht3x_init+0x74>)
 800199c:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <sht3x_init+0x78>)
 800199e:	2138      	movs	r1, #56	; 0x38
 80019a0:	4818      	ldr	r0, [pc, #96]	; (8001a04 <sht3x_init+0x7c>)
 80019a2:	f002 fff9 	bl	8004998 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	889b      	ldrh	r3, [r3, #4]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	b299      	uxth	r1, r3
 80019b2:	231e      	movs	r3, #30
 80019b4:	9302      	str	r3, [sp, #8]
 80019b6:	2303      	movs	r3, #3
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2302      	movs	r3, #2
 80019c2:	f24f 322d 	movw	r2, #62253	; 0xf32d
 80019c6:	f001 f809 	bl	80029dc <HAL_I2C_Mem_Read>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e00e      	b.n	80019f2 <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	2102      	movs	r1, #2
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff65 	bl	80018aa <calculate_crc>
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <sht3x_init+0x68>
		return false;
 80019ec:	2300      	movs	r3, #0
 80019ee:	e000      	b.n	80019f2 <sht3x_init+0x6a>
	}

	return true;
 80019f0:	2301      	movs	r3, #1
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	0800767c 	.word	0x0800767c
 8001a00:	08007700 	.word	0x08007700
 8001a04:	080076bc 	.word	0x080076bc

08001a08 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8001a14:	f642 4106 	movw	r1, #11270	; 0x2c06
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f7ff ff7b 	bl	8001914 <sht3x_send_command>

	HAL_Delay(1);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f000 f8e2 	bl	8001be8 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	889b      	ldrh	r3, [r3, #4]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	b299      	uxth	r1, r3
 8001a30:	f107 0214 	add.w	r2, r7, #20
 8001a34:	231e      	movs	r3, #30
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2306      	movs	r3, #6
 8001a3a:	f000 fd9d 	bl	8002578 <HAL_I2C_Master_Receive>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e054      	b.n	8001af2 <sht3x_read_temperature_and_humidity+0xea>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ff2b 	bl	80018aa <calculate_crc>
 8001a54:	4603      	mov	r3, r0
 8001a56:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	3303      	adds	r3, #3
 8001a5e:	2102      	movs	r1, #2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff22 	bl	80018aa <calculate_crc>
 8001a66:	4603      	mov	r3, r0
 8001a68:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8001a6a:	7dbb      	ldrb	r3, [r7, #22]
 8001a6c:	7ffa      	ldrb	r2, [r7, #31]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d103      	bne.n	8001a7a <sht3x_read_temperature_and_humidity+0x72>
 8001a72:	7e7b      	ldrb	r3, [r7, #25]
 8001a74:	7fba      	ldrb	r2, [r7, #30]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d001      	beq.n	8001a7e <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e039      	b.n	8001af2 <sht3x_read_temperature_and_humidity+0xea>
	}

	uint16_t temperature_raw = uint8_to_uint16(buffer[0], buffer[1]);
 8001a7e:	7d3b      	ldrb	r3, [r7, #20]
 8001a80:	7d7a      	ldrb	r2, [r7, #21]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff6a 	bl	800195e <uint8_to_uint16>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	7e3a      	ldrb	r2, [r7, #24]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff62 	bl	800195e <uint8_to_uint16>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8001a9e:	8bbb      	ldrh	r3, [r7, #28]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff f8bf 	bl	8000c24 <__aeabi_ui2f>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4914      	ldr	r1, [pc, #80]	; (8001afc <sht3x_read_temperature_and_humidity+0xf4>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f912 	bl	8000cd4 <__aeabi_fmul>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4913      	ldr	r1, [pc, #76]	; (8001b00 <sht3x_read_temperature_and_humidity+0xf8>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff f9c1 	bl	8000e3c <__aeabi_fdiv>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4911      	ldr	r1, [pc, #68]	; (8001b04 <sht3x_read_temperature_and_humidity+0xfc>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fffe 	bl	8000ac0 <__aeabi_fsub>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	601a      	str	r2, [r3, #0]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 8001acc:	8b7b      	ldrh	r3, [r7, #26]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f8a8 	bl	8000c24 <__aeabi_ui2f>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	490c      	ldr	r1, [pc, #48]	; (8001b08 <sht3x_read_temperature_and_humidity+0x100>)
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff f8fb 	bl	8000cd4 <__aeabi_fmul>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4907      	ldr	r1, [pc, #28]	; (8001b00 <sht3x_read_temperature_and_humidity+0xf8>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f9aa 	bl	8000e3c <__aeabi_fdiv>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	601a      	str	r2, [r3, #0]

	return true;
 8001af0:	2301      	movs	r3, #1
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3720      	adds	r7, #32
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	432f0000 	.word	0x432f0000
 8001b00:	477fff00 	.word	0x477fff00
 8001b04:	42340000 	.word	0x42340000
 8001b08:	42c80000 	.word	0x42c80000

08001b0c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b16:	2003      	movs	r0, #3
 8001b18:	f000 f938 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f000 f80d 	bl	8001b3c <HAL_InitTick>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	71fb      	strb	r3, [r7, #7]
 8001b2c:	e001      	b.n	8001b32 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b2e:	f7ff fcf7 	bl	8001520 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b32:	79fb      	ldrb	r3, [r7, #7]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b48:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <HAL_InitTick+0x68>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d022      	beq.n	8001b96 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_InitTick+0x6c>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <HAL_InitTick+0x68>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f938 	bl	8001dda <HAL_SYSTICK_Config>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10f      	bne.n	8001b90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	d809      	bhi.n	8001b8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b76:	2200      	movs	r2, #0
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b7e:	f000 f910 	bl	8001da2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HAL_InitTick+0x70>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	e007      	b.n	8001b9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	73fb      	strb	r3, [r7, #15]
 8001b8e:	e004      	b.n	8001b9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	e001      	b.n	8001b9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	20000004 	.word	0x20000004

08001bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_IncTick+0x1c>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a03      	ldr	r2, [pc, #12]	; (8001bcc <HAL_IncTick+0x1c>)
 8001bc0:	6013      	str	r3, [r2, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000298 	.word	0x20000298
 8001bd0:	20000008 	.word	0x20000008

08001bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd8:	4b02      	ldr	r3, [pc, #8]	; (8001be4 <HAL_GetTick+0x10>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	20000298 	.word	0x20000298

08001be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff fff0 	bl	8001bd4 <HAL_GetTick>
 8001bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c00:	d004      	beq.n	8001c0c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_Delay+0x40>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4413      	add	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c0c:	bf00      	nop
 8001c0e:	f7ff ffe1 	bl	8001bd4 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d8f7      	bhi.n	8001c0e <HAL_Delay+0x26>
  {
  }
}
 8001c1e:	bf00      	nop
 8001c20:	bf00      	nop
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000008 	.word	0x20000008

08001c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <__NVIC_GetPriorityGrouping+0x18>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	f003 0307 	and.w	r3, r3, #7
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	; (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d6c:	f7ff ff90 	bl	8001c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff49 	bl	8001c2c <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff5e 	bl	8001c74 <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff90 	bl	8001ce4 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5f 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ffb0 	bl	8001d48 <SysTick_Config>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e0a:	e154      	b.n	80020b6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2101      	movs	r1, #1
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 8146 	beq.w	80020b0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d005      	beq.n	8001e3c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d130      	bne.n	8001e9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001e72:	2201      	movs	r2, #1
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	f003 0201 	and.w	r2, r3, #1
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d017      	beq.n	8001eda <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d123      	bne.n	8001f2e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	08da      	lsrs	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3208      	adds	r2, #8
 8001eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	08da      	lsrs	r2, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3208      	adds	r2, #8
 8001f28:	6939      	ldr	r1, [r7, #16]
 8001f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	2203      	movs	r2, #3
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0203 	and.w	r2, r3, #3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80a0 	beq.w	80020b0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f70:	4b58      	ldr	r3, [pc, #352]	; (80020d4 <HAL_GPIO_Init+0x2e0>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4a57      	ldr	r2, [pc, #348]	; (80020d4 <HAL_GPIO_Init+0x2e0>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6213      	str	r3, [r2, #32]
 8001f7c:	4b55      	ldr	r3, [pc, #340]	; (80020d4 <HAL_GPIO_Init+0x2e0>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f88:	4a53      	ldr	r2, [pc, #332]	; (80020d8 <HAL_GPIO_Init+0x2e4>)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a4b      	ldr	r2, [pc, #300]	; (80020dc <HAL_GPIO_Init+0x2e8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d019      	beq.n	8001fe8 <HAL_GPIO_Init+0x1f4>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a4a      	ldr	r2, [pc, #296]	; (80020e0 <HAL_GPIO_Init+0x2ec>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d013      	beq.n	8001fe4 <HAL_GPIO_Init+0x1f0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a49      	ldr	r2, [pc, #292]	; (80020e4 <HAL_GPIO_Init+0x2f0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00d      	beq.n	8001fe0 <HAL_GPIO_Init+0x1ec>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a48      	ldr	r2, [pc, #288]	; (80020e8 <HAL_GPIO_Init+0x2f4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d007      	beq.n	8001fdc <HAL_GPIO_Init+0x1e8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a47      	ldr	r2, [pc, #284]	; (80020ec <HAL_GPIO_Init+0x2f8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d101      	bne.n	8001fd8 <HAL_GPIO_Init+0x1e4>
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	e008      	b.n	8001fea <HAL_GPIO_Init+0x1f6>
 8001fd8:	2305      	movs	r3, #5
 8001fda:	e006      	b.n	8001fea <HAL_GPIO_Init+0x1f6>
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e004      	b.n	8001fea <HAL_GPIO_Init+0x1f6>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e002      	b.n	8001fea <HAL_GPIO_Init+0x1f6>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <HAL_GPIO_Init+0x1f6>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	f002 0203 	and.w	r2, r2, #3
 8001ff0:	0092      	lsls	r2, r2, #2
 8001ff2:	4093      	lsls	r3, r2
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ffa:	4937      	ldr	r1, [pc, #220]	; (80020d8 <HAL_GPIO_Init+0x2e4>)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002008:	4b39      	ldr	r3, [pc, #228]	; (80020f0 <HAL_GPIO_Init+0x2fc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43db      	mvns	r3, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800202c:	4a30      	ldr	r2, [pc, #192]	; (80020f0 <HAL_GPIO_Init+0x2fc>)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002032:	4b2f      	ldr	r3, [pc, #188]	; (80020f0 <HAL_GPIO_Init+0x2fc>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002056:	4a26      	ldr	r2, [pc, #152]	; (80020f0 <HAL_GPIO_Init+0x2fc>)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800205c:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <HAL_GPIO_Init+0x2fc>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002080:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <HAL_GPIO_Init+0x2fc>)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <HAL_GPIO_Init+0x2fc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020aa:	4a11      	ldr	r2, [pc, #68]	; (80020f0 <HAL_GPIO_Init+0x2fc>)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	3301      	adds	r3, #1
 80020b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f47f aea3 	bne.w	8001e0c <HAL_GPIO_Init+0x18>
  }
}
 80020c6:	bf00      	nop
 80020c8:	bf00      	nop
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40010000 	.word	0x40010000
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40020800 	.word	0x40020800
 80020e8:	40020c00 	.word	0x40020c00
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40010400 	.word	0x40010400

080020f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e12b      	b.n	800235e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fa30 	bl	8001580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2224      	movs	r2, #36	; 0x24
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002146:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002156:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002158:	f002 f970 	bl	800443c <HAL_RCC_GetPCLK1Freq>
 800215c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4a81      	ldr	r2, [pc, #516]	; (8002368 <HAL_I2C_Init+0x274>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d807      	bhi.n	8002178 <HAL_I2C_Init+0x84>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4a80      	ldr	r2, [pc, #512]	; (800236c <HAL_I2C_Init+0x278>)
 800216c:	4293      	cmp	r3, r2
 800216e:	bf94      	ite	ls
 8002170:	2301      	movls	r3, #1
 8002172:	2300      	movhi	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	e006      	b.n	8002186 <HAL_I2C_Init+0x92>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4a7d      	ldr	r2, [pc, #500]	; (8002370 <HAL_I2C_Init+0x27c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	bf94      	ite	ls
 8002180:	2301      	movls	r3, #1
 8002182:	2300      	movhi	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e0e7      	b.n	800235e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4a78      	ldr	r2, [pc, #480]	; (8002374 <HAL_I2C_Init+0x280>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	0c9b      	lsrs	r3, r3, #18
 8002198:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4a6a      	ldr	r2, [pc, #424]	; (8002368 <HAL_I2C_Init+0x274>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d802      	bhi.n	80021c8 <HAL_I2C_Init+0xd4>
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	3301      	adds	r3, #1
 80021c6:	e009      	b.n	80021dc <HAL_I2C_Init+0xe8>
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	4a69      	ldr	r2, [pc, #420]	; (8002378 <HAL_I2C_Init+0x284>)
 80021d4:	fba2 2303 	umull	r2, r3, r2, r3
 80021d8:	099b      	lsrs	r3, r3, #6
 80021da:	3301      	adds	r3, #1
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	430b      	orrs	r3, r1
 80021e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	495c      	ldr	r1, [pc, #368]	; (8002368 <HAL_I2C_Init+0x274>)
 80021f8:	428b      	cmp	r3, r1
 80021fa:	d819      	bhi.n	8002230 <HAL_I2C_Init+0x13c>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1e59      	subs	r1, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fbb1 f3f3 	udiv	r3, r1, r3
 800220a:	1c59      	adds	r1, r3, #1
 800220c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002210:	400b      	ands	r3, r1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_I2C_Init+0x138>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1e59      	subs	r1, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fbb1 f3f3 	udiv	r3, r1, r3
 8002224:	3301      	adds	r3, #1
 8002226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222a:	e051      	b.n	80022d0 <HAL_I2C_Init+0x1dc>
 800222c:	2304      	movs	r3, #4
 800222e:	e04f      	b.n	80022d0 <HAL_I2C_Init+0x1dc>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d111      	bne.n	800225c <HAL_I2C_Init+0x168>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1e58      	subs	r0, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	440b      	add	r3, r1
 8002246:	fbb0 f3f3 	udiv	r3, r0, r3
 800224a:	3301      	adds	r3, #1
 800224c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	e012      	b.n	8002282 <HAL_I2C_Init+0x18e>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1e58      	subs	r0, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	0099      	lsls	r1, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002272:	3301      	adds	r3, #1
 8002274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf0c      	ite	eq
 800227c:	2301      	moveq	r3, #1
 800227e:	2300      	movne	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_Init+0x196>
 8002286:	2301      	movs	r3, #1
 8002288:	e022      	b.n	80022d0 <HAL_I2C_Init+0x1dc>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10e      	bne.n	80022b0 <HAL_I2C_Init+0x1bc>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1e58      	subs	r0, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6859      	ldr	r1, [r3, #4]
 800229a:	460b      	mov	r3, r1
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	440b      	add	r3, r1
 80022a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a4:	3301      	adds	r3, #1
 80022a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ae:	e00f      	b.n	80022d0 <HAL_I2C_Init+0x1dc>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1e58      	subs	r0, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	0099      	lsls	r1, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	6809      	ldr	r1, [r1, #0]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69da      	ldr	r2, [r3, #28]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6911      	ldr	r1, [r2, #16]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68d2      	ldr	r2, [r2, #12]
 800230a:	4311      	orrs	r1, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	430b      	orrs	r3, r1
 8002312:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2220      	movs	r2, #32
 800234a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	000186a0 	.word	0x000186a0
 800236c:	001e847f 	.word	0x001e847f
 8002370:	003d08ff 	.word	0x003d08ff
 8002374:	431bde83 	.word	0x431bde83
 8002378:	10624dd3 	.word	0x10624dd3

0800237c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	461a      	mov	r2, r3
 8002388:	460b      	mov	r3, r1
 800238a:	817b      	strh	r3, [r7, #10]
 800238c:	4613      	mov	r3, r2
 800238e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002390:	f7ff fc20 	bl	8001bd4 <HAL_GetTick>
 8002394:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b20      	cmp	r3, #32
 80023a0:	f040 80e0 	bne.w	8002564 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2319      	movs	r3, #25
 80023aa:	2201      	movs	r2, #1
 80023ac:	4970      	ldr	r1, [pc, #448]	; (8002570 <HAL_I2C_Master_Transmit+0x1f4>)
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f001 f8a0 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023ba:	2302      	movs	r3, #2
 80023bc:	e0d3      	b.n	8002566 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_I2C_Master_Transmit+0x50>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e0cc      	b.n	8002566 <HAL_I2C_Master_Transmit+0x1ea>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d007      	beq.n	80023f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0201 	orr.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002400:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2221      	movs	r2, #33	; 0x21
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2210      	movs	r2, #16
 800240e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	893a      	ldrh	r2, [r7, #8]
 8002422:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4a50      	ldr	r2, [pc, #320]	; (8002574 <HAL_I2C_Master_Transmit+0x1f8>)
 8002432:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002434:	8979      	ldrh	r1, [r7, #10]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	6a3a      	ldr	r2, [r7, #32]
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 fe22 	bl	8003084 <I2C_MasterRequestWrite>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e08d      	b.n	8002566 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002460:	e066      	b.n	8002530 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	6a39      	ldr	r1, [r7, #32]
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f001 f95e 	bl	8003728 <I2C_WaitOnTXEFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00d      	beq.n	800248e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	2b04      	cmp	r3, #4
 8002478:	d107      	bne.n	800248a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002488:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e06b      	b.n	8002566 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	781a      	ldrb	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d11b      	bne.n	8002504 <HAL_I2C_Master_Transmit+0x188>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d017      	beq.n	8002504 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	6a39      	ldr	r1, [r7, #32]
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f001 f955 	bl	80037b8 <I2C_WaitOnBTFFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00d      	beq.n	8002530 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	2b04      	cmp	r3, #4
 800251a:	d107      	bne.n	800252c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e01a      	b.n	8002566 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	2b00      	cmp	r3, #0
 8002536:	d194      	bne.n	8002462 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	e000      	b.n	8002566 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002564:	2302      	movs	r3, #2
  }
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	00100002 	.word	0x00100002
 8002574:	ffff0000 	.word	0xffff0000

08002578 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08c      	sub	sp, #48	; 0x30
 800257c:	af02      	add	r7, sp, #8
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	461a      	mov	r2, r3
 8002584:	460b      	mov	r3, r1
 8002586:	817b      	strh	r3, [r7, #10]
 8002588:	4613      	mov	r3, r2
 800258a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800258c:	f7ff fb22 	bl	8001bd4 <HAL_GetTick>
 8002590:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b20      	cmp	r3, #32
 800259c:	f040 8217 	bne.w	80029ce <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	2319      	movs	r3, #25
 80025a6:	2201      	movs	r2, #1
 80025a8:	497c      	ldr	r1, [pc, #496]	; (800279c <HAL_I2C_Master_Receive+0x224>)
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 ffa2 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
 80025b8:	e20a      	b.n	80029d0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_I2C_Master_Receive+0x50>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e203      	b.n	80029d0 <HAL_I2C_Master_Receive+0x458>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d007      	beq.n	80025ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2222      	movs	r2, #34	; 0x22
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2210      	movs	r2, #16
 800260a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	893a      	ldrh	r2, [r7, #8]
 800261e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4a5c      	ldr	r2, [pc, #368]	; (80027a0 <HAL_I2C_Master_Receive+0x228>)
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002630:	8979      	ldrh	r1, [r7, #10]
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fda6 	bl	8003188 <I2C_MasterRequestRead>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e1c4      	b.n	80029d0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264a:	2b00      	cmp	r3, #0
 800264c:	d113      	bne.n	8002676 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	623b      	str	r3, [r7, #32]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	623b      	str	r3, [r7, #32]
 8002662:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	e198      	b.n	80029a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267a:	2b01      	cmp	r3, #1
 800267c:	d11b      	bne.n	80026b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800268c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	e178      	b.n	80029a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d11b      	bne.n	80026f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	e158      	b.n	80029a8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002704:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800271c:	e144      	b.n	80029a8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	2b03      	cmp	r3, #3
 8002724:	f200 80f1 	bhi.w	800290a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272c:	2b01      	cmp	r3, #1
 800272e:	d123      	bne.n	8002778 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002732:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f001 f887 	bl	8003848 <I2C_WaitOnRXNEFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e145      	b.n	80029d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276c:	b29b      	uxth	r3, r3
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002776:	e117      	b.n	80029a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277c:	2b02      	cmp	r3, #2
 800277e:	d14e      	bne.n	800281e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002786:	2200      	movs	r2, #0
 8002788:	4906      	ldr	r1, [pc, #24]	; (80027a4 <HAL_I2C_Master_Receive+0x22c>)
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 feb2 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e11a      	b.n	80029d0 <HAL_I2C_Master_Receive+0x458>
 800279a:	bf00      	nop
 800279c:	00100002 	.word	0x00100002
 80027a0:	ffff0000 	.word	0xffff0000
 80027a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800281c:	e0c4      	b.n	80029a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	2200      	movs	r2, #0
 8002826:	496c      	ldr	r1, [pc, #432]	; (80029d8 <HAL_I2C_Master_Receive+0x460>)
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fe63 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0cb      	b.n	80029d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002880:	2200      	movs	r2, #0
 8002882:	4955      	ldr	r1, [pc, #340]	; (80029d8 <HAL_I2C_Master_Receive+0x460>)
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 fe35 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e09d      	b.n	80029d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002908:	e04e      	b.n	80029a8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 ff9a 	bl	8003848 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e058      	b.n	80029d0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b04      	cmp	r3, #4
 800295c:	d124      	bne.n	80029a8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002962:	2b03      	cmp	r3, #3
 8002964:	d107      	bne.n	8002976 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002974:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f47f aeb6 	bne.w	800271e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e000      	b.n	80029d0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80029ce:	2302      	movs	r3, #2
  }
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3728      	adds	r7, #40	; 0x28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	00010004 	.word	0x00010004

080029dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08c      	sub	sp, #48	; 0x30
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	4608      	mov	r0, r1
 80029e6:	4611      	mov	r1, r2
 80029e8:	461a      	mov	r2, r3
 80029ea:	4603      	mov	r3, r0
 80029ec:	817b      	strh	r3, [r7, #10]
 80029ee:	460b      	mov	r3, r1
 80029f0:	813b      	strh	r3, [r7, #8]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029f6:	f7ff f8ed 	bl	8001bd4 <HAL_GetTick>
 80029fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	f040 8208 	bne.w	8002e1a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2319      	movs	r3, #25
 8002a10:	2201      	movs	r2, #1
 8002a12:	497b      	ldr	r1, [pc, #492]	; (8002c00 <HAL_I2C_Mem_Read+0x224>)
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fd6d 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
 8002a22:	e1fb      	b.n	8002e1c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_I2C_Mem_Read+0x56>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e1f4      	b.n	8002e1c <HAL_I2C_Mem_Read+0x440>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d007      	beq.n	8002a58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2222      	movs	r2, #34	; 0x22
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2240      	movs	r2, #64	; 0x40
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4a5b      	ldr	r2, [pc, #364]	; (8002c04 <HAL_I2C_Mem_Read+0x228>)
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a9a:	88f8      	ldrh	r0, [r7, #6]
 8002a9c:	893a      	ldrh	r2, [r7, #8]
 8002a9e:	8979      	ldrh	r1, [r7, #10]
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fc3a 	bl	8003324 <I2C_RequestMemoryRead>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e1b0      	b.n	8002e1c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d113      	bne.n	8002aea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	623b      	str	r3, [r7, #32]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	623b      	str	r3, [r7, #32]
 8002ad6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	e184      	b.n	8002df4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d11b      	bne.n	8002b2a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e164      	b.n	8002df4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d11b      	bne.n	8002b6a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b52:	2300      	movs	r3, #0
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	e144      	b.n	8002df4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b80:	e138      	b.n	8002df4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	f200 80f1 	bhi.w	8002d6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d123      	bne.n	8002bdc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fe55 	bl	8003848 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e139      	b.n	8002e1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bda:	e10b      	b.n	8002df4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d14e      	bne.n	8002c82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bea:	2200      	movs	r2, #0
 8002bec:	4906      	ldr	r1, [pc, #24]	; (8002c08 <HAL_I2C_Mem_Read+0x22c>)
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fc80 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e10e      	b.n	8002e1c <HAL_I2C_Mem_Read+0x440>
 8002bfe:	bf00      	nop
 8002c00:	00100002 	.word	0x00100002
 8002c04:	ffff0000 	.word	0xffff0000
 8002c08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c80:	e0b8      	b.n	8002df4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c88:	2200      	movs	r2, #0
 8002c8a:	4966      	ldr	r1, [pc, #408]	; (8002e24 <HAL_I2C_Mem_Read+0x448>)
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 fc31 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0bf      	b.n	8002e1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002caa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	494f      	ldr	r1, [pc, #316]	; (8002e24 <HAL_I2C_Mem_Read+0x448>)
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fc03 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e091      	b.n	8002e1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d6c:	e042      	b.n	8002df4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 fd68 	bl	8003848 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e04c      	b.n	8002e1c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d118      	bne.n	8002df4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f47f aec2 	bne.w	8002b82 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e000      	b.n	8002e1c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
  }
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3728      	adds	r7, #40	; 0x28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	00010004 	.word	0x00010004

08002e28 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	; 0x28
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	603b      	str	r3, [r7, #0]
 8002e34:	460b      	mov	r3, r1
 8002e36:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e38:	f7fe fecc 	bl	8001bd4 <HAL_GetTick>
 8002e3c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	f040 8111 	bne.w	8003072 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2319      	movs	r3, #25
 8002e56:	2201      	movs	r2, #1
 8002e58:	4988      	ldr	r1, [pc, #544]	; (800307c <HAL_I2C_IsDeviceReady+0x254>)
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fb4a 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
 8002e68:	e104      	b.n	8003074 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_I2C_IsDeviceReady+0x50>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e0fd      	b.n	8003074 <HAL_I2C_IsDeviceReady+0x24c>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d007      	beq.n	8002e9e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0201 	orr.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2224      	movs	r2, #36	; 0x24
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a70      	ldr	r2, [pc, #448]	; (8003080 <HAL_I2C_IsDeviceReady+0x258>)
 8002ec0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ed0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 fb08 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00d      	beq.n	8002f06 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef8:	d103      	bne.n	8002f02 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e0b6      	b.n	8003074 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f06:	897b      	ldrh	r3, [r7, #10]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f14:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f16:	f7fe fe5d 	bl	8001bd4 <HAL_GetTick>
 8002f1a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	bf0c      	ite	eq
 8002f2a:	2301      	moveq	r3, #1
 8002f2c:	2300      	movne	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f40:	bf0c      	ite	eq
 8002f42:	2301      	moveq	r3, #1
 8002f44:	2300      	movne	r3, #0
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f4a:	e025      	b.n	8002f98 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f4c:	f7fe fe42 	bl	8001bd4 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d302      	bcc.n	8002f62 <HAL_I2C_IsDeviceReady+0x13a>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d103      	bne.n	8002f6a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	22a0      	movs	r2, #160	; 0xa0
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8e:	bf0c      	ite	eq
 8002f90:	2301      	moveq	r3, #1
 8002f92:	2300      	movne	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2ba0      	cmp	r3, #160	; 0xa0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_I2C_IsDeviceReady+0x188>
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d102      	bne.n	8002fb0 <HAL_I2C_IsDeviceReady+0x188>
 8002faa:	7dbb      	ldrb	r3, [r7, #22]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0cd      	beq.n	8002f4c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d129      	bne.n	800301a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2319      	movs	r3, #25
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4921      	ldr	r1, [pc, #132]	; (800307c <HAL_I2C_IsDeviceReady+0x254>)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fa7c 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e036      	b.n	8003074 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	e02c      	b.n	8003074 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003028:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003032:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2319      	movs	r3, #25
 800303a:	2201      	movs	r2, #1
 800303c:	490f      	ldr	r1, [pc, #60]	; (800307c <HAL_I2C_IsDeviceReady+0x254>)
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fa58 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e012      	b.n	8003074 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	3301      	adds	r3, #1
 8003052:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	f4ff af32 	bcc.w	8002ec2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003072:	2302      	movs	r3, #2
  }
}
 8003074:	4618      	mov	r0, r3
 8003076:	3720      	adds	r7, #32
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	00100002 	.word	0x00100002
 8003080:	ffff0000 	.word	0xffff0000

08003084 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	460b      	mov	r3, r1
 8003092:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b08      	cmp	r3, #8
 800309e:	d006      	beq.n	80030ae <I2C_MasterRequestWrite+0x2a>
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d003      	beq.n	80030ae <I2C_MasterRequestWrite+0x2a>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030ac:	d108      	bne.n	80030c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e00b      	b.n	80030d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	2b12      	cmp	r3, #18
 80030c6:	d107      	bne.n	80030d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fa05 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00d      	beq.n	800310c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030fe:	d103      	bne.n	8003108 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003106:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e035      	b.n	8003178 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003114:	d108      	bne.n	8003128 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003116:	897b      	ldrh	r3, [r7, #10]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003124:	611a      	str	r2, [r3, #16]
 8003126:	e01b      	b.n	8003160 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003128:	897b      	ldrh	r3, [r7, #10]
 800312a:	11db      	asrs	r3, r3, #7
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f003 0306 	and.w	r3, r3, #6
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f063 030f 	orn	r3, r3, #15
 8003138:	b2da      	uxtb	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	490e      	ldr	r1, [pc, #56]	; (8003180 <I2C_MasterRequestWrite+0xfc>)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fa4e 	bl	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e010      	b.n	8003178 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003156:	897b      	ldrh	r3, [r7, #10]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	4907      	ldr	r1, [pc, #28]	; (8003184 <I2C_MasterRequestWrite+0x100>)
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fa3e 	bl	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	00010008 	.word	0x00010008
 8003184:	00010002 	.word	0x00010002

08003188 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af02      	add	r7, sp, #8
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	460b      	mov	r3, r1
 8003196:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d006      	beq.n	80031c2 <I2C_MasterRequestRead+0x3a>
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d003      	beq.n	80031c2 <I2C_MasterRequestRead+0x3a>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031c0:	d108      	bne.n	80031d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	e00b      	b.n	80031ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	2b11      	cmp	r3, #17
 80031da:	d107      	bne.n	80031ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f97b 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00d      	beq.n	8003220 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003212:	d103      	bne.n	800321c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e079      	b.n	8003314 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003228:	d108      	bne.n	800323c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800322a:	897b      	ldrh	r3, [r7, #10]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	b2da      	uxtb	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	611a      	str	r2, [r3, #16]
 800323a:	e05f      	b.n	80032fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800323c:	897b      	ldrh	r3, [r7, #10]
 800323e:	11db      	asrs	r3, r3, #7
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f003 0306 	and.w	r3, r3, #6
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f063 030f 	orn	r3, r3, #15
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4930      	ldr	r1, [pc, #192]	; (800331c <I2C_MasterRequestRead+0x194>)
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f9c4 	bl	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e054      	b.n	8003314 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4929      	ldr	r1, [pc, #164]	; (8003320 <I2C_MasterRequestRead+0x198>)
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f9b4 	bl	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e044      	b.n	8003314 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f919 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00d      	beq.n	80032e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d6:	d103      	bne.n	80032e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e017      	b.n	8003314 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80032e4:	897b      	ldrh	r3, [r7, #10]
 80032e6:	11db      	asrs	r3, r3, #7
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f003 0306 	and.w	r3, r3, #6
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f063 030e 	orn	r3, r3, #14
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4907      	ldr	r1, [pc, #28]	; (8003320 <I2C_MasterRequestRead+0x198>)
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f970 	bl	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	00010008 	.word	0x00010008
 8003320:	00010002 	.word	0x00010002

08003324 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	4608      	mov	r0, r1
 800332e:	4611      	mov	r1, r2
 8003330:	461a      	mov	r2, r3
 8003332:	4603      	mov	r3, r0
 8003334:	817b      	strh	r3, [r7, #10]
 8003336:	460b      	mov	r3, r1
 8003338:	813b      	strh	r3, [r7, #8]
 800333a:	4613      	mov	r3, r2
 800333c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800334c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800335c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	2200      	movs	r2, #0
 8003366:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f8c2 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00d      	beq.n	8003392 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003384:	d103      	bne.n	800338e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e0aa      	b.n	80034e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003392:	897b      	ldrh	r3, [r7, #10]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	6a3a      	ldr	r2, [r7, #32]
 80033a6:	4952      	ldr	r1, [pc, #328]	; (80034f0 <I2C_RequestMemoryRead+0x1cc>)
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f91d 	bl	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e097      	b.n	80034e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d0:	6a39      	ldr	r1, [r7, #32]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f9a8 	bl	8003728 <I2C_WaitOnTXEFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00d      	beq.n	80033fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d107      	bne.n	80033f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e076      	b.n	80034e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d105      	bne.n	800340c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003400:	893b      	ldrh	r3, [r7, #8]
 8003402:	b2da      	uxtb	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	611a      	str	r2, [r3, #16]
 800340a:	e021      	b.n	8003450 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800340c:	893b      	ldrh	r3, [r7, #8]
 800340e:	0a1b      	lsrs	r3, r3, #8
 8003410:	b29b      	uxth	r3, r3
 8003412:	b2da      	uxtb	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341c:	6a39      	ldr	r1, [r7, #32]
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f982 	bl	8003728 <I2C_WaitOnTXEFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00d      	beq.n	8003446 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2b04      	cmp	r3, #4
 8003430:	d107      	bne.n	8003442 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003440:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e050      	b.n	80034e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003446:	893b      	ldrh	r3, [r7, #8]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003452:	6a39      	ldr	r1, [r7, #32]
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f967 	bl	8003728 <I2C_WaitOnTXEFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00d      	beq.n	800347c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	2b04      	cmp	r3, #4
 8003466:	d107      	bne.n	8003478 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003476:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e035      	b.n	80034e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800348a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	2200      	movs	r2, #0
 8003494:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f82b 	bl	80034f4 <I2C_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00d      	beq.n	80034c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b2:	d103      	bne.n	80034bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e013      	b.n	80034e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034c0:	897b      	ldrh	r3, [r7, #10]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	6a3a      	ldr	r2, [r7, #32]
 80034d4:	4906      	ldr	r1, [pc, #24]	; (80034f0 <I2C_RequestMemoryRead+0x1cc>)
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f886 	bl	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	00010002 	.word	0x00010002

080034f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003504:	e048      	b.n	8003598 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800350c:	d044      	beq.n	8003598 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350e:	f7fe fb61 	bl	8001bd4 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d302      	bcc.n	8003524 <I2C_WaitOnFlagUntilTimeout+0x30>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d139      	bne.n	8003598 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	0c1b      	lsrs	r3, r3, #16
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b01      	cmp	r3, #1
 800352c:	d10d      	bne.n	800354a <I2C_WaitOnFlagUntilTimeout+0x56>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	43da      	mvns	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	4013      	ands	r3, r2
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	e00c      	b.n	8003564 <I2C_WaitOnFlagUntilTimeout+0x70>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	43da      	mvns	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	4013      	ands	r3, r2
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	429a      	cmp	r2, r3
 8003568:	d116      	bne.n	8003598 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f043 0220 	orr.w	r2, r3, #32
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e023      	b.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	0c1b      	lsrs	r3, r3, #16
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d10d      	bne.n	80035be <I2C_WaitOnFlagUntilTimeout+0xca>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	43da      	mvns	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4013      	ands	r3, r2
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	bf0c      	ite	eq
 80035b4:	2301      	moveq	r3, #1
 80035b6:	2300      	movne	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	e00c      	b.n	80035d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	43da      	mvns	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d093      	beq.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035f6:	e071      	b.n	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003606:	d123      	bne.n	8003650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003616:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003620:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	f043 0204 	orr.w	r2, r3, #4
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e067      	b.n	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003656:	d041      	beq.n	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003658:	f7fe fabc 	bl	8001bd4 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	429a      	cmp	r2, r3
 8003666:	d302      	bcc.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d136      	bne.n	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d10c      	bne.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	43da      	mvns	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4013      	ands	r3, r2
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	e00b      	b.n	80036aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	43da      	mvns	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4013      	ands	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d016      	beq.n	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	f043 0220 	orr.w	r2, r3, #32
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e021      	b.n	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	0c1b      	lsrs	r3, r3, #16
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d10c      	bne.n	8003700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	43da      	mvns	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4013      	ands	r3, r2
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e00b      	b.n	8003718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	43da      	mvns	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4013      	ands	r3, r2
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	bf14      	ite	ne
 8003712:	2301      	movne	r3, #1
 8003714:	2300      	moveq	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	f47f af6d 	bne.w	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003734:	e034      	b.n	80037a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f8e3 	bl	8003902 <I2C_IsAcknowledgeFailed>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e034      	b.n	80037b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800374c:	d028      	beq.n	80037a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374e:	f7fe fa41 	bl	8001bd4 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	429a      	cmp	r2, r3
 800375c:	d302      	bcc.n	8003764 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d11d      	bne.n	80037a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376e:	2b80      	cmp	r3, #128	; 0x80
 8003770:	d016      	beq.n	80037a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f043 0220 	orr.w	r2, r3, #32
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e007      	b.n	80037b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b80      	cmp	r3, #128	; 0x80
 80037ac:	d1c3      	bne.n	8003736 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037c4:	e034      	b.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f89b 	bl	8003902 <I2C_IsAcknowledgeFailed>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e034      	b.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037dc:	d028      	beq.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037de:	f7fe f9f9 	bl	8001bd4 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d302      	bcc.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d11d      	bne.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d016      	beq.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	f043 0220 	orr.w	r2, r3, #32
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e007      	b.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d1c3      	bne.n	80037c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003854:	e049      	b.n	80038ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b10      	cmp	r3, #16
 8003862:	d119      	bne.n	8003898 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0210 	mvn.w	r2, #16
 800386c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e030      	b.n	80038fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003898:	f7fe f99c 	bl	8001bd4 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d302      	bcc.n	80038ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11d      	bne.n	80038ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b40      	cmp	r3, #64	; 0x40
 80038ba:	d016      	beq.n	80038ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f043 0220 	orr.w	r2, r3, #32
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e007      	b.n	80038fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d1ae      	bne.n	8003856 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003918:	d11b      	bne.n	8003952 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003922:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f043 0204 	orr.w	r2, r3, #4
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr
	...

08003960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e31d      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003972:	4b94      	ldr	r3, [pc, #592]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800397c:	4b91      	ldr	r3, [pc, #580]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003984:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d07b      	beq.n	8003a8a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d006      	beq.n	80039a6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b0c      	cmp	r3, #12
 800399c:	d10f      	bne.n	80039be <HAL_RCC_OscConfig+0x5e>
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a4:	d10b      	bne.n	80039be <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a6:	4b87      	ldr	r3, [pc, #540]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d06a      	beq.n	8003a88 <HAL_RCC_OscConfig+0x128>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d166      	bne.n	8003a88 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e2f7      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d106      	bne.n	80039d4 <HAL_RCC_OscConfig+0x74>
 80039c6:	4b7f      	ldr	r3, [pc, #508]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a7e      	ldr	r2, [pc, #504]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e02d      	b.n	8003a30 <HAL_RCC_OscConfig+0xd0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10c      	bne.n	80039f6 <HAL_RCC_OscConfig+0x96>
 80039dc:	4b79      	ldr	r3, [pc, #484]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a78      	ldr	r2, [pc, #480]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b76      	ldr	r3, [pc, #472]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a75      	ldr	r2, [pc, #468]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 80039ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	e01c      	b.n	8003a30 <HAL_RCC_OscConfig+0xd0>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0xb8>
 80039fe:	4b71      	ldr	r3, [pc, #452]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a70      	ldr	r2, [pc, #448]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b6e      	ldr	r3, [pc, #440]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a6d      	ldr	r2, [pc, #436]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0xd0>
 8003a18:	4b6a      	ldr	r3, [pc, #424]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a69      	ldr	r2, [pc, #420]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b67      	ldr	r3, [pc, #412]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a66      	ldr	r2, [pc, #408]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d013      	beq.n	8003a60 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fe f8cc 	bl	8001bd4 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a40:	f7fe f8c8 	bl	8001bd4 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	; 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e2ad      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a52:	4b5c      	ldr	r3, [pc, #368]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0xe0>
 8003a5e:	e014      	b.n	8003a8a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fe f8b8 	bl	8001bd4 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a68:	f7fe f8b4 	bl	8001bd4 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	; 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e299      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a7a:	4b52      	ldr	r3, [pc, #328]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x108>
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d05a      	beq.n	8003b4c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b0c      	cmp	r3, #12
 8003aa0:	d119      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x176>
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d116      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa8:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x160>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e276      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac0:	4b40      	ldr	r3, [pc, #256]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	493d      	ldr	r1, [pc, #244]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad4:	e03a      	b.n	8003b4c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d020      	beq.n	8003b20 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ade:	4b3a      	ldr	r3, [pc, #232]	; (8003bc8 <HAL_RCC_OscConfig+0x268>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fe f876 	bl	8001bd4 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aec:	f7fe f872 	bl	8001bd4 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e257      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003afe:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0a:	4b2e      	ldr	r3, [pc, #184]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	492a      	ldr	r1, [pc, #168]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
 8003b1e:	e015      	b.n	8003b4c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b20:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <HAL_RCC_OscConfig+0x268>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7fe f855 	bl	8001bd4 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b2e:	f7fe f851 	bl	8001bd4 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e236      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b40:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80b8 	beq.w	8003cca <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d170      	bne.n	8003c42 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b60:	4b18      	ldr	r3, [pc, #96]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_OscConfig+0x218>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e21a      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1a      	ldr	r2, [r3, #32]
 8003b7c:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d921      	bls.n	8003bcc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fc7d 	bl	800448c <RCC_SetFlashLatencyFromMSIRange>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e208      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4906      	ldr	r1, [pc, #24]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	061b      	lsls	r3, r3, #24
 8003bbc:	4901      	ldr	r1, [pc, #4]	; (8003bc4 <HAL_RCC_OscConfig+0x264>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
 8003bc2:	e020      	b.n	8003c06 <HAL_RCC_OscConfig+0x2a6>
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bcc:	4b99      	ldr	r3, [pc, #612]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	4996      	ldr	r1, [pc, #600]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bde:	4b95      	ldr	r3, [pc, #596]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	061b      	lsls	r3, r3, #24
 8003bec:	4991      	ldr	r1, [pc, #580]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fc48 	bl	800448c <RCC_SetFlashLatencyFromMSIRange>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e1d3      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	0b5b      	lsrs	r3, r3, #13
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c16:	4a87      	ldr	r2, [pc, #540]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003c18:	6892      	ldr	r2, [r2, #8]
 8003c1a:	0912      	lsrs	r2, r2, #4
 8003c1c:	f002 020f 	and.w	r2, r2, #15
 8003c20:	4985      	ldr	r1, [pc, #532]	; (8003e38 <HAL_RCC_OscConfig+0x4d8>)
 8003c22:	5c8a      	ldrb	r2, [r1, r2]
 8003c24:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c26:	4a85      	ldr	r2, [pc, #532]	; (8003e3c <HAL_RCC_OscConfig+0x4dc>)
 8003c28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c2a:	4b85      	ldr	r3, [pc, #532]	; (8003e40 <HAL_RCC_OscConfig+0x4e0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fd ff84 	bl	8001b3c <HAL_InitTick>
 8003c34:	4603      	mov	r3, r0
 8003c36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d045      	beq.n	8003cca <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	e1b5      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d029      	beq.n	8003c9e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c4a:	4b7e      	ldr	r3, [pc, #504]	; (8003e44 <HAL_RCC_OscConfig+0x4e4>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fd ffc0 	bl	8001bd4 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c58:	f7fd ffbc 	bl	8001bd4 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e1a1      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c6a:	4b72      	ldr	r3, [pc, #456]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c76:	4b6f      	ldr	r3, [pc, #444]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	496c      	ldr	r1, [pc, #432]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c88:	4b6a      	ldr	r3, [pc, #424]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	4967      	ldr	r1, [pc, #412]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
 8003c9c:	e015      	b.n	8003cca <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c9e:	4b69      	ldr	r3, [pc, #420]	; (8003e44 <HAL_RCC_OscConfig+0x4e4>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fd ff96 	bl	8001bd4 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cac:	f7fd ff92 	bl	8001bd4 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e177      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003cbe:	4b5d      	ldr	r3, [pc, #372]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d030      	beq.n	8003d38 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d016      	beq.n	8003d0c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cde:	4b5a      	ldr	r3, [pc, #360]	; (8003e48 <HAL_RCC_OscConfig+0x4e8>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce4:	f7fd ff76 	bl	8001bd4 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cec:	f7fd ff72 	bl	8001bd4 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e157      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cfe:	4b4d      	ldr	r3, [pc, #308]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x38c>
 8003d0a:	e015      	b.n	8003d38 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d0c:	4b4e      	ldr	r3, [pc, #312]	; (8003e48 <HAL_RCC_OscConfig+0x4e8>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d12:	f7fd ff5f 	bl	8001bd4 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d1a:	f7fd ff5b 	bl	8001bd4 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e140      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d2c:	4b41      	ldr	r3, [pc, #260]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80b5 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4a:	4b3a      	ldr	r3, [pc, #232]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10d      	bne.n	8003d72 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	4b37      	ldr	r3, [pc, #220]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	4a36      	ldr	r2, [pc, #216]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d60:	6253      	str	r3, [r2, #36]	; 0x24
 8003d62:	4b34      	ldr	r3, [pc, #208]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d72:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <HAL_RCC_OscConfig+0x4ec>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d118      	bne.n	8003db0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d7e:	4b33      	ldr	r3, [pc, #204]	; (8003e4c <HAL_RCC_OscConfig+0x4ec>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a32      	ldr	r2, [pc, #200]	; (8003e4c <HAL_RCC_OscConfig+0x4ec>)
 8003d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8a:	f7fd ff23 	bl	8001bd4 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d92:	f7fd ff1f 	bl	8001bd4 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b64      	cmp	r3, #100	; 0x64
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e104      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da4:	4b29      	ldr	r3, [pc, #164]	; (8003e4c <HAL_RCC_OscConfig+0x4ec>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d106      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x466>
 8003db8:	4b1e      	ldr	r3, [pc, #120]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbc:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc2:	6353      	str	r3, [r2, #52]	; 0x34
 8003dc4:	e02d      	b.n	8003e22 <HAL_RCC_OscConfig+0x4c2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0x488>
 8003dce:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	4a18      	ldr	r2, [pc, #96]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dd8:	6353      	str	r3, [r2, #52]	; 0x34
 8003dda:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dde:	4a15      	ldr	r2, [pc, #84]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003de0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003de4:	6353      	str	r3, [r2, #52]	; 0x34
 8003de6:	e01c      	b.n	8003e22 <HAL_RCC_OscConfig+0x4c2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b05      	cmp	r3, #5
 8003dee:	d10c      	bne.n	8003e0a <HAL_RCC_OscConfig+0x4aa>
 8003df0:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df4:	4a0f      	ldr	r2, [pc, #60]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dfa:	6353      	str	r3, [r2, #52]	; 0x34
 8003dfc:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e00:	4a0c      	ldr	r2, [pc, #48]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e06:	6353      	str	r3, [r2, #52]	; 0x34
 8003e08:	e00b      	b.n	8003e22 <HAL_RCC_OscConfig+0x4c2>
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e14:	6353      	str	r3, [r2, #52]	; 0x34
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	4a06      	ldr	r2, [pc, #24]	; (8003e34 <HAL_RCC_OscConfig+0x4d4>)
 8003e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e20:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d024      	beq.n	8003e74 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2a:	f7fd fed3 	bl	8001bd4 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e30:	e019      	b.n	8003e66 <HAL_RCC_OscConfig+0x506>
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
 8003e38:	080076e8 	.word	0x080076e8
 8003e3c:	20000000 	.word	0x20000000
 8003e40:	20000004 	.word	0x20000004
 8003e44:	42470020 	.word	0x42470020
 8003e48:	42470680 	.word	0x42470680
 8003e4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e50:	f7fd fec0 	bl	8001bd4 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e0a3      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e66:	4b54      	ldr	r3, [pc, #336]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0ee      	beq.n	8003e50 <HAL_RCC_OscConfig+0x4f0>
 8003e72:	e014      	b.n	8003e9e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e74:	f7fd feae 	bl	8001bd4 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7c:	f7fd feaa 	bl	8001bd4 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e08d      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e92:	4b49      	ldr	r3, [pc, #292]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1ee      	bne.n	8003e7c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d105      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea4:	4b44      	ldr	r3, [pc, #272]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	4a43      	ldr	r2, [pc, #268]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eae:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d079      	beq.n	8003fac <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b0c      	cmp	r3, #12
 8003ebc:	d056      	beq.n	8003f6c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d13b      	bne.n	8003f3e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec6:	4b3d      	ldr	r3, [pc, #244]	; (8003fbc <HAL_RCC_OscConfig+0x65c>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ecc:	f7fd fe82 	bl	8001bd4 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fd fe7e 	bl	8001bd4 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e063      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ee6:	4b34      	ldr	r3, [pc, #208]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef2:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	4319      	orrs	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	492b      	ldr	r1, [pc, #172]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f10:	4b2a      	ldr	r3, [pc, #168]	; (8003fbc <HAL_RCC_OscConfig+0x65c>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f16:	f7fd fe5d 	bl	8001bd4 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1e:	f7fd fe59 	bl	8001bd4 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e03e      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f30:	4b21      	ldr	r3, [pc, #132]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x5be>
 8003f3c:	e036      	b.n	8003fac <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3e:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <HAL_RCC_OscConfig+0x65c>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fd fe46 	bl	8001bd4 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fd fe42 	bl	8001bd4 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e027      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f5e:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x5ec>
 8003f6a:	e01f      	b.n	8003fac <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e01a      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f78:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <HAL_RCC_OscConfig+0x658>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d10d      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d106      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3720      	adds	r7, #32
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	42470060 	.word	0x42470060

08003fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e11a      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd4:	4b8f      	ldr	r3, [pc, #572]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d919      	bls.n	8004016 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d105      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0x34>
 8003fe8:	4b8a      	ldr	r3, [pc, #552]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a89      	ldr	r2, [pc, #548]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8003fee:	f043 0304 	orr.w	r3, r3, #4
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	4b87      	ldr	r3, [pc, #540]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f023 0201 	bic.w	r2, r3, #1
 8003ffc:	4985      	ldr	r1, [pc, #532]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	4313      	orrs	r3, r2
 8004002:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004004:	4b83      	ldr	r3, [pc, #524]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d001      	beq.n	8004016 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e0f9      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004022:	4b7d      	ldr	r3, [pc, #500]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	497a      	ldr	r1, [pc, #488]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 8004030:	4313      	orrs	r3, r2
 8004032:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 808e 	beq.w	800415e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800404a:	4b73      	ldr	r3, [pc, #460]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d121      	bne.n	800409a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e0d7      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b03      	cmp	r3, #3
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004062:	4b6d      	ldr	r3, [pc, #436]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d115      	bne.n	800409a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e0cb      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d107      	bne.n	800408a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800407a:	4b67      	ldr	r3, [pc, #412]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0bf      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800408a:	4b63      	ldr	r3, [pc, #396]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e0b7      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800409a:	4b5f      	ldr	r3, [pc, #380]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f023 0203 	bic.w	r2, r3, #3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	495c      	ldr	r1, [pc, #368]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040ac:	f7fd fd92 	bl	8001bd4 <HAL_GetTick>
 80040b0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d112      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040ba:	e00a      	b.n	80040d2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040bc:	f7fd fd8a 	bl	8001bd4 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e09b      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040d2:	4b51      	ldr	r3, [pc, #324]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d1ee      	bne.n	80040bc <HAL_RCC_ClockConfig+0xfc>
 80040de:	e03e      	b.n	800415e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d112      	bne.n	800410e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040e8:	e00a      	b.n	8004100 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ea:	f7fd fd73 	bl	8001bd4 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e084      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004100:	4b45      	ldr	r3, [pc, #276]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b0c      	cmp	r3, #12
 800410a:	d1ee      	bne.n	80040ea <HAL_RCC_ClockConfig+0x12a>
 800410c:	e027      	b.n	800415e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d11d      	bne.n	8004152 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004116:	e00a      	b.n	800412e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004118:	f7fd fd5c 	bl	8001bd4 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e06d      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800412e:	4b3a      	ldr	r3, [pc, #232]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	2b04      	cmp	r3, #4
 8004138:	d1ee      	bne.n	8004118 <HAL_RCC_ClockConfig+0x158>
 800413a:	e010      	b.n	800415e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413c:	f7fd fd4a 	bl	8001bd4 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	; 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e05b      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004152:	4b31      	ldr	r3, [pc, #196]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1ee      	bne.n	800413c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800415e:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d219      	bcs.n	80041a0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d105      	bne.n	800417e <HAL_RCC_ClockConfig+0x1be>
 8004172:	4b28      	ldr	r3, [pc, #160]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a27      	ldr	r2, [pc, #156]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8004178:	f043 0304 	orr.w	r3, r3, #4
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	4b25      	ldr	r3, [pc, #148]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 0201 	bic.w	r2, r3, #1
 8004186:	4923      	ldr	r1, [pc, #140]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	4313      	orrs	r3, r2
 800418c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b21      	ldr	r3, [pc, #132]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e034      	b.n	800420a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041ac:	4b1a      	ldr	r3, [pc, #104]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4917      	ldr	r1, [pc, #92]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ca:	4b13      	ldr	r3, [pc, #76]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	490f      	ldr	r1, [pc, #60]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041de:	f000 f823 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 80041e2:	4602      	mov	r2, r0
 80041e4:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <HAL_RCC_ClockConfig+0x258>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	490b      	ldr	r1, [pc, #44]	; (800421c <HAL_RCC_ClockConfig+0x25c>)
 80041f0:	5ccb      	ldrb	r3, [r1, r3]
 80041f2:	fa22 f303 	lsr.w	r3, r2, r3
 80041f6:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <HAL_RCC_ClockConfig+0x260>)
 80041f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <HAL_RCC_ClockConfig+0x264>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fd fc9c 	bl	8001b3c <HAL_InitTick>
 8004204:	4603      	mov	r3, r0
 8004206:	72fb      	strb	r3, [r7, #11]

  return status;
 8004208:	7afb      	ldrb	r3, [r7, #11]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40023c00 	.word	0x40023c00
 8004218:	40023800 	.word	0x40023800
 800421c:	080076e8 	.word	0x080076e8
 8004220:	20000000 	.word	0x20000000
 8004224:	20000004 	.word	0x20000004

08004228 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800422c:	b092      	sub	sp, #72	; 0x48
 800422e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004230:	4b79      	ldr	r3, [pc, #484]	; (8004418 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	2b0c      	cmp	r3, #12
 800423e:	d00d      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x34>
 8004240:	2b0c      	cmp	r3, #12
 8004242:	f200 80d5 	bhi.w	80043f0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8004246:	2b04      	cmp	r3, #4
 8004248:	d002      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0x28>
 800424a:	2b08      	cmp	r3, #8
 800424c:	d003      	beq.n	8004256 <HAL_RCC_GetSysClockFreq+0x2e>
 800424e:	e0cf      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004250:	4b72      	ldr	r3, [pc, #456]	; (800441c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004252:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004254:	e0da      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004256:	4b72      	ldr	r3, [pc, #456]	; (8004420 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004258:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800425a:	e0d7      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800425c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425e:	0c9b      	lsrs	r3, r3, #18
 8004260:	f003 020f 	and.w	r2, r3, #15
 8004264:	4b6f      	ldr	r3, [pc, #444]	; (8004424 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004266:	5c9b      	ldrb	r3, [r3, r2]
 8004268:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800426a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800426c:	0d9b      	lsrs	r3, r3, #22
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	3301      	adds	r3, #1
 8004274:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004276:	4b68      	ldr	r3, [pc, #416]	; (8004418 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d05d      	beq.n	800433e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004284:	2200      	movs	r2, #0
 8004286:	4618      	mov	r0, r3
 8004288:	4611      	mov	r1, r2
 800428a:	4604      	mov	r4, r0
 800428c:	460d      	mov	r5, r1
 800428e:	4622      	mov	r2, r4
 8004290:	462b      	mov	r3, r5
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	0159      	lsls	r1, r3, #5
 800429c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042a0:	0150      	lsls	r0, r2, #5
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4621      	mov	r1, r4
 80042a8:	1a51      	subs	r1, r2, r1
 80042aa:	6139      	str	r1, [r7, #16]
 80042ac:	4629      	mov	r1, r5
 80042ae:	eb63 0301 	sbc.w	r3, r3, r1
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042c0:	4659      	mov	r1, fp
 80042c2:	018b      	lsls	r3, r1, #6
 80042c4:	4651      	mov	r1, sl
 80042c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ca:	4651      	mov	r1, sl
 80042cc:	018a      	lsls	r2, r1, #6
 80042ce:	46d4      	mov	ip, sl
 80042d0:	ebb2 080c 	subs.w	r8, r2, ip
 80042d4:	4659      	mov	r1, fp
 80042d6:	eb63 0901 	sbc.w	r9, r3, r1
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ee:	4690      	mov	r8, r2
 80042f0:	4699      	mov	r9, r3
 80042f2:	4623      	mov	r3, r4
 80042f4:	eb18 0303 	adds.w	r3, r8, r3
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	462b      	mov	r3, r5
 80042fc:	eb49 0303 	adc.w	r3, r9, r3
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800430e:	4629      	mov	r1, r5
 8004310:	024b      	lsls	r3, r1, #9
 8004312:	4620      	mov	r0, r4
 8004314:	4629      	mov	r1, r5
 8004316:	4604      	mov	r4, r0
 8004318:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800431c:	4601      	mov	r1, r0
 800431e:	024a      	lsls	r2, r1, #9
 8004320:	4610      	mov	r0, r2
 8004322:	4619      	mov	r1, r3
 8004324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004326:	2200      	movs	r2, #0
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28
 800432a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800432c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004330:	f7fc fe20 	bl	8000f74 <__aeabi_uldivmod>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4613      	mov	r3, r2
 800433a:	647b      	str	r3, [r7, #68]	; 0x44
 800433c:	e055      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	2200      	movs	r2, #0
 8004342:	623b      	str	r3, [r7, #32]
 8004344:	627a      	str	r2, [r7, #36]	; 0x24
 8004346:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800434a:	4642      	mov	r2, r8
 800434c:	464b      	mov	r3, r9
 800434e:	f04f 0000 	mov.w	r0, #0
 8004352:	f04f 0100 	mov.w	r1, #0
 8004356:	0159      	lsls	r1, r3, #5
 8004358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800435c:	0150      	lsls	r0, r2, #5
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	46c4      	mov	ip, r8
 8004364:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004368:	4640      	mov	r0, r8
 800436a:	4649      	mov	r1, r9
 800436c:	468c      	mov	ip, r1
 800436e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800437e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004382:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004386:	ebb2 040a 	subs.w	r4, r2, sl
 800438a:	eb63 050b 	sbc.w	r5, r3, fp
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	00eb      	lsls	r3, r5, #3
 8004398:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800439c:	00e2      	lsls	r2, r4, #3
 800439e:	4614      	mov	r4, r2
 80043a0:	461d      	mov	r5, r3
 80043a2:	4603      	mov	r3, r0
 80043a4:	18e3      	adds	r3, r4, r3
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	460b      	mov	r3, r1
 80043aa:	eb45 0303 	adc.w	r3, r5, r3
 80043ae:	607b      	str	r3, [r7, #4]
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043bc:	4629      	mov	r1, r5
 80043be:	028b      	lsls	r3, r1, #10
 80043c0:	4620      	mov	r0, r4
 80043c2:	4629      	mov	r1, r5
 80043c4:	4604      	mov	r4, r0
 80043c6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80043ca:	4601      	mov	r1, r0
 80043cc:	028a      	lsls	r2, r1, #10
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d4:	2200      	movs	r2, #0
 80043d6:	61bb      	str	r3, [r7, #24]
 80043d8:	61fa      	str	r2, [r7, #28]
 80043da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043de:	f7fc fdc9 	bl	8000f74 <__aeabi_uldivmod>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4613      	mov	r3, r2
 80043e8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80043ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ec:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80043ee:	e00d      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	0b5b      	lsrs	r3, r3, #13
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	3301      	adds	r3, #1
 8004400:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800440a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800440c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800440e:	4618      	mov	r0, r3
 8004410:	3748      	adds	r7, #72	; 0x48
 8004412:	46bd      	mov	sp, r7
 8004414:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004418:	40023800 	.word	0x40023800
 800441c:	00f42400 	.word	0x00f42400
 8004420:	007a1200 	.word	0x007a1200
 8004424:	080076dc 	.word	0x080076dc

08004428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800442c:	4b02      	ldr	r3, [pc, #8]	; (8004438 <HAL_RCC_GetHCLKFreq+0x10>)
 800442e:	681b      	ldr	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr
 8004438:	20000000 	.word	0x20000000

0800443c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004440:	f7ff fff2 	bl	8004428 <HAL_RCC_GetHCLKFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	0a1b      	lsrs	r3, r3, #8
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	4903      	ldr	r1, [pc, #12]	; (8004460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40023800 	.word	0x40023800
 8004460:	080076f8 	.word	0x080076f8

08004464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004468:	f7ff ffde 	bl	8004428 <HAL_RCC_GetHCLKFreq>
 800446c:	4602      	mov	r2, r0
 800446e:	4b05      	ldr	r3, [pc, #20]	; (8004484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	0adb      	lsrs	r3, r3, #11
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	4903      	ldr	r1, [pc, #12]	; (8004488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800447a:	5ccb      	ldrb	r3, [r1, r3]
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004480:	4618      	mov	r0, r3
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40023800 	.word	0x40023800
 8004488:	080076f8 	.word	0x080076f8

0800448c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004494:	2300      	movs	r3, #0
 8004496:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004498:	4b29      	ldr	r3, [pc, #164]	; (8004540 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d12c      	bne.n	80044fe <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044a4:	4b26      	ldr	r3, [pc, #152]	; (8004540 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80044b0:	4b24      	ldr	r3, [pc, #144]	; (8004544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80044b8:	617b      	str	r3, [r7, #20]
 80044ba:	e016      	b.n	80044ea <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044bc:	4b20      	ldr	r3, [pc, #128]	; (8004540 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	4a1f      	ldr	r2, [pc, #124]	; (8004540 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80044c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c6:	6253      	str	r3, [r2, #36]	; 0x24
 80044c8:	4b1d      	ldr	r3, [pc, #116]	; (8004540 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80044d4:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80044dc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80044de:	4b18      	ldr	r3, [pc, #96]	; (8004540 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	4a17      	ldr	r2, [pc, #92]	; (8004540 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80044e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80044f0:	d105      	bne.n	80044fe <RCC_SetFlashLatencyFromMSIRange+0x72>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044f8:	d101      	bne.n	80044fe <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80044fa:	2301      	movs	r3, #1
 80044fc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d105      	bne.n	8004510 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004504:	4b10      	ldr	r3, [pc, #64]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a0f      	ldr	r2, [pc, #60]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800450a:	f043 0304 	orr.w	r3, r3, #4
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f023 0201 	bic.w	r2, r3, #1
 8004518:	490b      	ldr	r1, [pc, #44]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004520:	4b09      	ldr	r3, [pc, #36]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	429a      	cmp	r2, r3
 800452c:	d001      	beq.n	8004532 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	371c      	adds	r7, #28
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800
 8004544:	40007000 	.word	0x40007000
 8004548:	40023c00 	.word	0x40023c00

0800454c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e042      	b.n	80045e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fd f848 	bl	8001608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2224      	movs	r2, #36	; 0x24
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800458e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f91d 	bl	80047d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695a      	ldr	r2, [r3, #20]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08a      	sub	sp, #40	; 0x28
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b20      	cmp	r3, #32
 800460a:	d16d      	bne.n	80046e8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_UART_Transmit+0x2c>
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e066      	b.n	80046ea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2221      	movs	r2, #33	; 0x21
 8004626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800462a:	f7fd fad3 	bl	8001bd4 <HAL_GetTick>
 800462e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	88fa      	ldrh	r2, [r7, #6]
 8004634:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	88fa      	ldrh	r2, [r7, #6]
 800463a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004644:	d108      	bne.n	8004658 <HAL_UART_Transmit+0x6c>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d104      	bne.n	8004658 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	61bb      	str	r3, [r7, #24]
 8004656:	e003      	b.n	8004660 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800465c:	2300      	movs	r3, #0
 800465e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004660:	e02a      	b.n	80046b8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2200      	movs	r2, #0
 800466a:	2180      	movs	r1, #128	; 0x80
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f840 	bl	80046f2 <UART_WaitOnFlagUntilTimeout>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e036      	b.n	80046ea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10b      	bne.n	800469a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004690:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	3302      	adds	r3, #2
 8004696:	61bb      	str	r3, [r7, #24]
 8004698:	e007      	b.n	80046aa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	781a      	ldrb	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	3301      	adds	r3, #1
 80046a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1cf      	bne.n	8004662 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2200      	movs	r2, #0
 80046ca:	2140      	movs	r1, #64	; 0x40
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f810 	bl	80046f2 <UART_WaitOnFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e006      	b.n	80046ea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	e000      	b.n	80046ea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80046e8:	2302      	movs	r3, #2
  }
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b090      	sub	sp, #64	; 0x40
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	603b      	str	r3, [r7, #0]
 80046fe:	4613      	mov	r3, r2
 8004700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004702:	e050      	b.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800470a:	d04c      	beq.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800470c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0x30>
 8004712:	f7fd fa5f 	bl	8001bd4 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800471e:	429a      	cmp	r2, r3
 8004720:	d241      	bcs.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004742:	637a      	str	r2, [r7, #52]	; 0x34
 8004744:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e5      	bne.n	8004722 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3314      	adds	r3, #20
 800475c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	613b      	str	r3, [r7, #16]
   return(result);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	63bb      	str	r3, [r7, #56]	; 0x38
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3314      	adds	r3, #20
 8004774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004776:	623a      	str	r2, [r7, #32]
 8004778:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	69f9      	ldr	r1, [r7, #28]
 800477c:	6a3a      	ldr	r2, [r7, #32]
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	61bb      	str	r3, [r7, #24]
   return(result);
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e5      	bne.n	8004756 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e00f      	b.n	80047c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4013      	ands	r3, r2
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	bf0c      	ite	eq
 80047b6:	2301      	moveq	r3, #1
 80047b8:	2300      	movne	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d09f      	beq.n	8004704 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3740      	adds	r7, #64	; 0x40
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	4313      	orrs	r3, r2
 8004804:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004810:	f023 030c 	bic.w	r3, r3, #12
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	430b      	orrs	r3, r1
 800481c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a55      	ldr	r2, [pc, #340]	; (8004990 <UART_SetConfig+0x1c0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d103      	bne.n	8004846 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800483e:	f7ff fe11 	bl	8004464 <HAL_RCC_GetPCLK2Freq>
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	e002      	b.n	800484c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004846:	f7ff fdf9 	bl	800443c <HAL_RCC_GetPCLK1Freq>
 800484a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004854:	d14c      	bne.n	80048f0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	009a      	lsls	r2, r3, #2
 8004860:	441a      	add	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	4a49      	ldr	r2, [pc, #292]	; (8004994 <UART_SetConfig+0x1c4>)
 800486e:	fba2 2303 	umull	r2, r3, r2, r3
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	0119      	lsls	r1, r3, #4
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	009a      	lsls	r2, r3, #2
 8004880:	441a      	add	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	fbb2 f2f3 	udiv	r2, r2, r3
 800488c:	4b41      	ldr	r3, [pc, #260]	; (8004994 <UART_SetConfig+0x1c4>)
 800488e:	fba3 0302 	umull	r0, r3, r3, r2
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	2064      	movs	r0, #100	; 0x64
 8004896:	fb00 f303 	mul.w	r3, r0, r3
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	3332      	adds	r3, #50	; 0x32
 80048a0:	4a3c      	ldr	r2, [pc, #240]	; (8004994 <UART_SetConfig+0x1c4>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048ae:	4419      	add	r1, r3
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009a      	lsls	r2, r3, #2
 80048ba:	441a      	add	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80048c6:	4b33      	ldr	r3, [pc, #204]	; (8004994 <UART_SetConfig+0x1c4>)
 80048c8:	fba3 0302 	umull	r0, r3, r3, r2
 80048cc:	095b      	lsrs	r3, r3, #5
 80048ce:	2064      	movs	r0, #100	; 0x64
 80048d0:	fb00 f303 	mul.w	r3, r0, r3
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	3332      	adds	r3, #50	; 0x32
 80048da:	4a2e      	ldr	r2, [pc, #184]	; (8004994 <UART_SetConfig+0x1c4>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	f003 0207 	and.w	r2, r3, #7
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	440a      	add	r2, r1
 80048ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048ee:	e04a      	b.n	8004986 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	009a      	lsls	r2, r3, #2
 80048fa:	441a      	add	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	fbb2 f3f3 	udiv	r3, r2, r3
 8004906:	4a23      	ldr	r2, [pc, #140]	; (8004994 <UART_SetConfig+0x1c4>)
 8004908:	fba2 2303 	umull	r2, r3, r2, r3
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	0119      	lsls	r1, r3, #4
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	009a      	lsls	r2, r3, #2
 800491a:	441a      	add	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	fbb2 f2f3 	udiv	r2, r2, r3
 8004926:	4b1b      	ldr	r3, [pc, #108]	; (8004994 <UART_SetConfig+0x1c4>)
 8004928:	fba3 0302 	umull	r0, r3, r3, r2
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	2064      	movs	r0, #100	; 0x64
 8004930:	fb00 f303 	mul.w	r3, r0, r3
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	3332      	adds	r3, #50	; 0x32
 800493a:	4a16      	ldr	r2, [pc, #88]	; (8004994 <UART_SetConfig+0x1c4>)
 800493c:	fba2 2303 	umull	r2, r3, r2, r3
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004946:	4419      	add	r1, r3
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	009a      	lsls	r2, r3, #2
 8004952:	441a      	add	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	fbb2 f2f3 	udiv	r2, r2, r3
 800495e:	4b0d      	ldr	r3, [pc, #52]	; (8004994 <UART_SetConfig+0x1c4>)
 8004960:	fba3 0302 	umull	r0, r3, r3, r2
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	2064      	movs	r0, #100	; 0x64
 8004968:	fb00 f303 	mul.w	r3, r0, r3
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	3332      	adds	r3, #50	; 0x32
 8004972:	4a08      	ldr	r2, [pc, #32]	; (8004994 <UART_SetConfig+0x1c4>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	f003 020f 	and.w	r2, r3, #15
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	440a      	add	r2, r1
 8004984:	609a      	str	r2, [r3, #8]
}
 8004986:	bf00      	nop
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40013800 	.word	0x40013800
 8004994:	51eb851f 	.word	0x51eb851f

08004998 <__assert_func>:
 8004998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800499a:	4614      	mov	r4, r2
 800499c:	461a      	mov	r2, r3
 800499e:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <__assert_func+0x2c>)
 80049a0:	4605      	mov	r5, r0
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68d8      	ldr	r0, [r3, #12]
 80049a6:	b14c      	cbz	r4, 80049bc <__assert_func+0x24>
 80049a8:	4b07      	ldr	r3, [pc, #28]	; (80049c8 <__assert_func+0x30>)
 80049aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80049ae:	9100      	str	r1, [sp, #0]
 80049b0:	462b      	mov	r3, r5
 80049b2:	4906      	ldr	r1, [pc, #24]	; (80049cc <__assert_func+0x34>)
 80049b4:	f000 f814 	bl	80049e0 <fiprintf>
 80049b8:	f000 ff6a 	bl	8005890 <abort>
 80049bc:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <__assert_func+0x38>)
 80049be:	461c      	mov	r4, r3
 80049c0:	e7f3      	b.n	80049aa <__assert_func+0x12>
 80049c2:	bf00      	nop
 80049c4:	2000000c 	.word	0x2000000c
 80049c8:	0800770b 	.word	0x0800770b
 80049cc:	08007718 	.word	0x08007718
 80049d0:	08007746 	.word	0x08007746

080049d4 <__errno>:
 80049d4:	4b01      	ldr	r3, [pc, #4]	; (80049dc <__errno+0x8>)
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	2000000c 	.word	0x2000000c

080049e0 <fiprintf>:
 80049e0:	b40e      	push	{r1, r2, r3}
 80049e2:	b503      	push	{r0, r1, lr}
 80049e4:	4601      	mov	r1, r0
 80049e6:	ab03      	add	r3, sp, #12
 80049e8:	4805      	ldr	r0, [pc, #20]	; (8004a00 <fiprintf+0x20>)
 80049ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ee:	6800      	ldr	r0, [r0, #0]
 80049f0:	9301      	str	r3, [sp, #4]
 80049f2:	f000 f85b 	bl	8004aac <_vfiprintf_r>
 80049f6:	b002      	add	sp, #8
 80049f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80049fc:	b003      	add	sp, #12
 80049fe:	4770      	bx	lr
 8004a00:	2000000c 	.word	0x2000000c

08004a04 <__libc_init_array>:
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	2600      	movs	r6, #0
 8004a08:	4d0c      	ldr	r5, [pc, #48]	; (8004a3c <__libc_init_array+0x38>)
 8004a0a:	4c0d      	ldr	r4, [pc, #52]	; (8004a40 <__libc_init_array+0x3c>)
 8004a0c:	1b64      	subs	r4, r4, r5
 8004a0e:	10a4      	asrs	r4, r4, #2
 8004a10:	42a6      	cmp	r6, r4
 8004a12:	d109      	bne.n	8004a28 <__libc_init_array+0x24>
 8004a14:	f002 fde8 	bl	80075e8 <_init>
 8004a18:	2600      	movs	r6, #0
 8004a1a:	4d0a      	ldr	r5, [pc, #40]	; (8004a44 <__libc_init_array+0x40>)
 8004a1c:	4c0a      	ldr	r4, [pc, #40]	; (8004a48 <__libc_init_array+0x44>)
 8004a1e:	1b64      	subs	r4, r4, r5
 8004a20:	10a4      	asrs	r4, r4, #2
 8004a22:	42a6      	cmp	r6, r4
 8004a24:	d105      	bne.n	8004a32 <__libc_init_array+0x2e>
 8004a26:	bd70      	pop	{r4, r5, r6, pc}
 8004a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a2c:	4798      	blx	r3
 8004a2e:	3601      	adds	r6, #1
 8004a30:	e7ee      	b.n	8004a10 <__libc_init_array+0xc>
 8004a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a36:	4798      	blx	r3
 8004a38:	3601      	adds	r6, #1
 8004a3a:	e7f2      	b.n	8004a22 <__libc_init_array+0x1e>
 8004a3c:	08007af0 	.word	0x08007af0
 8004a40:	08007af0 	.word	0x08007af0
 8004a44:	08007af0 	.word	0x08007af0
 8004a48:	08007af4 	.word	0x08007af4

08004a4c <memset>:
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	4402      	add	r2, r0
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d100      	bne.n	8004a56 <memset+0xa>
 8004a54:	4770      	bx	lr
 8004a56:	f803 1b01 	strb.w	r1, [r3], #1
 8004a5a:	e7f9      	b.n	8004a50 <memset+0x4>

08004a5c <__sfputc_r>:
 8004a5c:	6893      	ldr	r3, [r2, #8]
 8004a5e:	b410      	push	{r4}
 8004a60:	3b01      	subs	r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	6093      	str	r3, [r2, #8]
 8004a66:	da07      	bge.n	8004a78 <__sfputc_r+0x1c>
 8004a68:	6994      	ldr	r4, [r2, #24]
 8004a6a:	42a3      	cmp	r3, r4
 8004a6c:	db01      	blt.n	8004a72 <__sfputc_r+0x16>
 8004a6e:	290a      	cmp	r1, #10
 8004a70:	d102      	bne.n	8004a78 <__sfputc_r+0x1c>
 8004a72:	bc10      	pop	{r4}
 8004a74:	f000 be4c 	b.w	8005710 <__swbuf_r>
 8004a78:	6813      	ldr	r3, [r2, #0]
 8004a7a:	1c58      	adds	r0, r3, #1
 8004a7c:	6010      	str	r0, [r2, #0]
 8004a7e:	7019      	strb	r1, [r3, #0]
 8004a80:	4608      	mov	r0, r1
 8004a82:	bc10      	pop	{r4}
 8004a84:	4770      	bx	lr

08004a86 <__sfputs_r>:
 8004a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a88:	4606      	mov	r6, r0
 8004a8a:	460f      	mov	r7, r1
 8004a8c:	4614      	mov	r4, r2
 8004a8e:	18d5      	adds	r5, r2, r3
 8004a90:	42ac      	cmp	r4, r5
 8004a92:	d101      	bne.n	8004a98 <__sfputs_r+0x12>
 8004a94:	2000      	movs	r0, #0
 8004a96:	e007      	b.n	8004aa8 <__sfputs_r+0x22>
 8004a98:	463a      	mov	r2, r7
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa0:	f7ff ffdc 	bl	8004a5c <__sfputc_r>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	d1f3      	bne.n	8004a90 <__sfputs_r+0xa>
 8004aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004aac <_vfiprintf_r>:
 8004aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab0:	460d      	mov	r5, r1
 8004ab2:	4614      	mov	r4, r2
 8004ab4:	4698      	mov	r8, r3
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	b09d      	sub	sp, #116	; 0x74
 8004aba:	b118      	cbz	r0, 8004ac4 <_vfiprintf_r+0x18>
 8004abc:	6983      	ldr	r3, [r0, #24]
 8004abe:	b90b      	cbnz	r3, 8004ac4 <_vfiprintf_r+0x18>
 8004ac0:	f001 fe7e 	bl	80067c0 <__sinit>
 8004ac4:	4b89      	ldr	r3, [pc, #548]	; (8004cec <_vfiprintf_r+0x240>)
 8004ac6:	429d      	cmp	r5, r3
 8004ac8:	d11b      	bne.n	8004b02 <_vfiprintf_r+0x56>
 8004aca:	6875      	ldr	r5, [r6, #4]
 8004acc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ace:	07d9      	lsls	r1, r3, #31
 8004ad0:	d405      	bmi.n	8004ade <_vfiprintf_r+0x32>
 8004ad2:	89ab      	ldrh	r3, [r5, #12]
 8004ad4:	059a      	lsls	r2, r3, #22
 8004ad6:	d402      	bmi.n	8004ade <_vfiprintf_r+0x32>
 8004ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ada:	f001 ff14 	bl	8006906 <__retarget_lock_acquire_recursive>
 8004ade:	89ab      	ldrh	r3, [r5, #12]
 8004ae0:	071b      	lsls	r3, r3, #28
 8004ae2:	d501      	bpl.n	8004ae8 <_vfiprintf_r+0x3c>
 8004ae4:	692b      	ldr	r3, [r5, #16]
 8004ae6:	b9eb      	cbnz	r3, 8004b24 <_vfiprintf_r+0x78>
 8004ae8:	4629      	mov	r1, r5
 8004aea:	4630      	mov	r0, r6
 8004aec:	f000 fe62 	bl	80057b4 <__swsetup_r>
 8004af0:	b1c0      	cbz	r0, 8004b24 <_vfiprintf_r+0x78>
 8004af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004af4:	07dc      	lsls	r4, r3, #31
 8004af6:	d50e      	bpl.n	8004b16 <_vfiprintf_r+0x6a>
 8004af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004afc:	b01d      	add	sp, #116	; 0x74
 8004afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b02:	4b7b      	ldr	r3, [pc, #492]	; (8004cf0 <_vfiprintf_r+0x244>)
 8004b04:	429d      	cmp	r5, r3
 8004b06:	d101      	bne.n	8004b0c <_vfiprintf_r+0x60>
 8004b08:	68b5      	ldr	r5, [r6, #8]
 8004b0a:	e7df      	b.n	8004acc <_vfiprintf_r+0x20>
 8004b0c:	4b79      	ldr	r3, [pc, #484]	; (8004cf4 <_vfiprintf_r+0x248>)
 8004b0e:	429d      	cmp	r5, r3
 8004b10:	bf08      	it	eq
 8004b12:	68f5      	ldreq	r5, [r6, #12]
 8004b14:	e7da      	b.n	8004acc <_vfiprintf_r+0x20>
 8004b16:	89ab      	ldrh	r3, [r5, #12]
 8004b18:	0598      	lsls	r0, r3, #22
 8004b1a:	d4ed      	bmi.n	8004af8 <_vfiprintf_r+0x4c>
 8004b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b1e:	f001 fef3 	bl	8006908 <__retarget_lock_release_recursive>
 8004b22:	e7e9      	b.n	8004af8 <_vfiprintf_r+0x4c>
 8004b24:	2300      	movs	r3, #0
 8004b26:	9309      	str	r3, [sp, #36]	; 0x24
 8004b28:	2320      	movs	r3, #32
 8004b2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b2e:	2330      	movs	r3, #48	; 0x30
 8004b30:	f04f 0901 	mov.w	r9, #1
 8004b34:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b38:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004cf8 <_vfiprintf_r+0x24c>
 8004b3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b40:	4623      	mov	r3, r4
 8004b42:	469a      	mov	sl, r3
 8004b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b48:	b10a      	cbz	r2, 8004b4e <_vfiprintf_r+0xa2>
 8004b4a:	2a25      	cmp	r2, #37	; 0x25
 8004b4c:	d1f9      	bne.n	8004b42 <_vfiprintf_r+0x96>
 8004b4e:	ebba 0b04 	subs.w	fp, sl, r4
 8004b52:	d00b      	beq.n	8004b6c <_vfiprintf_r+0xc0>
 8004b54:	465b      	mov	r3, fp
 8004b56:	4622      	mov	r2, r4
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	f7ff ff93 	bl	8004a86 <__sfputs_r>
 8004b60:	3001      	adds	r0, #1
 8004b62:	f000 80aa 	beq.w	8004cba <_vfiprintf_r+0x20e>
 8004b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b68:	445a      	add	r2, fp
 8004b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8004b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80a2 	beq.w	8004cba <_vfiprintf_r+0x20e>
 8004b76:	2300      	movs	r3, #0
 8004b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b80:	f10a 0a01 	add.w	sl, sl, #1
 8004b84:	9304      	str	r3, [sp, #16]
 8004b86:	9307      	str	r3, [sp, #28]
 8004b88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b8c:	931a      	str	r3, [sp, #104]	; 0x68
 8004b8e:	4654      	mov	r4, sl
 8004b90:	2205      	movs	r2, #5
 8004b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b96:	4858      	ldr	r0, [pc, #352]	; (8004cf8 <_vfiprintf_r+0x24c>)
 8004b98:	f001 ff24 	bl	80069e4 <memchr>
 8004b9c:	9a04      	ldr	r2, [sp, #16]
 8004b9e:	b9d8      	cbnz	r0, 8004bd8 <_vfiprintf_r+0x12c>
 8004ba0:	06d1      	lsls	r1, r2, #27
 8004ba2:	bf44      	itt	mi
 8004ba4:	2320      	movmi	r3, #32
 8004ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004baa:	0713      	lsls	r3, r2, #28
 8004bac:	bf44      	itt	mi
 8004bae:	232b      	movmi	r3, #43	; 0x2b
 8004bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004bba:	d015      	beq.n	8004be8 <_vfiprintf_r+0x13c>
 8004bbc:	4654      	mov	r4, sl
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	f04f 0c0a 	mov.w	ip, #10
 8004bc4:	9a07      	ldr	r2, [sp, #28]
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bcc:	3b30      	subs	r3, #48	; 0x30
 8004bce:	2b09      	cmp	r3, #9
 8004bd0:	d94e      	bls.n	8004c70 <_vfiprintf_r+0x1c4>
 8004bd2:	b1b0      	cbz	r0, 8004c02 <_vfiprintf_r+0x156>
 8004bd4:	9207      	str	r2, [sp, #28]
 8004bd6:	e014      	b.n	8004c02 <_vfiprintf_r+0x156>
 8004bd8:	eba0 0308 	sub.w	r3, r0, r8
 8004bdc:	fa09 f303 	lsl.w	r3, r9, r3
 8004be0:	4313      	orrs	r3, r2
 8004be2:	46a2      	mov	sl, r4
 8004be4:	9304      	str	r3, [sp, #16]
 8004be6:	e7d2      	b.n	8004b8e <_vfiprintf_r+0xe2>
 8004be8:	9b03      	ldr	r3, [sp, #12]
 8004bea:	1d19      	adds	r1, r3, #4
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	9103      	str	r1, [sp, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	bfbb      	ittet	lt
 8004bf4:	425b      	neglt	r3, r3
 8004bf6:	f042 0202 	orrlt.w	r2, r2, #2
 8004bfa:	9307      	strge	r3, [sp, #28]
 8004bfc:	9307      	strlt	r3, [sp, #28]
 8004bfe:	bfb8      	it	lt
 8004c00:	9204      	strlt	r2, [sp, #16]
 8004c02:	7823      	ldrb	r3, [r4, #0]
 8004c04:	2b2e      	cmp	r3, #46	; 0x2e
 8004c06:	d10c      	bne.n	8004c22 <_vfiprintf_r+0x176>
 8004c08:	7863      	ldrb	r3, [r4, #1]
 8004c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c0c:	d135      	bne.n	8004c7a <_vfiprintf_r+0x1ce>
 8004c0e:	9b03      	ldr	r3, [sp, #12]
 8004c10:	3402      	adds	r4, #2
 8004c12:	1d1a      	adds	r2, r3, #4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	9203      	str	r2, [sp, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bfb8      	it	lt
 8004c1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c20:	9305      	str	r3, [sp, #20]
 8004c22:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004cfc <_vfiprintf_r+0x250>
 8004c26:	2203      	movs	r2, #3
 8004c28:	4650      	mov	r0, sl
 8004c2a:	7821      	ldrb	r1, [r4, #0]
 8004c2c:	f001 feda 	bl	80069e4 <memchr>
 8004c30:	b140      	cbz	r0, 8004c44 <_vfiprintf_r+0x198>
 8004c32:	2340      	movs	r3, #64	; 0x40
 8004c34:	eba0 000a 	sub.w	r0, r0, sl
 8004c38:	fa03 f000 	lsl.w	r0, r3, r0
 8004c3c:	9b04      	ldr	r3, [sp, #16]
 8004c3e:	3401      	adds	r4, #1
 8004c40:	4303      	orrs	r3, r0
 8004c42:	9304      	str	r3, [sp, #16]
 8004c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c48:	2206      	movs	r2, #6
 8004c4a:	482d      	ldr	r0, [pc, #180]	; (8004d00 <_vfiprintf_r+0x254>)
 8004c4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c50:	f001 fec8 	bl	80069e4 <memchr>
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d03f      	beq.n	8004cd8 <_vfiprintf_r+0x22c>
 8004c58:	4b2a      	ldr	r3, [pc, #168]	; (8004d04 <_vfiprintf_r+0x258>)
 8004c5a:	bb1b      	cbnz	r3, 8004ca4 <_vfiprintf_r+0x1f8>
 8004c5c:	9b03      	ldr	r3, [sp, #12]
 8004c5e:	3307      	adds	r3, #7
 8004c60:	f023 0307 	bic.w	r3, r3, #7
 8004c64:	3308      	adds	r3, #8
 8004c66:	9303      	str	r3, [sp, #12]
 8004c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c6a:	443b      	add	r3, r7
 8004c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c6e:	e767      	b.n	8004b40 <_vfiprintf_r+0x94>
 8004c70:	460c      	mov	r4, r1
 8004c72:	2001      	movs	r0, #1
 8004c74:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c78:	e7a5      	b.n	8004bc6 <_vfiprintf_r+0x11a>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f04f 0c0a 	mov.w	ip, #10
 8004c80:	4619      	mov	r1, r3
 8004c82:	3401      	adds	r4, #1
 8004c84:	9305      	str	r3, [sp, #20]
 8004c86:	4620      	mov	r0, r4
 8004c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c8c:	3a30      	subs	r2, #48	; 0x30
 8004c8e:	2a09      	cmp	r2, #9
 8004c90:	d903      	bls.n	8004c9a <_vfiprintf_r+0x1ee>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0c5      	beq.n	8004c22 <_vfiprintf_r+0x176>
 8004c96:	9105      	str	r1, [sp, #20]
 8004c98:	e7c3      	b.n	8004c22 <_vfiprintf_r+0x176>
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ca2:	e7f0      	b.n	8004c86 <_vfiprintf_r+0x1da>
 8004ca4:	ab03      	add	r3, sp, #12
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	462a      	mov	r2, r5
 8004caa:	4630      	mov	r0, r6
 8004cac:	4b16      	ldr	r3, [pc, #88]	; (8004d08 <_vfiprintf_r+0x25c>)
 8004cae:	a904      	add	r1, sp, #16
 8004cb0:	f000 f8ca 	bl	8004e48 <_printf_float>
 8004cb4:	4607      	mov	r7, r0
 8004cb6:	1c78      	adds	r0, r7, #1
 8004cb8:	d1d6      	bne.n	8004c68 <_vfiprintf_r+0x1bc>
 8004cba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cbc:	07d9      	lsls	r1, r3, #31
 8004cbe:	d405      	bmi.n	8004ccc <_vfiprintf_r+0x220>
 8004cc0:	89ab      	ldrh	r3, [r5, #12]
 8004cc2:	059a      	lsls	r2, r3, #22
 8004cc4:	d402      	bmi.n	8004ccc <_vfiprintf_r+0x220>
 8004cc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cc8:	f001 fe1e 	bl	8006908 <__retarget_lock_release_recursive>
 8004ccc:	89ab      	ldrh	r3, [r5, #12]
 8004cce:	065b      	lsls	r3, r3, #25
 8004cd0:	f53f af12 	bmi.w	8004af8 <_vfiprintf_r+0x4c>
 8004cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cd6:	e711      	b.n	8004afc <_vfiprintf_r+0x50>
 8004cd8:	ab03      	add	r3, sp, #12
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	462a      	mov	r2, r5
 8004cde:	4630      	mov	r0, r6
 8004ce0:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <_vfiprintf_r+0x25c>)
 8004ce2:	a904      	add	r1, sp, #16
 8004ce4:	f000 fb4c 	bl	8005380 <_printf_i>
 8004ce8:	e7e4      	b.n	8004cb4 <_vfiprintf_r+0x208>
 8004cea:	bf00      	nop
 8004cec:	08007844 	.word	0x08007844
 8004cf0:	08007864 	.word	0x08007864
 8004cf4:	08007824 	.word	0x08007824
 8004cf8:	0800774c 	.word	0x0800774c
 8004cfc:	08007752 	.word	0x08007752
 8004d00:	08007756 	.word	0x08007756
 8004d04:	08004e49 	.word	0x08004e49
 8004d08:	08004a87 	.word	0x08004a87

08004d0c <__cvt>:
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d12:	461f      	mov	r7, r3
 8004d14:	bfbb      	ittet	lt
 8004d16:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004d1a:	461f      	movlt	r7, r3
 8004d1c:	2300      	movge	r3, #0
 8004d1e:	232d      	movlt	r3, #45	; 0x2d
 8004d20:	b088      	sub	sp, #32
 8004d22:	4614      	mov	r4, r2
 8004d24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d26:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004d28:	7013      	strb	r3, [r2, #0]
 8004d2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d2c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004d30:	f023 0820 	bic.w	r8, r3, #32
 8004d34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d38:	d005      	beq.n	8004d46 <__cvt+0x3a>
 8004d3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d3e:	d100      	bne.n	8004d42 <__cvt+0x36>
 8004d40:	3501      	adds	r5, #1
 8004d42:	2302      	movs	r3, #2
 8004d44:	e000      	b.n	8004d48 <__cvt+0x3c>
 8004d46:	2303      	movs	r3, #3
 8004d48:	aa07      	add	r2, sp, #28
 8004d4a:	9204      	str	r2, [sp, #16]
 8004d4c:	aa06      	add	r2, sp, #24
 8004d4e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d52:	e9cd 3500 	strd	r3, r5, [sp]
 8004d56:	4622      	mov	r2, r4
 8004d58:	463b      	mov	r3, r7
 8004d5a:	f000 fe2d 	bl	80059b8 <_dtoa_r>
 8004d5e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d62:	4606      	mov	r6, r0
 8004d64:	d102      	bne.n	8004d6c <__cvt+0x60>
 8004d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d68:	07db      	lsls	r3, r3, #31
 8004d6a:	d522      	bpl.n	8004db2 <__cvt+0xa6>
 8004d6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d70:	eb06 0905 	add.w	r9, r6, r5
 8004d74:	d110      	bne.n	8004d98 <__cvt+0x8c>
 8004d76:	7833      	ldrb	r3, [r6, #0]
 8004d78:	2b30      	cmp	r3, #48	; 0x30
 8004d7a:	d10a      	bne.n	8004d92 <__cvt+0x86>
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2300      	movs	r3, #0
 8004d80:	4620      	mov	r0, r4
 8004d82:	4639      	mov	r1, r7
 8004d84:	f7fb fe28 	bl	80009d8 <__aeabi_dcmpeq>
 8004d88:	b918      	cbnz	r0, 8004d92 <__cvt+0x86>
 8004d8a:	f1c5 0501 	rsb	r5, r5, #1
 8004d8e:	f8ca 5000 	str.w	r5, [sl]
 8004d92:	f8da 3000 	ldr.w	r3, [sl]
 8004d96:	4499      	add	r9, r3
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	4639      	mov	r1, r7
 8004da0:	f7fb fe1a 	bl	80009d8 <__aeabi_dcmpeq>
 8004da4:	b108      	cbz	r0, 8004daa <__cvt+0x9e>
 8004da6:	f8cd 901c 	str.w	r9, [sp, #28]
 8004daa:	2230      	movs	r2, #48	; 0x30
 8004dac:	9b07      	ldr	r3, [sp, #28]
 8004dae:	454b      	cmp	r3, r9
 8004db0:	d307      	bcc.n	8004dc2 <__cvt+0xb6>
 8004db2:	4630      	mov	r0, r6
 8004db4:	9b07      	ldr	r3, [sp, #28]
 8004db6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004db8:	1b9b      	subs	r3, r3, r6
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	b008      	add	sp, #32
 8004dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc2:	1c59      	adds	r1, r3, #1
 8004dc4:	9107      	str	r1, [sp, #28]
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	e7f0      	b.n	8004dac <__cvt+0xa0>

08004dca <__exponent>:
 8004dca:	4603      	mov	r3, r0
 8004dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dce:	2900      	cmp	r1, #0
 8004dd0:	f803 2b02 	strb.w	r2, [r3], #2
 8004dd4:	bfb6      	itet	lt
 8004dd6:	222d      	movlt	r2, #45	; 0x2d
 8004dd8:	222b      	movge	r2, #43	; 0x2b
 8004dda:	4249      	neglt	r1, r1
 8004ddc:	2909      	cmp	r1, #9
 8004dde:	7042      	strb	r2, [r0, #1]
 8004de0:	dd2b      	ble.n	8004e3a <__exponent+0x70>
 8004de2:	f10d 0407 	add.w	r4, sp, #7
 8004de6:	46a4      	mov	ip, r4
 8004de8:	270a      	movs	r7, #10
 8004dea:	fb91 f6f7 	sdiv	r6, r1, r7
 8004dee:	460a      	mov	r2, r1
 8004df0:	46a6      	mov	lr, r4
 8004df2:	fb07 1516 	mls	r5, r7, r6, r1
 8004df6:	2a63      	cmp	r2, #99	; 0x63
 8004df8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004dfc:	4631      	mov	r1, r6
 8004dfe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004e02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e06:	dcf0      	bgt.n	8004dea <__exponent+0x20>
 8004e08:	3130      	adds	r1, #48	; 0x30
 8004e0a:	f1ae 0502 	sub.w	r5, lr, #2
 8004e0e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e12:	4629      	mov	r1, r5
 8004e14:	1c44      	adds	r4, r0, #1
 8004e16:	4561      	cmp	r1, ip
 8004e18:	d30a      	bcc.n	8004e30 <__exponent+0x66>
 8004e1a:	f10d 0209 	add.w	r2, sp, #9
 8004e1e:	eba2 020e 	sub.w	r2, r2, lr
 8004e22:	4565      	cmp	r5, ip
 8004e24:	bf88      	it	hi
 8004e26:	2200      	movhi	r2, #0
 8004e28:	4413      	add	r3, r2
 8004e2a:	1a18      	subs	r0, r3, r0
 8004e2c:	b003      	add	sp, #12
 8004e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e34:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e38:	e7ed      	b.n	8004e16 <__exponent+0x4c>
 8004e3a:	2330      	movs	r3, #48	; 0x30
 8004e3c:	3130      	adds	r1, #48	; 0x30
 8004e3e:	7083      	strb	r3, [r0, #2]
 8004e40:	70c1      	strb	r1, [r0, #3]
 8004e42:	1d03      	adds	r3, r0, #4
 8004e44:	e7f1      	b.n	8004e2a <__exponent+0x60>
	...

08004e48 <_printf_float>:
 8004e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4c:	b091      	sub	sp, #68	; 0x44
 8004e4e:	460c      	mov	r4, r1
 8004e50:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004e54:	4616      	mov	r6, r2
 8004e56:	461f      	mov	r7, r3
 8004e58:	4605      	mov	r5, r0
 8004e5a:	f001 fd4f 	bl	80068fc <_localeconv_r>
 8004e5e:	6803      	ldr	r3, [r0, #0]
 8004e60:	4618      	mov	r0, r3
 8004e62:	9309      	str	r3, [sp, #36]	; 0x24
 8004e64:	f7fb f98c 	bl	8000180 <strlen>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	930e      	str	r3, [sp, #56]	; 0x38
 8004e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e70:	900a      	str	r0, [sp, #40]	; 0x28
 8004e72:	3307      	adds	r3, #7
 8004e74:	f023 0307 	bic.w	r3, r3, #7
 8004e78:	f103 0208 	add.w	r2, r3, #8
 8004e7c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004e80:	f8d4 b000 	ldr.w	fp, [r4]
 8004e84:	f8c8 2000 	str.w	r2, [r8]
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e90:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004e94:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004e98:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e9e:	4640      	mov	r0, r8
 8004ea0:	4b9c      	ldr	r3, [pc, #624]	; (8005114 <_printf_float+0x2cc>)
 8004ea2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ea4:	f7fb fdca 	bl	8000a3c <__aeabi_dcmpun>
 8004ea8:	bb70      	cbnz	r0, 8004f08 <_printf_float+0xc0>
 8004eaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004eae:	4640      	mov	r0, r8
 8004eb0:	4b98      	ldr	r3, [pc, #608]	; (8005114 <_printf_float+0x2cc>)
 8004eb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004eb4:	f7fb fda4 	bl	8000a00 <__aeabi_dcmple>
 8004eb8:	bb30      	cbnz	r0, 8004f08 <_printf_float+0xc0>
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	4640      	mov	r0, r8
 8004ec0:	4651      	mov	r1, sl
 8004ec2:	f7fb fd93 	bl	80009ec <__aeabi_dcmplt>
 8004ec6:	b110      	cbz	r0, 8004ece <_printf_float+0x86>
 8004ec8:	232d      	movs	r3, #45	; 0x2d
 8004eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ece:	4b92      	ldr	r3, [pc, #584]	; (8005118 <_printf_float+0x2d0>)
 8004ed0:	4892      	ldr	r0, [pc, #584]	; (800511c <_printf_float+0x2d4>)
 8004ed2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004ed6:	bf94      	ite	ls
 8004ed8:	4698      	movls	r8, r3
 8004eda:	4680      	movhi	r8, r0
 8004edc:	2303      	movs	r3, #3
 8004ede:	f04f 0a00 	mov.w	sl, #0
 8004ee2:	6123      	str	r3, [r4, #16]
 8004ee4:	f02b 0304 	bic.w	r3, fp, #4
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	4633      	mov	r3, r6
 8004eec:	4621      	mov	r1, r4
 8004eee:	4628      	mov	r0, r5
 8004ef0:	9700      	str	r7, [sp, #0]
 8004ef2:	aa0f      	add	r2, sp, #60	; 0x3c
 8004ef4:	f000 f9d4 	bl	80052a0 <_printf_common>
 8004ef8:	3001      	adds	r0, #1
 8004efa:	f040 8090 	bne.w	800501e <_printf_float+0x1d6>
 8004efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f02:	b011      	add	sp, #68	; 0x44
 8004f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f08:	4642      	mov	r2, r8
 8004f0a:	4653      	mov	r3, sl
 8004f0c:	4640      	mov	r0, r8
 8004f0e:	4651      	mov	r1, sl
 8004f10:	f7fb fd94 	bl	8000a3c <__aeabi_dcmpun>
 8004f14:	b148      	cbz	r0, 8004f2a <_printf_float+0xe2>
 8004f16:	f1ba 0f00 	cmp.w	sl, #0
 8004f1a:	bfb8      	it	lt
 8004f1c:	232d      	movlt	r3, #45	; 0x2d
 8004f1e:	4880      	ldr	r0, [pc, #512]	; (8005120 <_printf_float+0x2d8>)
 8004f20:	bfb8      	it	lt
 8004f22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f26:	4b7f      	ldr	r3, [pc, #508]	; (8005124 <_printf_float+0x2dc>)
 8004f28:	e7d3      	b.n	8004ed2 <_printf_float+0x8a>
 8004f2a:	6863      	ldr	r3, [r4, #4]
 8004f2c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	d142      	bne.n	8004fba <_printf_float+0x172>
 8004f34:	2306      	movs	r3, #6
 8004f36:	6063      	str	r3, [r4, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	9206      	str	r2, [sp, #24]
 8004f3c:	aa0e      	add	r2, sp, #56	; 0x38
 8004f3e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004f42:	aa0d      	add	r2, sp, #52	; 0x34
 8004f44:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004f48:	9203      	str	r2, [sp, #12]
 8004f4a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004f4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004f52:	6023      	str	r3, [r4, #0]
 8004f54:	6863      	ldr	r3, [r4, #4]
 8004f56:	4642      	mov	r2, r8
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	4653      	mov	r3, sl
 8004f5e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f60:	f7ff fed4 	bl	8004d0c <__cvt>
 8004f64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f66:	4680      	mov	r8, r0
 8004f68:	2947      	cmp	r1, #71	; 0x47
 8004f6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f6c:	d108      	bne.n	8004f80 <_printf_float+0x138>
 8004f6e:	1cc8      	adds	r0, r1, #3
 8004f70:	db02      	blt.n	8004f78 <_printf_float+0x130>
 8004f72:	6863      	ldr	r3, [r4, #4]
 8004f74:	4299      	cmp	r1, r3
 8004f76:	dd40      	ble.n	8004ffa <_printf_float+0x1b2>
 8004f78:	f1a9 0902 	sub.w	r9, r9, #2
 8004f7c:	fa5f f989 	uxtb.w	r9, r9
 8004f80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f84:	d81f      	bhi.n	8004fc6 <_printf_float+0x17e>
 8004f86:	464a      	mov	r2, r9
 8004f88:	3901      	subs	r1, #1
 8004f8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f8e:	910d      	str	r1, [sp, #52]	; 0x34
 8004f90:	f7ff ff1b 	bl	8004dca <__exponent>
 8004f94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f96:	4682      	mov	sl, r0
 8004f98:	1813      	adds	r3, r2, r0
 8004f9a:	2a01      	cmp	r2, #1
 8004f9c:	6123      	str	r3, [r4, #16]
 8004f9e:	dc02      	bgt.n	8004fa6 <_printf_float+0x15e>
 8004fa0:	6822      	ldr	r2, [r4, #0]
 8004fa2:	07d2      	lsls	r2, r2, #31
 8004fa4:	d501      	bpl.n	8004faa <_printf_float+0x162>
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	6123      	str	r3, [r4, #16]
 8004faa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d09b      	beq.n	8004eea <_printf_float+0xa2>
 8004fb2:	232d      	movs	r3, #45	; 0x2d
 8004fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb8:	e797      	b.n	8004eea <_printf_float+0xa2>
 8004fba:	2947      	cmp	r1, #71	; 0x47
 8004fbc:	d1bc      	bne.n	8004f38 <_printf_float+0xf0>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1ba      	bne.n	8004f38 <_printf_float+0xf0>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e7b7      	b.n	8004f36 <_printf_float+0xee>
 8004fc6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004fca:	d118      	bne.n	8004ffe <_printf_float+0x1b6>
 8004fcc:	2900      	cmp	r1, #0
 8004fce:	6863      	ldr	r3, [r4, #4]
 8004fd0:	dd0b      	ble.n	8004fea <_printf_float+0x1a2>
 8004fd2:	6121      	str	r1, [r4, #16]
 8004fd4:	b913      	cbnz	r3, 8004fdc <_printf_float+0x194>
 8004fd6:	6822      	ldr	r2, [r4, #0]
 8004fd8:	07d0      	lsls	r0, r2, #31
 8004fda:	d502      	bpl.n	8004fe2 <_printf_float+0x19a>
 8004fdc:	3301      	adds	r3, #1
 8004fde:	440b      	add	r3, r1
 8004fe0:	6123      	str	r3, [r4, #16]
 8004fe2:	f04f 0a00 	mov.w	sl, #0
 8004fe6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004fe8:	e7df      	b.n	8004faa <_printf_float+0x162>
 8004fea:	b913      	cbnz	r3, 8004ff2 <_printf_float+0x1aa>
 8004fec:	6822      	ldr	r2, [r4, #0]
 8004fee:	07d2      	lsls	r2, r2, #31
 8004ff0:	d501      	bpl.n	8004ff6 <_printf_float+0x1ae>
 8004ff2:	3302      	adds	r3, #2
 8004ff4:	e7f4      	b.n	8004fe0 <_printf_float+0x198>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e7f2      	b.n	8004fe0 <_printf_float+0x198>
 8004ffa:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005000:	4299      	cmp	r1, r3
 8005002:	db05      	blt.n	8005010 <_printf_float+0x1c8>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	6121      	str	r1, [r4, #16]
 8005008:	07d8      	lsls	r0, r3, #31
 800500a:	d5ea      	bpl.n	8004fe2 <_printf_float+0x19a>
 800500c:	1c4b      	adds	r3, r1, #1
 800500e:	e7e7      	b.n	8004fe0 <_printf_float+0x198>
 8005010:	2900      	cmp	r1, #0
 8005012:	bfcc      	ite	gt
 8005014:	2201      	movgt	r2, #1
 8005016:	f1c1 0202 	rsble	r2, r1, #2
 800501a:	4413      	add	r3, r2
 800501c:	e7e0      	b.n	8004fe0 <_printf_float+0x198>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	055a      	lsls	r2, r3, #21
 8005022:	d407      	bmi.n	8005034 <_printf_float+0x1ec>
 8005024:	6923      	ldr	r3, [r4, #16]
 8005026:	4642      	mov	r2, r8
 8005028:	4631      	mov	r1, r6
 800502a:	4628      	mov	r0, r5
 800502c:	47b8      	blx	r7
 800502e:	3001      	adds	r0, #1
 8005030:	d12b      	bne.n	800508a <_printf_float+0x242>
 8005032:	e764      	b.n	8004efe <_printf_float+0xb6>
 8005034:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005038:	f240 80dd 	bls.w	80051f6 <_printf_float+0x3ae>
 800503c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005040:	2200      	movs	r2, #0
 8005042:	2300      	movs	r3, #0
 8005044:	f7fb fcc8 	bl	80009d8 <__aeabi_dcmpeq>
 8005048:	2800      	cmp	r0, #0
 800504a:	d033      	beq.n	80050b4 <_printf_float+0x26c>
 800504c:	2301      	movs	r3, #1
 800504e:	4631      	mov	r1, r6
 8005050:	4628      	mov	r0, r5
 8005052:	4a35      	ldr	r2, [pc, #212]	; (8005128 <_printf_float+0x2e0>)
 8005054:	47b8      	blx	r7
 8005056:	3001      	adds	r0, #1
 8005058:	f43f af51 	beq.w	8004efe <_printf_float+0xb6>
 800505c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005060:	429a      	cmp	r2, r3
 8005062:	db02      	blt.n	800506a <_printf_float+0x222>
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	07d8      	lsls	r0, r3, #31
 8005068:	d50f      	bpl.n	800508a <_printf_float+0x242>
 800506a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800506e:	4631      	mov	r1, r6
 8005070:	4628      	mov	r0, r5
 8005072:	47b8      	blx	r7
 8005074:	3001      	adds	r0, #1
 8005076:	f43f af42 	beq.w	8004efe <_printf_float+0xb6>
 800507a:	f04f 0800 	mov.w	r8, #0
 800507e:	f104 091a 	add.w	r9, r4, #26
 8005082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005084:	3b01      	subs	r3, #1
 8005086:	4543      	cmp	r3, r8
 8005088:	dc09      	bgt.n	800509e <_printf_float+0x256>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	079b      	lsls	r3, r3, #30
 800508e:	f100 8102 	bmi.w	8005296 <_printf_float+0x44e>
 8005092:	68e0      	ldr	r0, [r4, #12]
 8005094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005096:	4298      	cmp	r0, r3
 8005098:	bfb8      	it	lt
 800509a:	4618      	movlt	r0, r3
 800509c:	e731      	b.n	8004f02 <_printf_float+0xba>
 800509e:	2301      	movs	r3, #1
 80050a0:	464a      	mov	r2, r9
 80050a2:	4631      	mov	r1, r6
 80050a4:	4628      	mov	r0, r5
 80050a6:	47b8      	blx	r7
 80050a8:	3001      	adds	r0, #1
 80050aa:	f43f af28 	beq.w	8004efe <_printf_float+0xb6>
 80050ae:	f108 0801 	add.w	r8, r8, #1
 80050b2:	e7e6      	b.n	8005082 <_printf_float+0x23a>
 80050b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	dc38      	bgt.n	800512c <_printf_float+0x2e4>
 80050ba:	2301      	movs	r3, #1
 80050bc:	4631      	mov	r1, r6
 80050be:	4628      	mov	r0, r5
 80050c0:	4a19      	ldr	r2, [pc, #100]	; (8005128 <_printf_float+0x2e0>)
 80050c2:	47b8      	blx	r7
 80050c4:	3001      	adds	r0, #1
 80050c6:	f43f af1a 	beq.w	8004efe <_printf_float+0xb6>
 80050ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050ce:	4313      	orrs	r3, r2
 80050d0:	d102      	bne.n	80050d8 <_printf_float+0x290>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	07d9      	lsls	r1, r3, #31
 80050d6:	d5d8      	bpl.n	800508a <_printf_float+0x242>
 80050d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050dc:	4631      	mov	r1, r6
 80050de:	4628      	mov	r0, r5
 80050e0:	47b8      	blx	r7
 80050e2:	3001      	adds	r0, #1
 80050e4:	f43f af0b 	beq.w	8004efe <_printf_float+0xb6>
 80050e8:	f04f 0900 	mov.w	r9, #0
 80050ec:	f104 0a1a 	add.w	sl, r4, #26
 80050f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050f2:	425b      	negs	r3, r3
 80050f4:	454b      	cmp	r3, r9
 80050f6:	dc01      	bgt.n	80050fc <_printf_float+0x2b4>
 80050f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050fa:	e794      	b.n	8005026 <_printf_float+0x1de>
 80050fc:	2301      	movs	r3, #1
 80050fe:	4652      	mov	r2, sl
 8005100:	4631      	mov	r1, r6
 8005102:	4628      	mov	r0, r5
 8005104:	47b8      	blx	r7
 8005106:	3001      	adds	r0, #1
 8005108:	f43f aef9 	beq.w	8004efe <_printf_float+0xb6>
 800510c:	f109 0901 	add.w	r9, r9, #1
 8005110:	e7ee      	b.n	80050f0 <_printf_float+0x2a8>
 8005112:	bf00      	nop
 8005114:	7fefffff 	.word	0x7fefffff
 8005118:	0800775d 	.word	0x0800775d
 800511c:	08007761 	.word	0x08007761
 8005120:	08007769 	.word	0x08007769
 8005124:	08007765 	.word	0x08007765
 8005128:	0800776d 	.word	0x0800776d
 800512c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800512e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005130:	429a      	cmp	r2, r3
 8005132:	bfa8      	it	ge
 8005134:	461a      	movge	r2, r3
 8005136:	2a00      	cmp	r2, #0
 8005138:	4691      	mov	r9, r2
 800513a:	dc37      	bgt.n	80051ac <_printf_float+0x364>
 800513c:	f04f 0b00 	mov.w	fp, #0
 8005140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005144:	f104 021a 	add.w	r2, r4, #26
 8005148:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800514c:	ebaa 0309 	sub.w	r3, sl, r9
 8005150:	455b      	cmp	r3, fp
 8005152:	dc33      	bgt.n	80051bc <_printf_float+0x374>
 8005154:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005158:	429a      	cmp	r2, r3
 800515a:	db3b      	blt.n	80051d4 <_printf_float+0x38c>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	07da      	lsls	r2, r3, #31
 8005160:	d438      	bmi.n	80051d4 <_printf_float+0x38c>
 8005162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005164:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005166:	eba3 020a 	sub.w	r2, r3, sl
 800516a:	eba3 0901 	sub.w	r9, r3, r1
 800516e:	4591      	cmp	r9, r2
 8005170:	bfa8      	it	ge
 8005172:	4691      	movge	r9, r2
 8005174:	f1b9 0f00 	cmp.w	r9, #0
 8005178:	dc34      	bgt.n	80051e4 <_printf_float+0x39c>
 800517a:	f04f 0800 	mov.w	r8, #0
 800517e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005182:	f104 0a1a 	add.w	sl, r4, #26
 8005186:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800518a:	1a9b      	subs	r3, r3, r2
 800518c:	eba3 0309 	sub.w	r3, r3, r9
 8005190:	4543      	cmp	r3, r8
 8005192:	f77f af7a 	ble.w	800508a <_printf_float+0x242>
 8005196:	2301      	movs	r3, #1
 8005198:	4652      	mov	r2, sl
 800519a:	4631      	mov	r1, r6
 800519c:	4628      	mov	r0, r5
 800519e:	47b8      	blx	r7
 80051a0:	3001      	adds	r0, #1
 80051a2:	f43f aeac 	beq.w	8004efe <_printf_float+0xb6>
 80051a6:	f108 0801 	add.w	r8, r8, #1
 80051aa:	e7ec      	b.n	8005186 <_printf_float+0x33e>
 80051ac:	4613      	mov	r3, r2
 80051ae:	4631      	mov	r1, r6
 80051b0:	4642      	mov	r2, r8
 80051b2:	4628      	mov	r0, r5
 80051b4:	47b8      	blx	r7
 80051b6:	3001      	adds	r0, #1
 80051b8:	d1c0      	bne.n	800513c <_printf_float+0x2f4>
 80051ba:	e6a0      	b.n	8004efe <_printf_float+0xb6>
 80051bc:	2301      	movs	r3, #1
 80051be:	4631      	mov	r1, r6
 80051c0:	4628      	mov	r0, r5
 80051c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80051c4:	47b8      	blx	r7
 80051c6:	3001      	adds	r0, #1
 80051c8:	f43f ae99 	beq.w	8004efe <_printf_float+0xb6>
 80051cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051ce:	f10b 0b01 	add.w	fp, fp, #1
 80051d2:	e7b9      	b.n	8005148 <_printf_float+0x300>
 80051d4:	4631      	mov	r1, r6
 80051d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051da:	4628      	mov	r0, r5
 80051dc:	47b8      	blx	r7
 80051de:	3001      	adds	r0, #1
 80051e0:	d1bf      	bne.n	8005162 <_printf_float+0x31a>
 80051e2:	e68c      	b.n	8004efe <_printf_float+0xb6>
 80051e4:	464b      	mov	r3, r9
 80051e6:	4631      	mov	r1, r6
 80051e8:	4628      	mov	r0, r5
 80051ea:	eb08 020a 	add.w	r2, r8, sl
 80051ee:	47b8      	blx	r7
 80051f0:	3001      	adds	r0, #1
 80051f2:	d1c2      	bne.n	800517a <_printf_float+0x332>
 80051f4:	e683      	b.n	8004efe <_printf_float+0xb6>
 80051f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051f8:	2a01      	cmp	r2, #1
 80051fa:	dc01      	bgt.n	8005200 <_printf_float+0x3b8>
 80051fc:	07db      	lsls	r3, r3, #31
 80051fe:	d537      	bpl.n	8005270 <_printf_float+0x428>
 8005200:	2301      	movs	r3, #1
 8005202:	4642      	mov	r2, r8
 8005204:	4631      	mov	r1, r6
 8005206:	4628      	mov	r0, r5
 8005208:	47b8      	blx	r7
 800520a:	3001      	adds	r0, #1
 800520c:	f43f ae77 	beq.w	8004efe <_printf_float+0xb6>
 8005210:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005214:	4631      	mov	r1, r6
 8005216:	4628      	mov	r0, r5
 8005218:	47b8      	blx	r7
 800521a:	3001      	adds	r0, #1
 800521c:	f43f ae6f 	beq.w	8004efe <_printf_float+0xb6>
 8005220:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005224:	2200      	movs	r2, #0
 8005226:	2300      	movs	r3, #0
 8005228:	f7fb fbd6 	bl	80009d8 <__aeabi_dcmpeq>
 800522c:	b9d8      	cbnz	r0, 8005266 <_printf_float+0x41e>
 800522e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005230:	f108 0201 	add.w	r2, r8, #1
 8005234:	3b01      	subs	r3, #1
 8005236:	4631      	mov	r1, r6
 8005238:	4628      	mov	r0, r5
 800523a:	47b8      	blx	r7
 800523c:	3001      	adds	r0, #1
 800523e:	d10e      	bne.n	800525e <_printf_float+0x416>
 8005240:	e65d      	b.n	8004efe <_printf_float+0xb6>
 8005242:	2301      	movs	r3, #1
 8005244:	464a      	mov	r2, r9
 8005246:	4631      	mov	r1, r6
 8005248:	4628      	mov	r0, r5
 800524a:	47b8      	blx	r7
 800524c:	3001      	adds	r0, #1
 800524e:	f43f ae56 	beq.w	8004efe <_printf_float+0xb6>
 8005252:	f108 0801 	add.w	r8, r8, #1
 8005256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005258:	3b01      	subs	r3, #1
 800525a:	4543      	cmp	r3, r8
 800525c:	dcf1      	bgt.n	8005242 <_printf_float+0x3fa>
 800525e:	4653      	mov	r3, sl
 8005260:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005264:	e6e0      	b.n	8005028 <_printf_float+0x1e0>
 8005266:	f04f 0800 	mov.w	r8, #0
 800526a:	f104 091a 	add.w	r9, r4, #26
 800526e:	e7f2      	b.n	8005256 <_printf_float+0x40e>
 8005270:	2301      	movs	r3, #1
 8005272:	4642      	mov	r2, r8
 8005274:	e7df      	b.n	8005236 <_printf_float+0x3ee>
 8005276:	2301      	movs	r3, #1
 8005278:	464a      	mov	r2, r9
 800527a:	4631      	mov	r1, r6
 800527c:	4628      	mov	r0, r5
 800527e:	47b8      	blx	r7
 8005280:	3001      	adds	r0, #1
 8005282:	f43f ae3c 	beq.w	8004efe <_printf_float+0xb6>
 8005286:	f108 0801 	add.w	r8, r8, #1
 800528a:	68e3      	ldr	r3, [r4, #12]
 800528c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800528e:	1a5b      	subs	r3, r3, r1
 8005290:	4543      	cmp	r3, r8
 8005292:	dcf0      	bgt.n	8005276 <_printf_float+0x42e>
 8005294:	e6fd      	b.n	8005092 <_printf_float+0x24a>
 8005296:	f04f 0800 	mov.w	r8, #0
 800529a:	f104 0919 	add.w	r9, r4, #25
 800529e:	e7f4      	b.n	800528a <_printf_float+0x442>

080052a0 <_printf_common>:
 80052a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a4:	4616      	mov	r6, r2
 80052a6:	4699      	mov	r9, r3
 80052a8:	688a      	ldr	r2, [r1, #8]
 80052aa:	690b      	ldr	r3, [r1, #16]
 80052ac:	4607      	mov	r7, r0
 80052ae:	4293      	cmp	r3, r2
 80052b0:	bfb8      	it	lt
 80052b2:	4613      	movlt	r3, r2
 80052b4:	6033      	str	r3, [r6, #0]
 80052b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052ba:	460c      	mov	r4, r1
 80052bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052c0:	b10a      	cbz	r2, 80052c6 <_printf_common+0x26>
 80052c2:	3301      	adds	r3, #1
 80052c4:	6033      	str	r3, [r6, #0]
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	0699      	lsls	r1, r3, #26
 80052ca:	bf42      	ittt	mi
 80052cc:	6833      	ldrmi	r3, [r6, #0]
 80052ce:	3302      	addmi	r3, #2
 80052d0:	6033      	strmi	r3, [r6, #0]
 80052d2:	6825      	ldr	r5, [r4, #0]
 80052d4:	f015 0506 	ands.w	r5, r5, #6
 80052d8:	d106      	bne.n	80052e8 <_printf_common+0x48>
 80052da:	f104 0a19 	add.w	sl, r4, #25
 80052de:	68e3      	ldr	r3, [r4, #12]
 80052e0:	6832      	ldr	r2, [r6, #0]
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	42ab      	cmp	r3, r5
 80052e6:	dc28      	bgt.n	800533a <_printf_common+0x9a>
 80052e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052ec:	1e13      	subs	r3, r2, #0
 80052ee:	6822      	ldr	r2, [r4, #0]
 80052f0:	bf18      	it	ne
 80052f2:	2301      	movne	r3, #1
 80052f4:	0692      	lsls	r2, r2, #26
 80052f6:	d42d      	bmi.n	8005354 <_printf_common+0xb4>
 80052f8:	4649      	mov	r1, r9
 80052fa:	4638      	mov	r0, r7
 80052fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005300:	47c0      	blx	r8
 8005302:	3001      	adds	r0, #1
 8005304:	d020      	beq.n	8005348 <_printf_common+0xa8>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	68e5      	ldr	r5, [r4, #12]
 800530a:	f003 0306 	and.w	r3, r3, #6
 800530e:	2b04      	cmp	r3, #4
 8005310:	bf18      	it	ne
 8005312:	2500      	movne	r5, #0
 8005314:	6832      	ldr	r2, [r6, #0]
 8005316:	f04f 0600 	mov.w	r6, #0
 800531a:	68a3      	ldr	r3, [r4, #8]
 800531c:	bf08      	it	eq
 800531e:	1aad      	subeq	r5, r5, r2
 8005320:	6922      	ldr	r2, [r4, #16]
 8005322:	bf08      	it	eq
 8005324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005328:	4293      	cmp	r3, r2
 800532a:	bfc4      	itt	gt
 800532c:	1a9b      	subgt	r3, r3, r2
 800532e:	18ed      	addgt	r5, r5, r3
 8005330:	341a      	adds	r4, #26
 8005332:	42b5      	cmp	r5, r6
 8005334:	d11a      	bne.n	800536c <_printf_common+0xcc>
 8005336:	2000      	movs	r0, #0
 8005338:	e008      	b.n	800534c <_printf_common+0xac>
 800533a:	2301      	movs	r3, #1
 800533c:	4652      	mov	r2, sl
 800533e:	4649      	mov	r1, r9
 8005340:	4638      	mov	r0, r7
 8005342:	47c0      	blx	r8
 8005344:	3001      	adds	r0, #1
 8005346:	d103      	bne.n	8005350 <_printf_common+0xb0>
 8005348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800534c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005350:	3501      	adds	r5, #1
 8005352:	e7c4      	b.n	80052de <_printf_common+0x3e>
 8005354:	2030      	movs	r0, #48	; 0x30
 8005356:	18e1      	adds	r1, r4, r3
 8005358:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005362:	4422      	add	r2, r4
 8005364:	3302      	adds	r3, #2
 8005366:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800536a:	e7c5      	b.n	80052f8 <_printf_common+0x58>
 800536c:	2301      	movs	r3, #1
 800536e:	4622      	mov	r2, r4
 8005370:	4649      	mov	r1, r9
 8005372:	4638      	mov	r0, r7
 8005374:	47c0      	blx	r8
 8005376:	3001      	adds	r0, #1
 8005378:	d0e6      	beq.n	8005348 <_printf_common+0xa8>
 800537a:	3601      	adds	r6, #1
 800537c:	e7d9      	b.n	8005332 <_printf_common+0x92>
	...

08005380 <_printf_i>:
 8005380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005384:	7e0f      	ldrb	r7, [r1, #24]
 8005386:	4691      	mov	r9, r2
 8005388:	2f78      	cmp	r7, #120	; 0x78
 800538a:	4680      	mov	r8, r0
 800538c:	460c      	mov	r4, r1
 800538e:	469a      	mov	sl, r3
 8005390:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005392:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005396:	d807      	bhi.n	80053a8 <_printf_i+0x28>
 8005398:	2f62      	cmp	r7, #98	; 0x62
 800539a:	d80a      	bhi.n	80053b2 <_printf_i+0x32>
 800539c:	2f00      	cmp	r7, #0
 800539e:	f000 80d9 	beq.w	8005554 <_printf_i+0x1d4>
 80053a2:	2f58      	cmp	r7, #88	; 0x58
 80053a4:	f000 80a4 	beq.w	80054f0 <_printf_i+0x170>
 80053a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053b0:	e03a      	b.n	8005428 <_printf_i+0xa8>
 80053b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053b6:	2b15      	cmp	r3, #21
 80053b8:	d8f6      	bhi.n	80053a8 <_printf_i+0x28>
 80053ba:	a101      	add	r1, pc, #4	; (adr r1, 80053c0 <_printf_i+0x40>)
 80053bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053c0:	08005419 	.word	0x08005419
 80053c4:	0800542d 	.word	0x0800542d
 80053c8:	080053a9 	.word	0x080053a9
 80053cc:	080053a9 	.word	0x080053a9
 80053d0:	080053a9 	.word	0x080053a9
 80053d4:	080053a9 	.word	0x080053a9
 80053d8:	0800542d 	.word	0x0800542d
 80053dc:	080053a9 	.word	0x080053a9
 80053e0:	080053a9 	.word	0x080053a9
 80053e4:	080053a9 	.word	0x080053a9
 80053e8:	080053a9 	.word	0x080053a9
 80053ec:	0800553b 	.word	0x0800553b
 80053f0:	0800545d 	.word	0x0800545d
 80053f4:	0800551d 	.word	0x0800551d
 80053f8:	080053a9 	.word	0x080053a9
 80053fc:	080053a9 	.word	0x080053a9
 8005400:	0800555d 	.word	0x0800555d
 8005404:	080053a9 	.word	0x080053a9
 8005408:	0800545d 	.word	0x0800545d
 800540c:	080053a9 	.word	0x080053a9
 8005410:	080053a9 	.word	0x080053a9
 8005414:	08005525 	.word	0x08005525
 8005418:	682b      	ldr	r3, [r5, #0]
 800541a:	1d1a      	adds	r2, r3, #4
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	602a      	str	r2, [r5, #0]
 8005420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005428:	2301      	movs	r3, #1
 800542a:	e0a4      	b.n	8005576 <_printf_i+0x1f6>
 800542c:	6820      	ldr	r0, [r4, #0]
 800542e:	6829      	ldr	r1, [r5, #0]
 8005430:	0606      	lsls	r6, r0, #24
 8005432:	f101 0304 	add.w	r3, r1, #4
 8005436:	d50a      	bpl.n	800544e <_printf_i+0xce>
 8005438:	680e      	ldr	r6, [r1, #0]
 800543a:	602b      	str	r3, [r5, #0]
 800543c:	2e00      	cmp	r6, #0
 800543e:	da03      	bge.n	8005448 <_printf_i+0xc8>
 8005440:	232d      	movs	r3, #45	; 0x2d
 8005442:	4276      	negs	r6, r6
 8005444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005448:	230a      	movs	r3, #10
 800544a:	485e      	ldr	r0, [pc, #376]	; (80055c4 <_printf_i+0x244>)
 800544c:	e019      	b.n	8005482 <_printf_i+0x102>
 800544e:	680e      	ldr	r6, [r1, #0]
 8005450:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005454:	602b      	str	r3, [r5, #0]
 8005456:	bf18      	it	ne
 8005458:	b236      	sxthne	r6, r6
 800545a:	e7ef      	b.n	800543c <_printf_i+0xbc>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	6820      	ldr	r0, [r4, #0]
 8005460:	1d19      	adds	r1, r3, #4
 8005462:	6029      	str	r1, [r5, #0]
 8005464:	0601      	lsls	r1, r0, #24
 8005466:	d501      	bpl.n	800546c <_printf_i+0xec>
 8005468:	681e      	ldr	r6, [r3, #0]
 800546a:	e002      	b.n	8005472 <_printf_i+0xf2>
 800546c:	0646      	lsls	r6, r0, #25
 800546e:	d5fb      	bpl.n	8005468 <_printf_i+0xe8>
 8005470:	881e      	ldrh	r6, [r3, #0]
 8005472:	2f6f      	cmp	r7, #111	; 0x6f
 8005474:	bf0c      	ite	eq
 8005476:	2308      	moveq	r3, #8
 8005478:	230a      	movne	r3, #10
 800547a:	4852      	ldr	r0, [pc, #328]	; (80055c4 <_printf_i+0x244>)
 800547c:	2100      	movs	r1, #0
 800547e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005482:	6865      	ldr	r5, [r4, #4]
 8005484:	2d00      	cmp	r5, #0
 8005486:	bfa8      	it	ge
 8005488:	6821      	ldrge	r1, [r4, #0]
 800548a:	60a5      	str	r5, [r4, #8]
 800548c:	bfa4      	itt	ge
 800548e:	f021 0104 	bicge.w	r1, r1, #4
 8005492:	6021      	strge	r1, [r4, #0]
 8005494:	b90e      	cbnz	r6, 800549a <_printf_i+0x11a>
 8005496:	2d00      	cmp	r5, #0
 8005498:	d04d      	beq.n	8005536 <_printf_i+0x1b6>
 800549a:	4615      	mov	r5, r2
 800549c:	fbb6 f1f3 	udiv	r1, r6, r3
 80054a0:	fb03 6711 	mls	r7, r3, r1, r6
 80054a4:	5dc7      	ldrb	r7, [r0, r7]
 80054a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054aa:	4637      	mov	r7, r6
 80054ac:	42bb      	cmp	r3, r7
 80054ae:	460e      	mov	r6, r1
 80054b0:	d9f4      	bls.n	800549c <_printf_i+0x11c>
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d10b      	bne.n	80054ce <_printf_i+0x14e>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	07de      	lsls	r6, r3, #31
 80054ba:	d508      	bpl.n	80054ce <_printf_i+0x14e>
 80054bc:	6923      	ldr	r3, [r4, #16]
 80054be:	6861      	ldr	r1, [r4, #4]
 80054c0:	4299      	cmp	r1, r3
 80054c2:	bfde      	ittt	le
 80054c4:	2330      	movle	r3, #48	; 0x30
 80054c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054ca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80054ce:	1b52      	subs	r2, r2, r5
 80054d0:	6122      	str	r2, [r4, #16]
 80054d2:	464b      	mov	r3, r9
 80054d4:	4621      	mov	r1, r4
 80054d6:	4640      	mov	r0, r8
 80054d8:	f8cd a000 	str.w	sl, [sp]
 80054dc:	aa03      	add	r2, sp, #12
 80054de:	f7ff fedf 	bl	80052a0 <_printf_common>
 80054e2:	3001      	adds	r0, #1
 80054e4:	d14c      	bne.n	8005580 <_printf_i+0x200>
 80054e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054ea:	b004      	add	sp, #16
 80054ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f0:	4834      	ldr	r0, [pc, #208]	; (80055c4 <_printf_i+0x244>)
 80054f2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80054f6:	6829      	ldr	r1, [r5, #0]
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80054fe:	6029      	str	r1, [r5, #0]
 8005500:	061d      	lsls	r5, r3, #24
 8005502:	d514      	bpl.n	800552e <_printf_i+0x1ae>
 8005504:	07df      	lsls	r7, r3, #31
 8005506:	bf44      	itt	mi
 8005508:	f043 0320 	orrmi.w	r3, r3, #32
 800550c:	6023      	strmi	r3, [r4, #0]
 800550e:	b91e      	cbnz	r6, 8005518 <_printf_i+0x198>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	f023 0320 	bic.w	r3, r3, #32
 8005516:	6023      	str	r3, [r4, #0]
 8005518:	2310      	movs	r3, #16
 800551a:	e7af      	b.n	800547c <_printf_i+0xfc>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	f043 0320 	orr.w	r3, r3, #32
 8005522:	6023      	str	r3, [r4, #0]
 8005524:	2378      	movs	r3, #120	; 0x78
 8005526:	4828      	ldr	r0, [pc, #160]	; (80055c8 <_printf_i+0x248>)
 8005528:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800552c:	e7e3      	b.n	80054f6 <_printf_i+0x176>
 800552e:	0659      	lsls	r1, r3, #25
 8005530:	bf48      	it	mi
 8005532:	b2b6      	uxthmi	r6, r6
 8005534:	e7e6      	b.n	8005504 <_printf_i+0x184>
 8005536:	4615      	mov	r5, r2
 8005538:	e7bb      	b.n	80054b2 <_printf_i+0x132>
 800553a:	682b      	ldr	r3, [r5, #0]
 800553c:	6826      	ldr	r6, [r4, #0]
 800553e:	1d18      	adds	r0, r3, #4
 8005540:	6961      	ldr	r1, [r4, #20]
 8005542:	6028      	str	r0, [r5, #0]
 8005544:	0635      	lsls	r5, r6, #24
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	d501      	bpl.n	800554e <_printf_i+0x1ce>
 800554a:	6019      	str	r1, [r3, #0]
 800554c:	e002      	b.n	8005554 <_printf_i+0x1d4>
 800554e:	0670      	lsls	r0, r6, #25
 8005550:	d5fb      	bpl.n	800554a <_printf_i+0x1ca>
 8005552:	8019      	strh	r1, [r3, #0]
 8005554:	2300      	movs	r3, #0
 8005556:	4615      	mov	r5, r2
 8005558:	6123      	str	r3, [r4, #16]
 800555a:	e7ba      	b.n	80054d2 <_printf_i+0x152>
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	2100      	movs	r1, #0
 8005560:	1d1a      	adds	r2, r3, #4
 8005562:	602a      	str	r2, [r5, #0]
 8005564:	681d      	ldr	r5, [r3, #0]
 8005566:	6862      	ldr	r2, [r4, #4]
 8005568:	4628      	mov	r0, r5
 800556a:	f001 fa3b 	bl	80069e4 <memchr>
 800556e:	b108      	cbz	r0, 8005574 <_printf_i+0x1f4>
 8005570:	1b40      	subs	r0, r0, r5
 8005572:	6060      	str	r0, [r4, #4]
 8005574:	6863      	ldr	r3, [r4, #4]
 8005576:	6123      	str	r3, [r4, #16]
 8005578:	2300      	movs	r3, #0
 800557a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800557e:	e7a8      	b.n	80054d2 <_printf_i+0x152>
 8005580:	462a      	mov	r2, r5
 8005582:	4649      	mov	r1, r9
 8005584:	4640      	mov	r0, r8
 8005586:	6923      	ldr	r3, [r4, #16]
 8005588:	47d0      	blx	sl
 800558a:	3001      	adds	r0, #1
 800558c:	d0ab      	beq.n	80054e6 <_printf_i+0x166>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	079b      	lsls	r3, r3, #30
 8005592:	d413      	bmi.n	80055bc <_printf_i+0x23c>
 8005594:	68e0      	ldr	r0, [r4, #12]
 8005596:	9b03      	ldr	r3, [sp, #12]
 8005598:	4298      	cmp	r0, r3
 800559a:	bfb8      	it	lt
 800559c:	4618      	movlt	r0, r3
 800559e:	e7a4      	b.n	80054ea <_printf_i+0x16a>
 80055a0:	2301      	movs	r3, #1
 80055a2:	4632      	mov	r2, r6
 80055a4:	4649      	mov	r1, r9
 80055a6:	4640      	mov	r0, r8
 80055a8:	47d0      	blx	sl
 80055aa:	3001      	adds	r0, #1
 80055ac:	d09b      	beq.n	80054e6 <_printf_i+0x166>
 80055ae:	3501      	adds	r5, #1
 80055b0:	68e3      	ldr	r3, [r4, #12]
 80055b2:	9903      	ldr	r1, [sp, #12]
 80055b4:	1a5b      	subs	r3, r3, r1
 80055b6:	42ab      	cmp	r3, r5
 80055b8:	dcf2      	bgt.n	80055a0 <_printf_i+0x220>
 80055ba:	e7eb      	b.n	8005594 <_printf_i+0x214>
 80055bc:	2500      	movs	r5, #0
 80055be:	f104 0619 	add.w	r6, r4, #25
 80055c2:	e7f5      	b.n	80055b0 <_printf_i+0x230>
 80055c4:	0800776f 	.word	0x0800776f
 80055c8:	08007780 	.word	0x08007780

080055cc <iprintf>:
 80055cc:	b40f      	push	{r0, r1, r2, r3}
 80055ce:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <iprintf+0x2c>)
 80055d0:	b513      	push	{r0, r1, r4, lr}
 80055d2:	681c      	ldr	r4, [r3, #0]
 80055d4:	b124      	cbz	r4, 80055e0 <iprintf+0x14>
 80055d6:	69a3      	ldr	r3, [r4, #24]
 80055d8:	b913      	cbnz	r3, 80055e0 <iprintf+0x14>
 80055da:	4620      	mov	r0, r4
 80055dc:	f001 f8f0 	bl	80067c0 <__sinit>
 80055e0:	ab05      	add	r3, sp, #20
 80055e2:	4620      	mov	r0, r4
 80055e4:	9a04      	ldr	r2, [sp, #16]
 80055e6:	68a1      	ldr	r1, [r4, #8]
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	f7ff fa5f 	bl	8004aac <_vfiprintf_r>
 80055ee:	b002      	add	sp, #8
 80055f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f4:	b004      	add	sp, #16
 80055f6:	4770      	bx	lr
 80055f8:	2000000c 	.word	0x2000000c

080055fc <putchar>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	4b08      	ldr	r3, [pc, #32]	; (8005620 <putchar+0x24>)
 8005600:	4605      	mov	r5, r0
 8005602:	681c      	ldr	r4, [r3, #0]
 8005604:	b124      	cbz	r4, 8005610 <putchar+0x14>
 8005606:	69a3      	ldr	r3, [r4, #24]
 8005608:	b913      	cbnz	r3, 8005610 <putchar+0x14>
 800560a:	4620      	mov	r0, r4
 800560c:	f001 f8d8 	bl	80067c0 <__sinit>
 8005610:	4629      	mov	r1, r5
 8005612:	4620      	mov	r0, r4
 8005614:	68a2      	ldr	r2, [r4, #8]
 8005616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800561a:	f001 be71 	b.w	8007300 <_putc_r>
 800561e:	bf00      	nop
 8005620:	2000000c 	.word	0x2000000c

08005624 <_puts_r>:
 8005624:	b570      	push	{r4, r5, r6, lr}
 8005626:	460e      	mov	r6, r1
 8005628:	4605      	mov	r5, r0
 800562a:	b118      	cbz	r0, 8005634 <_puts_r+0x10>
 800562c:	6983      	ldr	r3, [r0, #24]
 800562e:	b90b      	cbnz	r3, 8005634 <_puts_r+0x10>
 8005630:	f001 f8c6 	bl	80067c0 <__sinit>
 8005634:	69ab      	ldr	r3, [r5, #24]
 8005636:	68ac      	ldr	r4, [r5, #8]
 8005638:	b913      	cbnz	r3, 8005640 <_puts_r+0x1c>
 800563a:	4628      	mov	r0, r5
 800563c:	f001 f8c0 	bl	80067c0 <__sinit>
 8005640:	4b2c      	ldr	r3, [pc, #176]	; (80056f4 <_puts_r+0xd0>)
 8005642:	429c      	cmp	r4, r3
 8005644:	d120      	bne.n	8005688 <_puts_r+0x64>
 8005646:	686c      	ldr	r4, [r5, #4]
 8005648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800564a:	07db      	lsls	r3, r3, #31
 800564c:	d405      	bmi.n	800565a <_puts_r+0x36>
 800564e:	89a3      	ldrh	r3, [r4, #12]
 8005650:	0598      	lsls	r0, r3, #22
 8005652:	d402      	bmi.n	800565a <_puts_r+0x36>
 8005654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005656:	f001 f956 	bl	8006906 <__retarget_lock_acquire_recursive>
 800565a:	89a3      	ldrh	r3, [r4, #12]
 800565c:	0719      	lsls	r1, r3, #28
 800565e:	d51d      	bpl.n	800569c <_puts_r+0x78>
 8005660:	6923      	ldr	r3, [r4, #16]
 8005662:	b1db      	cbz	r3, 800569c <_puts_r+0x78>
 8005664:	3e01      	subs	r6, #1
 8005666:	68a3      	ldr	r3, [r4, #8]
 8005668:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800566c:	3b01      	subs	r3, #1
 800566e:	60a3      	str	r3, [r4, #8]
 8005670:	bb39      	cbnz	r1, 80056c2 <_puts_r+0x9e>
 8005672:	2b00      	cmp	r3, #0
 8005674:	da38      	bge.n	80056e8 <_puts_r+0xc4>
 8005676:	4622      	mov	r2, r4
 8005678:	210a      	movs	r1, #10
 800567a:	4628      	mov	r0, r5
 800567c:	f000 f848 	bl	8005710 <__swbuf_r>
 8005680:	3001      	adds	r0, #1
 8005682:	d011      	beq.n	80056a8 <_puts_r+0x84>
 8005684:	250a      	movs	r5, #10
 8005686:	e011      	b.n	80056ac <_puts_r+0x88>
 8005688:	4b1b      	ldr	r3, [pc, #108]	; (80056f8 <_puts_r+0xd4>)
 800568a:	429c      	cmp	r4, r3
 800568c:	d101      	bne.n	8005692 <_puts_r+0x6e>
 800568e:	68ac      	ldr	r4, [r5, #8]
 8005690:	e7da      	b.n	8005648 <_puts_r+0x24>
 8005692:	4b1a      	ldr	r3, [pc, #104]	; (80056fc <_puts_r+0xd8>)
 8005694:	429c      	cmp	r4, r3
 8005696:	bf08      	it	eq
 8005698:	68ec      	ldreq	r4, [r5, #12]
 800569a:	e7d5      	b.n	8005648 <_puts_r+0x24>
 800569c:	4621      	mov	r1, r4
 800569e:	4628      	mov	r0, r5
 80056a0:	f000 f888 	bl	80057b4 <__swsetup_r>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d0dd      	beq.n	8005664 <_puts_r+0x40>
 80056a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80056ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056ae:	07da      	lsls	r2, r3, #31
 80056b0:	d405      	bmi.n	80056be <_puts_r+0x9a>
 80056b2:	89a3      	ldrh	r3, [r4, #12]
 80056b4:	059b      	lsls	r3, r3, #22
 80056b6:	d402      	bmi.n	80056be <_puts_r+0x9a>
 80056b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056ba:	f001 f925 	bl	8006908 <__retarget_lock_release_recursive>
 80056be:	4628      	mov	r0, r5
 80056c0:	bd70      	pop	{r4, r5, r6, pc}
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	da04      	bge.n	80056d0 <_puts_r+0xac>
 80056c6:	69a2      	ldr	r2, [r4, #24]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	dc06      	bgt.n	80056da <_puts_r+0xb6>
 80056cc:	290a      	cmp	r1, #10
 80056ce:	d004      	beq.n	80056da <_puts_r+0xb6>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	6022      	str	r2, [r4, #0]
 80056d6:	7019      	strb	r1, [r3, #0]
 80056d8:	e7c5      	b.n	8005666 <_puts_r+0x42>
 80056da:	4622      	mov	r2, r4
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 f817 	bl	8005710 <__swbuf_r>
 80056e2:	3001      	adds	r0, #1
 80056e4:	d1bf      	bne.n	8005666 <_puts_r+0x42>
 80056e6:	e7df      	b.n	80056a8 <_puts_r+0x84>
 80056e8:	250a      	movs	r5, #10
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	6022      	str	r2, [r4, #0]
 80056f0:	701d      	strb	r5, [r3, #0]
 80056f2:	e7db      	b.n	80056ac <_puts_r+0x88>
 80056f4:	08007844 	.word	0x08007844
 80056f8:	08007864 	.word	0x08007864
 80056fc:	08007824 	.word	0x08007824

08005700 <puts>:
 8005700:	4b02      	ldr	r3, [pc, #8]	; (800570c <puts+0xc>)
 8005702:	4601      	mov	r1, r0
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	f7ff bf8d 	b.w	8005624 <_puts_r>
 800570a:	bf00      	nop
 800570c:	2000000c 	.word	0x2000000c

08005710 <__swbuf_r>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	460e      	mov	r6, r1
 8005714:	4614      	mov	r4, r2
 8005716:	4605      	mov	r5, r0
 8005718:	b118      	cbz	r0, 8005722 <__swbuf_r+0x12>
 800571a:	6983      	ldr	r3, [r0, #24]
 800571c:	b90b      	cbnz	r3, 8005722 <__swbuf_r+0x12>
 800571e:	f001 f84f 	bl	80067c0 <__sinit>
 8005722:	4b21      	ldr	r3, [pc, #132]	; (80057a8 <__swbuf_r+0x98>)
 8005724:	429c      	cmp	r4, r3
 8005726:	d12b      	bne.n	8005780 <__swbuf_r+0x70>
 8005728:	686c      	ldr	r4, [r5, #4]
 800572a:	69a3      	ldr	r3, [r4, #24]
 800572c:	60a3      	str	r3, [r4, #8]
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	071a      	lsls	r2, r3, #28
 8005732:	d52f      	bpl.n	8005794 <__swbuf_r+0x84>
 8005734:	6923      	ldr	r3, [r4, #16]
 8005736:	b36b      	cbz	r3, 8005794 <__swbuf_r+0x84>
 8005738:	6923      	ldr	r3, [r4, #16]
 800573a:	6820      	ldr	r0, [r4, #0]
 800573c:	b2f6      	uxtb	r6, r6
 800573e:	1ac0      	subs	r0, r0, r3
 8005740:	6963      	ldr	r3, [r4, #20]
 8005742:	4637      	mov	r7, r6
 8005744:	4283      	cmp	r3, r0
 8005746:	dc04      	bgt.n	8005752 <__swbuf_r+0x42>
 8005748:	4621      	mov	r1, r4
 800574a:	4628      	mov	r0, r5
 800574c:	f000 ffa4 	bl	8006698 <_fflush_r>
 8005750:	bb30      	cbnz	r0, 80057a0 <__swbuf_r+0x90>
 8005752:	68a3      	ldr	r3, [r4, #8]
 8005754:	3001      	adds	r0, #1
 8005756:	3b01      	subs	r3, #1
 8005758:	60a3      	str	r3, [r4, #8]
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	6022      	str	r2, [r4, #0]
 8005760:	701e      	strb	r6, [r3, #0]
 8005762:	6963      	ldr	r3, [r4, #20]
 8005764:	4283      	cmp	r3, r0
 8005766:	d004      	beq.n	8005772 <__swbuf_r+0x62>
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	07db      	lsls	r3, r3, #31
 800576c:	d506      	bpl.n	800577c <__swbuf_r+0x6c>
 800576e:	2e0a      	cmp	r6, #10
 8005770:	d104      	bne.n	800577c <__swbuf_r+0x6c>
 8005772:	4621      	mov	r1, r4
 8005774:	4628      	mov	r0, r5
 8005776:	f000 ff8f 	bl	8006698 <_fflush_r>
 800577a:	b988      	cbnz	r0, 80057a0 <__swbuf_r+0x90>
 800577c:	4638      	mov	r0, r7
 800577e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005780:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <__swbuf_r+0x9c>)
 8005782:	429c      	cmp	r4, r3
 8005784:	d101      	bne.n	800578a <__swbuf_r+0x7a>
 8005786:	68ac      	ldr	r4, [r5, #8]
 8005788:	e7cf      	b.n	800572a <__swbuf_r+0x1a>
 800578a:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <__swbuf_r+0xa0>)
 800578c:	429c      	cmp	r4, r3
 800578e:	bf08      	it	eq
 8005790:	68ec      	ldreq	r4, [r5, #12]
 8005792:	e7ca      	b.n	800572a <__swbuf_r+0x1a>
 8005794:	4621      	mov	r1, r4
 8005796:	4628      	mov	r0, r5
 8005798:	f000 f80c 	bl	80057b4 <__swsetup_r>
 800579c:	2800      	cmp	r0, #0
 800579e:	d0cb      	beq.n	8005738 <__swbuf_r+0x28>
 80057a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80057a4:	e7ea      	b.n	800577c <__swbuf_r+0x6c>
 80057a6:	bf00      	nop
 80057a8:	08007844 	.word	0x08007844
 80057ac:	08007864 	.word	0x08007864
 80057b0:	08007824 	.word	0x08007824

080057b4 <__swsetup_r>:
 80057b4:	4b32      	ldr	r3, [pc, #200]	; (8005880 <__swsetup_r+0xcc>)
 80057b6:	b570      	push	{r4, r5, r6, lr}
 80057b8:	681d      	ldr	r5, [r3, #0]
 80057ba:	4606      	mov	r6, r0
 80057bc:	460c      	mov	r4, r1
 80057be:	b125      	cbz	r5, 80057ca <__swsetup_r+0x16>
 80057c0:	69ab      	ldr	r3, [r5, #24]
 80057c2:	b913      	cbnz	r3, 80057ca <__swsetup_r+0x16>
 80057c4:	4628      	mov	r0, r5
 80057c6:	f000 fffb 	bl	80067c0 <__sinit>
 80057ca:	4b2e      	ldr	r3, [pc, #184]	; (8005884 <__swsetup_r+0xd0>)
 80057cc:	429c      	cmp	r4, r3
 80057ce:	d10f      	bne.n	80057f0 <__swsetup_r+0x3c>
 80057d0:	686c      	ldr	r4, [r5, #4]
 80057d2:	89a3      	ldrh	r3, [r4, #12]
 80057d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057d8:	0719      	lsls	r1, r3, #28
 80057da:	d42c      	bmi.n	8005836 <__swsetup_r+0x82>
 80057dc:	06dd      	lsls	r5, r3, #27
 80057de:	d411      	bmi.n	8005804 <__swsetup_r+0x50>
 80057e0:	2309      	movs	r3, #9
 80057e2:	6033      	str	r3, [r6, #0]
 80057e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057ec:	81a3      	strh	r3, [r4, #12]
 80057ee:	e03e      	b.n	800586e <__swsetup_r+0xba>
 80057f0:	4b25      	ldr	r3, [pc, #148]	; (8005888 <__swsetup_r+0xd4>)
 80057f2:	429c      	cmp	r4, r3
 80057f4:	d101      	bne.n	80057fa <__swsetup_r+0x46>
 80057f6:	68ac      	ldr	r4, [r5, #8]
 80057f8:	e7eb      	b.n	80057d2 <__swsetup_r+0x1e>
 80057fa:	4b24      	ldr	r3, [pc, #144]	; (800588c <__swsetup_r+0xd8>)
 80057fc:	429c      	cmp	r4, r3
 80057fe:	bf08      	it	eq
 8005800:	68ec      	ldreq	r4, [r5, #12]
 8005802:	e7e6      	b.n	80057d2 <__swsetup_r+0x1e>
 8005804:	0758      	lsls	r0, r3, #29
 8005806:	d512      	bpl.n	800582e <__swsetup_r+0x7a>
 8005808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800580a:	b141      	cbz	r1, 800581e <__swsetup_r+0x6a>
 800580c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005810:	4299      	cmp	r1, r3
 8005812:	d002      	beq.n	800581a <__swsetup_r+0x66>
 8005814:	4630      	mov	r0, r6
 8005816:	f001 fc97 	bl	8007148 <_free_r>
 800581a:	2300      	movs	r3, #0
 800581c:	6363      	str	r3, [r4, #52]	; 0x34
 800581e:	89a3      	ldrh	r3, [r4, #12]
 8005820:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005824:	81a3      	strh	r3, [r4, #12]
 8005826:	2300      	movs	r3, #0
 8005828:	6063      	str	r3, [r4, #4]
 800582a:	6923      	ldr	r3, [r4, #16]
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	89a3      	ldrh	r3, [r4, #12]
 8005830:	f043 0308 	orr.w	r3, r3, #8
 8005834:	81a3      	strh	r3, [r4, #12]
 8005836:	6923      	ldr	r3, [r4, #16]
 8005838:	b94b      	cbnz	r3, 800584e <__swsetup_r+0x9a>
 800583a:	89a3      	ldrh	r3, [r4, #12]
 800583c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005844:	d003      	beq.n	800584e <__swsetup_r+0x9a>
 8005846:	4621      	mov	r1, r4
 8005848:	4630      	mov	r0, r6
 800584a:	f001 f883 	bl	8006954 <__smakebuf_r>
 800584e:	89a0      	ldrh	r0, [r4, #12]
 8005850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005854:	f010 0301 	ands.w	r3, r0, #1
 8005858:	d00a      	beq.n	8005870 <__swsetup_r+0xbc>
 800585a:	2300      	movs	r3, #0
 800585c:	60a3      	str	r3, [r4, #8]
 800585e:	6963      	ldr	r3, [r4, #20]
 8005860:	425b      	negs	r3, r3
 8005862:	61a3      	str	r3, [r4, #24]
 8005864:	6923      	ldr	r3, [r4, #16]
 8005866:	b943      	cbnz	r3, 800587a <__swsetup_r+0xc6>
 8005868:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800586c:	d1ba      	bne.n	80057e4 <__swsetup_r+0x30>
 800586e:	bd70      	pop	{r4, r5, r6, pc}
 8005870:	0781      	lsls	r1, r0, #30
 8005872:	bf58      	it	pl
 8005874:	6963      	ldrpl	r3, [r4, #20]
 8005876:	60a3      	str	r3, [r4, #8]
 8005878:	e7f4      	b.n	8005864 <__swsetup_r+0xb0>
 800587a:	2000      	movs	r0, #0
 800587c:	e7f7      	b.n	800586e <__swsetup_r+0xba>
 800587e:	bf00      	nop
 8005880:	2000000c 	.word	0x2000000c
 8005884:	08007844 	.word	0x08007844
 8005888:	08007864 	.word	0x08007864
 800588c:	08007824 	.word	0x08007824

08005890 <abort>:
 8005890:	2006      	movs	r0, #6
 8005892:	b508      	push	{r3, lr}
 8005894:	f001 fdb4 	bl	8007400 <raise>
 8005898:	2001      	movs	r0, #1
 800589a:	f7fb ff37 	bl	800170c <_exit>

0800589e <quorem>:
 800589e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a2:	6903      	ldr	r3, [r0, #16]
 80058a4:	690c      	ldr	r4, [r1, #16]
 80058a6:	4607      	mov	r7, r0
 80058a8:	42a3      	cmp	r3, r4
 80058aa:	f2c0 8082 	blt.w	80059b2 <quorem+0x114>
 80058ae:	3c01      	subs	r4, #1
 80058b0:	f100 0514 	add.w	r5, r0, #20
 80058b4:	f101 0814 	add.w	r8, r1, #20
 80058b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058bc:	9301      	str	r3, [sp, #4]
 80058be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80058c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058c6:	3301      	adds	r3, #1
 80058c8:	429a      	cmp	r2, r3
 80058ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80058ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80058d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80058d6:	d331      	bcc.n	800593c <quorem+0x9e>
 80058d8:	f04f 0e00 	mov.w	lr, #0
 80058dc:	4640      	mov	r0, r8
 80058de:	46ac      	mov	ip, r5
 80058e0:	46f2      	mov	sl, lr
 80058e2:	f850 2b04 	ldr.w	r2, [r0], #4
 80058e6:	b293      	uxth	r3, r2
 80058e8:	fb06 e303 	mla	r3, r6, r3, lr
 80058ec:	0c12      	lsrs	r2, r2, #16
 80058ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	fb06 e202 	mla	r2, r6, r2, lr
 80058f8:	ebaa 0303 	sub.w	r3, sl, r3
 80058fc:	f8dc a000 	ldr.w	sl, [ip]
 8005900:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005904:	fa1f fa8a 	uxth.w	sl, sl
 8005908:	4453      	add	r3, sl
 800590a:	f8dc a000 	ldr.w	sl, [ip]
 800590e:	b292      	uxth	r2, r2
 8005910:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005914:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005918:	b29b      	uxth	r3, r3
 800591a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800591e:	4581      	cmp	r9, r0
 8005920:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005924:	f84c 3b04 	str.w	r3, [ip], #4
 8005928:	d2db      	bcs.n	80058e2 <quorem+0x44>
 800592a:	f855 300b 	ldr.w	r3, [r5, fp]
 800592e:	b92b      	cbnz	r3, 800593c <quorem+0x9e>
 8005930:	9b01      	ldr	r3, [sp, #4]
 8005932:	3b04      	subs	r3, #4
 8005934:	429d      	cmp	r5, r3
 8005936:	461a      	mov	r2, r3
 8005938:	d32f      	bcc.n	800599a <quorem+0xfc>
 800593a:	613c      	str	r4, [r7, #16]
 800593c:	4638      	mov	r0, r7
 800593e:	f001 faeb 	bl	8006f18 <__mcmp>
 8005942:	2800      	cmp	r0, #0
 8005944:	db25      	blt.n	8005992 <quorem+0xf4>
 8005946:	4628      	mov	r0, r5
 8005948:	f04f 0c00 	mov.w	ip, #0
 800594c:	3601      	adds	r6, #1
 800594e:	f858 1b04 	ldr.w	r1, [r8], #4
 8005952:	f8d0 e000 	ldr.w	lr, [r0]
 8005956:	b28b      	uxth	r3, r1
 8005958:	ebac 0303 	sub.w	r3, ip, r3
 800595c:	fa1f f28e 	uxth.w	r2, lr
 8005960:	4413      	add	r3, r2
 8005962:	0c0a      	lsrs	r2, r1, #16
 8005964:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005968:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800596c:	b29b      	uxth	r3, r3
 800596e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005972:	45c1      	cmp	r9, r8
 8005974:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005978:	f840 3b04 	str.w	r3, [r0], #4
 800597c:	d2e7      	bcs.n	800594e <quorem+0xb0>
 800597e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005982:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005986:	b922      	cbnz	r2, 8005992 <quorem+0xf4>
 8005988:	3b04      	subs	r3, #4
 800598a:	429d      	cmp	r5, r3
 800598c:	461a      	mov	r2, r3
 800598e:	d30a      	bcc.n	80059a6 <quorem+0x108>
 8005990:	613c      	str	r4, [r7, #16]
 8005992:	4630      	mov	r0, r6
 8005994:	b003      	add	sp, #12
 8005996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599a:	6812      	ldr	r2, [r2, #0]
 800599c:	3b04      	subs	r3, #4
 800599e:	2a00      	cmp	r2, #0
 80059a0:	d1cb      	bne.n	800593a <quorem+0x9c>
 80059a2:	3c01      	subs	r4, #1
 80059a4:	e7c6      	b.n	8005934 <quorem+0x96>
 80059a6:	6812      	ldr	r2, [r2, #0]
 80059a8:	3b04      	subs	r3, #4
 80059aa:	2a00      	cmp	r2, #0
 80059ac:	d1f0      	bne.n	8005990 <quorem+0xf2>
 80059ae:	3c01      	subs	r4, #1
 80059b0:	e7eb      	b.n	800598a <quorem+0xec>
 80059b2:	2000      	movs	r0, #0
 80059b4:	e7ee      	b.n	8005994 <quorem+0xf6>
	...

080059b8 <_dtoa_r>:
 80059b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	4616      	mov	r6, r2
 80059be:	461f      	mov	r7, r3
 80059c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80059c2:	b099      	sub	sp, #100	; 0x64
 80059c4:	4605      	mov	r5, r0
 80059c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80059ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80059ce:	b974      	cbnz	r4, 80059ee <_dtoa_r+0x36>
 80059d0:	2010      	movs	r0, #16
 80059d2:	f000 ffff 	bl	80069d4 <malloc>
 80059d6:	4602      	mov	r2, r0
 80059d8:	6268      	str	r0, [r5, #36]	; 0x24
 80059da:	b920      	cbnz	r0, 80059e6 <_dtoa_r+0x2e>
 80059dc:	21ea      	movs	r1, #234	; 0xea
 80059de:	4ba8      	ldr	r3, [pc, #672]	; (8005c80 <_dtoa_r+0x2c8>)
 80059e0:	48a8      	ldr	r0, [pc, #672]	; (8005c84 <_dtoa_r+0x2cc>)
 80059e2:	f7fe ffd9 	bl	8004998 <__assert_func>
 80059e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059ea:	6004      	str	r4, [r0, #0]
 80059ec:	60c4      	str	r4, [r0, #12]
 80059ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80059f0:	6819      	ldr	r1, [r3, #0]
 80059f2:	b151      	cbz	r1, 8005a0a <_dtoa_r+0x52>
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	2301      	movs	r3, #1
 80059f8:	4093      	lsls	r3, r2
 80059fa:	604a      	str	r2, [r1, #4]
 80059fc:	608b      	str	r3, [r1, #8]
 80059fe:	4628      	mov	r0, r5
 8005a00:	f001 f84c 	bl	8006a9c <_Bfree>
 8005a04:	2200      	movs	r2, #0
 8005a06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	1e3b      	subs	r3, r7, #0
 8005a0c:	bfaf      	iteee	ge
 8005a0e:	2300      	movge	r3, #0
 8005a10:	2201      	movlt	r2, #1
 8005a12:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a16:	9305      	strlt	r3, [sp, #20]
 8005a18:	bfa8      	it	ge
 8005a1a:	f8c8 3000 	strge.w	r3, [r8]
 8005a1e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005a22:	4b99      	ldr	r3, [pc, #612]	; (8005c88 <_dtoa_r+0x2d0>)
 8005a24:	bfb8      	it	lt
 8005a26:	f8c8 2000 	strlt.w	r2, [r8]
 8005a2a:	ea33 0309 	bics.w	r3, r3, r9
 8005a2e:	d119      	bne.n	8005a64 <_dtoa_r+0xac>
 8005a30:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a34:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a3c:	4333      	orrs	r3, r6
 8005a3e:	f000 857f 	beq.w	8006540 <_dtoa_r+0xb88>
 8005a42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a44:	b953      	cbnz	r3, 8005a5c <_dtoa_r+0xa4>
 8005a46:	4b91      	ldr	r3, [pc, #580]	; (8005c8c <_dtoa_r+0x2d4>)
 8005a48:	e022      	b.n	8005a90 <_dtoa_r+0xd8>
 8005a4a:	4b91      	ldr	r3, [pc, #580]	; (8005c90 <_dtoa_r+0x2d8>)
 8005a4c:	9303      	str	r3, [sp, #12]
 8005a4e:	3308      	adds	r3, #8
 8005a50:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	9803      	ldr	r0, [sp, #12]
 8005a56:	b019      	add	sp, #100	; 0x64
 8005a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a5c:	4b8b      	ldr	r3, [pc, #556]	; (8005c8c <_dtoa_r+0x2d4>)
 8005a5e:	9303      	str	r3, [sp, #12]
 8005a60:	3303      	adds	r3, #3
 8005a62:	e7f5      	b.n	8005a50 <_dtoa_r+0x98>
 8005a64:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005a68:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005a6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a70:	2200      	movs	r2, #0
 8005a72:	2300      	movs	r3, #0
 8005a74:	f7fa ffb0 	bl	80009d8 <__aeabi_dcmpeq>
 8005a78:	4680      	mov	r8, r0
 8005a7a:	b158      	cbz	r0, 8005a94 <_dtoa_r+0xdc>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8558 	beq.w	800653a <_dtoa_r+0xb82>
 8005a8a:	4882      	ldr	r0, [pc, #520]	; (8005c94 <_dtoa_r+0x2dc>)
 8005a8c:	6018      	str	r0, [r3, #0]
 8005a8e:	1e43      	subs	r3, r0, #1
 8005a90:	9303      	str	r3, [sp, #12]
 8005a92:	e7df      	b.n	8005a54 <_dtoa_r+0x9c>
 8005a94:	ab16      	add	r3, sp, #88	; 0x58
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	ab17      	add	r3, sp, #92	; 0x5c
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005aa2:	f001 fae1 	bl	8007068 <__d2b>
 8005aa6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005aaa:	4683      	mov	fp, r0
 8005aac:	2c00      	cmp	r4, #0
 8005aae:	d07f      	beq.n	8005bb0 <_dtoa_r+0x1f8>
 8005ab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ab6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005aba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005abe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005ac2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005ac6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005aca:	2200      	movs	r2, #0
 8005acc:	4b72      	ldr	r3, [pc, #456]	; (8005c98 <_dtoa_r+0x2e0>)
 8005ace:	f7fa fb63 	bl	8000198 <__aeabi_dsub>
 8005ad2:	a365      	add	r3, pc, #404	; (adr r3, 8005c68 <_dtoa_r+0x2b0>)
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	f7fa fd16 	bl	8000508 <__aeabi_dmul>
 8005adc:	a364      	add	r3, pc, #400	; (adr r3, 8005c70 <_dtoa_r+0x2b8>)
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	f7fa fb5b 	bl	800019c <__adddf3>
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	4620      	mov	r0, r4
 8005aea:	460f      	mov	r7, r1
 8005aec:	f7fa fca2 	bl	8000434 <__aeabi_i2d>
 8005af0:	a361      	add	r3, pc, #388	; (adr r3, 8005c78 <_dtoa_r+0x2c0>)
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	f7fa fd07 	bl	8000508 <__aeabi_dmul>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	4630      	mov	r0, r6
 8005b00:	4639      	mov	r1, r7
 8005b02:	f7fa fb4b 	bl	800019c <__adddf3>
 8005b06:	4606      	mov	r6, r0
 8005b08:	460f      	mov	r7, r1
 8005b0a:	f7fa ffad 	bl	8000a68 <__aeabi_d2iz>
 8005b0e:	2200      	movs	r2, #0
 8005b10:	4682      	mov	sl, r0
 8005b12:	2300      	movs	r3, #0
 8005b14:	4630      	mov	r0, r6
 8005b16:	4639      	mov	r1, r7
 8005b18:	f7fa ff68 	bl	80009ec <__aeabi_dcmplt>
 8005b1c:	b148      	cbz	r0, 8005b32 <_dtoa_r+0x17a>
 8005b1e:	4650      	mov	r0, sl
 8005b20:	f7fa fc88 	bl	8000434 <__aeabi_i2d>
 8005b24:	4632      	mov	r2, r6
 8005b26:	463b      	mov	r3, r7
 8005b28:	f7fa ff56 	bl	80009d8 <__aeabi_dcmpeq>
 8005b2c:	b908      	cbnz	r0, 8005b32 <_dtoa_r+0x17a>
 8005b2e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005b32:	f1ba 0f16 	cmp.w	sl, #22
 8005b36:	d858      	bhi.n	8005bea <_dtoa_r+0x232>
 8005b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b3c:	4b57      	ldr	r3, [pc, #348]	; (8005c9c <_dtoa_r+0x2e4>)
 8005b3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f7fa ff51 	bl	80009ec <__aeabi_dcmplt>
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d04f      	beq.n	8005bee <_dtoa_r+0x236>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005b54:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b56:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b58:	1b1c      	subs	r4, r3, r4
 8005b5a:	1e63      	subs	r3, r4, #1
 8005b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5e:	bf49      	itett	mi
 8005b60:	f1c4 0301 	rsbmi	r3, r4, #1
 8005b64:	2300      	movpl	r3, #0
 8005b66:	9306      	strmi	r3, [sp, #24]
 8005b68:	2300      	movmi	r3, #0
 8005b6a:	bf54      	ite	pl
 8005b6c:	9306      	strpl	r3, [sp, #24]
 8005b6e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005b70:	f1ba 0f00 	cmp.w	sl, #0
 8005b74:	db3d      	blt.n	8005bf2 <_dtoa_r+0x23a>
 8005b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b78:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005b7c:	4453      	add	r3, sl
 8005b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b80:	2300      	movs	r3, #0
 8005b82:	930a      	str	r3, [sp, #40]	; 0x28
 8005b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b86:	2b09      	cmp	r3, #9
 8005b88:	f200 808c 	bhi.w	8005ca4 <_dtoa_r+0x2ec>
 8005b8c:	2b05      	cmp	r3, #5
 8005b8e:	bfc4      	itt	gt
 8005b90:	3b04      	subgt	r3, #4
 8005b92:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005b94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b96:	bfc8      	it	gt
 8005b98:	2400      	movgt	r4, #0
 8005b9a:	f1a3 0302 	sub.w	r3, r3, #2
 8005b9e:	bfd8      	it	le
 8005ba0:	2401      	movle	r4, #1
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	f200 808a 	bhi.w	8005cbc <_dtoa_r+0x304>
 8005ba8:	e8df f003 	tbb	[pc, r3]
 8005bac:	5b4d4f2d 	.word	0x5b4d4f2d
 8005bb0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005bb4:	441c      	add	r4, r3
 8005bb6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	bfc3      	ittte	gt
 8005bbe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005bc2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005bc6:	fa09 f303 	lslgt.w	r3, r9, r3
 8005bca:	f1c3 0320 	rsble	r3, r3, #32
 8005bce:	bfc6      	itte	gt
 8005bd0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005bd4:	4318      	orrgt	r0, r3
 8005bd6:	fa06 f003 	lslle.w	r0, r6, r3
 8005bda:	f7fa fc1b 	bl	8000414 <__aeabi_ui2d>
 8005bde:	2301      	movs	r3, #1
 8005be0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005be4:	3c01      	subs	r4, #1
 8005be6:	9313      	str	r3, [sp, #76]	; 0x4c
 8005be8:	e76f      	b.n	8005aca <_dtoa_r+0x112>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e7b2      	b.n	8005b54 <_dtoa_r+0x19c>
 8005bee:	900f      	str	r0, [sp, #60]	; 0x3c
 8005bf0:	e7b1      	b.n	8005b56 <_dtoa_r+0x19e>
 8005bf2:	9b06      	ldr	r3, [sp, #24]
 8005bf4:	eba3 030a 	sub.w	r3, r3, sl
 8005bf8:	9306      	str	r3, [sp, #24]
 8005bfa:	f1ca 0300 	rsb	r3, sl, #0
 8005bfe:	930a      	str	r3, [sp, #40]	; 0x28
 8005c00:	2300      	movs	r3, #0
 8005c02:	930e      	str	r3, [sp, #56]	; 0x38
 8005c04:	e7be      	b.n	8005b84 <_dtoa_r+0x1cc>
 8005c06:	2300      	movs	r3, #0
 8005c08:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	dc58      	bgt.n	8005cc2 <_dtoa_r+0x30a>
 8005c10:	f04f 0901 	mov.w	r9, #1
 8005c14:	464b      	mov	r3, r9
 8005c16:	f8cd 9020 	str.w	r9, [sp, #32]
 8005c1a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005c1e:	2200      	movs	r2, #0
 8005c20:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005c22:	6042      	str	r2, [r0, #4]
 8005c24:	2204      	movs	r2, #4
 8005c26:	f102 0614 	add.w	r6, r2, #20
 8005c2a:	429e      	cmp	r6, r3
 8005c2c:	6841      	ldr	r1, [r0, #4]
 8005c2e:	d94e      	bls.n	8005cce <_dtoa_r+0x316>
 8005c30:	4628      	mov	r0, r5
 8005c32:	f000 fef3 	bl	8006a1c <_Balloc>
 8005c36:	9003      	str	r0, [sp, #12]
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	d14c      	bne.n	8005cd6 <_dtoa_r+0x31e>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005c42:	4b17      	ldr	r3, [pc, #92]	; (8005ca0 <_dtoa_r+0x2e8>)
 8005c44:	e6cc      	b.n	80059e0 <_dtoa_r+0x28>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e7de      	b.n	8005c08 <_dtoa_r+0x250>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c50:	eb0a 0903 	add.w	r9, sl, r3
 8005c54:	f109 0301 	add.w	r3, r9, #1
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	9308      	str	r3, [sp, #32]
 8005c5c:	bfb8      	it	lt
 8005c5e:	2301      	movlt	r3, #1
 8005c60:	e7dd      	b.n	8005c1e <_dtoa_r+0x266>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e7f2      	b.n	8005c4c <_dtoa_r+0x294>
 8005c66:	bf00      	nop
 8005c68:	636f4361 	.word	0x636f4361
 8005c6c:	3fd287a7 	.word	0x3fd287a7
 8005c70:	8b60c8b3 	.word	0x8b60c8b3
 8005c74:	3fc68a28 	.word	0x3fc68a28
 8005c78:	509f79fb 	.word	0x509f79fb
 8005c7c:	3fd34413 	.word	0x3fd34413
 8005c80:	0800779e 	.word	0x0800779e
 8005c84:	080077b5 	.word	0x080077b5
 8005c88:	7ff00000 	.word	0x7ff00000
 8005c8c:	0800779a 	.word	0x0800779a
 8005c90:	08007791 	.word	0x08007791
 8005c94:	0800776e 	.word	0x0800776e
 8005c98:	3ff80000 	.word	0x3ff80000
 8005c9c:	08007908 	.word	0x08007908
 8005ca0:	08007810 	.word	0x08007810
 8005ca4:	2401      	movs	r4, #1
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005caa:	9322      	str	r3, [sp, #136]	; 0x88
 8005cac:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2312      	movs	r3, #18
 8005cb4:	f8cd 9020 	str.w	r9, [sp, #32]
 8005cb8:	9223      	str	r2, [sp, #140]	; 0x8c
 8005cba:	e7b0      	b.n	8005c1e <_dtoa_r+0x266>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cc0:	e7f4      	b.n	8005cac <_dtoa_r+0x2f4>
 8005cc2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	f8cd 9020 	str.w	r9, [sp, #32]
 8005ccc:	e7a7      	b.n	8005c1e <_dtoa_r+0x266>
 8005cce:	3101      	adds	r1, #1
 8005cd0:	6041      	str	r1, [r0, #4]
 8005cd2:	0052      	lsls	r2, r2, #1
 8005cd4:	e7a7      	b.n	8005c26 <_dtoa_r+0x26e>
 8005cd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005cd8:	9a03      	ldr	r2, [sp, #12]
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	9b08      	ldr	r3, [sp, #32]
 8005cde:	2b0e      	cmp	r3, #14
 8005ce0:	f200 80a8 	bhi.w	8005e34 <_dtoa_r+0x47c>
 8005ce4:	2c00      	cmp	r4, #0
 8005ce6:	f000 80a5 	beq.w	8005e34 <_dtoa_r+0x47c>
 8005cea:	f1ba 0f00 	cmp.w	sl, #0
 8005cee:	dd34      	ble.n	8005d5a <_dtoa_r+0x3a2>
 8005cf0:	4a9a      	ldr	r2, [pc, #616]	; (8005f5c <_dtoa_r+0x5a4>)
 8005cf2:	f00a 030f 	and.w	r3, sl, #15
 8005cf6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005cfa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005cfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005d06:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005d0a:	d016      	beq.n	8005d3a <_dtoa_r+0x382>
 8005d0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d10:	4b93      	ldr	r3, [pc, #588]	; (8005f60 <_dtoa_r+0x5a8>)
 8005d12:	2703      	movs	r7, #3
 8005d14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d18:	f7fa fd20 	bl	800075c <__aeabi_ddiv>
 8005d1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d20:	f004 040f 	and.w	r4, r4, #15
 8005d24:	4e8e      	ldr	r6, [pc, #568]	; (8005f60 <_dtoa_r+0x5a8>)
 8005d26:	b954      	cbnz	r4, 8005d3e <_dtoa_r+0x386>
 8005d28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d30:	f7fa fd14 	bl	800075c <__aeabi_ddiv>
 8005d34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d38:	e029      	b.n	8005d8e <_dtoa_r+0x3d6>
 8005d3a:	2702      	movs	r7, #2
 8005d3c:	e7f2      	b.n	8005d24 <_dtoa_r+0x36c>
 8005d3e:	07e1      	lsls	r1, r4, #31
 8005d40:	d508      	bpl.n	8005d54 <_dtoa_r+0x39c>
 8005d42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d4a:	f7fa fbdd 	bl	8000508 <__aeabi_dmul>
 8005d4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d52:	3701      	adds	r7, #1
 8005d54:	1064      	asrs	r4, r4, #1
 8005d56:	3608      	adds	r6, #8
 8005d58:	e7e5      	b.n	8005d26 <_dtoa_r+0x36e>
 8005d5a:	f000 80a5 	beq.w	8005ea8 <_dtoa_r+0x4f0>
 8005d5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d62:	f1ca 0400 	rsb	r4, sl, #0
 8005d66:	4b7d      	ldr	r3, [pc, #500]	; (8005f5c <_dtoa_r+0x5a4>)
 8005d68:	f004 020f 	and.w	r2, r4, #15
 8005d6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	f7fa fbc8 	bl	8000508 <__aeabi_dmul>
 8005d78:	2702      	movs	r7, #2
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d80:	4e77      	ldr	r6, [pc, #476]	; (8005f60 <_dtoa_r+0x5a8>)
 8005d82:	1124      	asrs	r4, r4, #4
 8005d84:	2c00      	cmp	r4, #0
 8005d86:	f040 8084 	bne.w	8005e92 <_dtoa_r+0x4da>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1d2      	bne.n	8005d34 <_dtoa_r+0x37c>
 8005d8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 808b 	beq.w	8005eac <_dtoa_r+0x4f4>
 8005d96:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005d9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005da2:	2200      	movs	r2, #0
 8005da4:	4b6f      	ldr	r3, [pc, #444]	; (8005f64 <_dtoa_r+0x5ac>)
 8005da6:	f7fa fe21 	bl	80009ec <__aeabi_dcmplt>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d07e      	beq.n	8005eac <_dtoa_r+0x4f4>
 8005dae:	9b08      	ldr	r3, [sp, #32]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d07b      	beq.n	8005eac <_dtoa_r+0x4f4>
 8005db4:	f1b9 0f00 	cmp.w	r9, #0
 8005db8:	dd38      	ble.n	8005e2c <_dtoa_r+0x474>
 8005dba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	4b69      	ldr	r3, [pc, #420]	; (8005f68 <_dtoa_r+0x5b0>)
 8005dc2:	f7fa fba1 	bl	8000508 <__aeabi_dmul>
 8005dc6:	464c      	mov	r4, r9
 8005dc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dcc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8005dd0:	3701      	adds	r7, #1
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	f7fa fb2e 	bl	8000434 <__aeabi_i2d>
 8005dd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ddc:	f7fa fb94 	bl	8000508 <__aeabi_dmul>
 8005de0:	2200      	movs	r2, #0
 8005de2:	4b62      	ldr	r3, [pc, #392]	; (8005f6c <_dtoa_r+0x5b4>)
 8005de4:	f7fa f9da 	bl	800019c <__adddf3>
 8005de8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005dec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005df0:	9611      	str	r6, [sp, #68]	; 0x44
 8005df2:	2c00      	cmp	r4, #0
 8005df4:	d15d      	bne.n	8005eb2 <_dtoa_r+0x4fa>
 8005df6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	4b5c      	ldr	r3, [pc, #368]	; (8005f70 <_dtoa_r+0x5b8>)
 8005dfe:	f7fa f9cb 	bl	8000198 <__aeabi_dsub>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e0a:	4633      	mov	r3, r6
 8005e0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e0e:	f7fa fe0b 	bl	8000a28 <__aeabi_dcmpgt>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	f040 829c 	bne.w	8006350 <_dtoa_r+0x998>
 8005e18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e1e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005e22:	f7fa fde3 	bl	80009ec <__aeabi_dcmplt>
 8005e26:	2800      	cmp	r0, #0
 8005e28:	f040 8290 	bne.w	800634c <_dtoa_r+0x994>
 8005e2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005e30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f2c0 8152 	blt.w	80060e0 <_dtoa_r+0x728>
 8005e3c:	f1ba 0f0e 	cmp.w	sl, #14
 8005e40:	f300 814e 	bgt.w	80060e0 <_dtoa_r+0x728>
 8005e44:	4b45      	ldr	r3, [pc, #276]	; (8005f5c <_dtoa_r+0x5a4>)
 8005e46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e4e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005e52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f280 80db 	bge.w	8006010 <_dtoa_r+0x658>
 8005e5a:	9b08      	ldr	r3, [sp, #32]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f300 80d7 	bgt.w	8006010 <_dtoa_r+0x658>
 8005e62:	f040 8272 	bne.w	800634a <_dtoa_r+0x992>
 8005e66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	4b40      	ldr	r3, [pc, #256]	; (8005f70 <_dtoa_r+0x5b8>)
 8005e6e:	f7fa fb4b 	bl	8000508 <__aeabi_dmul>
 8005e72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e76:	f7fa fdcd 	bl	8000a14 <__aeabi_dcmpge>
 8005e7a:	9c08      	ldr	r4, [sp, #32]
 8005e7c:	4626      	mov	r6, r4
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	f040 8248 	bne.w	8006314 <_dtoa_r+0x95c>
 8005e84:	2331      	movs	r3, #49	; 0x31
 8005e86:	9f03      	ldr	r7, [sp, #12]
 8005e88:	f10a 0a01 	add.w	sl, sl, #1
 8005e8c:	f807 3b01 	strb.w	r3, [r7], #1
 8005e90:	e244      	b.n	800631c <_dtoa_r+0x964>
 8005e92:	07e2      	lsls	r2, r4, #31
 8005e94:	d505      	bpl.n	8005ea2 <_dtoa_r+0x4ea>
 8005e96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e9a:	f7fa fb35 	bl	8000508 <__aeabi_dmul>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	3701      	adds	r7, #1
 8005ea2:	1064      	asrs	r4, r4, #1
 8005ea4:	3608      	adds	r6, #8
 8005ea6:	e76d      	b.n	8005d84 <_dtoa_r+0x3cc>
 8005ea8:	2702      	movs	r7, #2
 8005eaa:	e770      	b.n	8005d8e <_dtoa_r+0x3d6>
 8005eac:	46d0      	mov	r8, sl
 8005eae:	9c08      	ldr	r4, [sp, #32]
 8005eb0:	e78f      	b.n	8005dd2 <_dtoa_r+0x41a>
 8005eb2:	9903      	ldr	r1, [sp, #12]
 8005eb4:	4b29      	ldr	r3, [pc, #164]	; (8005f5c <_dtoa_r+0x5a4>)
 8005eb6:	4421      	add	r1, r4
 8005eb8:	9112      	str	r1, [sp, #72]	; 0x48
 8005eba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ebc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ec0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005ec4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ec8:	2900      	cmp	r1, #0
 8005eca:	d055      	beq.n	8005f78 <_dtoa_r+0x5c0>
 8005ecc:	2000      	movs	r0, #0
 8005ece:	4929      	ldr	r1, [pc, #164]	; (8005f74 <_dtoa_r+0x5bc>)
 8005ed0:	f7fa fc44 	bl	800075c <__aeabi_ddiv>
 8005ed4:	463b      	mov	r3, r7
 8005ed6:	4632      	mov	r2, r6
 8005ed8:	f7fa f95e 	bl	8000198 <__aeabi_dsub>
 8005edc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ee0:	9f03      	ldr	r7, [sp, #12]
 8005ee2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ee6:	f7fa fdbf 	bl	8000a68 <__aeabi_d2iz>
 8005eea:	4604      	mov	r4, r0
 8005eec:	f7fa faa2 	bl	8000434 <__aeabi_i2d>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ef8:	f7fa f94e 	bl	8000198 <__aeabi_dsub>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	3430      	adds	r4, #48	; 0x30
 8005f02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f0a:	f807 4b01 	strb.w	r4, [r7], #1
 8005f0e:	f7fa fd6d 	bl	80009ec <__aeabi_dcmplt>
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d174      	bne.n	8006000 <_dtoa_r+0x648>
 8005f16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	4911      	ldr	r1, [pc, #68]	; (8005f64 <_dtoa_r+0x5ac>)
 8005f1e:	f7fa f93b 	bl	8000198 <__aeabi_dsub>
 8005f22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f26:	f7fa fd61 	bl	80009ec <__aeabi_dcmplt>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	f040 80b7 	bne.w	800609e <_dtoa_r+0x6e6>
 8005f30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f32:	429f      	cmp	r7, r3
 8005f34:	f43f af7a 	beq.w	8005e2c <_dtoa_r+0x474>
 8005f38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <_dtoa_r+0x5b0>)
 8005f40:	f7fa fae2 	bl	8000508 <__aeabi_dmul>
 8005f44:	2200      	movs	r2, #0
 8005f46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <_dtoa_r+0x5b0>)
 8005f50:	f7fa fada 	bl	8000508 <__aeabi_dmul>
 8005f54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f58:	e7c3      	b.n	8005ee2 <_dtoa_r+0x52a>
 8005f5a:	bf00      	nop
 8005f5c:	08007908 	.word	0x08007908
 8005f60:	080078e0 	.word	0x080078e0
 8005f64:	3ff00000 	.word	0x3ff00000
 8005f68:	40240000 	.word	0x40240000
 8005f6c:	401c0000 	.word	0x401c0000
 8005f70:	40140000 	.word	0x40140000
 8005f74:	3fe00000 	.word	0x3fe00000
 8005f78:	4630      	mov	r0, r6
 8005f7a:	4639      	mov	r1, r7
 8005f7c:	f7fa fac4 	bl	8000508 <__aeabi_dmul>
 8005f80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f86:	9c03      	ldr	r4, [sp, #12]
 8005f88:	9314      	str	r3, [sp, #80]	; 0x50
 8005f8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f8e:	f7fa fd6b 	bl	8000a68 <__aeabi_d2iz>
 8005f92:	9015      	str	r0, [sp, #84]	; 0x54
 8005f94:	f7fa fa4e 	bl	8000434 <__aeabi_i2d>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fa0:	f7fa f8fa 	bl	8000198 <__aeabi_dsub>
 8005fa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fa6:	4606      	mov	r6, r0
 8005fa8:	3330      	adds	r3, #48	; 0x30
 8005faa:	f804 3b01 	strb.w	r3, [r4], #1
 8005fae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fb0:	460f      	mov	r7, r1
 8005fb2:	429c      	cmp	r4, r3
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	d124      	bne.n	8006004 <_dtoa_r+0x64c>
 8005fba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fbe:	4bb0      	ldr	r3, [pc, #704]	; (8006280 <_dtoa_r+0x8c8>)
 8005fc0:	f7fa f8ec 	bl	800019c <__adddf3>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4630      	mov	r0, r6
 8005fca:	4639      	mov	r1, r7
 8005fcc:	f7fa fd2c 	bl	8000a28 <__aeabi_dcmpgt>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d163      	bne.n	800609c <_dtoa_r+0x6e4>
 8005fd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fd8:	2000      	movs	r0, #0
 8005fda:	49a9      	ldr	r1, [pc, #676]	; (8006280 <_dtoa_r+0x8c8>)
 8005fdc:	f7fa f8dc 	bl	8000198 <__aeabi_dsub>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	4639      	mov	r1, r7
 8005fe8:	f7fa fd00 	bl	80009ec <__aeabi_dcmplt>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	f43f af1d 	beq.w	8005e2c <_dtoa_r+0x474>
 8005ff2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005ff4:	1e7b      	subs	r3, r7, #1
 8005ff6:	9314      	str	r3, [sp, #80]	; 0x50
 8005ff8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005ffc:	2b30      	cmp	r3, #48	; 0x30
 8005ffe:	d0f8      	beq.n	8005ff2 <_dtoa_r+0x63a>
 8006000:	46c2      	mov	sl, r8
 8006002:	e03b      	b.n	800607c <_dtoa_r+0x6c4>
 8006004:	4b9f      	ldr	r3, [pc, #636]	; (8006284 <_dtoa_r+0x8cc>)
 8006006:	f7fa fa7f 	bl	8000508 <__aeabi_dmul>
 800600a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800600e:	e7bc      	b.n	8005f8a <_dtoa_r+0x5d2>
 8006010:	9f03      	ldr	r7, [sp, #12]
 8006012:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006016:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800601a:	4640      	mov	r0, r8
 800601c:	4649      	mov	r1, r9
 800601e:	f7fa fb9d 	bl	800075c <__aeabi_ddiv>
 8006022:	f7fa fd21 	bl	8000a68 <__aeabi_d2iz>
 8006026:	4604      	mov	r4, r0
 8006028:	f7fa fa04 	bl	8000434 <__aeabi_i2d>
 800602c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006030:	f7fa fa6a 	bl	8000508 <__aeabi_dmul>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4640      	mov	r0, r8
 800603a:	4649      	mov	r1, r9
 800603c:	f7fa f8ac 	bl	8000198 <__aeabi_dsub>
 8006040:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006044:	f807 6b01 	strb.w	r6, [r7], #1
 8006048:	9e03      	ldr	r6, [sp, #12]
 800604a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800604e:	1bbe      	subs	r6, r7, r6
 8006050:	45b4      	cmp	ip, r6
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	d136      	bne.n	80060c6 <_dtoa_r+0x70e>
 8006058:	f7fa f8a0 	bl	800019c <__adddf3>
 800605c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006060:	4680      	mov	r8, r0
 8006062:	4689      	mov	r9, r1
 8006064:	f7fa fce0 	bl	8000a28 <__aeabi_dcmpgt>
 8006068:	bb58      	cbnz	r0, 80060c2 <_dtoa_r+0x70a>
 800606a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800606e:	4640      	mov	r0, r8
 8006070:	4649      	mov	r1, r9
 8006072:	f7fa fcb1 	bl	80009d8 <__aeabi_dcmpeq>
 8006076:	b108      	cbz	r0, 800607c <_dtoa_r+0x6c4>
 8006078:	07e1      	lsls	r1, r4, #31
 800607a:	d422      	bmi.n	80060c2 <_dtoa_r+0x70a>
 800607c:	4628      	mov	r0, r5
 800607e:	4659      	mov	r1, fp
 8006080:	f000 fd0c 	bl	8006a9c <_Bfree>
 8006084:	2300      	movs	r3, #0
 8006086:	703b      	strb	r3, [r7, #0]
 8006088:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800608a:	f10a 0001 	add.w	r0, sl, #1
 800608e:	6018      	str	r0, [r3, #0]
 8006090:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006092:	2b00      	cmp	r3, #0
 8006094:	f43f acde 	beq.w	8005a54 <_dtoa_r+0x9c>
 8006098:	601f      	str	r7, [r3, #0]
 800609a:	e4db      	b.n	8005a54 <_dtoa_r+0x9c>
 800609c:	4627      	mov	r7, r4
 800609e:	463b      	mov	r3, r7
 80060a0:	461f      	mov	r7, r3
 80060a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060a6:	2a39      	cmp	r2, #57	; 0x39
 80060a8:	d107      	bne.n	80060ba <_dtoa_r+0x702>
 80060aa:	9a03      	ldr	r2, [sp, #12]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d1f7      	bne.n	80060a0 <_dtoa_r+0x6e8>
 80060b0:	2230      	movs	r2, #48	; 0x30
 80060b2:	9903      	ldr	r1, [sp, #12]
 80060b4:	f108 0801 	add.w	r8, r8, #1
 80060b8:	700a      	strb	r2, [r1, #0]
 80060ba:	781a      	ldrb	r2, [r3, #0]
 80060bc:	3201      	adds	r2, #1
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	e79e      	b.n	8006000 <_dtoa_r+0x648>
 80060c2:	46d0      	mov	r8, sl
 80060c4:	e7eb      	b.n	800609e <_dtoa_r+0x6e6>
 80060c6:	2200      	movs	r2, #0
 80060c8:	4b6e      	ldr	r3, [pc, #440]	; (8006284 <_dtoa_r+0x8cc>)
 80060ca:	f7fa fa1d 	bl	8000508 <__aeabi_dmul>
 80060ce:	2200      	movs	r2, #0
 80060d0:	2300      	movs	r3, #0
 80060d2:	4680      	mov	r8, r0
 80060d4:	4689      	mov	r9, r1
 80060d6:	f7fa fc7f 	bl	80009d8 <__aeabi_dcmpeq>
 80060da:	2800      	cmp	r0, #0
 80060dc:	d09b      	beq.n	8006016 <_dtoa_r+0x65e>
 80060de:	e7cd      	b.n	800607c <_dtoa_r+0x6c4>
 80060e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060e2:	2a00      	cmp	r2, #0
 80060e4:	f000 80d0 	beq.w	8006288 <_dtoa_r+0x8d0>
 80060e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80060ea:	2a01      	cmp	r2, #1
 80060ec:	f300 80ae 	bgt.w	800624c <_dtoa_r+0x894>
 80060f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80060f2:	2a00      	cmp	r2, #0
 80060f4:	f000 80a6 	beq.w	8006244 <_dtoa_r+0x88c>
 80060f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80060fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80060fe:	9f06      	ldr	r7, [sp, #24]
 8006100:	9a06      	ldr	r2, [sp, #24]
 8006102:	2101      	movs	r1, #1
 8006104:	441a      	add	r2, r3
 8006106:	9206      	str	r2, [sp, #24]
 8006108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800610a:	4628      	mov	r0, r5
 800610c:	441a      	add	r2, r3
 800610e:	9209      	str	r2, [sp, #36]	; 0x24
 8006110:	f000 fd7a 	bl	8006c08 <__i2b>
 8006114:	4606      	mov	r6, r0
 8006116:	2f00      	cmp	r7, #0
 8006118:	dd0c      	ble.n	8006134 <_dtoa_r+0x77c>
 800611a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800611c:	2b00      	cmp	r3, #0
 800611e:	dd09      	ble.n	8006134 <_dtoa_r+0x77c>
 8006120:	42bb      	cmp	r3, r7
 8006122:	bfa8      	it	ge
 8006124:	463b      	movge	r3, r7
 8006126:	9a06      	ldr	r2, [sp, #24]
 8006128:	1aff      	subs	r7, r7, r3
 800612a:	1ad2      	subs	r2, r2, r3
 800612c:	9206      	str	r2, [sp, #24]
 800612e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	9309      	str	r3, [sp, #36]	; 0x24
 8006134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006136:	b1f3      	cbz	r3, 8006176 <_dtoa_r+0x7be>
 8006138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 80a8 	beq.w	8006290 <_dtoa_r+0x8d8>
 8006140:	2c00      	cmp	r4, #0
 8006142:	dd10      	ble.n	8006166 <_dtoa_r+0x7ae>
 8006144:	4631      	mov	r1, r6
 8006146:	4622      	mov	r2, r4
 8006148:	4628      	mov	r0, r5
 800614a:	f000 fe1b 	bl	8006d84 <__pow5mult>
 800614e:	465a      	mov	r2, fp
 8006150:	4601      	mov	r1, r0
 8006152:	4606      	mov	r6, r0
 8006154:	4628      	mov	r0, r5
 8006156:	f000 fd6d 	bl	8006c34 <__multiply>
 800615a:	4680      	mov	r8, r0
 800615c:	4659      	mov	r1, fp
 800615e:	4628      	mov	r0, r5
 8006160:	f000 fc9c 	bl	8006a9c <_Bfree>
 8006164:	46c3      	mov	fp, r8
 8006166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006168:	1b1a      	subs	r2, r3, r4
 800616a:	d004      	beq.n	8006176 <_dtoa_r+0x7be>
 800616c:	4659      	mov	r1, fp
 800616e:	4628      	mov	r0, r5
 8006170:	f000 fe08 	bl	8006d84 <__pow5mult>
 8006174:	4683      	mov	fp, r0
 8006176:	2101      	movs	r1, #1
 8006178:	4628      	mov	r0, r5
 800617a:	f000 fd45 	bl	8006c08 <__i2b>
 800617e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006180:	4604      	mov	r4, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	f340 8086 	ble.w	8006294 <_dtoa_r+0x8dc>
 8006188:	461a      	mov	r2, r3
 800618a:	4601      	mov	r1, r0
 800618c:	4628      	mov	r0, r5
 800618e:	f000 fdf9 	bl	8006d84 <__pow5mult>
 8006192:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006194:	4604      	mov	r4, r0
 8006196:	2b01      	cmp	r3, #1
 8006198:	dd7f      	ble.n	800629a <_dtoa_r+0x8e2>
 800619a:	f04f 0800 	mov.w	r8, #0
 800619e:	6923      	ldr	r3, [r4, #16]
 80061a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80061a4:	6918      	ldr	r0, [r3, #16]
 80061a6:	f000 fce1 	bl	8006b6c <__hi0bits>
 80061aa:	f1c0 0020 	rsb	r0, r0, #32
 80061ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b0:	4418      	add	r0, r3
 80061b2:	f010 001f 	ands.w	r0, r0, #31
 80061b6:	f000 8092 	beq.w	80062de <_dtoa_r+0x926>
 80061ba:	f1c0 0320 	rsb	r3, r0, #32
 80061be:	2b04      	cmp	r3, #4
 80061c0:	f340 808a 	ble.w	80062d8 <_dtoa_r+0x920>
 80061c4:	f1c0 001c 	rsb	r0, r0, #28
 80061c8:	9b06      	ldr	r3, [sp, #24]
 80061ca:	4407      	add	r7, r0
 80061cc:	4403      	add	r3, r0
 80061ce:	9306      	str	r3, [sp, #24]
 80061d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d2:	4403      	add	r3, r0
 80061d4:	9309      	str	r3, [sp, #36]	; 0x24
 80061d6:	9b06      	ldr	r3, [sp, #24]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	dd05      	ble.n	80061e8 <_dtoa_r+0x830>
 80061dc:	4659      	mov	r1, fp
 80061de:	461a      	mov	r2, r3
 80061e0:	4628      	mov	r0, r5
 80061e2:	f000 fe29 	bl	8006e38 <__lshift>
 80061e6:	4683      	mov	fp, r0
 80061e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	dd05      	ble.n	80061fa <_dtoa_r+0x842>
 80061ee:	4621      	mov	r1, r4
 80061f0:	461a      	mov	r2, r3
 80061f2:	4628      	mov	r0, r5
 80061f4:	f000 fe20 	bl	8006e38 <__lshift>
 80061f8:	4604      	mov	r4, r0
 80061fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d070      	beq.n	80062e2 <_dtoa_r+0x92a>
 8006200:	4621      	mov	r1, r4
 8006202:	4658      	mov	r0, fp
 8006204:	f000 fe88 	bl	8006f18 <__mcmp>
 8006208:	2800      	cmp	r0, #0
 800620a:	da6a      	bge.n	80062e2 <_dtoa_r+0x92a>
 800620c:	2300      	movs	r3, #0
 800620e:	4659      	mov	r1, fp
 8006210:	220a      	movs	r2, #10
 8006212:	4628      	mov	r0, r5
 8006214:	f000 fc64 	bl	8006ae0 <__multadd>
 8006218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800621a:	4683      	mov	fp, r0
 800621c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 8194 	beq.w	800654e <_dtoa_r+0xb96>
 8006226:	4631      	mov	r1, r6
 8006228:	2300      	movs	r3, #0
 800622a:	220a      	movs	r2, #10
 800622c:	4628      	mov	r0, r5
 800622e:	f000 fc57 	bl	8006ae0 <__multadd>
 8006232:	f1b9 0f00 	cmp.w	r9, #0
 8006236:	4606      	mov	r6, r0
 8006238:	f300 8093 	bgt.w	8006362 <_dtoa_r+0x9aa>
 800623c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800623e:	2b02      	cmp	r3, #2
 8006240:	dc57      	bgt.n	80062f2 <_dtoa_r+0x93a>
 8006242:	e08e      	b.n	8006362 <_dtoa_r+0x9aa>
 8006244:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006246:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800624a:	e757      	b.n	80060fc <_dtoa_r+0x744>
 800624c:	9b08      	ldr	r3, [sp, #32]
 800624e:	1e5c      	subs	r4, r3, #1
 8006250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006252:	42a3      	cmp	r3, r4
 8006254:	bfb7      	itett	lt
 8006256:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006258:	1b1c      	subge	r4, r3, r4
 800625a:	1ae2      	sublt	r2, r4, r3
 800625c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800625e:	bfbe      	ittt	lt
 8006260:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006262:	189b      	addlt	r3, r3, r2
 8006264:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006266:	9b08      	ldr	r3, [sp, #32]
 8006268:	bfb8      	it	lt
 800626a:	2400      	movlt	r4, #0
 800626c:	2b00      	cmp	r3, #0
 800626e:	bfbb      	ittet	lt
 8006270:	9b06      	ldrlt	r3, [sp, #24]
 8006272:	9a08      	ldrlt	r2, [sp, #32]
 8006274:	9f06      	ldrge	r7, [sp, #24]
 8006276:	1a9f      	sublt	r7, r3, r2
 8006278:	bfac      	ite	ge
 800627a:	9b08      	ldrge	r3, [sp, #32]
 800627c:	2300      	movlt	r3, #0
 800627e:	e73f      	b.n	8006100 <_dtoa_r+0x748>
 8006280:	3fe00000 	.word	0x3fe00000
 8006284:	40240000 	.word	0x40240000
 8006288:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800628a:	9f06      	ldr	r7, [sp, #24]
 800628c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800628e:	e742      	b.n	8006116 <_dtoa_r+0x75e>
 8006290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006292:	e76b      	b.n	800616c <_dtoa_r+0x7b4>
 8006294:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006296:	2b01      	cmp	r3, #1
 8006298:	dc19      	bgt.n	80062ce <_dtoa_r+0x916>
 800629a:	9b04      	ldr	r3, [sp, #16]
 800629c:	b9bb      	cbnz	r3, 80062ce <_dtoa_r+0x916>
 800629e:	9b05      	ldr	r3, [sp, #20]
 80062a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062a4:	b99b      	cbnz	r3, 80062ce <_dtoa_r+0x916>
 80062a6:	9b05      	ldr	r3, [sp, #20]
 80062a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062ac:	0d1b      	lsrs	r3, r3, #20
 80062ae:	051b      	lsls	r3, r3, #20
 80062b0:	b183      	cbz	r3, 80062d4 <_dtoa_r+0x91c>
 80062b2:	f04f 0801 	mov.w	r8, #1
 80062b6:	9b06      	ldr	r3, [sp, #24]
 80062b8:	3301      	adds	r3, #1
 80062ba:	9306      	str	r3, [sp, #24]
 80062bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062be:	3301      	adds	r3, #1
 80062c0:	9309      	str	r3, [sp, #36]	; 0x24
 80062c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f47f af6a 	bne.w	800619e <_dtoa_r+0x7e6>
 80062ca:	2001      	movs	r0, #1
 80062cc:	e76f      	b.n	80061ae <_dtoa_r+0x7f6>
 80062ce:	f04f 0800 	mov.w	r8, #0
 80062d2:	e7f6      	b.n	80062c2 <_dtoa_r+0x90a>
 80062d4:	4698      	mov	r8, r3
 80062d6:	e7f4      	b.n	80062c2 <_dtoa_r+0x90a>
 80062d8:	f43f af7d 	beq.w	80061d6 <_dtoa_r+0x81e>
 80062dc:	4618      	mov	r0, r3
 80062de:	301c      	adds	r0, #28
 80062e0:	e772      	b.n	80061c8 <_dtoa_r+0x810>
 80062e2:	9b08      	ldr	r3, [sp, #32]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	dc36      	bgt.n	8006356 <_dtoa_r+0x99e>
 80062e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	dd33      	ble.n	8006356 <_dtoa_r+0x99e>
 80062ee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062f2:	f1b9 0f00 	cmp.w	r9, #0
 80062f6:	d10d      	bne.n	8006314 <_dtoa_r+0x95c>
 80062f8:	4621      	mov	r1, r4
 80062fa:	464b      	mov	r3, r9
 80062fc:	2205      	movs	r2, #5
 80062fe:	4628      	mov	r0, r5
 8006300:	f000 fbee 	bl	8006ae0 <__multadd>
 8006304:	4601      	mov	r1, r0
 8006306:	4604      	mov	r4, r0
 8006308:	4658      	mov	r0, fp
 800630a:	f000 fe05 	bl	8006f18 <__mcmp>
 800630e:	2800      	cmp	r0, #0
 8006310:	f73f adb8 	bgt.w	8005e84 <_dtoa_r+0x4cc>
 8006314:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006316:	9f03      	ldr	r7, [sp, #12]
 8006318:	ea6f 0a03 	mvn.w	sl, r3
 800631c:	f04f 0800 	mov.w	r8, #0
 8006320:	4621      	mov	r1, r4
 8006322:	4628      	mov	r0, r5
 8006324:	f000 fbba 	bl	8006a9c <_Bfree>
 8006328:	2e00      	cmp	r6, #0
 800632a:	f43f aea7 	beq.w	800607c <_dtoa_r+0x6c4>
 800632e:	f1b8 0f00 	cmp.w	r8, #0
 8006332:	d005      	beq.n	8006340 <_dtoa_r+0x988>
 8006334:	45b0      	cmp	r8, r6
 8006336:	d003      	beq.n	8006340 <_dtoa_r+0x988>
 8006338:	4641      	mov	r1, r8
 800633a:	4628      	mov	r0, r5
 800633c:	f000 fbae 	bl	8006a9c <_Bfree>
 8006340:	4631      	mov	r1, r6
 8006342:	4628      	mov	r0, r5
 8006344:	f000 fbaa 	bl	8006a9c <_Bfree>
 8006348:	e698      	b.n	800607c <_dtoa_r+0x6c4>
 800634a:	2400      	movs	r4, #0
 800634c:	4626      	mov	r6, r4
 800634e:	e7e1      	b.n	8006314 <_dtoa_r+0x95c>
 8006350:	46c2      	mov	sl, r8
 8006352:	4626      	mov	r6, r4
 8006354:	e596      	b.n	8005e84 <_dtoa_r+0x4cc>
 8006356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006358:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 80fd 	beq.w	800655c <_dtoa_r+0xba4>
 8006362:	2f00      	cmp	r7, #0
 8006364:	dd05      	ble.n	8006372 <_dtoa_r+0x9ba>
 8006366:	4631      	mov	r1, r6
 8006368:	463a      	mov	r2, r7
 800636a:	4628      	mov	r0, r5
 800636c:	f000 fd64 	bl	8006e38 <__lshift>
 8006370:	4606      	mov	r6, r0
 8006372:	f1b8 0f00 	cmp.w	r8, #0
 8006376:	d05c      	beq.n	8006432 <_dtoa_r+0xa7a>
 8006378:	4628      	mov	r0, r5
 800637a:	6871      	ldr	r1, [r6, #4]
 800637c:	f000 fb4e 	bl	8006a1c <_Balloc>
 8006380:	4607      	mov	r7, r0
 8006382:	b928      	cbnz	r0, 8006390 <_dtoa_r+0x9d8>
 8006384:	4602      	mov	r2, r0
 8006386:	f240 21ea 	movw	r1, #746	; 0x2ea
 800638a:	4b7f      	ldr	r3, [pc, #508]	; (8006588 <_dtoa_r+0xbd0>)
 800638c:	f7ff bb28 	b.w	80059e0 <_dtoa_r+0x28>
 8006390:	6932      	ldr	r2, [r6, #16]
 8006392:	f106 010c 	add.w	r1, r6, #12
 8006396:	3202      	adds	r2, #2
 8006398:	0092      	lsls	r2, r2, #2
 800639a:	300c      	adds	r0, #12
 800639c:	f000 fb30 	bl	8006a00 <memcpy>
 80063a0:	2201      	movs	r2, #1
 80063a2:	4639      	mov	r1, r7
 80063a4:	4628      	mov	r0, r5
 80063a6:	f000 fd47 	bl	8006e38 <__lshift>
 80063aa:	46b0      	mov	r8, r6
 80063ac:	4606      	mov	r6, r0
 80063ae:	9b03      	ldr	r3, [sp, #12]
 80063b0:	3301      	adds	r3, #1
 80063b2:	9308      	str	r3, [sp, #32]
 80063b4:	9b03      	ldr	r3, [sp, #12]
 80063b6:	444b      	add	r3, r9
 80063b8:	930a      	str	r3, [sp, #40]	; 0x28
 80063ba:	9b04      	ldr	r3, [sp, #16]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	9309      	str	r3, [sp, #36]	; 0x24
 80063c2:	9b08      	ldr	r3, [sp, #32]
 80063c4:	4621      	mov	r1, r4
 80063c6:	3b01      	subs	r3, #1
 80063c8:	4658      	mov	r0, fp
 80063ca:	9304      	str	r3, [sp, #16]
 80063cc:	f7ff fa67 	bl	800589e <quorem>
 80063d0:	4603      	mov	r3, r0
 80063d2:	4641      	mov	r1, r8
 80063d4:	3330      	adds	r3, #48	; 0x30
 80063d6:	9006      	str	r0, [sp, #24]
 80063d8:	4658      	mov	r0, fp
 80063da:	930b      	str	r3, [sp, #44]	; 0x2c
 80063dc:	f000 fd9c 	bl	8006f18 <__mcmp>
 80063e0:	4632      	mov	r2, r6
 80063e2:	4681      	mov	r9, r0
 80063e4:	4621      	mov	r1, r4
 80063e6:	4628      	mov	r0, r5
 80063e8:	f000 fdb2 	bl	8006f50 <__mdiff>
 80063ec:	68c2      	ldr	r2, [r0, #12]
 80063ee:	4607      	mov	r7, r0
 80063f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063f2:	bb02      	cbnz	r2, 8006436 <_dtoa_r+0xa7e>
 80063f4:	4601      	mov	r1, r0
 80063f6:	4658      	mov	r0, fp
 80063f8:	f000 fd8e 	bl	8006f18 <__mcmp>
 80063fc:	4602      	mov	r2, r0
 80063fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006400:	4639      	mov	r1, r7
 8006402:	4628      	mov	r0, r5
 8006404:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006408:	f000 fb48 	bl	8006a9c <_Bfree>
 800640c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800640e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006410:	9f08      	ldr	r7, [sp, #32]
 8006412:	ea43 0102 	orr.w	r1, r3, r2
 8006416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006418:	430b      	orrs	r3, r1
 800641a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800641c:	d10d      	bne.n	800643a <_dtoa_r+0xa82>
 800641e:	2b39      	cmp	r3, #57	; 0x39
 8006420:	d029      	beq.n	8006476 <_dtoa_r+0xabe>
 8006422:	f1b9 0f00 	cmp.w	r9, #0
 8006426:	dd01      	ble.n	800642c <_dtoa_r+0xa74>
 8006428:	9b06      	ldr	r3, [sp, #24]
 800642a:	3331      	adds	r3, #49	; 0x31
 800642c:	9a04      	ldr	r2, [sp, #16]
 800642e:	7013      	strb	r3, [r2, #0]
 8006430:	e776      	b.n	8006320 <_dtoa_r+0x968>
 8006432:	4630      	mov	r0, r6
 8006434:	e7b9      	b.n	80063aa <_dtoa_r+0x9f2>
 8006436:	2201      	movs	r2, #1
 8006438:	e7e2      	b.n	8006400 <_dtoa_r+0xa48>
 800643a:	f1b9 0f00 	cmp.w	r9, #0
 800643e:	db06      	blt.n	800644e <_dtoa_r+0xa96>
 8006440:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006442:	ea41 0909 	orr.w	r9, r1, r9
 8006446:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006448:	ea59 0101 	orrs.w	r1, r9, r1
 800644c:	d120      	bne.n	8006490 <_dtoa_r+0xad8>
 800644e:	2a00      	cmp	r2, #0
 8006450:	ddec      	ble.n	800642c <_dtoa_r+0xa74>
 8006452:	4659      	mov	r1, fp
 8006454:	2201      	movs	r2, #1
 8006456:	4628      	mov	r0, r5
 8006458:	9308      	str	r3, [sp, #32]
 800645a:	f000 fced 	bl	8006e38 <__lshift>
 800645e:	4621      	mov	r1, r4
 8006460:	4683      	mov	fp, r0
 8006462:	f000 fd59 	bl	8006f18 <__mcmp>
 8006466:	2800      	cmp	r0, #0
 8006468:	9b08      	ldr	r3, [sp, #32]
 800646a:	dc02      	bgt.n	8006472 <_dtoa_r+0xaba>
 800646c:	d1de      	bne.n	800642c <_dtoa_r+0xa74>
 800646e:	07da      	lsls	r2, r3, #31
 8006470:	d5dc      	bpl.n	800642c <_dtoa_r+0xa74>
 8006472:	2b39      	cmp	r3, #57	; 0x39
 8006474:	d1d8      	bne.n	8006428 <_dtoa_r+0xa70>
 8006476:	2339      	movs	r3, #57	; 0x39
 8006478:	9a04      	ldr	r2, [sp, #16]
 800647a:	7013      	strb	r3, [r2, #0]
 800647c:	463b      	mov	r3, r7
 800647e:	461f      	mov	r7, r3
 8006480:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006484:	3b01      	subs	r3, #1
 8006486:	2a39      	cmp	r2, #57	; 0x39
 8006488:	d050      	beq.n	800652c <_dtoa_r+0xb74>
 800648a:	3201      	adds	r2, #1
 800648c:	701a      	strb	r2, [r3, #0]
 800648e:	e747      	b.n	8006320 <_dtoa_r+0x968>
 8006490:	2a00      	cmp	r2, #0
 8006492:	dd03      	ble.n	800649c <_dtoa_r+0xae4>
 8006494:	2b39      	cmp	r3, #57	; 0x39
 8006496:	d0ee      	beq.n	8006476 <_dtoa_r+0xabe>
 8006498:	3301      	adds	r3, #1
 800649a:	e7c7      	b.n	800642c <_dtoa_r+0xa74>
 800649c:	9a08      	ldr	r2, [sp, #32]
 800649e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80064a4:	428a      	cmp	r2, r1
 80064a6:	d02a      	beq.n	80064fe <_dtoa_r+0xb46>
 80064a8:	4659      	mov	r1, fp
 80064aa:	2300      	movs	r3, #0
 80064ac:	220a      	movs	r2, #10
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 fb16 	bl	8006ae0 <__multadd>
 80064b4:	45b0      	cmp	r8, r6
 80064b6:	4683      	mov	fp, r0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	f04f 020a 	mov.w	r2, #10
 80064c0:	4641      	mov	r1, r8
 80064c2:	4628      	mov	r0, r5
 80064c4:	d107      	bne.n	80064d6 <_dtoa_r+0xb1e>
 80064c6:	f000 fb0b 	bl	8006ae0 <__multadd>
 80064ca:	4680      	mov	r8, r0
 80064cc:	4606      	mov	r6, r0
 80064ce:	9b08      	ldr	r3, [sp, #32]
 80064d0:	3301      	adds	r3, #1
 80064d2:	9308      	str	r3, [sp, #32]
 80064d4:	e775      	b.n	80063c2 <_dtoa_r+0xa0a>
 80064d6:	f000 fb03 	bl	8006ae0 <__multadd>
 80064da:	4631      	mov	r1, r6
 80064dc:	4680      	mov	r8, r0
 80064de:	2300      	movs	r3, #0
 80064e0:	220a      	movs	r2, #10
 80064e2:	4628      	mov	r0, r5
 80064e4:	f000 fafc 	bl	8006ae0 <__multadd>
 80064e8:	4606      	mov	r6, r0
 80064ea:	e7f0      	b.n	80064ce <_dtoa_r+0xb16>
 80064ec:	f1b9 0f00 	cmp.w	r9, #0
 80064f0:	bfcc      	ite	gt
 80064f2:	464f      	movgt	r7, r9
 80064f4:	2701      	movle	r7, #1
 80064f6:	f04f 0800 	mov.w	r8, #0
 80064fa:	9a03      	ldr	r2, [sp, #12]
 80064fc:	4417      	add	r7, r2
 80064fe:	4659      	mov	r1, fp
 8006500:	2201      	movs	r2, #1
 8006502:	4628      	mov	r0, r5
 8006504:	9308      	str	r3, [sp, #32]
 8006506:	f000 fc97 	bl	8006e38 <__lshift>
 800650a:	4621      	mov	r1, r4
 800650c:	4683      	mov	fp, r0
 800650e:	f000 fd03 	bl	8006f18 <__mcmp>
 8006512:	2800      	cmp	r0, #0
 8006514:	dcb2      	bgt.n	800647c <_dtoa_r+0xac4>
 8006516:	d102      	bne.n	800651e <_dtoa_r+0xb66>
 8006518:	9b08      	ldr	r3, [sp, #32]
 800651a:	07db      	lsls	r3, r3, #31
 800651c:	d4ae      	bmi.n	800647c <_dtoa_r+0xac4>
 800651e:	463b      	mov	r3, r7
 8006520:	461f      	mov	r7, r3
 8006522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006526:	2a30      	cmp	r2, #48	; 0x30
 8006528:	d0fa      	beq.n	8006520 <_dtoa_r+0xb68>
 800652a:	e6f9      	b.n	8006320 <_dtoa_r+0x968>
 800652c:	9a03      	ldr	r2, [sp, #12]
 800652e:	429a      	cmp	r2, r3
 8006530:	d1a5      	bne.n	800647e <_dtoa_r+0xac6>
 8006532:	2331      	movs	r3, #49	; 0x31
 8006534:	f10a 0a01 	add.w	sl, sl, #1
 8006538:	e779      	b.n	800642e <_dtoa_r+0xa76>
 800653a:	4b14      	ldr	r3, [pc, #80]	; (800658c <_dtoa_r+0xbd4>)
 800653c:	f7ff baa8 	b.w	8005a90 <_dtoa_r+0xd8>
 8006540:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006542:	2b00      	cmp	r3, #0
 8006544:	f47f aa81 	bne.w	8005a4a <_dtoa_r+0x92>
 8006548:	4b11      	ldr	r3, [pc, #68]	; (8006590 <_dtoa_r+0xbd8>)
 800654a:	f7ff baa1 	b.w	8005a90 <_dtoa_r+0xd8>
 800654e:	f1b9 0f00 	cmp.w	r9, #0
 8006552:	dc03      	bgt.n	800655c <_dtoa_r+0xba4>
 8006554:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006556:	2b02      	cmp	r3, #2
 8006558:	f73f aecb 	bgt.w	80062f2 <_dtoa_r+0x93a>
 800655c:	9f03      	ldr	r7, [sp, #12]
 800655e:	4621      	mov	r1, r4
 8006560:	4658      	mov	r0, fp
 8006562:	f7ff f99c 	bl	800589e <quorem>
 8006566:	9a03      	ldr	r2, [sp, #12]
 8006568:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800656c:	f807 3b01 	strb.w	r3, [r7], #1
 8006570:	1aba      	subs	r2, r7, r2
 8006572:	4591      	cmp	r9, r2
 8006574:	ddba      	ble.n	80064ec <_dtoa_r+0xb34>
 8006576:	4659      	mov	r1, fp
 8006578:	2300      	movs	r3, #0
 800657a:	220a      	movs	r2, #10
 800657c:	4628      	mov	r0, r5
 800657e:	f000 faaf 	bl	8006ae0 <__multadd>
 8006582:	4683      	mov	fp, r0
 8006584:	e7eb      	b.n	800655e <_dtoa_r+0xba6>
 8006586:	bf00      	nop
 8006588:	08007810 	.word	0x08007810
 800658c:	0800776d 	.word	0x0800776d
 8006590:	08007791 	.word	0x08007791

08006594 <__sflush_r>:
 8006594:	898a      	ldrh	r2, [r1, #12]
 8006596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006598:	4605      	mov	r5, r0
 800659a:	0710      	lsls	r0, r2, #28
 800659c:	460c      	mov	r4, r1
 800659e:	d457      	bmi.n	8006650 <__sflush_r+0xbc>
 80065a0:	684b      	ldr	r3, [r1, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	dc04      	bgt.n	80065b0 <__sflush_r+0x1c>
 80065a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	dc01      	bgt.n	80065b0 <__sflush_r+0x1c>
 80065ac:	2000      	movs	r0, #0
 80065ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065b2:	2e00      	cmp	r6, #0
 80065b4:	d0fa      	beq.n	80065ac <__sflush_r+0x18>
 80065b6:	2300      	movs	r3, #0
 80065b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065bc:	682f      	ldr	r7, [r5, #0]
 80065be:	602b      	str	r3, [r5, #0]
 80065c0:	d032      	beq.n	8006628 <__sflush_r+0x94>
 80065c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	075a      	lsls	r2, r3, #29
 80065c8:	d505      	bpl.n	80065d6 <__sflush_r+0x42>
 80065ca:	6863      	ldr	r3, [r4, #4]
 80065cc:	1ac0      	subs	r0, r0, r3
 80065ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065d0:	b10b      	cbz	r3, 80065d6 <__sflush_r+0x42>
 80065d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065d4:	1ac0      	subs	r0, r0, r3
 80065d6:	2300      	movs	r3, #0
 80065d8:	4602      	mov	r2, r0
 80065da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065dc:	4628      	mov	r0, r5
 80065de:	6a21      	ldr	r1, [r4, #32]
 80065e0:	47b0      	blx	r6
 80065e2:	1c43      	adds	r3, r0, #1
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	d106      	bne.n	80065f6 <__sflush_r+0x62>
 80065e8:	6829      	ldr	r1, [r5, #0]
 80065ea:	291d      	cmp	r1, #29
 80065ec:	d82c      	bhi.n	8006648 <__sflush_r+0xb4>
 80065ee:	4a29      	ldr	r2, [pc, #164]	; (8006694 <__sflush_r+0x100>)
 80065f0:	40ca      	lsrs	r2, r1
 80065f2:	07d6      	lsls	r6, r2, #31
 80065f4:	d528      	bpl.n	8006648 <__sflush_r+0xb4>
 80065f6:	2200      	movs	r2, #0
 80065f8:	6062      	str	r2, [r4, #4]
 80065fa:	6922      	ldr	r2, [r4, #16]
 80065fc:	04d9      	lsls	r1, r3, #19
 80065fe:	6022      	str	r2, [r4, #0]
 8006600:	d504      	bpl.n	800660c <__sflush_r+0x78>
 8006602:	1c42      	adds	r2, r0, #1
 8006604:	d101      	bne.n	800660a <__sflush_r+0x76>
 8006606:	682b      	ldr	r3, [r5, #0]
 8006608:	b903      	cbnz	r3, 800660c <__sflush_r+0x78>
 800660a:	6560      	str	r0, [r4, #84]	; 0x54
 800660c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800660e:	602f      	str	r7, [r5, #0]
 8006610:	2900      	cmp	r1, #0
 8006612:	d0cb      	beq.n	80065ac <__sflush_r+0x18>
 8006614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006618:	4299      	cmp	r1, r3
 800661a:	d002      	beq.n	8006622 <__sflush_r+0x8e>
 800661c:	4628      	mov	r0, r5
 800661e:	f000 fd93 	bl	8007148 <_free_r>
 8006622:	2000      	movs	r0, #0
 8006624:	6360      	str	r0, [r4, #52]	; 0x34
 8006626:	e7c2      	b.n	80065ae <__sflush_r+0x1a>
 8006628:	6a21      	ldr	r1, [r4, #32]
 800662a:	2301      	movs	r3, #1
 800662c:	4628      	mov	r0, r5
 800662e:	47b0      	blx	r6
 8006630:	1c41      	adds	r1, r0, #1
 8006632:	d1c7      	bne.n	80065c4 <__sflush_r+0x30>
 8006634:	682b      	ldr	r3, [r5, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0c4      	beq.n	80065c4 <__sflush_r+0x30>
 800663a:	2b1d      	cmp	r3, #29
 800663c:	d001      	beq.n	8006642 <__sflush_r+0xae>
 800663e:	2b16      	cmp	r3, #22
 8006640:	d101      	bne.n	8006646 <__sflush_r+0xb2>
 8006642:	602f      	str	r7, [r5, #0]
 8006644:	e7b2      	b.n	80065ac <__sflush_r+0x18>
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800664c:	81a3      	strh	r3, [r4, #12]
 800664e:	e7ae      	b.n	80065ae <__sflush_r+0x1a>
 8006650:	690f      	ldr	r7, [r1, #16]
 8006652:	2f00      	cmp	r7, #0
 8006654:	d0aa      	beq.n	80065ac <__sflush_r+0x18>
 8006656:	0793      	lsls	r3, r2, #30
 8006658:	bf18      	it	ne
 800665a:	2300      	movne	r3, #0
 800665c:	680e      	ldr	r6, [r1, #0]
 800665e:	bf08      	it	eq
 8006660:	694b      	ldreq	r3, [r1, #20]
 8006662:	1bf6      	subs	r6, r6, r7
 8006664:	600f      	str	r7, [r1, #0]
 8006666:	608b      	str	r3, [r1, #8]
 8006668:	2e00      	cmp	r6, #0
 800666a:	dd9f      	ble.n	80065ac <__sflush_r+0x18>
 800666c:	4633      	mov	r3, r6
 800666e:	463a      	mov	r2, r7
 8006670:	4628      	mov	r0, r5
 8006672:	6a21      	ldr	r1, [r4, #32]
 8006674:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006678:	47e0      	blx	ip
 800667a:	2800      	cmp	r0, #0
 800667c:	dc06      	bgt.n	800668c <__sflush_r+0xf8>
 800667e:	89a3      	ldrh	r3, [r4, #12]
 8006680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006688:	81a3      	strh	r3, [r4, #12]
 800668a:	e790      	b.n	80065ae <__sflush_r+0x1a>
 800668c:	4407      	add	r7, r0
 800668e:	1a36      	subs	r6, r6, r0
 8006690:	e7ea      	b.n	8006668 <__sflush_r+0xd4>
 8006692:	bf00      	nop
 8006694:	20400001 	.word	0x20400001

08006698 <_fflush_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	690b      	ldr	r3, [r1, #16]
 800669c:	4605      	mov	r5, r0
 800669e:	460c      	mov	r4, r1
 80066a0:	b913      	cbnz	r3, 80066a8 <_fflush_r+0x10>
 80066a2:	2500      	movs	r5, #0
 80066a4:	4628      	mov	r0, r5
 80066a6:	bd38      	pop	{r3, r4, r5, pc}
 80066a8:	b118      	cbz	r0, 80066b2 <_fflush_r+0x1a>
 80066aa:	6983      	ldr	r3, [r0, #24]
 80066ac:	b90b      	cbnz	r3, 80066b2 <_fflush_r+0x1a>
 80066ae:	f000 f887 	bl	80067c0 <__sinit>
 80066b2:	4b14      	ldr	r3, [pc, #80]	; (8006704 <_fflush_r+0x6c>)
 80066b4:	429c      	cmp	r4, r3
 80066b6:	d11b      	bne.n	80066f0 <_fflush_r+0x58>
 80066b8:	686c      	ldr	r4, [r5, #4]
 80066ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0ef      	beq.n	80066a2 <_fflush_r+0xa>
 80066c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066c4:	07d0      	lsls	r0, r2, #31
 80066c6:	d404      	bmi.n	80066d2 <_fflush_r+0x3a>
 80066c8:	0599      	lsls	r1, r3, #22
 80066ca:	d402      	bmi.n	80066d2 <_fflush_r+0x3a>
 80066cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066ce:	f000 f91a 	bl	8006906 <__retarget_lock_acquire_recursive>
 80066d2:	4628      	mov	r0, r5
 80066d4:	4621      	mov	r1, r4
 80066d6:	f7ff ff5d 	bl	8006594 <__sflush_r>
 80066da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066dc:	4605      	mov	r5, r0
 80066de:	07da      	lsls	r2, r3, #31
 80066e0:	d4e0      	bmi.n	80066a4 <_fflush_r+0xc>
 80066e2:	89a3      	ldrh	r3, [r4, #12]
 80066e4:	059b      	lsls	r3, r3, #22
 80066e6:	d4dd      	bmi.n	80066a4 <_fflush_r+0xc>
 80066e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066ea:	f000 f90d 	bl	8006908 <__retarget_lock_release_recursive>
 80066ee:	e7d9      	b.n	80066a4 <_fflush_r+0xc>
 80066f0:	4b05      	ldr	r3, [pc, #20]	; (8006708 <_fflush_r+0x70>)
 80066f2:	429c      	cmp	r4, r3
 80066f4:	d101      	bne.n	80066fa <_fflush_r+0x62>
 80066f6:	68ac      	ldr	r4, [r5, #8]
 80066f8:	e7df      	b.n	80066ba <_fflush_r+0x22>
 80066fa:	4b04      	ldr	r3, [pc, #16]	; (800670c <_fflush_r+0x74>)
 80066fc:	429c      	cmp	r4, r3
 80066fe:	bf08      	it	eq
 8006700:	68ec      	ldreq	r4, [r5, #12]
 8006702:	e7da      	b.n	80066ba <_fflush_r+0x22>
 8006704:	08007844 	.word	0x08007844
 8006708:	08007864 	.word	0x08007864
 800670c:	08007824 	.word	0x08007824

08006710 <std>:
 8006710:	2300      	movs	r3, #0
 8006712:	b510      	push	{r4, lr}
 8006714:	4604      	mov	r4, r0
 8006716:	e9c0 3300 	strd	r3, r3, [r0]
 800671a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800671e:	6083      	str	r3, [r0, #8]
 8006720:	8181      	strh	r1, [r0, #12]
 8006722:	6643      	str	r3, [r0, #100]	; 0x64
 8006724:	81c2      	strh	r2, [r0, #14]
 8006726:	6183      	str	r3, [r0, #24]
 8006728:	4619      	mov	r1, r3
 800672a:	2208      	movs	r2, #8
 800672c:	305c      	adds	r0, #92	; 0x5c
 800672e:	f7fe f98d 	bl	8004a4c <memset>
 8006732:	4b05      	ldr	r3, [pc, #20]	; (8006748 <std+0x38>)
 8006734:	6224      	str	r4, [r4, #32]
 8006736:	6263      	str	r3, [r4, #36]	; 0x24
 8006738:	4b04      	ldr	r3, [pc, #16]	; (800674c <std+0x3c>)
 800673a:	62a3      	str	r3, [r4, #40]	; 0x28
 800673c:	4b04      	ldr	r3, [pc, #16]	; (8006750 <std+0x40>)
 800673e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006740:	4b04      	ldr	r3, [pc, #16]	; (8006754 <std+0x44>)
 8006742:	6323      	str	r3, [r4, #48]	; 0x30
 8006744:	bd10      	pop	{r4, pc}
 8006746:	bf00      	nop
 8006748:	08007439 	.word	0x08007439
 800674c:	0800745b 	.word	0x0800745b
 8006750:	08007493 	.word	0x08007493
 8006754:	080074b7 	.word	0x080074b7

08006758 <_cleanup_r>:
 8006758:	4901      	ldr	r1, [pc, #4]	; (8006760 <_cleanup_r+0x8>)
 800675a:	f000 b8af 	b.w	80068bc <_fwalk_reent>
 800675e:	bf00      	nop
 8006760:	08006699 	.word	0x08006699

08006764 <__sfmoreglue>:
 8006764:	2268      	movs	r2, #104	; 0x68
 8006766:	b570      	push	{r4, r5, r6, lr}
 8006768:	1e4d      	subs	r5, r1, #1
 800676a:	4355      	muls	r5, r2
 800676c:	460e      	mov	r6, r1
 800676e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006772:	f000 fd51 	bl	8007218 <_malloc_r>
 8006776:	4604      	mov	r4, r0
 8006778:	b140      	cbz	r0, 800678c <__sfmoreglue+0x28>
 800677a:	2100      	movs	r1, #0
 800677c:	e9c0 1600 	strd	r1, r6, [r0]
 8006780:	300c      	adds	r0, #12
 8006782:	60a0      	str	r0, [r4, #8]
 8006784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006788:	f7fe f960 	bl	8004a4c <memset>
 800678c:	4620      	mov	r0, r4
 800678e:	bd70      	pop	{r4, r5, r6, pc}

08006790 <__sfp_lock_acquire>:
 8006790:	4801      	ldr	r0, [pc, #4]	; (8006798 <__sfp_lock_acquire+0x8>)
 8006792:	f000 b8b8 	b.w	8006906 <__retarget_lock_acquire_recursive>
 8006796:	bf00      	nop
 8006798:	2000029d 	.word	0x2000029d

0800679c <__sfp_lock_release>:
 800679c:	4801      	ldr	r0, [pc, #4]	; (80067a4 <__sfp_lock_release+0x8>)
 800679e:	f000 b8b3 	b.w	8006908 <__retarget_lock_release_recursive>
 80067a2:	bf00      	nop
 80067a4:	2000029d 	.word	0x2000029d

080067a8 <__sinit_lock_acquire>:
 80067a8:	4801      	ldr	r0, [pc, #4]	; (80067b0 <__sinit_lock_acquire+0x8>)
 80067aa:	f000 b8ac 	b.w	8006906 <__retarget_lock_acquire_recursive>
 80067ae:	bf00      	nop
 80067b0:	2000029e 	.word	0x2000029e

080067b4 <__sinit_lock_release>:
 80067b4:	4801      	ldr	r0, [pc, #4]	; (80067bc <__sinit_lock_release+0x8>)
 80067b6:	f000 b8a7 	b.w	8006908 <__retarget_lock_release_recursive>
 80067ba:	bf00      	nop
 80067bc:	2000029e 	.word	0x2000029e

080067c0 <__sinit>:
 80067c0:	b510      	push	{r4, lr}
 80067c2:	4604      	mov	r4, r0
 80067c4:	f7ff fff0 	bl	80067a8 <__sinit_lock_acquire>
 80067c8:	69a3      	ldr	r3, [r4, #24]
 80067ca:	b11b      	cbz	r3, 80067d4 <__sinit+0x14>
 80067cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d0:	f7ff bff0 	b.w	80067b4 <__sinit_lock_release>
 80067d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80067d8:	6523      	str	r3, [r4, #80]	; 0x50
 80067da:	4b13      	ldr	r3, [pc, #76]	; (8006828 <__sinit+0x68>)
 80067dc:	4a13      	ldr	r2, [pc, #76]	; (800682c <__sinit+0x6c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80067e2:	42a3      	cmp	r3, r4
 80067e4:	bf08      	it	eq
 80067e6:	2301      	moveq	r3, #1
 80067e8:	4620      	mov	r0, r4
 80067ea:	bf08      	it	eq
 80067ec:	61a3      	streq	r3, [r4, #24]
 80067ee:	f000 f81f 	bl	8006830 <__sfp>
 80067f2:	6060      	str	r0, [r4, #4]
 80067f4:	4620      	mov	r0, r4
 80067f6:	f000 f81b 	bl	8006830 <__sfp>
 80067fa:	60a0      	str	r0, [r4, #8]
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 f817 	bl	8006830 <__sfp>
 8006802:	2200      	movs	r2, #0
 8006804:	2104      	movs	r1, #4
 8006806:	60e0      	str	r0, [r4, #12]
 8006808:	6860      	ldr	r0, [r4, #4]
 800680a:	f7ff ff81 	bl	8006710 <std>
 800680e:	2201      	movs	r2, #1
 8006810:	2109      	movs	r1, #9
 8006812:	68a0      	ldr	r0, [r4, #8]
 8006814:	f7ff ff7c 	bl	8006710 <std>
 8006818:	2202      	movs	r2, #2
 800681a:	2112      	movs	r1, #18
 800681c:	68e0      	ldr	r0, [r4, #12]
 800681e:	f7ff ff77 	bl	8006710 <std>
 8006822:	2301      	movs	r3, #1
 8006824:	61a3      	str	r3, [r4, #24]
 8006826:	e7d1      	b.n	80067cc <__sinit+0xc>
 8006828:	08007748 	.word	0x08007748
 800682c:	08006759 	.word	0x08006759

08006830 <__sfp>:
 8006830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006832:	4607      	mov	r7, r0
 8006834:	f7ff ffac 	bl	8006790 <__sfp_lock_acquire>
 8006838:	4b1e      	ldr	r3, [pc, #120]	; (80068b4 <__sfp+0x84>)
 800683a:	681e      	ldr	r6, [r3, #0]
 800683c:	69b3      	ldr	r3, [r6, #24]
 800683e:	b913      	cbnz	r3, 8006846 <__sfp+0x16>
 8006840:	4630      	mov	r0, r6
 8006842:	f7ff ffbd 	bl	80067c0 <__sinit>
 8006846:	3648      	adds	r6, #72	; 0x48
 8006848:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800684c:	3b01      	subs	r3, #1
 800684e:	d503      	bpl.n	8006858 <__sfp+0x28>
 8006850:	6833      	ldr	r3, [r6, #0]
 8006852:	b30b      	cbz	r3, 8006898 <__sfp+0x68>
 8006854:	6836      	ldr	r6, [r6, #0]
 8006856:	e7f7      	b.n	8006848 <__sfp+0x18>
 8006858:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800685c:	b9d5      	cbnz	r5, 8006894 <__sfp+0x64>
 800685e:	4b16      	ldr	r3, [pc, #88]	; (80068b8 <__sfp+0x88>)
 8006860:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006864:	60e3      	str	r3, [r4, #12]
 8006866:	6665      	str	r5, [r4, #100]	; 0x64
 8006868:	f000 f84c 	bl	8006904 <__retarget_lock_init_recursive>
 800686c:	f7ff ff96 	bl	800679c <__sfp_lock_release>
 8006870:	2208      	movs	r2, #8
 8006872:	4629      	mov	r1, r5
 8006874:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006878:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800687c:	6025      	str	r5, [r4, #0]
 800687e:	61a5      	str	r5, [r4, #24]
 8006880:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006884:	f7fe f8e2 	bl	8004a4c <memset>
 8006888:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800688c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006890:	4620      	mov	r0, r4
 8006892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006894:	3468      	adds	r4, #104	; 0x68
 8006896:	e7d9      	b.n	800684c <__sfp+0x1c>
 8006898:	2104      	movs	r1, #4
 800689a:	4638      	mov	r0, r7
 800689c:	f7ff ff62 	bl	8006764 <__sfmoreglue>
 80068a0:	4604      	mov	r4, r0
 80068a2:	6030      	str	r0, [r6, #0]
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d1d5      	bne.n	8006854 <__sfp+0x24>
 80068a8:	f7ff ff78 	bl	800679c <__sfp_lock_release>
 80068ac:	230c      	movs	r3, #12
 80068ae:	603b      	str	r3, [r7, #0]
 80068b0:	e7ee      	b.n	8006890 <__sfp+0x60>
 80068b2:	bf00      	nop
 80068b4:	08007748 	.word	0x08007748
 80068b8:	ffff0001 	.word	0xffff0001

080068bc <_fwalk_reent>:
 80068bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c0:	4606      	mov	r6, r0
 80068c2:	4688      	mov	r8, r1
 80068c4:	2700      	movs	r7, #0
 80068c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068ce:	f1b9 0901 	subs.w	r9, r9, #1
 80068d2:	d505      	bpl.n	80068e0 <_fwalk_reent+0x24>
 80068d4:	6824      	ldr	r4, [r4, #0]
 80068d6:	2c00      	cmp	r4, #0
 80068d8:	d1f7      	bne.n	80068ca <_fwalk_reent+0xe>
 80068da:	4638      	mov	r0, r7
 80068dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e0:	89ab      	ldrh	r3, [r5, #12]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d907      	bls.n	80068f6 <_fwalk_reent+0x3a>
 80068e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068ea:	3301      	adds	r3, #1
 80068ec:	d003      	beq.n	80068f6 <_fwalk_reent+0x3a>
 80068ee:	4629      	mov	r1, r5
 80068f0:	4630      	mov	r0, r6
 80068f2:	47c0      	blx	r8
 80068f4:	4307      	orrs	r7, r0
 80068f6:	3568      	adds	r5, #104	; 0x68
 80068f8:	e7e9      	b.n	80068ce <_fwalk_reent+0x12>
	...

080068fc <_localeconv_r>:
 80068fc:	4800      	ldr	r0, [pc, #0]	; (8006900 <_localeconv_r+0x4>)
 80068fe:	4770      	bx	lr
 8006900:	20000160 	.word	0x20000160

08006904 <__retarget_lock_init_recursive>:
 8006904:	4770      	bx	lr

08006906 <__retarget_lock_acquire_recursive>:
 8006906:	4770      	bx	lr

08006908 <__retarget_lock_release_recursive>:
 8006908:	4770      	bx	lr

0800690a <__swhatbuf_r>:
 800690a:	b570      	push	{r4, r5, r6, lr}
 800690c:	460e      	mov	r6, r1
 800690e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006912:	4614      	mov	r4, r2
 8006914:	2900      	cmp	r1, #0
 8006916:	461d      	mov	r5, r3
 8006918:	b096      	sub	sp, #88	; 0x58
 800691a:	da08      	bge.n	800692e <__swhatbuf_r+0x24>
 800691c:	2200      	movs	r2, #0
 800691e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006922:	602a      	str	r2, [r5, #0]
 8006924:	061a      	lsls	r2, r3, #24
 8006926:	d410      	bmi.n	800694a <__swhatbuf_r+0x40>
 8006928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800692c:	e00e      	b.n	800694c <__swhatbuf_r+0x42>
 800692e:	466a      	mov	r2, sp
 8006930:	f000 fde8 	bl	8007504 <_fstat_r>
 8006934:	2800      	cmp	r0, #0
 8006936:	dbf1      	blt.n	800691c <__swhatbuf_r+0x12>
 8006938:	9a01      	ldr	r2, [sp, #4]
 800693a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800693e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006942:	425a      	negs	r2, r3
 8006944:	415a      	adcs	r2, r3
 8006946:	602a      	str	r2, [r5, #0]
 8006948:	e7ee      	b.n	8006928 <__swhatbuf_r+0x1e>
 800694a:	2340      	movs	r3, #64	; 0x40
 800694c:	2000      	movs	r0, #0
 800694e:	6023      	str	r3, [r4, #0]
 8006950:	b016      	add	sp, #88	; 0x58
 8006952:	bd70      	pop	{r4, r5, r6, pc}

08006954 <__smakebuf_r>:
 8006954:	898b      	ldrh	r3, [r1, #12]
 8006956:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006958:	079d      	lsls	r5, r3, #30
 800695a:	4606      	mov	r6, r0
 800695c:	460c      	mov	r4, r1
 800695e:	d507      	bpl.n	8006970 <__smakebuf_r+0x1c>
 8006960:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	6123      	str	r3, [r4, #16]
 8006968:	2301      	movs	r3, #1
 800696a:	6163      	str	r3, [r4, #20]
 800696c:	b002      	add	sp, #8
 800696e:	bd70      	pop	{r4, r5, r6, pc}
 8006970:	466a      	mov	r2, sp
 8006972:	ab01      	add	r3, sp, #4
 8006974:	f7ff ffc9 	bl	800690a <__swhatbuf_r>
 8006978:	9900      	ldr	r1, [sp, #0]
 800697a:	4605      	mov	r5, r0
 800697c:	4630      	mov	r0, r6
 800697e:	f000 fc4b 	bl	8007218 <_malloc_r>
 8006982:	b948      	cbnz	r0, 8006998 <__smakebuf_r+0x44>
 8006984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006988:	059a      	lsls	r2, r3, #22
 800698a:	d4ef      	bmi.n	800696c <__smakebuf_r+0x18>
 800698c:	f023 0303 	bic.w	r3, r3, #3
 8006990:	f043 0302 	orr.w	r3, r3, #2
 8006994:	81a3      	strh	r3, [r4, #12]
 8006996:	e7e3      	b.n	8006960 <__smakebuf_r+0xc>
 8006998:	4b0d      	ldr	r3, [pc, #52]	; (80069d0 <__smakebuf_r+0x7c>)
 800699a:	62b3      	str	r3, [r6, #40]	; 0x28
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	6020      	str	r0, [r4, #0]
 80069a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a4:	81a3      	strh	r3, [r4, #12]
 80069a6:	9b00      	ldr	r3, [sp, #0]
 80069a8:	6120      	str	r0, [r4, #16]
 80069aa:	6163      	str	r3, [r4, #20]
 80069ac:	9b01      	ldr	r3, [sp, #4]
 80069ae:	b15b      	cbz	r3, 80069c8 <__smakebuf_r+0x74>
 80069b0:	4630      	mov	r0, r6
 80069b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069b6:	f000 fdb7 	bl	8007528 <_isatty_r>
 80069ba:	b128      	cbz	r0, 80069c8 <__smakebuf_r+0x74>
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	f023 0303 	bic.w	r3, r3, #3
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	81a3      	strh	r3, [r4, #12]
 80069c8:	89a0      	ldrh	r0, [r4, #12]
 80069ca:	4305      	orrs	r5, r0
 80069cc:	81a5      	strh	r5, [r4, #12]
 80069ce:	e7cd      	b.n	800696c <__smakebuf_r+0x18>
 80069d0:	08006759 	.word	0x08006759

080069d4 <malloc>:
 80069d4:	4b02      	ldr	r3, [pc, #8]	; (80069e0 <malloc+0xc>)
 80069d6:	4601      	mov	r1, r0
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	f000 bc1d 	b.w	8007218 <_malloc_r>
 80069de:	bf00      	nop
 80069e0:	2000000c 	.word	0x2000000c

080069e4 <memchr>:
 80069e4:	4603      	mov	r3, r0
 80069e6:	b510      	push	{r4, lr}
 80069e8:	b2c9      	uxtb	r1, r1
 80069ea:	4402      	add	r2, r0
 80069ec:	4293      	cmp	r3, r2
 80069ee:	4618      	mov	r0, r3
 80069f0:	d101      	bne.n	80069f6 <memchr+0x12>
 80069f2:	2000      	movs	r0, #0
 80069f4:	e003      	b.n	80069fe <memchr+0x1a>
 80069f6:	7804      	ldrb	r4, [r0, #0]
 80069f8:	3301      	adds	r3, #1
 80069fa:	428c      	cmp	r4, r1
 80069fc:	d1f6      	bne.n	80069ec <memchr+0x8>
 80069fe:	bd10      	pop	{r4, pc}

08006a00 <memcpy>:
 8006a00:	440a      	add	r2, r1
 8006a02:	4291      	cmp	r1, r2
 8006a04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006a08:	d100      	bne.n	8006a0c <memcpy+0xc>
 8006a0a:	4770      	bx	lr
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a12:	4291      	cmp	r1, r2
 8006a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a18:	d1f9      	bne.n	8006a0e <memcpy+0xe>
 8006a1a:	bd10      	pop	{r4, pc}

08006a1c <_Balloc>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a20:	4604      	mov	r4, r0
 8006a22:	460d      	mov	r5, r1
 8006a24:	b976      	cbnz	r6, 8006a44 <_Balloc+0x28>
 8006a26:	2010      	movs	r0, #16
 8006a28:	f7ff ffd4 	bl	80069d4 <malloc>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	6260      	str	r0, [r4, #36]	; 0x24
 8006a30:	b920      	cbnz	r0, 8006a3c <_Balloc+0x20>
 8006a32:	2166      	movs	r1, #102	; 0x66
 8006a34:	4b17      	ldr	r3, [pc, #92]	; (8006a94 <_Balloc+0x78>)
 8006a36:	4818      	ldr	r0, [pc, #96]	; (8006a98 <_Balloc+0x7c>)
 8006a38:	f7fd ffae 	bl	8004998 <__assert_func>
 8006a3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a40:	6006      	str	r6, [r0, #0]
 8006a42:	60c6      	str	r6, [r0, #12]
 8006a44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006a46:	68f3      	ldr	r3, [r6, #12]
 8006a48:	b183      	cbz	r3, 8006a6c <_Balloc+0x50>
 8006a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a52:	b9b8      	cbnz	r0, 8006a84 <_Balloc+0x68>
 8006a54:	2101      	movs	r1, #1
 8006a56:	fa01 f605 	lsl.w	r6, r1, r5
 8006a5a:	1d72      	adds	r2, r6, #5
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	0092      	lsls	r2, r2, #2
 8006a60:	f000 fb5e 	bl	8007120 <_calloc_r>
 8006a64:	b160      	cbz	r0, 8006a80 <_Balloc+0x64>
 8006a66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a6a:	e00e      	b.n	8006a8a <_Balloc+0x6e>
 8006a6c:	2221      	movs	r2, #33	; 0x21
 8006a6e:	2104      	movs	r1, #4
 8006a70:	4620      	mov	r0, r4
 8006a72:	f000 fb55 	bl	8007120 <_calloc_r>
 8006a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a78:	60f0      	str	r0, [r6, #12]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e4      	bne.n	8006a4a <_Balloc+0x2e>
 8006a80:	2000      	movs	r0, #0
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
 8006a84:	6802      	ldr	r2, [r0, #0]
 8006a86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a90:	e7f7      	b.n	8006a82 <_Balloc+0x66>
 8006a92:	bf00      	nop
 8006a94:	0800779e 	.word	0x0800779e
 8006a98:	08007884 	.word	0x08007884

08006a9c <_Bfree>:
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006aa0:	4605      	mov	r5, r0
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	b976      	cbnz	r6, 8006ac4 <_Bfree+0x28>
 8006aa6:	2010      	movs	r0, #16
 8006aa8:	f7ff ff94 	bl	80069d4 <malloc>
 8006aac:	4602      	mov	r2, r0
 8006aae:	6268      	str	r0, [r5, #36]	; 0x24
 8006ab0:	b920      	cbnz	r0, 8006abc <_Bfree+0x20>
 8006ab2:	218a      	movs	r1, #138	; 0x8a
 8006ab4:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <_Bfree+0x3c>)
 8006ab6:	4809      	ldr	r0, [pc, #36]	; (8006adc <_Bfree+0x40>)
 8006ab8:	f7fd ff6e 	bl	8004998 <__assert_func>
 8006abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ac0:	6006      	str	r6, [r0, #0]
 8006ac2:	60c6      	str	r6, [r0, #12]
 8006ac4:	b13c      	cbz	r4, 8006ad6 <_Bfree+0x3a>
 8006ac6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ac8:	6862      	ldr	r2, [r4, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ad0:	6021      	str	r1, [r4, #0]
 8006ad2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}
 8006ad8:	0800779e 	.word	0x0800779e
 8006adc:	08007884 	.word	0x08007884

08006ae0 <__multadd>:
 8006ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	461e      	mov	r6, r3
 8006aea:	2000      	movs	r0, #0
 8006aec:	690d      	ldr	r5, [r1, #16]
 8006aee:	f101 0c14 	add.w	ip, r1, #20
 8006af2:	f8dc 3000 	ldr.w	r3, [ip]
 8006af6:	3001      	adds	r0, #1
 8006af8:	b299      	uxth	r1, r3
 8006afa:	fb02 6101 	mla	r1, r2, r1, r6
 8006afe:	0c1e      	lsrs	r6, r3, #16
 8006b00:	0c0b      	lsrs	r3, r1, #16
 8006b02:	fb02 3306 	mla	r3, r2, r6, r3
 8006b06:	b289      	uxth	r1, r1
 8006b08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b0c:	4285      	cmp	r5, r0
 8006b0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b12:	f84c 1b04 	str.w	r1, [ip], #4
 8006b16:	dcec      	bgt.n	8006af2 <__multadd+0x12>
 8006b18:	b30e      	cbz	r6, 8006b5e <__multadd+0x7e>
 8006b1a:	68a3      	ldr	r3, [r4, #8]
 8006b1c:	42ab      	cmp	r3, r5
 8006b1e:	dc19      	bgt.n	8006b54 <__multadd+0x74>
 8006b20:	6861      	ldr	r1, [r4, #4]
 8006b22:	4638      	mov	r0, r7
 8006b24:	3101      	adds	r1, #1
 8006b26:	f7ff ff79 	bl	8006a1c <_Balloc>
 8006b2a:	4680      	mov	r8, r0
 8006b2c:	b928      	cbnz	r0, 8006b3a <__multadd+0x5a>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	21b5      	movs	r1, #181	; 0xb5
 8006b32:	4b0c      	ldr	r3, [pc, #48]	; (8006b64 <__multadd+0x84>)
 8006b34:	480c      	ldr	r0, [pc, #48]	; (8006b68 <__multadd+0x88>)
 8006b36:	f7fd ff2f 	bl	8004998 <__assert_func>
 8006b3a:	6922      	ldr	r2, [r4, #16]
 8006b3c:	f104 010c 	add.w	r1, r4, #12
 8006b40:	3202      	adds	r2, #2
 8006b42:	0092      	lsls	r2, r2, #2
 8006b44:	300c      	adds	r0, #12
 8006b46:	f7ff ff5b 	bl	8006a00 <memcpy>
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	4638      	mov	r0, r7
 8006b4e:	f7ff ffa5 	bl	8006a9c <_Bfree>
 8006b52:	4644      	mov	r4, r8
 8006b54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b58:	3501      	adds	r5, #1
 8006b5a:	615e      	str	r6, [r3, #20]
 8006b5c:	6125      	str	r5, [r4, #16]
 8006b5e:	4620      	mov	r0, r4
 8006b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b64:	08007810 	.word	0x08007810
 8006b68:	08007884 	.word	0x08007884

08006b6c <__hi0bits>:
 8006b6c:	0c02      	lsrs	r2, r0, #16
 8006b6e:	0412      	lsls	r2, r2, #16
 8006b70:	4603      	mov	r3, r0
 8006b72:	b9ca      	cbnz	r2, 8006ba8 <__hi0bits+0x3c>
 8006b74:	0403      	lsls	r3, r0, #16
 8006b76:	2010      	movs	r0, #16
 8006b78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006b7c:	bf04      	itt	eq
 8006b7e:	021b      	lsleq	r3, r3, #8
 8006b80:	3008      	addeq	r0, #8
 8006b82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006b86:	bf04      	itt	eq
 8006b88:	011b      	lsleq	r3, r3, #4
 8006b8a:	3004      	addeq	r0, #4
 8006b8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006b90:	bf04      	itt	eq
 8006b92:	009b      	lsleq	r3, r3, #2
 8006b94:	3002      	addeq	r0, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	db05      	blt.n	8006ba6 <__hi0bits+0x3a>
 8006b9a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006b9e:	f100 0001 	add.w	r0, r0, #1
 8006ba2:	bf08      	it	eq
 8006ba4:	2020      	moveq	r0, #32
 8006ba6:	4770      	bx	lr
 8006ba8:	2000      	movs	r0, #0
 8006baa:	e7e5      	b.n	8006b78 <__hi0bits+0xc>

08006bac <__lo0bits>:
 8006bac:	6803      	ldr	r3, [r0, #0]
 8006bae:	4602      	mov	r2, r0
 8006bb0:	f013 0007 	ands.w	r0, r3, #7
 8006bb4:	d00b      	beq.n	8006bce <__lo0bits+0x22>
 8006bb6:	07d9      	lsls	r1, r3, #31
 8006bb8:	d421      	bmi.n	8006bfe <__lo0bits+0x52>
 8006bba:	0798      	lsls	r0, r3, #30
 8006bbc:	bf49      	itett	mi
 8006bbe:	085b      	lsrmi	r3, r3, #1
 8006bc0:	089b      	lsrpl	r3, r3, #2
 8006bc2:	2001      	movmi	r0, #1
 8006bc4:	6013      	strmi	r3, [r2, #0]
 8006bc6:	bf5c      	itt	pl
 8006bc8:	2002      	movpl	r0, #2
 8006bca:	6013      	strpl	r3, [r2, #0]
 8006bcc:	4770      	bx	lr
 8006bce:	b299      	uxth	r1, r3
 8006bd0:	b909      	cbnz	r1, 8006bd6 <__lo0bits+0x2a>
 8006bd2:	2010      	movs	r0, #16
 8006bd4:	0c1b      	lsrs	r3, r3, #16
 8006bd6:	b2d9      	uxtb	r1, r3
 8006bd8:	b909      	cbnz	r1, 8006bde <__lo0bits+0x32>
 8006bda:	3008      	adds	r0, #8
 8006bdc:	0a1b      	lsrs	r3, r3, #8
 8006bde:	0719      	lsls	r1, r3, #28
 8006be0:	bf04      	itt	eq
 8006be2:	091b      	lsreq	r3, r3, #4
 8006be4:	3004      	addeq	r0, #4
 8006be6:	0799      	lsls	r1, r3, #30
 8006be8:	bf04      	itt	eq
 8006bea:	089b      	lsreq	r3, r3, #2
 8006bec:	3002      	addeq	r0, #2
 8006bee:	07d9      	lsls	r1, r3, #31
 8006bf0:	d403      	bmi.n	8006bfa <__lo0bits+0x4e>
 8006bf2:	085b      	lsrs	r3, r3, #1
 8006bf4:	f100 0001 	add.w	r0, r0, #1
 8006bf8:	d003      	beq.n	8006c02 <__lo0bits+0x56>
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	4770      	bx	lr
 8006bfe:	2000      	movs	r0, #0
 8006c00:	4770      	bx	lr
 8006c02:	2020      	movs	r0, #32
 8006c04:	4770      	bx	lr
	...

08006c08 <__i2b>:
 8006c08:	b510      	push	{r4, lr}
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	f7ff ff05 	bl	8006a1c <_Balloc>
 8006c12:	4602      	mov	r2, r0
 8006c14:	b928      	cbnz	r0, 8006c22 <__i2b+0x1a>
 8006c16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006c1a:	4b04      	ldr	r3, [pc, #16]	; (8006c2c <__i2b+0x24>)
 8006c1c:	4804      	ldr	r0, [pc, #16]	; (8006c30 <__i2b+0x28>)
 8006c1e:	f7fd febb 	bl	8004998 <__assert_func>
 8006c22:	2301      	movs	r3, #1
 8006c24:	6144      	str	r4, [r0, #20]
 8006c26:	6103      	str	r3, [r0, #16]
 8006c28:	bd10      	pop	{r4, pc}
 8006c2a:	bf00      	nop
 8006c2c:	08007810 	.word	0x08007810
 8006c30:	08007884 	.word	0x08007884

08006c34 <__multiply>:
 8006c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c38:	4691      	mov	r9, r2
 8006c3a:	690a      	ldr	r2, [r1, #16]
 8006c3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c40:	460c      	mov	r4, r1
 8006c42:	429a      	cmp	r2, r3
 8006c44:	bfbe      	ittt	lt
 8006c46:	460b      	movlt	r3, r1
 8006c48:	464c      	movlt	r4, r9
 8006c4a:	4699      	movlt	r9, r3
 8006c4c:	6927      	ldr	r7, [r4, #16]
 8006c4e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c52:	68a3      	ldr	r3, [r4, #8]
 8006c54:	6861      	ldr	r1, [r4, #4]
 8006c56:	eb07 060a 	add.w	r6, r7, sl
 8006c5a:	42b3      	cmp	r3, r6
 8006c5c:	b085      	sub	sp, #20
 8006c5e:	bfb8      	it	lt
 8006c60:	3101      	addlt	r1, #1
 8006c62:	f7ff fedb 	bl	8006a1c <_Balloc>
 8006c66:	b930      	cbnz	r0, 8006c76 <__multiply+0x42>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	f240 115d 	movw	r1, #349	; 0x15d
 8006c6e:	4b43      	ldr	r3, [pc, #268]	; (8006d7c <__multiply+0x148>)
 8006c70:	4843      	ldr	r0, [pc, #268]	; (8006d80 <__multiply+0x14c>)
 8006c72:	f7fd fe91 	bl	8004998 <__assert_func>
 8006c76:	f100 0514 	add.w	r5, r0, #20
 8006c7a:	462b      	mov	r3, r5
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c82:	4543      	cmp	r3, r8
 8006c84:	d321      	bcc.n	8006cca <__multiply+0x96>
 8006c86:	f104 0314 	add.w	r3, r4, #20
 8006c8a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c8e:	f109 0314 	add.w	r3, r9, #20
 8006c92:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c96:	9202      	str	r2, [sp, #8]
 8006c98:	1b3a      	subs	r2, r7, r4
 8006c9a:	3a15      	subs	r2, #21
 8006c9c:	f022 0203 	bic.w	r2, r2, #3
 8006ca0:	3204      	adds	r2, #4
 8006ca2:	f104 0115 	add.w	r1, r4, #21
 8006ca6:	428f      	cmp	r7, r1
 8006ca8:	bf38      	it	cc
 8006caa:	2204      	movcc	r2, #4
 8006cac:	9201      	str	r2, [sp, #4]
 8006cae:	9a02      	ldr	r2, [sp, #8]
 8006cb0:	9303      	str	r3, [sp, #12]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d80c      	bhi.n	8006cd0 <__multiply+0x9c>
 8006cb6:	2e00      	cmp	r6, #0
 8006cb8:	dd03      	ble.n	8006cc2 <__multiply+0x8e>
 8006cba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d059      	beq.n	8006d76 <__multiply+0x142>
 8006cc2:	6106      	str	r6, [r0, #16]
 8006cc4:	b005      	add	sp, #20
 8006cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cca:	f843 2b04 	str.w	r2, [r3], #4
 8006cce:	e7d8      	b.n	8006c82 <__multiply+0x4e>
 8006cd0:	f8b3 a000 	ldrh.w	sl, [r3]
 8006cd4:	f1ba 0f00 	cmp.w	sl, #0
 8006cd8:	d023      	beq.n	8006d22 <__multiply+0xee>
 8006cda:	46a9      	mov	r9, r5
 8006cdc:	f04f 0c00 	mov.w	ip, #0
 8006ce0:	f104 0e14 	add.w	lr, r4, #20
 8006ce4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006ce8:	f8d9 1000 	ldr.w	r1, [r9]
 8006cec:	fa1f fb82 	uxth.w	fp, r2
 8006cf0:	b289      	uxth	r1, r1
 8006cf2:	fb0a 110b 	mla	r1, sl, fp, r1
 8006cf6:	4461      	add	r1, ip
 8006cf8:	f8d9 c000 	ldr.w	ip, [r9]
 8006cfc:	0c12      	lsrs	r2, r2, #16
 8006cfe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006d02:	fb0a c202 	mla	r2, sl, r2, ip
 8006d06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d0a:	b289      	uxth	r1, r1
 8006d0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d10:	4577      	cmp	r7, lr
 8006d12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d16:	f849 1b04 	str.w	r1, [r9], #4
 8006d1a:	d8e3      	bhi.n	8006ce4 <__multiply+0xb0>
 8006d1c:	9a01      	ldr	r2, [sp, #4]
 8006d1e:	f845 c002 	str.w	ip, [r5, r2]
 8006d22:	9a03      	ldr	r2, [sp, #12]
 8006d24:	3304      	adds	r3, #4
 8006d26:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d2a:	f1b9 0f00 	cmp.w	r9, #0
 8006d2e:	d020      	beq.n	8006d72 <__multiply+0x13e>
 8006d30:	46ae      	mov	lr, r5
 8006d32:	f04f 0a00 	mov.w	sl, #0
 8006d36:	6829      	ldr	r1, [r5, #0]
 8006d38:	f104 0c14 	add.w	ip, r4, #20
 8006d3c:	f8bc b000 	ldrh.w	fp, [ip]
 8006d40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d44:	b289      	uxth	r1, r1
 8006d46:	fb09 220b 	mla	r2, r9, fp, r2
 8006d4a:	4492      	add	sl, r2
 8006d4c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006d50:	f84e 1b04 	str.w	r1, [lr], #4
 8006d54:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d58:	f8be 1000 	ldrh.w	r1, [lr]
 8006d5c:	0c12      	lsrs	r2, r2, #16
 8006d5e:	fb09 1102 	mla	r1, r9, r2, r1
 8006d62:	4567      	cmp	r7, ip
 8006d64:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006d68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d6c:	d8e6      	bhi.n	8006d3c <__multiply+0x108>
 8006d6e:	9a01      	ldr	r2, [sp, #4]
 8006d70:	50a9      	str	r1, [r5, r2]
 8006d72:	3504      	adds	r5, #4
 8006d74:	e79b      	b.n	8006cae <__multiply+0x7a>
 8006d76:	3e01      	subs	r6, #1
 8006d78:	e79d      	b.n	8006cb6 <__multiply+0x82>
 8006d7a:	bf00      	nop
 8006d7c:	08007810 	.word	0x08007810
 8006d80:	08007884 	.word	0x08007884

08006d84 <__pow5mult>:
 8006d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d88:	4615      	mov	r5, r2
 8006d8a:	f012 0203 	ands.w	r2, r2, #3
 8006d8e:	4606      	mov	r6, r0
 8006d90:	460f      	mov	r7, r1
 8006d92:	d007      	beq.n	8006da4 <__pow5mult+0x20>
 8006d94:	4c25      	ldr	r4, [pc, #148]	; (8006e2c <__pow5mult+0xa8>)
 8006d96:	3a01      	subs	r2, #1
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d9e:	f7ff fe9f 	bl	8006ae0 <__multadd>
 8006da2:	4607      	mov	r7, r0
 8006da4:	10ad      	asrs	r5, r5, #2
 8006da6:	d03d      	beq.n	8006e24 <__pow5mult+0xa0>
 8006da8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006daa:	b97c      	cbnz	r4, 8006dcc <__pow5mult+0x48>
 8006dac:	2010      	movs	r0, #16
 8006dae:	f7ff fe11 	bl	80069d4 <malloc>
 8006db2:	4602      	mov	r2, r0
 8006db4:	6270      	str	r0, [r6, #36]	; 0x24
 8006db6:	b928      	cbnz	r0, 8006dc4 <__pow5mult+0x40>
 8006db8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006dbc:	4b1c      	ldr	r3, [pc, #112]	; (8006e30 <__pow5mult+0xac>)
 8006dbe:	481d      	ldr	r0, [pc, #116]	; (8006e34 <__pow5mult+0xb0>)
 8006dc0:	f7fd fdea 	bl	8004998 <__assert_func>
 8006dc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dc8:	6004      	str	r4, [r0, #0]
 8006dca:	60c4      	str	r4, [r0, #12]
 8006dcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006dd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006dd4:	b94c      	cbnz	r4, 8006dea <__pow5mult+0x66>
 8006dd6:	f240 2171 	movw	r1, #625	; 0x271
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f7ff ff14 	bl	8006c08 <__i2b>
 8006de0:	2300      	movs	r3, #0
 8006de2:	4604      	mov	r4, r0
 8006de4:	f8c8 0008 	str.w	r0, [r8, #8]
 8006de8:	6003      	str	r3, [r0, #0]
 8006dea:	f04f 0900 	mov.w	r9, #0
 8006dee:	07eb      	lsls	r3, r5, #31
 8006df0:	d50a      	bpl.n	8006e08 <__pow5mult+0x84>
 8006df2:	4639      	mov	r1, r7
 8006df4:	4622      	mov	r2, r4
 8006df6:	4630      	mov	r0, r6
 8006df8:	f7ff ff1c 	bl	8006c34 <__multiply>
 8006dfc:	4680      	mov	r8, r0
 8006dfe:	4639      	mov	r1, r7
 8006e00:	4630      	mov	r0, r6
 8006e02:	f7ff fe4b 	bl	8006a9c <_Bfree>
 8006e06:	4647      	mov	r7, r8
 8006e08:	106d      	asrs	r5, r5, #1
 8006e0a:	d00b      	beq.n	8006e24 <__pow5mult+0xa0>
 8006e0c:	6820      	ldr	r0, [r4, #0]
 8006e0e:	b938      	cbnz	r0, 8006e20 <__pow5mult+0x9c>
 8006e10:	4622      	mov	r2, r4
 8006e12:	4621      	mov	r1, r4
 8006e14:	4630      	mov	r0, r6
 8006e16:	f7ff ff0d 	bl	8006c34 <__multiply>
 8006e1a:	6020      	str	r0, [r4, #0]
 8006e1c:	f8c0 9000 	str.w	r9, [r0]
 8006e20:	4604      	mov	r4, r0
 8006e22:	e7e4      	b.n	8006dee <__pow5mult+0x6a>
 8006e24:	4638      	mov	r0, r7
 8006e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e2a:	bf00      	nop
 8006e2c:	080079d0 	.word	0x080079d0
 8006e30:	0800779e 	.word	0x0800779e
 8006e34:	08007884 	.word	0x08007884

08006e38 <__lshift>:
 8006e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	4607      	mov	r7, r0
 8006e40:	4691      	mov	r9, r2
 8006e42:	6923      	ldr	r3, [r4, #16]
 8006e44:	6849      	ldr	r1, [r1, #4]
 8006e46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e4a:	68a3      	ldr	r3, [r4, #8]
 8006e4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e50:	f108 0601 	add.w	r6, r8, #1
 8006e54:	42b3      	cmp	r3, r6
 8006e56:	db0b      	blt.n	8006e70 <__lshift+0x38>
 8006e58:	4638      	mov	r0, r7
 8006e5a:	f7ff fddf 	bl	8006a1c <_Balloc>
 8006e5e:	4605      	mov	r5, r0
 8006e60:	b948      	cbnz	r0, 8006e76 <__lshift+0x3e>
 8006e62:	4602      	mov	r2, r0
 8006e64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e68:	4b29      	ldr	r3, [pc, #164]	; (8006f10 <__lshift+0xd8>)
 8006e6a:	482a      	ldr	r0, [pc, #168]	; (8006f14 <__lshift+0xdc>)
 8006e6c:	f7fd fd94 	bl	8004998 <__assert_func>
 8006e70:	3101      	adds	r1, #1
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	e7ee      	b.n	8006e54 <__lshift+0x1c>
 8006e76:	2300      	movs	r3, #0
 8006e78:	f100 0114 	add.w	r1, r0, #20
 8006e7c:	f100 0210 	add.w	r2, r0, #16
 8006e80:	4618      	mov	r0, r3
 8006e82:	4553      	cmp	r3, sl
 8006e84:	db37      	blt.n	8006ef6 <__lshift+0xbe>
 8006e86:	6920      	ldr	r0, [r4, #16]
 8006e88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e8c:	f104 0314 	add.w	r3, r4, #20
 8006e90:	f019 091f 	ands.w	r9, r9, #31
 8006e94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e9c:	d02f      	beq.n	8006efe <__lshift+0xc6>
 8006e9e:	468a      	mov	sl, r1
 8006ea0:	f04f 0c00 	mov.w	ip, #0
 8006ea4:	f1c9 0e20 	rsb	lr, r9, #32
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	fa02 f209 	lsl.w	r2, r2, r9
 8006eae:	ea42 020c 	orr.w	r2, r2, ip
 8006eb2:	f84a 2b04 	str.w	r2, [sl], #4
 8006eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eba:	4298      	cmp	r0, r3
 8006ebc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006ec0:	d8f2      	bhi.n	8006ea8 <__lshift+0x70>
 8006ec2:	1b03      	subs	r3, r0, r4
 8006ec4:	3b15      	subs	r3, #21
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	3304      	adds	r3, #4
 8006ecc:	f104 0215 	add.w	r2, r4, #21
 8006ed0:	4290      	cmp	r0, r2
 8006ed2:	bf38      	it	cc
 8006ed4:	2304      	movcc	r3, #4
 8006ed6:	f841 c003 	str.w	ip, [r1, r3]
 8006eda:	f1bc 0f00 	cmp.w	ip, #0
 8006ede:	d001      	beq.n	8006ee4 <__lshift+0xac>
 8006ee0:	f108 0602 	add.w	r6, r8, #2
 8006ee4:	3e01      	subs	r6, #1
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	4621      	mov	r1, r4
 8006eea:	612e      	str	r6, [r5, #16]
 8006eec:	f7ff fdd6 	bl	8006a9c <_Bfree>
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006efa:	3301      	adds	r3, #1
 8006efc:	e7c1      	b.n	8006e82 <__lshift+0x4a>
 8006efe:	3904      	subs	r1, #4
 8006f00:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f04:	4298      	cmp	r0, r3
 8006f06:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f0a:	d8f9      	bhi.n	8006f00 <__lshift+0xc8>
 8006f0c:	e7ea      	b.n	8006ee4 <__lshift+0xac>
 8006f0e:	bf00      	nop
 8006f10:	08007810 	.word	0x08007810
 8006f14:	08007884 	.word	0x08007884

08006f18 <__mcmp>:
 8006f18:	4603      	mov	r3, r0
 8006f1a:	690a      	ldr	r2, [r1, #16]
 8006f1c:	6900      	ldr	r0, [r0, #16]
 8006f1e:	b530      	push	{r4, r5, lr}
 8006f20:	1a80      	subs	r0, r0, r2
 8006f22:	d10d      	bne.n	8006f40 <__mcmp+0x28>
 8006f24:	3314      	adds	r3, #20
 8006f26:	3114      	adds	r1, #20
 8006f28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f38:	4295      	cmp	r5, r2
 8006f3a:	d002      	beq.n	8006f42 <__mcmp+0x2a>
 8006f3c:	d304      	bcc.n	8006f48 <__mcmp+0x30>
 8006f3e:	2001      	movs	r0, #1
 8006f40:	bd30      	pop	{r4, r5, pc}
 8006f42:	42a3      	cmp	r3, r4
 8006f44:	d3f4      	bcc.n	8006f30 <__mcmp+0x18>
 8006f46:	e7fb      	b.n	8006f40 <__mcmp+0x28>
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f4c:	e7f8      	b.n	8006f40 <__mcmp+0x28>
	...

08006f50 <__mdiff>:
 8006f50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f54:	460d      	mov	r5, r1
 8006f56:	4607      	mov	r7, r0
 8006f58:	4611      	mov	r1, r2
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	4614      	mov	r4, r2
 8006f5e:	f7ff ffdb 	bl	8006f18 <__mcmp>
 8006f62:	1e06      	subs	r6, r0, #0
 8006f64:	d111      	bne.n	8006f8a <__mdiff+0x3a>
 8006f66:	4631      	mov	r1, r6
 8006f68:	4638      	mov	r0, r7
 8006f6a:	f7ff fd57 	bl	8006a1c <_Balloc>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	b928      	cbnz	r0, 8006f7e <__mdiff+0x2e>
 8006f72:	f240 2132 	movw	r1, #562	; 0x232
 8006f76:	4b3a      	ldr	r3, [pc, #232]	; (8007060 <__mdiff+0x110>)
 8006f78:	483a      	ldr	r0, [pc, #232]	; (8007064 <__mdiff+0x114>)
 8006f7a:	f7fd fd0d 	bl	8004998 <__assert_func>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006f84:	4610      	mov	r0, r2
 8006f86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8a:	bfa4      	itt	ge
 8006f8c:	4623      	movge	r3, r4
 8006f8e:	462c      	movge	r4, r5
 8006f90:	4638      	mov	r0, r7
 8006f92:	6861      	ldr	r1, [r4, #4]
 8006f94:	bfa6      	itte	ge
 8006f96:	461d      	movge	r5, r3
 8006f98:	2600      	movge	r6, #0
 8006f9a:	2601      	movlt	r6, #1
 8006f9c:	f7ff fd3e 	bl	8006a1c <_Balloc>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	b918      	cbnz	r0, 8006fac <__mdiff+0x5c>
 8006fa4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006fa8:	4b2d      	ldr	r3, [pc, #180]	; (8007060 <__mdiff+0x110>)
 8006faa:	e7e5      	b.n	8006f78 <__mdiff+0x28>
 8006fac:	f102 0814 	add.w	r8, r2, #20
 8006fb0:	46c2      	mov	sl, r8
 8006fb2:	f04f 0c00 	mov.w	ip, #0
 8006fb6:	6927      	ldr	r7, [r4, #16]
 8006fb8:	60c6      	str	r6, [r0, #12]
 8006fba:	692e      	ldr	r6, [r5, #16]
 8006fbc:	f104 0014 	add.w	r0, r4, #20
 8006fc0:	f105 0914 	add.w	r9, r5, #20
 8006fc4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006fc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006fcc:	3410      	adds	r4, #16
 8006fce:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006fd2:	f859 3b04 	ldr.w	r3, [r9], #4
 8006fd6:	fa1f f18b 	uxth.w	r1, fp
 8006fda:	448c      	add	ip, r1
 8006fdc:	b299      	uxth	r1, r3
 8006fde:	0c1b      	lsrs	r3, r3, #16
 8006fe0:	ebac 0101 	sub.w	r1, ip, r1
 8006fe4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006fe8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006fec:	b289      	uxth	r1, r1
 8006fee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006ff2:	454e      	cmp	r6, r9
 8006ff4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006ff8:	f84a 3b04 	str.w	r3, [sl], #4
 8006ffc:	d8e7      	bhi.n	8006fce <__mdiff+0x7e>
 8006ffe:	1b73      	subs	r3, r6, r5
 8007000:	3b15      	subs	r3, #21
 8007002:	f023 0303 	bic.w	r3, r3, #3
 8007006:	3515      	adds	r5, #21
 8007008:	3304      	adds	r3, #4
 800700a:	42ae      	cmp	r6, r5
 800700c:	bf38      	it	cc
 800700e:	2304      	movcc	r3, #4
 8007010:	4418      	add	r0, r3
 8007012:	4443      	add	r3, r8
 8007014:	461e      	mov	r6, r3
 8007016:	4605      	mov	r5, r0
 8007018:	4575      	cmp	r5, lr
 800701a:	d30e      	bcc.n	800703a <__mdiff+0xea>
 800701c:	f10e 0103 	add.w	r1, lr, #3
 8007020:	1a09      	subs	r1, r1, r0
 8007022:	f021 0103 	bic.w	r1, r1, #3
 8007026:	3803      	subs	r0, #3
 8007028:	4586      	cmp	lr, r0
 800702a:	bf38      	it	cc
 800702c:	2100      	movcc	r1, #0
 800702e:	4419      	add	r1, r3
 8007030:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007034:	b18b      	cbz	r3, 800705a <__mdiff+0x10a>
 8007036:	6117      	str	r7, [r2, #16]
 8007038:	e7a4      	b.n	8006f84 <__mdiff+0x34>
 800703a:	f855 8b04 	ldr.w	r8, [r5], #4
 800703e:	fa1f f188 	uxth.w	r1, r8
 8007042:	4461      	add	r1, ip
 8007044:	140c      	asrs	r4, r1, #16
 8007046:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800704a:	b289      	uxth	r1, r1
 800704c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007050:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007054:	f846 1b04 	str.w	r1, [r6], #4
 8007058:	e7de      	b.n	8007018 <__mdiff+0xc8>
 800705a:	3f01      	subs	r7, #1
 800705c:	e7e8      	b.n	8007030 <__mdiff+0xe0>
 800705e:	bf00      	nop
 8007060:	08007810 	.word	0x08007810
 8007064:	08007884 	.word	0x08007884

08007068 <__d2b>:
 8007068:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800706c:	2101      	movs	r1, #1
 800706e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007072:	4690      	mov	r8, r2
 8007074:	461d      	mov	r5, r3
 8007076:	f7ff fcd1 	bl	8006a1c <_Balloc>
 800707a:	4604      	mov	r4, r0
 800707c:	b930      	cbnz	r0, 800708c <__d2b+0x24>
 800707e:	4602      	mov	r2, r0
 8007080:	f240 310a 	movw	r1, #778	; 0x30a
 8007084:	4b24      	ldr	r3, [pc, #144]	; (8007118 <__d2b+0xb0>)
 8007086:	4825      	ldr	r0, [pc, #148]	; (800711c <__d2b+0xb4>)
 8007088:	f7fd fc86 	bl	8004998 <__assert_func>
 800708c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007090:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007094:	bb2d      	cbnz	r5, 80070e2 <__d2b+0x7a>
 8007096:	9301      	str	r3, [sp, #4]
 8007098:	f1b8 0300 	subs.w	r3, r8, #0
 800709c:	d026      	beq.n	80070ec <__d2b+0x84>
 800709e:	4668      	mov	r0, sp
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	f7ff fd83 	bl	8006bac <__lo0bits>
 80070a6:	9900      	ldr	r1, [sp, #0]
 80070a8:	b1f0      	cbz	r0, 80070e8 <__d2b+0x80>
 80070aa:	9a01      	ldr	r2, [sp, #4]
 80070ac:	f1c0 0320 	rsb	r3, r0, #32
 80070b0:	fa02 f303 	lsl.w	r3, r2, r3
 80070b4:	430b      	orrs	r3, r1
 80070b6:	40c2      	lsrs	r2, r0
 80070b8:	6163      	str	r3, [r4, #20]
 80070ba:	9201      	str	r2, [sp, #4]
 80070bc:	9b01      	ldr	r3, [sp, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	bf14      	ite	ne
 80070c2:	2102      	movne	r1, #2
 80070c4:	2101      	moveq	r1, #1
 80070c6:	61a3      	str	r3, [r4, #24]
 80070c8:	6121      	str	r1, [r4, #16]
 80070ca:	b1c5      	cbz	r5, 80070fe <__d2b+0x96>
 80070cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80070d0:	4405      	add	r5, r0
 80070d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80070d6:	603d      	str	r5, [r7, #0]
 80070d8:	6030      	str	r0, [r6, #0]
 80070da:	4620      	mov	r0, r4
 80070dc:	b002      	add	sp, #8
 80070de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070e6:	e7d6      	b.n	8007096 <__d2b+0x2e>
 80070e8:	6161      	str	r1, [r4, #20]
 80070ea:	e7e7      	b.n	80070bc <__d2b+0x54>
 80070ec:	a801      	add	r0, sp, #4
 80070ee:	f7ff fd5d 	bl	8006bac <__lo0bits>
 80070f2:	2101      	movs	r1, #1
 80070f4:	9b01      	ldr	r3, [sp, #4]
 80070f6:	6121      	str	r1, [r4, #16]
 80070f8:	6163      	str	r3, [r4, #20]
 80070fa:	3020      	adds	r0, #32
 80070fc:	e7e5      	b.n	80070ca <__d2b+0x62>
 80070fe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007102:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007106:	6038      	str	r0, [r7, #0]
 8007108:	6918      	ldr	r0, [r3, #16]
 800710a:	f7ff fd2f 	bl	8006b6c <__hi0bits>
 800710e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007112:	6031      	str	r1, [r6, #0]
 8007114:	e7e1      	b.n	80070da <__d2b+0x72>
 8007116:	bf00      	nop
 8007118:	08007810 	.word	0x08007810
 800711c:	08007884 	.word	0x08007884

08007120 <_calloc_r>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	fba1 5402 	umull	r5, r4, r1, r2
 8007126:	b934      	cbnz	r4, 8007136 <_calloc_r+0x16>
 8007128:	4629      	mov	r1, r5
 800712a:	f000 f875 	bl	8007218 <_malloc_r>
 800712e:	4606      	mov	r6, r0
 8007130:	b928      	cbnz	r0, 800713e <_calloc_r+0x1e>
 8007132:	4630      	mov	r0, r6
 8007134:	bd70      	pop	{r4, r5, r6, pc}
 8007136:	220c      	movs	r2, #12
 8007138:	2600      	movs	r6, #0
 800713a:	6002      	str	r2, [r0, #0]
 800713c:	e7f9      	b.n	8007132 <_calloc_r+0x12>
 800713e:	462a      	mov	r2, r5
 8007140:	4621      	mov	r1, r4
 8007142:	f7fd fc83 	bl	8004a4c <memset>
 8007146:	e7f4      	b.n	8007132 <_calloc_r+0x12>

08007148 <_free_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4605      	mov	r5, r0
 800714c:	2900      	cmp	r1, #0
 800714e:	d040      	beq.n	80071d2 <_free_r+0x8a>
 8007150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007154:	1f0c      	subs	r4, r1, #4
 8007156:	2b00      	cmp	r3, #0
 8007158:	bfb8      	it	lt
 800715a:	18e4      	addlt	r4, r4, r3
 800715c:	f000 fa18 	bl	8007590 <__malloc_lock>
 8007160:	4a1c      	ldr	r2, [pc, #112]	; (80071d4 <_free_r+0x8c>)
 8007162:	6813      	ldr	r3, [r2, #0]
 8007164:	b933      	cbnz	r3, 8007174 <_free_r+0x2c>
 8007166:	6063      	str	r3, [r4, #4]
 8007168:	6014      	str	r4, [r2, #0]
 800716a:	4628      	mov	r0, r5
 800716c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007170:	f000 ba14 	b.w	800759c <__malloc_unlock>
 8007174:	42a3      	cmp	r3, r4
 8007176:	d908      	bls.n	800718a <_free_r+0x42>
 8007178:	6820      	ldr	r0, [r4, #0]
 800717a:	1821      	adds	r1, r4, r0
 800717c:	428b      	cmp	r3, r1
 800717e:	bf01      	itttt	eq
 8007180:	6819      	ldreq	r1, [r3, #0]
 8007182:	685b      	ldreq	r3, [r3, #4]
 8007184:	1809      	addeq	r1, r1, r0
 8007186:	6021      	streq	r1, [r4, #0]
 8007188:	e7ed      	b.n	8007166 <_free_r+0x1e>
 800718a:	461a      	mov	r2, r3
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	b10b      	cbz	r3, 8007194 <_free_r+0x4c>
 8007190:	42a3      	cmp	r3, r4
 8007192:	d9fa      	bls.n	800718a <_free_r+0x42>
 8007194:	6811      	ldr	r1, [r2, #0]
 8007196:	1850      	adds	r0, r2, r1
 8007198:	42a0      	cmp	r0, r4
 800719a:	d10b      	bne.n	80071b4 <_free_r+0x6c>
 800719c:	6820      	ldr	r0, [r4, #0]
 800719e:	4401      	add	r1, r0
 80071a0:	1850      	adds	r0, r2, r1
 80071a2:	4283      	cmp	r3, r0
 80071a4:	6011      	str	r1, [r2, #0]
 80071a6:	d1e0      	bne.n	800716a <_free_r+0x22>
 80071a8:	6818      	ldr	r0, [r3, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	4401      	add	r1, r0
 80071ae:	6011      	str	r1, [r2, #0]
 80071b0:	6053      	str	r3, [r2, #4]
 80071b2:	e7da      	b.n	800716a <_free_r+0x22>
 80071b4:	d902      	bls.n	80071bc <_free_r+0x74>
 80071b6:	230c      	movs	r3, #12
 80071b8:	602b      	str	r3, [r5, #0]
 80071ba:	e7d6      	b.n	800716a <_free_r+0x22>
 80071bc:	6820      	ldr	r0, [r4, #0]
 80071be:	1821      	adds	r1, r4, r0
 80071c0:	428b      	cmp	r3, r1
 80071c2:	bf01      	itttt	eq
 80071c4:	6819      	ldreq	r1, [r3, #0]
 80071c6:	685b      	ldreq	r3, [r3, #4]
 80071c8:	1809      	addeq	r1, r1, r0
 80071ca:	6021      	streq	r1, [r4, #0]
 80071cc:	6063      	str	r3, [r4, #4]
 80071ce:	6054      	str	r4, [r2, #4]
 80071d0:	e7cb      	b.n	800716a <_free_r+0x22>
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	200002a0 	.word	0x200002a0

080071d8 <sbrk_aligned>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	4e0e      	ldr	r6, [pc, #56]	; (8007214 <sbrk_aligned+0x3c>)
 80071dc:	460c      	mov	r4, r1
 80071de:	6831      	ldr	r1, [r6, #0]
 80071e0:	4605      	mov	r5, r0
 80071e2:	b911      	cbnz	r1, 80071ea <sbrk_aligned+0x12>
 80071e4:	f000 f8d4 	bl	8007390 <_sbrk_r>
 80071e8:	6030      	str	r0, [r6, #0]
 80071ea:	4621      	mov	r1, r4
 80071ec:	4628      	mov	r0, r5
 80071ee:	f000 f8cf 	bl	8007390 <_sbrk_r>
 80071f2:	1c43      	adds	r3, r0, #1
 80071f4:	d00a      	beq.n	800720c <sbrk_aligned+0x34>
 80071f6:	1cc4      	adds	r4, r0, #3
 80071f8:	f024 0403 	bic.w	r4, r4, #3
 80071fc:	42a0      	cmp	r0, r4
 80071fe:	d007      	beq.n	8007210 <sbrk_aligned+0x38>
 8007200:	1a21      	subs	r1, r4, r0
 8007202:	4628      	mov	r0, r5
 8007204:	f000 f8c4 	bl	8007390 <_sbrk_r>
 8007208:	3001      	adds	r0, #1
 800720a:	d101      	bne.n	8007210 <sbrk_aligned+0x38>
 800720c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007210:	4620      	mov	r0, r4
 8007212:	bd70      	pop	{r4, r5, r6, pc}
 8007214:	200002a4 	.word	0x200002a4

08007218 <_malloc_r>:
 8007218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800721c:	1ccd      	adds	r5, r1, #3
 800721e:	f025 0503 	bic.w	r5, r5, #3
 8007222:	3508      	adds	r5, #8
 8007224:	2d0c      	cmp	r5, #12
 8007226:	bf38      	it	cc
 8007228:	250c      	movcc	r5, #12
 800722a:	2d00      	cmp	r5, #0
 800722c:	4607      	mov	r7, r0
 800722e:	db01      	blt.n	8007234 <_malloc_r+0x1c>
 8007230:	42a9      	cmp	r1, r5
 8007232:	d905      	bls.n	8007240 <_malloc_r+0x28>
 8007234:	230c      	movs	r3, #12
 8007236:	2600      	movs	r6, #0
 8007238:	603b      	str	r3, [r7, #0]
 800723a:	4630      	mov	r0, r6
 800723c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007240:	4e2e      	ldr	r6, [pc, #184]	; (80072fc <_malloc_r+0xe4>)
 8007242:	f000 f9a5 	bl	8007590 <__malloc_lock>
 8007246:	6833      	ldr	r3, [r6, #0]
 8007248:	461c      	mov	r4, r3
 800724a:	bb34      	cbnz	r4, 800729a <_malloc_r+0x82>
 800724c:	4629      	mov	r1, r5
 800724e:	4638      	mov	r0, r7
 8007250:	f7ff ffc2 	bl	80071d8 <sbrk_aligned>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	4604      	mov	r4, r0
 8007258:	d14d      	bne.n	80072f6 <_malloc_r+0xde>
 800725a:	6834      	ldr	r4, [r6, #0]
 800725c:	4626      	mov	r6, r4
 800725e:	2e00      	cmp	r6, #0
 8007260:	d140      	bne.n	80072e4 <_malloc_r+0xcc>
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	4631      	mov	r1, r6
 8007266:	4638      	mov	r0, r7
 8007268:	eb04 0803 	add.w	r8, r4, r3
 800726c:	f000 f890 	bl	8007390 <_sbrk_r>
 8007270:	4580      	cmp	r8, r0
 8007272:	d13a      	bne.n	80072ea <_malloc_r+0xd2>
 8007274:	6821      	ldr	r1, [r4, #0]
 8007276:	3503      	adds	r5, #3
 8007278:	1a6d      	subs	r5, r5, r1
 800727a:	f025 0503 	bic.w	r5, r5, #3
 800727e:	3508      	adds	r5, #8
 8007280:	2d0c      	cmp	r5, #12
 8007282:	bf38      	it	cc
 8007284:	250c      	movcc	r5, #12
 8007286:	4638      	mov	r0, r7
 8007288:	4629      	mov	r1, r5
 800728a:	f7ff ffa5 	bl	80071d8 <sbrk_aligned>
 800728e:	3001      	adds	r0, #1
 8007290:	d02b      	beq.n	80072ea <_malloc_r+0xd2>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	442b      	add	r3, r5
 8007296:	6023      	str	r3, [r4, #0]
 8007298:	e00e      	b.n	80072b8 <_malloc_r+0xa0>
 800729a:	6822      	ldr	r2, [r4, #0]
 800729c:	1b52      	subs	r2, r2, r5
 800729e:	d41e      	bmi.n	80072de <_malloc_r+0xc6>
 80072a0:	2a0b      	cmp	r2, #11
 80072a2:	d916      	bls.n	80072d2 <_malloc_r+0xba>
 80072a4:	1961      	adds	r1, r4, r5
 80072a6:	42a3      	cmp	r3, r4
 80072a8:	6025      	str	r5, [r4, #0]
 80072aa:	bf18      	it	ne
 80072ac:	6059      	strne	r1, [r3, #4]
 80072ae:	6863      	ldr	r3, [r4, #4]
 80072b0:	bf08      	it	eq
 80072b2:	6031      	streq	r1, [r6, #0]
 80072b4:	5162      	str	r2, [r4, r5]
 80072b6:	604b      	str	r3, [r1, #4]
 80072b8:	4638      	mov	r0, r7
 80072ba:	f104 060b 	add.w	r6, r4, #11
 80072be:	f000 f96d 	bl	800759c <__malloc_unlock>
 80072c2:	f026 0607 	bic.w	r6, r6, #7
 80072c6:	1d23      	adds	r3, r4, #4
 80072c8:	1af2      	subs	r2, r6, r3
 80072ca:	d0b6      	beq.n	800723a <_malloc_r+0x22>
 80072cc:	1b9b      	subs	r3, r3, r6
 80072ce:	50a3      	str	r3, [r4, r2]
 80072d0:	e7b3      	b.n	800723a <_malloc_r+0x22>
 80072d2:	6862      	ldr	r2, [r4, #4]
 80072d4:	42a3      	cmp	r3, r4
 80072d6:	bf0c      	ite	eq
 80072d8:	6032      	streq	r2, [r6, #0]
 80072da:	605a      	strne	r2, [r3, #4]
 80072dc:	e7ec      	b.n	80072b8 <_malloc_r+0xa0>
 80072de:	4623      	mov	r3, r4
 80072e0:	6864      	ldr	r4, [r4, #4]
 80072e2:	e7b2      	b.n	800724a <_malloc_r+0x32>
 80072e4:	4634      	mov	r4, r6
 80072e6:	6876      	ldr	r6, [r6, #4]
 80072e8:	e7b9      	b.n	800725e <_malloc_r+0x46>
 80072ea:	230c      	movs	r3, #12
 80072ec:	4638      	mov	r0, r7
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	f000 f954 	bl	800759c <__malloc_unlock>
 80072f4:	e7a1      	b.n	800723a <_malloc_r+0x22>
 80072f6:	6025      	str	r5, [r4, #0]
 80072f8:	e7de      	b.n	80072b8 <_malloc_r+0xa0>
 80072fa:	bf00      	nop
 80072fc:	200002a0 	.word	0x200002a0

08007300 <_putc_r>:
 8007300:	b570      	push	{r4, r5, r6, lr}
 8007302:	460d      	mov	r5, r1
 8007304:	4614      	mov	r4, r2
 8007306:	4606      	mov	r6, r0
 8007308:	b118      	cbz	r0, 8007312 <_putc_r+0x12>
 800730a:	6983      	ldr	r3, [r0, #24]
 800730c:	b90b      	cbnz	r3, 8007312 <_putc_r+0x12>
 800730e:	f7ff fa57 	bl	80067c0 <__sinit>
 8007312:	4b1c      	ldr	r3, [pc, #112]	; (8007384 <_putc_r+0x84>)
 8007314:	429c      	cmp	r4, r3
 8007316:	d124      	bne.n	8007362 <_putc_r+0x62>
 8007318:	6874      	ldr	r4, [r6, #4]
 800731a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800731c:	07d8      	lsls	r0, r3, #31
 800731e:	d405      	bmi.n	800732c <_putc_r+0x2c>
 8007320:	89a3      	ldrh	r3, [r4, #12]
 8007322:	0599      	lsls	r1, r3, #22
 8007324:	d402      	bmi.n	800732c <_putc_r+0x2c>
 8007326:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007328:	f7ff faed 	bl	8006906 <__retarget_lock_acquire_recursive>
 800732c:	68a3      	ldr	r3, [r4, #8]
 800732e:	3b01      	subs	r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	60a3      	str	r3, [r4, #8]
 8007334:	da05      	bge.n	8007342 <_putc_r+0x42>
 8007336:	69a2      	ldr	r2, [r4, #24]
 8007338:	4293      	cmp	r3, r2
 800733a:	db1c      	blt.n	8007376 <_putc_r+0x76>
 800733c:	b2eb      	uxtb	r3, r5
 800733e:	2b0a      	cmp	r3, #10
 8007340:	d019      	beq.n	8007376 <_putc_r+0x76>
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	6022      	str	r2, [r4, #0]
 8007348:	701d      	strb	r5, [r3, #0]
 800734a:	b2ed      	uxtb	r5, r5
 800734c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800734e:	07da      	lsls	r2, r3, #31
 8007350:	d405      	bmi.n	800735e <_putc_r+0x5e>
 8007352:	89a3      	ldrh	r3, [r4, #12]
 8007354:	059b      	lsls	r3, r3, #22
 8007356:	d402      	bmi.n	800735e <_putc_r+0x5e>
 8007358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800735a:	f7ff fad5 	bl	8006908 <__retarget_lock_release_recursive>
 800735e:	4628      	mov	r0, r5
 8007360:	bd70      	pop	{r4, r5, r6, pc}
 8007362:	4b09      	ldr	r3, [pc, #36]	; (8007388 <_putc_r+0x88>)
 8007364:	429c      	cmp	r4, r3
 8007366:	d101      	bne.n	800736c <_putc_r+0x6c>
 8007368:	68b4      	ldr	r4, [r6, #8]
 800736a:	e7d6      	b.n	800731a <_putc_r+0x1a>
 800736c:	4b07      	ldr	r3, [pc, #28]	; (800738c <_putc_r+0x8c>)
 800736e:	429c      	cmp	r4, r3
 8007370:	bf08      	it	eq
 8007372:	68f4      	ldreq	r4, [r6, #12]
 8007374:	e7d1      	b.n	800731a <_putc_r+0x1a>
 8007376:	4629      	mov	r1, r5
 8007378:	4622      	mov	r2, r4
 800737a:	4630      	mov	r0, r6
 800737c:	f7fe f9c8 	bl	8005710 <__swbuf_r>
 8007380:	4605      	mov	r5, r0
 8007382:	e7e3      	b.n	800734c <_putc_r+0x4c>
 8007384:	08007844 	.word	0x08007844
 8007388:	08007864 	.word	0x08007864
 800738c:	08007824 	.word	0x08007824

08007390 <_sbrk_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	2300      	movs	r3, #0
 8007394:	4d05      	ldr	r5, [pc, #20]	; (80073ac <_sbrk_r+0x1c>)
 8007396:	4604      	mov	r4, r0
 8007398:	4608      	mov	r0, r1
 800739a:	602b      	str	r3, [r5, #0]
 800739c:	f7fa fa24 	bl	80017e8 <_sbrk>
 80073a0:	1c43      	adds	r3, r0, #1
 80073a2:	d102      	bne.n	80073aa <_sbrk_r+0x1a>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	b103      	cbz	r3, 80073aa <_sbrk_r+0x1a>
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	bd38      	pop	{r3, r4, r5, pc}
 80073ac:	200002a8 	.word	0x200002a8

080073b0 <_raise_r>:
 80073b0:	291f      	cmp	r1, #31
 80073b2:	b538      	push	{r3, r4, r5, lr}
 80073b4:	4604      	mov	r4, r0
 80073b6:	460d      	mov	r5, r1
 80073b8:	d904      	bls.n	80073c4 <_raise_r+0x14>
 80073ba:	2316      	movs	r3, #22
 80073bc:	6003      	str	r3, [r0, #0]
 80073be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80073c6:	b112      	cbz	r2, 80073ce <_raise_r+0x1e>
 80073c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073cc:	b94b      	cbnz	r3, 80073e2 <_raise_r+0x32>
 80073ce:	4620      	mov	r0, r4
 80073d0:	f000 f830 	bl	8007434 <_getpid_r>
 80073d4:	462a      	mov	r2, r5
 80073d6:	4601      	mov	r1, r0
 80073d8:	4620      	mov	r0, r4
 80073da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073de:	f000 b817 	b.w	8007410 <_kill_r>
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d00a      	beq.n	80073fc <_raise_r+0x4c>
 80073e6:	1c59      	adds	r1, r3, #1
 80073e8:	d103      	bne.n	80073f2 <_raise_r+0x42>
 80073ea:	2316      	movs	r3, #22
 80073ec:	6003      	str	r3, [r0, #0]
 80073ee:	2001      	movs	r0, #1
 80073f0:	e7e7      	b.n	80073c2 <_raise_r+0x12>
 80073f2:	2400      	movs	r4, #0
 80073f4:	4628      	mov	r0, r5
 80073f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073fa:	4798      	blx	r3
 80073fc:	2000      	movs	r0, #0
 80073fe:	e7e0      	b.n	80073c2 <_raise_r+0x12>

08007400 <raise>:
 8007400:	4b02      	ldr	r3, [pc, #8]	; (800740c <raise+0xc>)
 8007402:	4601      	mov	r1, r0
 8007404:	6818      	ldr	r0, [r3, #0]
 8007406:	f7ff bfd3 	b.w	80073b0 <_raise_r>
 800740a:	bf00      	nop
 800740c:	2000000c 	.word	0x2000000c

08007410 <_kill_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	2300      	movs	r3, #0
 8007414:	4d06      	ldr	r5, [pc, #24]	; (8007430 <_kill_r+0x20>)
 8007416:	4604      	mov	r4, r0
 8007418:	4608      	mov	r0, r1
 800741a:	4611      	mov	r1, r2
 800741c:	602b      	str	r3, [r5, #0]
 800741e:	f7fa f965 	bl	80016ec <_kill>
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	d102      	bne.n	800742c <_kill_r+0x1c>
 8007426:	682b      	ldr	r3, [r5, #0]
 8007428:	b103      	cbz	r3, 800742c <_kill_r+0x1c>
 800742a:	6023      	str	r3, [r4, #0]
 800742c:	bd38      	pop	{r3, r4, r5, pc}
 800742e:	bf00      	nop
 8007430:	200002a8 	.word	0x200002a8

08007434 <_getpid_r>:
 8007434:	f7fa b953 	b.w	80016de <_getpid>

08007438 <__sread>:
 8007438:	b510      	push	{r4, lr}
 800743a:	460c      	mov	r4, r1
 800743c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007440:	f000 f8b2 	bl	80075a8 <_read_r>
 8007444:	2800      	cmp	r0, #0
 8007446:	bfab      	itete	ge
 8007448:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800744a:	89a3      	ldrhlt	r3, [r4, #12]
 800744c:	181b      	addge	r3, r3, r0
 800744e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007452:	bfac      	ite	ge
 8007454:	6563      	strge	r3, [r4, #84]	; 0x54
 8007456:	81a3      	strhlt	r3, [r4, #12]
 8007458:	bd10      	pop	{r4, pc}

0800745a <__swrite>:
 800745a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800745e:	461f      	mov	r7, r3
 8007460:	898b      	ldrh	r3, [r1, #12]
 8007462:	4605      	mov	r5, r0
 8007464:	05db      	lsls	r3, r3, #23
 8007466:	460c      	mov	r4, r1
 8007468:	4616      	mov	r6, r2
 800746a:	d505      	bpl.n	8007478 <__swrite+0x1e>
 800746c:	2302      	movs	r3, #2
 800746e:	2200      	movs	r2, #0
 8007470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007474:	f000 f868 	bl	8007548 <_lseek_r>
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	4632      	mov	r2, r6
 800747c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007480:	81a3      	strh	r3, [r4, #12]
 8007482:	4628      	mov	r0, r5
 8007484:	463b      	mov	r3, r7
 8007486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800748a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800748e:	f000 b817 	b.w	80074c0 <_write_r>

08007492 <__sseek>:
 8007492:	b510      	push	{r4, lr}
 8007494:	460c      	mov	r4, r1
 8007496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800749a:	f000 f855 	bl	8007548 <_lseek_r>
 800749e:	1c43      	adds	r3, r0, #1
 80074a0:	89a3      	ldrh	r3, [r4, #12]
 80074a2:	bf15      	itete	ne
 80074a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80074a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074ae:	81a3      	strheq	r3, [r4, #12]
 80074b0:	bf18      	it	ne
 80074b2:	81a3      	strhne	r3, [r4, #12]
 80074b4:	bd10      	pop	{r4, pc}

080074b6 <__sclose>:
 80074b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ba:	f000 b813 	b.w	80074e4 <_close_r>
	...

080074c0 <_write_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4604      	mov	r4, r0
 80074c4:	4608      	mov	r0, r1
 80074c6:	4611      	mov	r1, r2
 80074c8:	2200      	movs	r2, #0
 80074ca:	4d05      	ldr	r5, [pc, #20]	; (80074e0 <_write_r+0x20>)
 80074cc:	602a      	str	r2, [r5, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	f7fa f944 	bl	800175c <_write>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_write_r+0x1e>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_write_r+0x1e>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	200002a8 	.word	0x200002a8

080074e4 <_close_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	2300      	movs	r3, #0
 80074e8:	4d05      	ldr	r5, [pc, #20]	; (8007500 <_close_r+0x1c>)
 80074ea:	4604      	mov	r4, r0
 80074ec:	4608      	mov	r0, r1
 80074ee:	602b      	str	r3, [r5, #0]
 80074f0:	f7fa f94a 	bl	8001788 <_close>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d102      	bne.n	80074fe <_close_r+0x1a>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	b103      	cbz	r3, 80074fe <_close_r+0x1a>
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	200002a8 	.word	0x200002a8

08007504 <_fstat_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	2300      	movs	r3, #0
 8007508:	4d06      	ldr	r5, [pc, #24]	; (8007524 <_fstat_r+0x20>)
 800750a:	4604      	mov	r4, r0
 800750c:	4608      	mov	r0, r1
 800750e:	4611      	mov	r1, r2
 8007510:	602b      	str	r3, [r5, #0]
 8007512:	f7fa f944 	bl	800179e <_fstat>
 8007516:	1c43      	adds	r3, r0, #1
 8007518:	d102      	bne.n	8007520 <_fstat_r+0x1c>
 800751a:	682b      	ldr	r3, [r5, #0]
 800751c:	b103      	cbz	r3, 8007520 <_fstat_r+0x1c>
 800751e:	6023      	str	r3, [r4, #0]
 8007520:	bd38      	pop	{r3, r4, r5, pc}
 8007522:	bf00      	nop
 8007524:	200002a8 	.word	0x200002a8

08007528 <_isatty_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	2300      	movs	r3, #0
 800752c:	4d05      	ldr	r5, [pc, #20]	; (8007544 <_isatty_r+0x1c>)
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	602b      	str	r3, [r5, #0]
 8007534:	f7fa f942 	bl	80017bc <_isatty>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d102      	bne.n	8007542 <_isatty_r+0x1a>
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	b103      	cbz	r3, 8007542 <_isatty_r+0x1a>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	200002a8 	.word	0x200002a8

08007548 <_lseek_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	4604      	mov	r4, r0
 800754c:	4608      	mov	r0, r1
 800754e:	4611      	mov	r1, r2
 8007550:	2200      	movs	r2, #0
 8007552:	4d05      	ldr	r5, [pc, #20]	; (8007568 <_lseek_r+0x20>)
 8007554:	602a      	str	r2, [r5, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	f7fa f93a 	bl	80017d0 <_lseek>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d102      	bne.n	8007566 <_lseek_r+0x1e>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	b103      	cbz	r3, 8007566 <_lseek_r+0x1e>
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	bd38      	pop	{r3, r4, r5, pc}
 8007568:	200002a8 	.word	0x200002a8

0800756c <__ascii_mbtowc>:
 800756c:	b082      	sub	sp, #8
 800756e:	b901      	cbnz	r1, 8007572 <__ascii_mbtowc+0x6>
 8007570:	a901      	add	r1, sp, #4
 8007572:	b142      	cbz	r2, 8007586 <__ascii_mbtowc+0x1a>
 8007574:	b14b      	cbz	r3, 800758a <__ascii_mbtowc+0x1e>
 8007576:	7813      	ldrb	r3, [r2, #0]
 8007578:	600b      	str	r3, [r1, #0]
 800757a:	7812      	ldrb	r2, [r2, #0]
 800757c:	1e10      	subs	r0, r2, #0
 800757e:	bf18      	it	ne
 8007580:	2001      	movne	r0, #1
 8007582:	b002      	add	sp, #8
 8007584:	4770      	bx	lr
 8007586:	4610      	mov	r0, r2
 8007588:	e7fb      	b.n	8007582 <__ascii_mbtowc+0x16>
 800758a:	f06f 0001 	mvn.w	r0, #1
 800758e:	e7f8      	b.n	8007582 <__ascii_mbtowc+0x16>

08007590 <__malloc_lock>:
 8007590:	4801      	ldr	r0, [pc, #4]	; (8007598 <__malloc_lock+0x8>)
 8007592:	f7ff b9b8 	b.w	8006906 <__retarget_lock_acquire_recursive>
 8007596:	bf00      	nop
 8007598:	2000029c 	.word	0x2000029c

0800759c <__malloc_unlock>:
 800759c:	4801      	ldr	r0, [pc, #4]	; (80075a4 <__malloc_unlock+0x8>)
 800759e:	f7ff b9b3 	b.w	8006908 <__retarget_lock_release_recursive>
 80075a2:	bf00      	nop
 80075a4:	2000029c 	.word	0x2000029c

080075a8 <_read_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4604      	mov	r4, r0
 80075ac:	4608      	mov	r0, r1
 80075ae:	4611      	mov	r1, r2
 80075b0:	2200      	movs	r2, #0
 80075b2:	4d05      	ldr	r5, [pc, #20]	; (80075c8 <_read_r+0x20>)
 80075b4:	602a      	str	r2, [r5, #0]
 80075b6:	461a      	mov	r2, r3
 80075b8:	f7fa f8b2 	bl	8001720 <_read>
 80075bc:	1c43      	adds	r3, r0, #1
 80075be:	d102      	bne.n	80075c6 <_read_r+0x1e>
 80075c0:	682b      	ldr	r3, [r5, #0]
 80075c2:	b103      	cbz	r3, 80075c6 <_read_r+0x1e>
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	bd38      	pop	{r3, r4, r5, pc}
 80075c8:	200002a8 	.word	0x200002a8

080075cc <__ascii_wctomb>:
 80075cc:	4603      	mov	r3, r0
 80075ce:	4608      	mov	r0, r1
 80075d0:	b141      	cbz	r1, 80075e4 <__ascii_wctomb+0x18>
 80075d2:	2aff      	cmp	r2, #255	; 0xff
 80075d4:	d904      	bls.n	80075e0 <__ascii_wctomb+0x14>
 80075d6:	228a      	movs	r2, #138	; 0x8a
 80075d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	4770      	bx	lr
 80075e0:	2001      	movs	r0, #1
 80075e2:	700a      	strb	r2, [r1, #0]
 80075e4:	4770      	bx	lr
	...

080075e8 <_init>:
 80075e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ea:	bf00      	nop
 80075ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ee:	bc08      	pop	{r3}
 80075f0:	469e      	mov	lr, r3
 80075f2:	4770      	bx	lr

080075f4 <_fini>:
 80075f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f6:	bf00      	nop
 80075f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075fa:	bc08      	pop	{r3}
 80075fc:	469e      	mov	lr, r3
 80075fe:	4770      	bx	lr
