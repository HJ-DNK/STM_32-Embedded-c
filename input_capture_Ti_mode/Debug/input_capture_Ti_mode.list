
input_capture_Ti_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e74  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003fb0  08003fb0  00013fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004054  08004054  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004054  08004054  00014054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800405c  0800405c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800405c  0800405c  0001405c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  080040d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080040d4  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bccc  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b12  00000000  00000000  0002bd65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002d878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  0002e378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167bd  00000000  00000000  0002edd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc8a  00000000  00000000  0004558d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a33e  00000000  00000000  00051217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db555  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003438  00000000  00000000  000db5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08003f98 	.word	0x08003f98

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08003f98 	.word	0x08003f98

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <HAL_TIM_IC_CaptureCallback>:


float frequency = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	printf("intuppt is trigger\n");
 800048c:	481e      	ldr	r0, [pc, #120]	; (8000508 <HAL_TIM_IC_CaptureCallback+0x84>)
 800048e:	f003 f8fb 	bl	8003688 <puts>
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	7e1b      	ldrb	r3, [r3, #24]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d131      	bne.n	80004fe <HAL_TIM_IC_CaptureCallback+0x7a>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 800049a:	4b1c      	ldr	r3, [pc, #112]	; (800050c <HAL_TIM_IC_CaptureCallback+0x88>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d10a      	bne.n	80004b8 <HAL_TIM_IC_CaptureCallback+0x34>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80004a2:	2100      	movs	r1, #0
 80004a4:	6878      	ldr	r0, [r7, #4]
 80004a6:	f002 fa2f 	bl	8002908 <HAL_TIM_ReadCapturedValue>
 80004aa:	4603      	mov	r3, r0
 80004ac:	4a18      	ldr	r2, [pc, #96]	; (8000510 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80004ae:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80004b0:	4b16      	ldr	r3, [pc, #88]	; (800050c <HAL_TIM_IC_CaptureCallback+0x88>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	601a      	str	r2, [r3, #0]
			{
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
			}
		}
	}
}
 80004b6:	e022      	b.n	80004fe <HAL_TIM_IC_CaptureCallback+0x7a>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80004b8:	2100      	movs	r1, #0
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	f002 fa24 	bl	8002908 <HAL_TIM_ReadCapturedValue>
 80004c0:	4603      	mov	r3, r0
 80004c2:	4a14      	ldr	r2, [pc, #80]	; (8000514 <HAL_TIM_IC_CaptureCallback+0x90>)
 80004c4:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 80004c6:	4b13      	ldr	r3, [pc, #76]	; (8000514 <HAL_TIM_IC_CaptureCallback+0x90>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d907      	bls.n	80004e2 <HAL_TIM_IC_CaptureCallback+0x5e>
				Difference = IC_Val2-IC_Val1;
 80004d2:	4b10      	ldr	r3, [pc, #64]	; (8000514 <HAL_TIM_IC_CaptureCallback+0x90>)
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_TIM_IC_CaptureCallback+0x94>)
 80004de:	6013      	str	r3, [r2, #0]
}
 80004e0:	e00d      	b.n	80004fe <HAL_TIM_IC_CaptureCallback+0x7a>
			else if (IC_Val1 > IC_Val2)
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <HAL_TIM_IC_CaptureCallback+0x90>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <HAL_TIM_IC_CaptureCallback+0x7a>
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <HAL_TIM_IC_CaptureCallback+0x90>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	4b07      	ldr	r3, [pc, #28]	; (8000510 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	3b01      	subs	r3, #1
 80004fa:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_TIM_IC_CaptureCallback+0x94>)
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	08003fb0 	.word	0x08003fb0
 800050c:	20000160 	.word	0x20000160
 8000510:	20000154 	.word	0x20000154
 8000514:	20000158 	.word	0x20000158
 8000518:	2000015c 	.word	0x2000015c

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fba5 	bl	8000c6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f822 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f97a 	bl	8000820 <MX_GPIO_Init>
  MX_TIM2_Init();
 800052c:	f000 f86c 	bl	8000608 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000530:	f000 f94c 	bl	80007cc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000534:	f000 f8da 	bl	80006ec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  printf("helooo\n");
 8000538:	4809      	ldr	r0, [pc, #36]	; (8000560 <main+0x44>)
 800053a:	f003 f8a5 	bl	8003688 <puts>
  TIM2->CCR1 = 50;
 800053e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000542:	2232      	movs	r2, #50	; 0x32
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000546:	2100      	movs	r1, #0
 8000548:	4806      	ldr	r0, [pc, #24]	; (8000564 <main+0x48>)
 800054a:	f001 fd2d 	bl	8001fa8 <HAL_TIM_PWM_Start>

    HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800054e:	2100      	movs	r1, #0
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <main+0x4c>)
 8000552:	f001 fe07 	bl	8002164 <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
HAL_Delay(500);
 8000556:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800055a:	f000 fbf7 	bl	8000d4c <HAL_Delay>
 800055e:	e7fa      	b.n	8000556 <main+0x3a>
 8000560:	08003fc4 	.word	0x08003fc4
 8000564:	2000008c 	.word	0x2000008c
 8000568:	200000cc 	.word	0x200000cc

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b092      	sub	sp, #72	; 0x48
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2234      	movs	r2, #52	; 0x34
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 f80e 	bl	800359c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058e:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <SystemClock_Config+0x98>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000596:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <SystemClock_Config+0x98>)
 8000598:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800059c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059e:	2302      	movs	r3, #2
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a2:	2301      	movs	r3, #1
 80005a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a6:	2310      	movs	r3, #16
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ae:	2300      	movs	r3, #0
 80005b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80005b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80005bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fe72 	bl	80012ac <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ce:	f000 f949 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2303      	movs	r3, #3
 80005d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	2101      	movs	r1, #1
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 f98e 	bl	800190c <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005f6:	f000 f935 	bl	8000864 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3748      	adds	r7, #72	; 0x48
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40007000 	.word	0x40007000

08000608 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060e:	f107 0318 	add.w	r3, r7, #24
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000626:	463b      	mov	r3, r7
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <MX_TIM2_Init+0xe0>)
 8000634:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000638:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 800063a:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <MX_TIM2_Init+0xe0>)
 800063c:	2220      	movs	r2, #32
 800063e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <MX_TIM2_Init+0xe0>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <MX_TIM2_Init+0xe0>)
 8000648:	2263      	movs	r2, #99	; 0x63
 800064a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <MX_TIM2_Init+0xe0>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000652:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <MX_TIM2_Init+0xe0>)
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000658:	4823      	ldr	r0, [pc, #140]	; (80006e8 <MX_TIM2_Init+0xe0>)
 800065a:	f001 fc1d 	bl	8001e98 <HAL_TIM_Base_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8000664:	f000 f8fe 	bl	8000864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	4619      	mov	r1, r3
 8000674:	481c      	ldr	r0, [pc, #112]	; (80006e8 <MX_TIM2_Init+0xe0>)
 8000676:	f002 f87f 	bl	8002778 <HAL_TIM_ConfigClockSource>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000680:	f000 f8f0 	bl	8000864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000684:	4818      	ldr	r0, [pc, #96]	; (80006e8 <MX_TIM2_Init+0xe0>)
 8000686:	f001 fc46 	bl	8001f16 <HAL_TIM_PWM_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000690:	f000 f8e8 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4619      	mov	r1, r3
 80006a2:	4811      	ldr	r0, [pc, #68]	; (80006e8 <MX_TIM2_Init+0xe0>)
 80006a4:	f002 fccc 	bl	8003040 <HAL_TIMEx_MasterConfigSynchronization>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80006ae:	f000 f8d9 	bl	8000864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b2:	2360      	movs	r3, #96	; 0x60
 80006b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	4619      	mov	r1, r3
 80006c8:	4807      	ldr	r0, [pc, #28]	; (80006e8 <MX_TIM2_Init+0xe0>)
 80006ca:	f001 ff93 	bl	80025f4 <HAL_TIM_PWM_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80006d4:	f000 f8c6 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <MX_TIM2_Init+0xe0>)
 80006da:	f000 f957 	bl	800098c <HAL_TIM_MspPostInit>

}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	; 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000008c 	.word	0x2000008c

080006ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f2:	f107 0318 	add.w	r3, r7, #24
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000716:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <MX_TIM4_Init+0xd8>)
 8000718:	4a2b      	ldr	r2, [pc, #172]	; (80007c8 <MX_TIM4_Init+0xdc>)
 800071a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32;
 800071c:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <MX_TIM4_Init+0xd8>)
 800071e:	2220      	movs	r2, #32
 8000720:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000722:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <MX_TIM4_Init+0xd8>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000728:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <MX_TIM4_Init+0xd8>)
 800072a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800072e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <MX_TIM4_Init+0xd8>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <MX_TIM4_Init+0xd8>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800073c:	4821      	ldr	r0, [pc, #132]	; (80007c4 <MX_TIM4_Init+0xd8>)
 800073e:	f001 fbab 	bl	8001e98 <HAL_TIM_Base_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000748:	f000 f88c 	bl	8000864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000750:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000752:	f107 0318 	add.w	r3, r7, #24
 8000756:	4619      	mov	r1, r3
 8000758:	481a      	ldr	r0, [pc, #104]	; (80007c4 <MX_TIM4_Init+0xd8>)
 800075a:	f002 f80d 	bl	8002778 <HAL_TIM_ConfigClockSource>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000764:	f000 f87e 	bl	8000864 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000768:	4816      	ldr	r0, [pc, #88]	; (80007c4 <MX_TIM4_Init+0xd8>)
 800076a:	f001 fcb3 	bl	80020d4 <HAL_TIM_IC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000774:	f000 f876 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4619      	mov	r1, r3
 8000786:	480f      	ldr	r0, [pc, #60]	; (80007c4 <MX_TIM4_Init+0xd8>)
 8000788:	f002 fc5a 	bl	8003040 <HAL_TIMEx_MasterConfigSynchronization>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8000792:	f000 f867 	bl	8000864 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800079a:	2301      	movs	r3, #1
 800079c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	2200      	movs	r2, #0
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_TIM4_Init+0xd8>)
 80007ae:	f001 fe85 	bl	80024bc <HAL_TIM_IC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80007b8:	f000 f854 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	; 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000cc 	.word	0x200000cc
 80007c8:	40000800 	.word	0x40000800

080007cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <MX_USART2_UART_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 8000804:	f002 fc7a 	bl	80030fc <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080e:	f000 f829 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000010c 	.word	0x2000010c
 800081c:	40004400 	.word	0x40004400

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_GPIO_Init+0x40>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <MX_GPIO_Init+0x40>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	61d3      	str	r3, [r2, #28]
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_GPIO_Init+0x40>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_GPIO_Init+0x40>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	4a07      	ldr	r2, [pc, #28]	; (8000860 <MX_GPIO_Init+0x40>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	61d3      	str	r3, [r2, #28]
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <MX_GPIO_Init+0x40>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	40023800 	.word	0x40023800

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <HAL_MspInit+0x5c>)
 8000878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087a:	4a14      	ldr	r2, [pc, #80]	; (80008cc <HAL_MspInit+0x5c>)
 800087c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000880:	6253      	str	r3, [r2, #36]	; 0x24
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_MspInit+0x5c>)
 8000884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000886:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_MspInit+0x5c>)
 8000890:	6a1b      	ldr	r3, [r3, #32]
 8000892:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <HAL_MspInit+0x5c>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6213      	str	r3, [r2, #32]
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_MspInit+0x5c>)
 800089c:	6a1b      	ldr	r3, [r3, #32]
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_MspInit+0x5c>)
 80008a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <HAL_MspInit+0x5c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	6253      	str	r3, [r2, #36]	; 0x24
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_MspInit+0x5c>)
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008be:	2007      	movs	r0, #7
 80008c0:	f000 fb32 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008f0:	d10c      	bne.n	800090c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008f2:	4b23      	ldr	r3, [pc, #140]	; (8000980 <HAL_TIM_Base_MspInit+0xb0>)
 80008f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f6:	4a22      	ldr	r2, [pc, #136]	; (8000980 <HAL_TIM_Base_MspInit+0xb0>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6253      	str	r3, [r2, #36]	; 0x24
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <HAL_TIM_Base_MspInit+0xb0>)
 8000900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800090a:	e034      	b.n	8000976 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <HAL_TIM_Base_MspInit+0xb4>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d12f      	bne.n	8000976 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <HAL_TIM_Base_MspInit+0xb0>)
 8000918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091a:	4a19      	ldr	r2, [pc, #100]	; (8000980 <HAL_TIM_Base_MspInit+0xb0>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6253      	str	r3, [r2, #36]	; 0x24
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <HAL_TIM_Base_MspInit+0xb0>)
 8000924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <HAL_TIM_Base_MspInit+0xb0>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	4a13      	ldr	r2, [pc, #76]	; (8000980 <HAL_TIM_Base_MspInit+0xb0>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	61d3      	str	r3, [r2, #28]
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_TIM_Base_MspInit+0xb0>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000946:	2340      	movs	r3, #64	; 0x40
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000956:	2302      	movs	r3, #2
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <HAL_TIM_Base_MspInit+0xb8>)
 8000962:	f000 fb23 	bl	8000fac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	201e      	movs	r0, #30
 800096c:	f000 fae7 	bl	8000f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000970:	201e      	movs	r0, #30
 8000972:	f000 fb00 	bl	8000f76 <HAL_NVIC_EnableIRQ>
}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40000800 	.word	0x40000800
 8000988:	40020400 	.word	0x40020400

0800098c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009ac:	d11b      	bne.n	80009e6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <HAL_TIM_MspPostInit+0x64>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	4a0f      	ldr	r2, [pc, #60]	; (80009f0 <HAL_TIM_MspPostInit+0x64>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	61d3      	str	r3, [r2, #28]
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <HAL_TIM_MspPostInit+0x64>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP1     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009c6:	2301      	movs	r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4619      	mov	r1, r3
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <HAL_TIM_MspPostInit+0x68>)
 80009e2:	f000 fae3 	bl	8000fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3720      	adds	r7, #32
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000

080009f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <HAL_UART_MspInit+0x7c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d127      	bne.n	8000a6a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0x80>)
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <HAL_UART_MspInit+0x80>)
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	6253      	str	r3, [r2, #36]	; 0x24
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_UART_MspInit+0x80>)
 8000a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0x80>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <HAL_UART_MspInit+0x80>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	61d3      	str	r3, [r2, #28]
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_UART_MspInit+0x80>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <HAL_UART_MspInit+0x84>)
 8000a66:	f000 faa1 	bl	8000fac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <NMI_Handler+0x4>

08000a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler+0x4>

08000a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <UsageFault_Handler+0x4>

08000a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr

08000ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac6:	f000 f925 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <TIM4_IRQHandler+0x10>)
 8000ad6:	f001 fc15 	bl	8002304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000cc 	.word	0x200000cc

08000ae4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	e00a      	b.n	8000b0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000af6:	f3af 8000 	nop.w
 8000afa:	4601      	mov	r1, r0
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	b2ca      	uxtb	r2, r1
 8000b04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	dbf0      	blt.n	8000af6 <_read+0x12>
  }

  return len;
 8000b14:	687b      	ldr	r3, [r7, #4]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&huart2, ptr, len, 1000);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	4804      	ldr	r0, [pc, #16]	; (8000b48 <_write+0x28>)
 8000b38:	f002 fb30 	bl	800319c <HAL_UART_Transmit>

  return len;
 8000b3c:	687b      	ldr	r3, [r7, #4]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000010c 	.word	0x2000010c

08000b4c <_close>:

int _close(int file)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b72:	605a      	str	r2, [r3, #4]
  return 0;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <_isatty>:

int _isatty(int file)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b88:	2301      	movs	r3, #1
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f002 fcb4 	bl	8003548 <__errno>
 8000be0:	4603      	mov	r3, r0
 8000be2:	220c      	movs	r2, #12
 8000be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20008000 	.word	0x20008000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	20000164 	.word	0x20000164
 8000c14:	20000180 	.word	0x20000180

08000c18 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c24:	f7ff fff8 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c2a:	490c      	ldr	r1, [pc, #48]	; (8000c5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c2c:	4a0c      	ldr	r2, [pc, #48]	; (8000c60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c40:	4c09      	ldr	r4, [pc, #36]	; (8000c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f002 fc81 	bl	8003554 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c52:	f7ff fc63 	bl	800051c <main>
  bx lr
 8000c56:	4770      	bx	lr
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c60:	08004064 	.word	0x08004064
  ldr r2, =_sbss
 8000c64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c68:	2000017c 	.word	0x2000017c

08000c6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC1_IRQHandler>

08000c6e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f955 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 f80e 	bl	8000ca0 <HAL_InitTick>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d002      	beq.n	8000c90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	71fb      	strb	r3, [r7, #7]
 8000c8e:	e001      	b.n	8000c94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c90:	f7ff fdee 	bl	8000870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c94:	79fb      	ldrb	r3, [r7, #7]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_InitTick+0x68>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d022      	beq.n	8000cfa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_InitTick+0x6c>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <HAL_InitTick+0x68>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f962 	bl	8000f92 <HAL_SYSTICK_Config>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d10f      	bne.n	8000cf4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b0f      	cmp	r3, #15
 8000cd8:	d809      	bhi.n	8000cee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce2:	f000 f92c 	bl	8000f3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_InitTick+0x70>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	e007      	b.n	8000cfe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	e004      	b.n	8000cfe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e001      	b.n	8000cfe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_IncTick+0x1c>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a03      	ldr	r2, [pc, #12]	; (8000d30 <HAL_IncTick+0x1c>)
 8000d24:	6013      	str	r3, [r2, #0]
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000168 	.word	0x20000168
 8000d34:	20000008 	.word	0x20000008

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <HAL_GetTick+0x10>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	20000168 	.word	0x20000168

08000d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d54:	f7ff fff0 	bl	8000d38 <HAL_GetTick>
 8000d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d64:	d004      	beq.n	8000d70 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_Delay+0x40>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d70:	bf00      	nop
 8000d72:	f7ff ffe1 	bl	8000d38 <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d8f7      	bhi.n	8000d72 <HAL_Delay+0x26>
  {
  }
}
 8000d82:	bf00      	nop
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000008 	.word	0x20000008

08000d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dac:	4013      	ands	r3, r2
 8000dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc2:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	60d3      	str	r3, [r2, #12]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	f003 0307 	and.w	r3, r3, #7
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	db0b      	blt.n	8000e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f003 021f 	and.w	r2, r3, #31
 8000e0c:	4906      	ldr	r1, [pc, #24]	; (8000e28 <__NVIC_EnableIRQ+0x34>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	2001      	movs	r0, #1
 8000e16:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	; (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f08:	f7ff ff90 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff2d 	bl	8000d90 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff42 	bl	8000dd8 <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff90 	bl	8000e80 <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5f 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff35 	bl	8000df4 <__NVIC_EnableIRQ>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffa2 	bl	8000ee4 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fc2:	e154      	b.n	800126e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 8146 	beq.w	8001268 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d005      	beq.n	8000ff4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d130      	bne.n	8001056 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800102a:	2201      	movs	r2, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 0201 	and.w	r2, r3, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b03      	cmp	r3, #3
 8001060:	d017      	beq.n	8001092 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d123      	bne.n	80010e6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010aa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	6939      	ldr	r1, [r7, #16]
 80010e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0203 	and.w	r2, r3, #3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 80a0 	beq.w	8001268 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001128:	4b58      	ldr	r3, [pc, #352]	; (800128c <HAL_GPIO_Init+0x2e0>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4a57      	ldr	r2, [pc, #348]	; (800128c <HAL_GPIO_Init+0x2e0>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6213      	str	r3, [r2, #32]
 8001134:	4b55      	ldr	r3, [pc, #340]	; (800128c <HAL_GPIO_Init+0x2e0>)
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001140:	4a53      	ldr	r2, [pc, #332]	; (8001290 <HAL_GPIO_Init+0x2e4>)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a4b      	ldr	r2, [pc, #300]	; (8001294 <HAL_GPIO_Init+0x2e8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d019      	beq.n	80011a0 <HAL_GPIO_Init+0x1f4>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a4a      	ldr	r2, [pc, #296]	; (8001298 <HAL_GPIO_Init+0x2ec>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d013      	beq.n	800119c <HAL_GPIO_Init+0x1f0>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a49      	ldr	r2, [pc, #292]	; (800129c <HAL_GPIO_Init+0x2f0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d00d      	beq.n	8001198 <HAL_GPIO_Init+0x1ec>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a48      	ldr	r2, [pc, #288]	; (80012a0 <HAL_GPIO_Init+0x2f4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d007      	beq.n	8001194 <HAL_GPIO_Init+0x1e8>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a47      	ldr	r2, [pc, #284]	; (80012a4 <HAL_GPIO_Init+0x2f8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d101      	bne.n	8001190 <HAL_GPIO_Init+0x1e4>
 800118c:	2304      	movs	r3, #4
 800118e:	e008      	b.n	80011a2 <HAL_GPIO_Init+0x1f6>
 8001190:	2305      	movs	r3, #5
 8001192:	e006      	b.n	80011a2 <HAL_GPIO_Init+0x1f6>
 8001194:	2303      	movs	r3, #3
 8001196:	e004      	b.n	80011a2 <HAL_GPIO_Init+0x1f6>
 8001198:	2302      	movs	r3, #2
 800119a:	e002      	b.n	80011a2 <HAL_GPIO_Init+0x1f6>
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <HAL_GPIO_Init+0x1f6>
 80011a0:	2300      	movs	r3, #0
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	f002 0203 	and.w	r2, r2, #3
 80011a8:	0092      	lsls	r2, r2, #2
 80011aa:	4093      	lsls	r3, r2
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011b2:	4937      	ldr	r1, [pc, #220]	; (8001290 <HAL_GPIO_Init+0x2e4>)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3302      	adds	r3, #2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c0:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011e4:	4a30      	ldr	r2, [pc, #192]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ea:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	f47f aea3 	bne.w	8000fc4 <HAL_GPIO_Init+0x18>
  }
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	371c      	adds	r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40010000 	.word	0x40010000
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40010400 	.word	0x40010400

080012ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e31d      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012be:	4b94      	ldr	r3, [pc, #592]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012c8:	4b91      	ldr	r3, [pc, #580]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d07b      	beq.n	80013d6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d006      	beq.n	80012f2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2b0c      	cmp	r3, #12
 80012e8:	d10f      	bne.n	800130a <HAL_RCC_OscConfig+0x5e>
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f0:	d10b      	bne.n	800130a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f2:	4b87      	ldr	r3, [pc, #540]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d06a      	beq.n	80013d4 <HAL_RCC_OscConfig+0x128>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d166      	bne.n	80013d4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e2f7      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d106      	bne.n	8001320 <HAL_RCC_OscConfig+0x74>
 8001312:	4b7f      	ldr	r3, [pc, #508]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a7e      	ldr	r2, [pc, #504]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e02d      	b.n	800137c <HAL_RCC_OscConfig+0xd0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10c      	bne.n	8001342 <HAL_RCC_OscConfig+0x96>
 8001328:	4b79      	ldr	r3, [pc, #484]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a78      	ldr	r2, [pc, #480]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 800132e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b76      	ldr	r3, [pc, #472]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a75      	ldr	r2, [pc, #468]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	e01c      	b.n	800137c <HAL_RCC_OscConfig+0xd0>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b05      	cmp	r3, #5
 8001348:	d10c      	bne.n	8001364 <HAL_RCC_OscConfig+0xb8>
 800134a:	4b71      	ldr	r3, [pc, #452]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a70      	ldr	r2, [pc, #448]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 8001350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	4b6e      	ldr	r3, [pc, #440]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a6d      	ldr	r2, [pc, #436]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e00b      	b.n	800137c <HAL_RCC_OscConfig+0xd0>
 8001364:	4b6a      	ldr	r3, [pc, #424]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a69      	ldr	r2, [pc, #420]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 800136a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b67      	ldr	r3, [pc, #412]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a66      	ldr	r2, [pc, #408]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 8001376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d013      	beq.n	80013ac <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fcd8 	bl	8000d38 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fcd4 	bl	8000d38 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e2ad      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800139e:	4b5c      	ldr	r3, [pc, #368]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0xe0>
 80013aa:	e014      	b.n	80013d6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fcc4 	bl	8000d38 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fcc0 	bl	8000d38 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e299      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013c6:	4b52      	ldr	r3, [pc, #328]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x108>
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d05a      	beq.n	8001498 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2b0c      	cmp	r3, #12
 80013ec:	d119      	bne.n	8001422 <HAL_RCC_OscConfig+0x176>
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d116      	bne.n	8001422 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f4:	4b46      	ldr	r3, [pc, #280]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_RCC_OscConfig+0x160>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d001      	beq.n	800140c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e276      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140c:	4b40      	ldr	r3, [pc, #256]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	493d      	ldr	r1, [pc, #244]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001420:	e03a      	b.n	8001498 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d020      	beq.n	800146c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142a:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <HAL_RCC_OscConfig+0x268>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fc82 	bl	8000d38 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001438:	f7ff fc7e 	bl	8000d38 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e257      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800144a:	4b31      	ldr	r3, [pc, #196]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	492a      	ldr	r1, [pc, #168]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 8001466:	4313      	orrs	r3, r2
 8001468:	604b      	str	r3, [r1, #4]
 800146a:	e015      	b.n	8001498 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146c:	4b29      	ldr	r3, [pc, #164]	; (8001514 <HAL_RCC_OscConfig+0x268>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001472:	f7ff fc61 	bl	8000d38 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147a:	f7ff fc5d 	bl	8000d38 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e236      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f0      	bne.n	800147a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80b8 	beq.w	8001616 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d170      	bne.n	800158e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_OscConfig+0x218>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e21a      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1a      	ldr	r2, [r3, #32]
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d921      	bls.n	8001518 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fc7d 	bl	8001dd8 <RCC_SetFlashLatencyFromMSIRange>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e208      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4906      	ldr	r1, [pc, #24]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	061b      	lsls	r3, r3, #24
 8001508:	4901      	ldr	r1, [pc, #4]	; (8001510 <HAL_RCC_OscConfig+0x264>)
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
 800150e:	e020      	b.n	8001552 <HAL_RCC_OscConfig+0x2a6>
 8001510:	40023800 	.word	0x40023800
 8001514:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001518:	4b99      	ldr	r3, [pc, #612]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4996      	ldr	r1, [pc, #600]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800152a:	4b95      	ldr	r3, [pc, #596]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	061b      	lsls	r3, r3, #24
 8001538:	4991      	ldr	r1, [pc, #580]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 800153a:	4313      	orrs	r3, r2
 800153c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fc48 	bl	8001dd8 <RCC_SetFlashLatencyFromMSIRange>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e1d3      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	0b5b      	lsrs	r3, r3, #13
 8001558:	3301      	adds	r3, #1
 800155a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001562:	4a87      	ldr	r2, [pc, #540]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 8001564:	6892      	ldr	r2, [r2, #8]
 8001566:	0912      	lsrs	r2, r2, #4
 8001568:	f002 020f 	and.w	r2, r2, #15
 800156c:	4985      	ldr	r1, [pc, #532]	; (8001784 <HAL_RCC_OscConfig+0x4d8>)
 800156e:	5c8a      	ldrb	r2, [r1, r2]
 8001570:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001572:	4a85      	ldr	r2, [pc, #532]	; (8001788 <HAL_RCC_OscConfig+0x4dc>)
 8001574:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001576:	4b85      	ldr	r3, [pc, #532]	; (800178c <HAL_RCC_OscConfig+0x4e0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fb90 	bl	8000ca0 <HAL_InitTick>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d045      	beq.n	8001616 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	e1b5      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d029      	beq.n	80015ea <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001596:	4b7e      	ldr	r3, [pc, #504]	; (8001790 <HAL_RCC_OscConfig+0x4e4>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fbcc 	bl	8000d38 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a4:	f7ff fbc8 	bl	8000d38 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e1a1      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015b6:	4b72      	ldr	r3, [pc, #456]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c2:	4b6f      	ldr	r3, [pc, #444]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	496c      	ldr	r1, [pc, #432]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d4:	4b6a      	ldr	r3, [pc, #424]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	061b      	lsls	r3, r3, #24
 80015e2:	4967      	ldr	r1, [pc, #412]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
 80015e8:	e015      	b.n	8001616 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015ea:	4b69      	ldr	r3, [pc, #420]	; (8001790 <HAL_RCC_OscConfig+0x4e4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fba2 	bl	8000d38 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015f8:	f7ff fb9e 	bl	8000d38 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e177      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800160a:	4b5d      	ldr	r3, [pc, #372]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d030      	beq.n	8001684 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d016      	beq.n	8001658 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162a:	4b5a      	ldr	r3, [pc, #360]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001630:	f7ff fb82 	bl	8000d38 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff fb7e 	bl	8000d38 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e157      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800164a:	4b4d      	ldr	r3, [pc, #308]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 800164c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x38c>
 8001656:	e015      	b.n	8001684 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001658:	4b4e      	ldr	r3, [pc, #312]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff fb6b 	bl	8000d38 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001666:	f7ff fb67 	bl	8000d38 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e140      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001678:	4b41      	ldr	r3, [pc, #260]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 800167a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80b5 	beq.w	80017fc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001696:	4b3a      	ldr	r3, [pc, #232]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10d      	bne.n	80016be <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b37      	ldr	r3, [pc, #220]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	4a36      	ldr	r2, [pc, #216]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	6253      	str	r3, [r2, #36]	; 0x24
 80016ae:	4b34      	ldr	r3, [pc, #208]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ba:	2301      	movs	r3, #1
 80016bc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016be:	4b36      	ldr	r3, [pc, #216]	; (8001798 <HAL_RCC_OscConfig+0x4ec>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d118      	bne.n	80016fc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ca:	4b33      	ldr	r3, [pc, #204]	; (8001798 <HAL_RCC_OscConfig+0x4ec>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a32      	ldr	r2, [pc, #200]	; (8001798 <HAL_RCC_OscConfig+0x4ec>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb2f 	bl	8000d38 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016de:	f7ff fb2b 	bl	8000d38 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b64      	cmp	r3, #100	; 0x64
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e104      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	4b29      	ldr	r3, [pc, #164]	; (8001798 <HAL_RCC_OscConfig+0x4ec>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d106      	bne.n	8001712 <HAL_RCC_OscConfig+0x466>
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 8001706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001708:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 800170a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170e:	6353      	str	r3, [r2, #52]	; 0x34
 8001710:	e02d      	b.n	800176e <HAL_RCC_OscConfig+0x4c2>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0x488>
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 800171c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171e:	4a18      	ldr	r2, [pc, #96]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 8001720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001724:	6353      	str	r3, [r2, #52]	; 0x34
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 8001728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172a:	4a15      	ldr	r2, [pc, #84]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 800172c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001730:	6353      	str	r3, [r2, #52]	; 0x34
 8001732:	e01c      	b.n	800176e <HAL_RCC_OscConfig+0x4c2>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b05      	cmp	r3, #5
 800173a:	d10c      	bne.n	8001756 <HAL_RCC_OscConfig+0x4aa>
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 800173e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001740:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 8001742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001746:	6353      	str	r3, [r2, #52]	; 0x34
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 800174a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174c:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001752:	6353      	str	r3, [r2, #52]	; 0x34
 8001754:	e00b      	b.n	800176e <HAL_RCC_OscConfig+0x4c2>
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 8001758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175a:	4a09      	ldr	r2, [pc, #36]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 800175c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001760:	6353      	str	r3, [r2, #52]	; 0x34
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 8001764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001766:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_RCC_OscConfig+0x4d4>)
 8001768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800176c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d024      	beq.n	80017c0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001776:	f7ff fadf 	bl	8000d38 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800177c:	e019      	b.n	80017b2 <HAL_RCC_OscConfig+0x506>
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	08003fd8 	.word	0x08003fd8
 8001788:	20000000 	.word	0x20000000
 800178c:	20000004 	.word	0x20000004
 8001790:	42470020 	.word	0x42470020
 8001794:	42470680 	.word	0x42470680
 8001798:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179c:	f7ff facc 	bl	8000d38 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e0a3      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017b2:	4b54      	ldr	r3, [pc, #336]	; (8001904 <HAL_RCC_OscConfig+0x658>)
 80017b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0ee      	beq.n	800179c <HAL_RCC_OscConfig+0x4f0>
 80017be:	e014      	b.n	80017ea <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c0:	f7ff faba 	bl	8000d38 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017c6:	e00a      	b.n	80017de <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c8:	f7ff fab6 	bl	8000d38 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e08d      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017de:	4b49      	ldr	r3, [pc, #292]	; (8001904 <HAL_RCC_OscConfig+0x658>)
 80017e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1ee      	bne.n	80017c8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017ea:	7ffb      	ldrb	r3, [r7, #31]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f0:	4b44      	ldr	r3, [pc, #272]	; (8001904 <HAL_RCC_OscConfig+0x658>)
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	4a43      	ldr	r2, [pc, #268]	; (8001904 <HAL_RCC_OscConfig+0x658>)
 80017f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017fa:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	2b00      	cmp	r3, #0
 8001802:	d079      	beq.n	80018f8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d056      	beq.n	80018b8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	2b02      	cmp	r3, #2
 8001810:	d13b      	bne.n	800188a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <HAL_RCC_OscConfig+0x65c>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fa8e 	bl	8000d38 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff fa8a 	bl	8000d38 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e063      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001832:	4b34      	ldr	r3, [pc, #208]	; (8001904 <HAL_RCC_OscConfig+0x658>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800183e:	4b31      	ldr	r3, [pc, #196]	; (8001904 <HAL_RCC_OscConfig+0x658>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184e:	4319      	orrs	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	430b      	orrs	r3, r1
 8001856:	492b      	ldr	r1, [pc, #172]	; (8001904 <HAL_RCC_OscConfig+0x658>)
 8001858:	4313      	orrs	r3, r2
 800185a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_RCC_OscConfig+0x65c>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff fa69 	bl	8000d38 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff fa65 	bl	8000d38 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e03e      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_RCC_OscConfig+0x658>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x5be>
 8001888:	e036      	b.n	80018f8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <HAL_RCC_OscConfig+0x65c>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fa52 	bl	8000d38 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff fa4e 	bl	8000d38 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e027      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <HAL_RCC_OscConfig+0x658>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x5ec>
 80018b6:	e01f      	b.n	80018f8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e01a      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_RCC_OscConfig+0x658>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d10d      	bne.n	80018f4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d106      	bne.n	80018f4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	42470060 	.word	0x42470060

0800190c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e11a      	b.n	8001b56 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001920:	4b8f      	ldr	r3, [pc, #572]	; (8001b60 <HAL_RCC_ClockConfig+0x254>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d919      	bls.n	8001962 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <HAL_RCC_ClockConfig+0x34>
 8001934:	4b8a      	ldr	r3, [pc, #552]	; (8001b60 <HAL_RCC_ClockConfig+0x254>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a89      	ldr	r2, [pc, #548]	; (8001b60 <HAL_RCC_ClockConfig+0x254>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b87      	ldr	r3, [pc, #540]	; (8001b60 <HAL_RCC_ClockConfig+0x254>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 0201 	bic.w	r2, r3, #1
 8001948:	4985      	ldr	r1, [pc, #532]	; (8001b60 <HAL_RCC_ClockConfig+0x254>)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001950:	4b83      	ldr	r3, [pc, #524]	; (8001b60 <HAL_RCC_ClockConfig+0x254>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d001      	beq.n	8001962 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0f9      	b.n	8001b56 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d008      	beq.n	8001980 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196e:	4b7d      	ldr	r3, [pc, #500]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	497a      	ldr	r1, [pc, #488]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 800197c:	4313      	orrs	r3, r2
 800197e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 808e 	beq.w	8001aaa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d107      	bne.n	80019a6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001996:	4b73      	ldr	r3, [pc, #460]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d121      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0d7      	b.n	8001b56 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019ae:	4b6d      	ldr	r3, [pc, #436]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d115      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0cb      	b.n	8001b56 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c6:	4b67      	ldr	r3, [pc, #412]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0bf      	b.n	8001b56 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019d6:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e0b7      	b.n	8001b56 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e6:	4b5f      	ldr	r3, [pc, #380]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f023 0203 	bic.w	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	495c      	ldr	r1, [pc, #368]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f8:	f7ff f99e 	bl	8000d38 <HAL_GetTick>
 80019fc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d112      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a08:	f7ff f996 	bl	8000d38 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e09b      	b.n	8001b56 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a1e:	4b51      	ldr	r3, [pc, #324]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d1ee      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xfc>
 8001a2a:	e03e      	b.n	8001aaa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d112      	bne.n	8001a5a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a36:	f7ff f97f 	bl	8000d38 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e084      	b.n	8001b56 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a4c:	4b45      	ldr	r3, [pc, #276]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b0c      	cmp	r3, #12
 8001a56:	d1ee      	bne.n	8001a36 <HAL_RCC_ClockConfig+0x12a>
 8001a58:	e027      	b.n	8001aaa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d11d      	bne.n	8001a9e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a64:	f7ff f968 	bl	8000d38 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e06d      	b.n	8001b56 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7a:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d1ee      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x158>
 8001a86:	e010      	b.n	8001aaa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a88:	f7ff f956 	bl	8000d38 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e05b      	b.n	8001b56 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1ee      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <HAL_RCC_ClockConfig+0x254>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d219      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d105      	bne.n	8001aca <HAL_RCC_ClockConfig+0x1be>
 8001abe:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <HAL_RCC_ClockConfig+0x254>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a27      	ldr	r2, [pc, #156]	; (8001b60 <HAL_RCC_ClockConfig+0x254>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_RCC_ClockConfig+0x254>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 0201 	bic.w	r2, r3, #1
 8001ad2:	4923      	ldr	r1, [pc, #140]	; (8001b60 <HAL_RCC_ClockConfig+0x254>)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <HAL_RCC_ClockConfig+0x254>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e034      	b.n	8001b56 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4917      	ldr	r1, [pc, #92]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	490f      	ldr	r1, [pc, #60]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2a:	f000 f823 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <HAL_RCC_ClockConfig+0x258>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	490b      	ldr	r1, [pc, #44]	; (8001b68 <HAL_RCC_ClockConfig+0x25c>)
 8001b3c:	5ccb      	ldrb	r3, [r1, r3]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_RCC_ClockConfig+0x260>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f8a8 	bl	8000ca0 <HAL_InitTick>
 8001b50:	4603      	mov	r3, r0
 8001b52:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b54:	7afb      	ldrb	r3, [r7, #11]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023c00 	.word	0x40023c00
 8001b64:	40023800 	.word	0x40023800
 8001b68:	08003fd8 	.word	0x08003fd8
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000004 	.word	0x20000004

08001b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b78:	b092      	sub	sp, #72	; 0x48
 8001b7a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b7c:	4b79      	ldr	r3, [pc, #484]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	2b0c      	cmp	r3, #12
 8001b8a:	d00d      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8001b8c:	2b0c      	cmp	r3, #12
 8001b8e:	f200 80d5 	bhi.w	8001d3c <HAL_RCC_GetSysClockFreq+0x1c8>
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d002      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x28>
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d003      	beq.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x2e>
 8001b9a:	e0cf      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b9c:	4b72      	ldr	r3, [pc, #456]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001b9e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001ba0:	e0da      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ba2:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001ba4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001ba6:	e0d7      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001baa:	0c9b      	lsrs	r3, r3, #18
 8001bac:	f003 020f 	and.w	r2, r3, #15
 8001bb0:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001bb2:	5c9b      	ldrb	r3, [r3, r2]
 8001bb4:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bb8:	0d9b      	lsrs	r3, r3, #22
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bc2:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d05d      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	460d      	mov	r5, r1
 8001bda:	4622      	mov	r2, r4
 8001bdc:	462b      	mov	r3, r5
 8001bde:	f04f 0000 	mov.w	r0, #0
 8001be2:	f04f 0100 	mov.w	r1, #0
 8001be6:	0159      	lsls	r1, r3, #5
 8001be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bec:	0150      	lsls	r0, r2, #5
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	1a51      	subs	r1, r2, r1
 8001bf6:	6139      	str	r1, [r7, #16]
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c0c:	4659      	mov	r1, fp
 8001c0e:	018b      	lsls	r3, r1, #6
 8001c10:	4651      	mov	r1, sl
 8001c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c16:	4651      	mov	r1, sl
 8001c18:	018a      	lsls	r2, r1, #6
 8001c1a:	46d4      	mov	ip, sl
 8001c1c:	ebb2 080c 	subs.w	r8, r2, ip
 8001c20:	4659      	mov	r1, fp
 8001c22:	eb63 0901 	sbc.w	r9, r3, r1
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	4623      	mov	r3, r4
 8001c40:	eb18 0303 	adds.w	r3, r8, r3
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	462b      	mov	r3, r5
 8001c48:	eb49 0303 	adc.w	r3, r9, r3
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	024b      	lsls	r3, r1, #9
 8001c5e:	4620      	mov	r0, r4
 8001c60:	4629      	mov	r1, r5
 8001c62:	4604      	mov	r4, r0
 8001c64:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001c68:	4601      	mov	r1, r0
 8001c6a:	024a      	lsls	r2, r1, #9
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c72:	2200      	movs	r2, #0
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c7c:	f7fe fa7e 	bl	800017c <__aeabi_uldivmod>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4613      	mov	r3, r2
 8001c86:	647b      	str	r3, [r7, #68]	; 0x44
 8001c88:	e055      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	623b      	str	r3, [r7, #32]
 8001c90:	627a      	str	r2, [r7, #36]	; 0x24
 8001c92:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c96:	4642      	mov	r2, r8
 8001c98:	464b      	mov	r3, r9
 8001c9a:	f04f 0000 	mov.w	r0, #0
 8001c9e:	f04f 0100 	mov.w	r1, #0
 8001ca2:	0159      	lsls	r1, r3, #5
 8001ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca8:	0150      	lsls	r0, r2, #5
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	46c4      	mov	ip, r8
 8001cb0:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001cb4:	4640      	mov	r0, r8
 8001cb6:	4649      	mov	r1, r9
 8001cb8:	468c      	mov	ip, r1
 8001cba:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cca:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cce:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cd2:	ebb2 040a 	subs.w	r4, r2, sl
 8001cd6:	eb63 050b 	sbc.w	r5, r3, fp
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	00eb      	lsls	r3, r5, #3
 8001ce4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce8:	00e2      	lsls	r2, r4, #3
 8001cea:	4614      	mov	r4, r2
 8001cec:	461d      	mov	r5, r3
 8001cee:	4603      	mov	r3, r0
 8001cf0:	18e3      	adds	r3, r4, r3
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	eb45 0303 	adc.w	r3, r5, r3
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d08:	4629      	mov	r1, r5
 8001d0a:	028b      	lsls	r3, r1, #10
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	4629      	mov	r1, r5
 8001d10:	4604      	mov	r4, r0
 8001d12:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001d16:	4601      	mov	r1, r0
 8001d18:	028a      	lsls	r2, r1, #10
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d20:	2200      	movs	r2, #0
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	61fa      	str	r2, [r7, #28]
 8001d26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d2a:	f7fe fa27 	bl	800017c <__aeabi_uldivmod>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4613      	mov	r3, r2
 8001d34:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d38:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001d3a:	e00d      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	0b5b      	lsrs	r3, r3, #13
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001d56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3748      	adds	r7, #72	; 0x48
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	00f42400 	.word	0x00f42400
 8001d6c:	007a1200 	.word	0x007a1200
 8001d70:	08003fcc 	.word	0x08003fcc

08001d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d78:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	20000000 	.word	0x20000000

08001d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d8c:	f7ff fff2 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	4903      	ldr	r1, [pc, #12]	; (8001dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40023800 	.word	0x40023800
 8001dac:	08003fe8 	.word	0x08003fe8

08001db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001db4:	f7ff ffde 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	0adb      	lsrs	r3, r3, #11
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	4903      	ldr	r1, [pc, #12]	; (8001dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc6:	5ccb      	ldrb	r3, [r1, r3]
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	08003fe8 	.word	0x08003fe8

08001dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001de4:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d12c      	bne.n	8001e4a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001df0:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e016      	b.n	8001e36 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	4a1f      	ldr	r2, [pc, #124]	; (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e12:	6253      	str	r3, [r2, #36]	; 0x24
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001e20:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001e28:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e34:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001e3c:	d105      	bne.n	8001e4a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001e44:	d101      	bne.n	8001e4a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001e46:	2301      	movs	r3, #1
 8001e48:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d105      	bne.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001e50:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e56:	f043 0304 	orr.w	r3, r3, #4
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f023 0201 	bic.w	r2, r3, #1
 8001e64:	490b      	ldr	r1, [pc, #44]	; (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40007000 	.word	0x40007000
 8001e94:	40023c00 	.word	0x40023c00

08001e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e031      	b.n	8001f0e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe fd06 	bl	80008d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	f000 fd7e 	bl	80029d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e031      	b.n	8001f8c <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d106      	bne.n	8001f42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f829 	bl	8001f94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2202      	movs	r2, #2
 8001f46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3304      	adds	r3, #4
 8001f52:	4619      	mov	r1, r3
 8001f54:	4610      	mov	r0, r2
 8001f56:	f000 fd3f 	bl	80029d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
	...

08001fa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d109      	bne.n	8001fcc <HAL_TIM_PWM_Start+0x24>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	e022      	b.n	8002012 <HAL_TIM_PWM_Start+0x6a>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d109      	bne.n	8001fe6 <HAL_TIM_PWM_Start+0x3e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	bf14      	ite	ne
 8001fde:	2301      	movne	r3, #1
 8001fe0:	2300      	moveq	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	e015      	b.n	8002012 <HAL_TIM_PWM_Start+0x6a>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d109      	bne.n	8002000 <HAL_TIM_PWM_Start+0x58>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	bf14      	ite	ne
 8001ff8:	2301      	movne	r3, #1
 8001ffa:	2300      	moveq	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e008      	b.n	8002012 <HAL_TIM_PWM_Start+0x6a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b01      	cmp	r3, #1
 800200a:	bf14      	ite	ne
 800200c:	2301      	movne	r3, #1
 800200e:	2300      	moveq	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e051      	b.n	80020be <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d104      	bne.n	800202a <HAL_TIM_PWM_Start+0x82>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002028:	e013      	b.n	8002052 <HAL_TIM_PWM_Start+0xaa>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b04      	cmp	r3, #4
 800202e:	d104      	bne.n	800203a <HAL_TIM_PWM_Start+0x92>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002038:	e00b      	b.n	8002052 <HAL_TIM_PWM_Start+0xaa>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b08      	cmp	r3, #8
 800203e:	d104      	bne.n	800204a <HAL_TIM_PWM_Start+0xa2>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002048:	e003      	b.n	8002052 <HAL_TIM_PWM_Start+0xaa>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2201      	movs	r2, #1
 8002058:	6839      	ldr	r1, [r7, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f000 ffcb 	bl	8002ff6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002068:	d00e      	beq.n	8002088 <HAL_TIM_PWM_Start+0xe0>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <HAL_TIM_PWM_Start+0x120>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d009      	beq.n	8002088 <HAL_TIM_PWM_Start+0xe0>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a14      	ldr	r2, [pc, #80]	; (80020cc <HAL_TIM_PWM_Start+0x124>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d004      	beq.n	8002088 <HAL_TIM_PWM_Start+0xe0>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <HAL_TIM_PWM_Start+0x128>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d111      	bne.n	80020ac <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b06      	cmp	r3, #6
 8002098:	d010      	beq.n	80020bc <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020aa:	e007      	b.n	80020bc <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40000400 	.word	0x40000400
 80020cc:	40000800 	.word	0x40000800
 80020d0:	40010800 	.word	0x40010800

080020d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e031      	b.n	800214a <HAL_TIM_IC_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f829 	bl	8002152 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3304      	adds	r3, #4
 8002110:	4619      	mov	r1, r3
 8002112:	4610      	mov	r0, r2
 8002114:	f000 fc60 	bl	80029d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d104      	bne.n	8002182 <HAL_TIM_IC_Start_IT+0x1e>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800217e:	b2db      	uxtb	r3, r3
 8002180:	e013      	b.n	80021aa <HAL_TIM_IC_Start_IT+0x46>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d104      	bne.n	8002192 <HAL_TIM_IC_Start_IT+0x2e>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800218e:	b2db      	uxtb	r3, r3
 8002190:	e00b      	b.n	80021aa <HAL_TIM_IC_Start_IT+0x46>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b08      	cmp	r3, #8
 8002196:	d104      	bne.n	80021a2 <HAL_TIM_IC_Start_IT+0x3e>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	e003      	b.n	80021aa <HAL_TIM_IC_Start_IT+0x46>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80021ac:	7bbb      	ldrb	r3, [r7, #14]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d001      	beq.n	80021b6 <HAL_TIM_IC_Start_IT+0x52>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e09c      	b.n	80022f0 <HAL_TIM_IC_Start_IT+0x18c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d104      	bne.n	80021c6 <HAL_TIM_IC_Start_IT+0x62>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80021c4:	e013      	b.n	80021ee <HAL_TIM_IC_Start_IT+0x8a>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d104      	bne.n	80021d6 <HAL_TIM_IC_Start_IT+0x72>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80021d4:	e00b      	b.n	80021ee <HAL_TIM_IC_Start_IT+0x8a>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d104      	bne.n	80021e6 <HAL_TIM_IC_Start_IT+0x82>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021e4:	e003      	b.n	80021ee <HAL_TIM_IC_Start_IT+0x8a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2202      	movs	r2, #2
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b0c      	cmp	r3, #12
 80021f2:	d841      	bhi.n	8002278 <HAL_TIM_IC_Start_IT+0x114>
 80021f4:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <HAL_TIM_IC_Start_IT+0x98>)
 80021f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fa:	bf00      	nop
 80021fc:	08002231 	.word	0x08002231
 8002200:	08002279 	.word	0x08002279
 8002204:	08002279 	.word	0x08002279
 8002208:	08002279 	.word	0x08002279
 800220c:	08002243 	.word	0x08002243
 8002210:	08002279 	.word	0x08002279
 8002214:	08002279 	.word	0x08002279
 8002218:	08002279 	.word	0x08002279
 800221c:	08002255 	.word	0x08002255
 8002220:	08002279 	.word	0x08002279
 8002224:	08002279 	.word	0x08002279
 8002228:	08002279 	.word	0x08002279
 800222c:	08002267 	.word	0x08002267
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0202 	orr.w	r2, r2, #2
 800223e:	60da      	str	r2, [r3, #12]
      break;
 8002240:	e01d      	b.n	800227e <HAL_TIM_IC_Start_IT+0x11a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0204 	orr.w	r2, r2, #4
 8002250:	60da      	str	r2, [r3, #12]
      break;
 8002252:	e014      	b.n	800227e <HAL_TIM_IC_Start_IT+0x11a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0208 	orr.w	r2, r2, #8
 8002262:	60da      	str	r2, [r3, #12]
      break;
 8002264:	e00b      	b.n	800227e <HAL_TIM_IC_Start_IT+0x11a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0210 	orr.w	r2, r2, #16
 8002274:	60da      	str	r2, [r3, #12]
      break;
 8002276:	e002      	b.n	800227e <HAL_TIM_IC_Start_IT+0x11a>
    }

    default:
      status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
      break;
 800227c:	bf00      	nop
  }

  if (status == HAL_OK)
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d134      	bne.n	80022ee <HAL_TIM_IC_Start_IT+0x18a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2201      	movs	r2, #1
 800228a:	6839      	ldr	r1, [r7, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f000 feb2 	bl	8002ff6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229a:	d00e      	beq.n	80022ba <HAL_TIM_IC_Start_IT+0x156>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a15      	ldr	r2, [pc, #84]	; (80022f8 <HAL_TIM_IC_Start_IT+0x194>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d009      	beq.n	80022ba <HAL_TIM_IC_Start_IT+0x156>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a14      	ldr	r2, [pc, #80]	; (80022fc <HAL_TIM_IC_Start_IT+0x198>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d004      	beq.n	80022ba <HAL_TIM_IC_Start_IT+0x156>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a12      	ldr	r2, [pc, #72]	; (8002300 <HAL_TIM_IC_Start_IT+0x19c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d111      	bne.n	80022de <HAL_TIM_IC_Start_IT+0x17a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b06      	cmp	r3, #6
 80022ca:	d010      	beq.n	80022ee <HAL_TIM_IC_Start_IT+0x18a>
      {
        __HAL_TIM_ENABLE(htim);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022dc:	e007      	b.n	80022ee <HAL_TIM_IC_Start_IT+0x18a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0201 	orr.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40000800 	.word	0x40000800
 8002300:	40010800 	.word	0x40010800

08002304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b02      	cmp	r3, #2
 8002318:	d122      	bne.n	8002360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b02      	cmp	r3, #2
 8002326:	d11b      	bne.n	8002360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0202 	mvn.w	r2, #2
 8002330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe f89c 	bl	8000484 <HAL_TIM_IC_CaptureCallback>
 800234c:	e005      	b.n	800235a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fb27 	bl	80029a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fb2d 	bl	80029b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b04      	cmp	r3, #4
 800236c:	d122      	bne.n	80023b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b04      	cmp	r3, #4
 800237a:	d11b      	bne.n	80023b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0204 	mvn.w	r2, #4
 8002384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2202      	movs	r2, #2
 800238a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe f872 	bl	8000484 <HAL_TIM_IC_CaptureCallback>
 80023a0:	e005      	b.n	80023ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fafd 	bl	80029a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fb03 	bl	80029b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d122      	bne.n	8002408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d11b      	bne.n	8002408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0208 	mvn.w	r2, #8
 80023d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2204      	movs	r2, #4
 80023de:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe f848 	bl	8000484 <HAL_TIM_IC_CaptureCallback>
 80023f4:	e005      	b.n	8002402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fad3 	bl	80029a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 fad9 	bl	80029b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b10      	cmp	r3, #16
 8002414:	d122      	bne.n	800245c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b10      	cmp	r3, #16
 8002422:	d11b      	bne.n	800245c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0210 	mvn.w	r2, #16
 800242c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2208      	movs	r2, #8
 8002432:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe f81e 	bl	8000484 <HAL_TIM_IC_CaptureCallback>
 8002448:	e005      	b.n	8002456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 faa9 	bl	80029a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 faaf 	bl	80029b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b01      	cmp	r3, #1
 8002468:	d10e      	bne.n	8002488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d107      	bne.n	8002488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0201 	mvn.w	r2, #1
 8002480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fa84 	bl	8002990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002492:	2b40      	cmp	r3, #64	; 0x40
 8002494:	d10e      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a0:	2b40      	cmp	r3, #64	; 0x40
 80024a2:	d107      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fa89 	bl	80029c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_TIM_IC_ConfigChannel+0x1e>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e088      	b.n	80025ec <HAL_TIM_IC_ConfigChannel+0x130>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (Channel == TIM_CHANNEL_1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d11b      	bne.n	8002520 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	6819      	ldr	r1, [r3, #0]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f000 fbd4 	bl	8002ca4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699a      	ldr	r2, [r3, #24]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 020c 	bic.w	r2, r2, #12
 800250a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6999      	ldr	r1, [r3, #24]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	619a      	str	r2, [r3, #24]
 800251e:	e060      	b.n	80025e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b04      	cmp	r3, #4
 8002524:	d11c      	bne.n	8002560 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f000 fc43 	bl	8002dc0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002548:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6999      	ldr	r1, [r3, #24]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	021a      	lsls	r2, r3, #8
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	619a      	str	r2, [r3, #24]
 800255e:	e040      	b.n	80025e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b08      	cmp	r3, #8
 8002564:	d11b      	bne.n	800259e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	6819      	ldr	r1, [r3, #0]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f000 fc8e 	bl	8002e96 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	69da      	ldr	r2, [r3, #28]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 020c 	bic.w	r2, r2, #12
 8002588:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	69d9      	ldr	r1, [r3, #28]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	61da      	str	r2, [r3, #28]
 800259c:	e021      	b.n	80025e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b0c      	cmp	r3, #12
 80025a2:	d11c      	bne.n	80025de <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	6819      	ldr	r1, [r3, #0]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f000 fcaa 	bl	8002f0c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69da      	ldr	r2, [r3, #28]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	69d9      	ldr	r1, [r3, #28]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	021a      	lsls	r2, r3, #8
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	61da      	str	r2, [r3, #28]
 80025dc:	e001      	b.n	80025e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800260e:	2302      	movs	r3, #2
 8002610:	e0ae      	b.n	8002770 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b0c      	cmp	r3, #12
 800261e:	f200 809f 	bhi.w	8002760 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002622:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002628:	0800265d 	.word	0x0800265d
 800262c:	08002761 	.word	0x08002761
 8002630:	08002761 	.word	0x08002761
 8002634:	08002761 	.word	0x08002761
 8002638:	0800269d 	.word	0x0800269d
 800263c:	08002761 	.word	0x08002761
 8002640:	08002761 	.word	0x08002761
 8002644:	08002761 	.word	0x08002761
 8002648:	080026df 	.word	0x080026df
 800264c:	08002761 	.word	0x08002761
 8002650:	08002761 	.word	0x08002761
 8002654:	08002761 	.word	0x08002761
 8002658:	0800271f 	.word	0x0800271f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fa28 	bl	8002ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699a      	ldr	r2, [r3, #24]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0208 	orr.w	r2, r2, #8
 8002676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0204 	bic.w	r2, r2, #4
 8002686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6999      	ldr	r1, [r3, #24]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	619a      	str	r2, [r3, #24]
      break;
 800269a:	e064      	b.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fa44 	bl	8002b30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6999      	ldr	r1, [r3, #24]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	021a      	lsls	r2, r3, #8
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	619a      	str	r2, [r3, #24]
      break;
 80026dc:	e043      	b.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fa61 	bl	8002bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0208 	orr.w	r2, r2, #8
 80026f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0204 	bic.w	r2, r2, #4
 8002708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69d9      	ldr	r1, [r3, #28]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	61da      	str	r2, [r3, #28]
      break;
 800271c:	e023      	b.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fa7e 	bl	8002c26 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69da      	ldr	r2, [r3, #28]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69d9      	ldr	r1, [r3, #28]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	021a      	lsls	r2, r3, #8
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	61da      	str	r2, [r3, #28]
      break;
 800275e:	e002      	b.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	75fb      	strb	r3, [r7, #23]
      break;
 8002764:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800276e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_TIM_ConfigClockSource+0x1c>
 8002790:	2302      	movs	r3, #2
 8002792:	e0b4      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x186>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027cc:	d03e      	beq.n	800284c <HAL_TIM_ConfigClockSource+0xd4>
 80027ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d2:	f200 8087 	bhi.w	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 80027d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027da:	f000 8086 	beq.w	80028ea <HAL_TIM_ConfigClockSource+0x172>
 80027de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e2:	d87f      	bhi.n	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 80027e4:	2b70      	cmp	r3, #112	; 0x70
 80027e6:	d01a      	beq.n	800281e <HAL_TIM_ConfigClockSource+0xa6>
 80027e8:	2b70      	cmp	r3, #112	; 0x70
 80027ea:	d87b      	bhi.n	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 80027ec:	2b60      	cmp	r3, #96	; 0x60
 80027ee:	d050      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x11a>
 80027f0:	2b60      	cmp	r3, #96	; 0x60
 80027f2:	d877      	bhi.n	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 80027f4:	2b50      	cmp	r3, #80	; 0x50
 80027f6:	d03c      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0xfa>
 80027f8:	2b50      	cmp	r3, #80	; 0x50
 80027fa:	d873      	bhi.n	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 80027fc:	2b40      	cmp	r3, #64	; 0x40
 80027fe:	d058      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x13a>
 8002800:	2b40      	cmp	r3, #64	; 0x40
 8002802:	d86f      	bhi.n	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002804:	2b30      	cmp	r3, #48	; 0x30
 8002806:	d064      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002808:	2b30      	cmp	r3, #48	; 0x30
 800280a:	d86b      	bhi.n	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 800280c:	2b20      	cmp	r3, #32
 800280e:	d060      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002810:	2b20      	cmp	r3, #32
 8002812:	d867      	bhi.n	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002814:	2b00      	cmp	r3, #0
 8002816:	d05c      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002818:	2b10      	cmp	r3, #16
 800281a:	d05a      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0x15a>
 800281c:	e062      	b.n	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6899      	ldr	r1, [r3, #8]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f000 fbc3 	bl	8002fb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002840:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	609a      	str	r2, [r3, #8]
      break;
 800284a:	e04f      	b.n	80028ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	6899      	ldr	r1, [r3, #8]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f000 fbac 	bl	8002fb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800286e:	609a      	str	r2, [r3, #8]
      break;
 8002870:	e03c      	b.n	80028ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6859      	ldr	r1, [r3, #4]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	461a      	mov	r2, r3
 8002880:	f000 fa70 	bl	8002d64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2150      	movs	r1, #80	; 0x50
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fb7a 	bl	8002f84 <TIM_ITRx_SetConfig>
      break;
 8002890:	e02c      	b.n	80028ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	461a      	mov	r2, r3
 80028a0:	f000 faca 	bl	8002e38 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2160      	movs	r1, #96	; 0x60
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fb6a 	bl	8002f84 <TIM_ITRx_SetConfig>
      break;
 80028b0:	e01c      	b.n	80028ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6859      	ldr	r1, [r3, #4]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	461a      	mov	r2, r3
 80028c0:	f000 fa50 	bl	8002d64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2140      	movs	r1, #64	; 0x40
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fb5a 	bl	8002f84 <TIM_ITRx_SetConfig>
      break;
 80028d0:	e00c      	b.n	80028ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4619      	mov	r1, r3
 80028dc:	4610      	mov	r0, r2
 80028de:	f000 fb51 	bl	8002f84 <TIM_ITRx_SetConfig>
      break;
 80028e2:	e003      	b.n	80028ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      break;
 80028e8:	e000      	b.n	80028ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b0c      	cmp	r3, #12
 800291a:	d831      	bhi.n	8002980 <HAL_TIM_ReadCapturedValue+0x78>
 800291c:	a201      	add	r2, pc, #4	; (adr r2, 8002924 <HAL_TIM_ReadCapturedValue+0x1c>)
 800291e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002922:	bf00      	nop
 8002924:	08002959 	.word	0x08002959
 8002928:	08002981 	.word	0x08002981
 800292c:	08002981 	.word	0x08002981
 8002930:	08002981 	.word	0x08002981
 8002934:	08002963 	.word	0x08002963
 8002938:	08002981 	.word	0x08002981
 800293c:	08002981 	.word	0x08002981
 8002940:	08002981 	.word	0x08002981
 8002944:	0800296d 	.word	0x0800296d
 8002948:	08002981 	.word	0x08002981
 800294c:	08002981 	.word	0x08002981
 8002950:	08002981 	.word	0x08002981
 8002954:	08002977 	.word	0x08002977
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295e:	60fb      	str	r3, [r7, #12]

      break;
 8002960:	e00f      	b.n	8002982 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	60fb      	str	r3, [r7, #12]

      break;
 800296a:	e00a      	b.n	8002982 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	60fb      	str	r3, [r7, #12]

      break;
 8002974:	e005      	b.n	8002982 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	60fb      	str	r3, [r7, #12]

      break;
 800297e:	e000      	b.n	8002982 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002980:	bf00      	nop
  }

  return tmpreg;
 8002982:	68fb      	ldr	r3, [r7, #12]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop

08002990 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ee:	d00f      	beq.n	8002a10 <TIM_Base_SetConfig+0x38>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a2b      	ldr	r2, [pc, #172]	; (8002aa0 <TIM_Base_SetConfig+0xc8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00b      	beq.n	8002a10 <TIM_Base_SetConfig+0x38>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a2a      	ldr	r2, [pc, #168]	; (8002aa4 <TIM_Base_SetConfig+0xcc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d007      	beq.n	8002a10 <TIM_Base_SetConfig+0x38>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a29      	ldr	r2, [pc, #164]	; (8002aa8 <TIM_Base_SetConfig+0xd0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d003      	beq.n	8002a10 <TIM_Base_SetConfig+0x38>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a28      	ldr	r2, [pc, #160]	; (8002aac <TIM_Base_SetConfig+0xd4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d108      	bne.n	8002a22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a28:	d017      	beq.n	8002a5a <TIM_Base_SetConfig+0x82>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <TIM_Base_SetConfig+0xc8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <TIM_Base_SetConfig+0x82>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a1b      	ldr	r2, [pc, #108]	; (8002aa4 <TIM_Base_SetConfig+0xcc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00f      	beq.n	8002a5a <TIM_Base_SetConfig+0x82>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a1a      	ldr	r2, [pc, #104]	; (8002aa8 <TIM_Base_SetConfig+0xd0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00b      	beq.n	8002a5a <TIM_Base_SetConfig+0x82>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a19      	ldr	r2, [pc, #100]	; (8002aac <TIM_Base_SetConfig+0xd4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d007      	beq.n	8002a5a <TIM_Base_SetConfig+0x82>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <TIM_Base_SetConfig+0xd8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d003      	beq.n	8002a5a <TIM_Base_SetConfig+0x82>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <TIM_Base_SetConfig+0xdc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d108      	bne.n	8002a6c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	615a      	str	r2, [r3, #20]
}
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40000c00 	.word	0x40000c00
 8002aac:	40010800 	.word	0x40010800
 8002ab0:	40010c00 	.word	0x40010c00
 8002ab4:	40011000 	.word	0x40011000

08002ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f023 0201 	bic.w	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0303 	bic.w	r3, r3, #3
 8002aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f023 0302 	bic.w	r3, r3, #2
 8002b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f023 0210 	bic.w	r2, r3, #16
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f023 0320 	bic.w	r3, r3, #32
 8002b7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	621a      	str	r2, [r3, #32]
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	621a      	str	r2, [r3, #32]
}
 8002c1c:	bf00      	nop
 8002c1e:	371c      	adds	r7, #28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b087      	sub	sp, #28
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	031b      	lsls	r3, r3, #12
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	621a      	str	r2, [r3, #32]
}
 8002c98:	bf00      	nop
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
	...

08002ca4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f023 0201 	bic.w	r2, r3, #1
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd0:	d00f      	beq.n	8002cf2 <TIM_TI1_SetConfig+0x4e>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a1f      	ldr	r2, [pc, #124]	; (8002d54 <TIM_TI1_SetConfig+0xb0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <TIM_TI1_SetConfig+0x4e>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4a1e      	ldr	r2, [pc, #120]	; (8002d58 <TIM_TI1_SetConfig+0xb4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d007      	beq.n	8002cf2 <TIM_TI1_SetConfig+0x4e>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <TIM_TI1_SetConfig+0xb8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d003      	beq.n	8002cf2 <TIM_TI1_SetConfig+0x4e>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a1c      	ldr	r2, [pc, #112]	; (8002d60 <TIM_TI1_SetConfig+0xbc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <TIM_TI1_SetConfig+0x52>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <TIM_TI1_SetConfig+0x54>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f023 0303 	bic.w	r3, r3, #3
 8002d02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	e003      	b.n	8002d16 <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f023 030a 	bic.w	r3, r3, #10
 8002d30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f003 030a 	and.w	r3, r3, #10
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	621a      	str	r2, [r3, #32]
}
 8002d4a:	bf00      	nop
 8002d4c:	371c      	adds	r7, #28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	40000400 	.word	0x40000400
 8002d58:	40000800 	.word	0x40000800
 8002d5c:	40000c00 	.word	0x40000c00
 8002d60:	40010800 	.word	0x40010800

08002d64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f023 0201 	bic.w	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f023 030a 	bic.w	r3, r3, #10
 8002da0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	621a      	str	r2, [r3, #32]
}
 8002db6:	bf00      	nop
 8002db8:	371c      	adds	r7, #28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f023 0210 	bic.w	r2, r3, #16
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	031b      	lsls	r3, r3, #12
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e12:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	621a      	str	r2, [r3, #32]
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f023 0210 	bic.w	r2, r3, #16
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	031b      	lsls	r3, r3, #12
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e74:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	621a      	str	r2, [r3, #32]
}
 8002e8c:	bf00      	nop
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b087      	sub	sp, #28
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f023 0303 	bic.w	r3, r3, #3
 8002ec2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ed2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002ee6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	621a      	str	r2, [r3, #32]
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f38:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f4a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	031b      	lsls	r3, r3, #12
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002f5e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	031b      	lsls	r3, r3, #12
 8002f64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	621a      	str	r2, [r3, #32]
}
 8002f7a:	bf00      	nop
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f043 0307 	orr.w	r3, r3, #7
 8002fa6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	609a      	str	r2, [r3, #8]
}
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	021a      	lsls	r2, r3, #8
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	609a      	str	r2, [r3, #8]
}
 8002fec:	bf00      	nop
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b087      	sub	sp, #28
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	2201      	movs	r2, #1
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a1a      	ldr	r2, [r3, #32]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	43db      	mvns	r3, r3
 8003018:	401a      	ands	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a1a      	ldr	r2, [r3, #32]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	431a      	orrs	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	621a      	str	r2, [r3, #32]
}
 8003034:	bf00      	nop
 8003036:	371c      	adds	r7, #28
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr
	...

08003040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003054:	2302      	movs	r3, #2
 8003056:	e046      	b.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309a:	d00e      	beq.n	80030ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a13      	ldr	r2, [pc, #76]	; (80030f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d009      	beq.n	80030ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d004      	beq.n	80030ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a10      	ldr	r2, [pc, #64]	; (80030f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d10c      	bne.n	80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	40000400 	.word	0x40000400
 80030f4:	40000800 	.word	0x40000800
 80030f8:	40010800 	.word	0x40010800

080030fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e042      	b.n	8003194 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fd fc68 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2224      	movs	r2, #36	; 0x24
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800313e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f91d 	bl	8003380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003154:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003164:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003174:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	4613      	mov	r3, r2
 80031aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d16d      	bne.n	8003298 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_UART_Transmit+0x2c>
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e066      	b.n	800329a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2221      	movs	r2, #33	; 0x21
 80031d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031da:	f7fd fdad 	bl	8000d38 <HAL_GetTick>
 80031de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	88fa      	ldrh	r2, [r7, #6]
 80031e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	88fa      	ldrh	r2, [r7, #6]
 80031ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f4:	d108      	bne.n	8003208 <HAL_UART_Transmit+0x6c>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d104      	bne.n	8003208 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	e003      	b.n	8003210 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800320c:	2300      	movs	r3, #0
 800320e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003210:	e02a      	b.n	8003268 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2200      	movs	r2, #0
 800321a:	2180      	movs	r1, #128	; 0x80
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f840 	bl	80032a2 <UART_WaitOnFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e036      	b.n	800329a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10b      	bne.n	800324a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003240:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	3302      	adds	r3, #2
 8003246:	61bb      	str	r3, [r7, #24]
 8003248:	e007      	b.n	800325a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	781a      	ldrb	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	3301      	adds	r3, #1
 8003258:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1cf      	bne.n	8003212 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2200      	movs	r2, #0
 800327a:	2140      	movs	r1, #64	; 0x40
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f810 	bl	80032a2 <UART_WaitOnFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e006      	b.n	800329a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	e000      	b.n	800329a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003298:	2302      	movs	r3, #2
  }
}
 800329a:	4618      	mov	r0, r3
 800329c:	3720      	adds	r7, #32
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b090      	sub	sp, #64	; 0x40
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	603b      	str	r3, [r7, #0]
 80032ae:	4613      	mov	r3, r2
 80032b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b2:	e050      	b.n	8003356 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ba:	d04c      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80032c2:	f7fd fd39 	bl	8000d38 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d241      	bcs.n	8003356 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	330c      	adds	r3, #12
 80032d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032dc:	e853 3f00 	ldrex	r3, [r3]
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	330c      	adds	r3, #12
 80032f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032f2:	637a      	str	r2, [r7, #52]	; 0x34
 80032f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032fa:	e841 2300 	strex	r3, r2, [r1]
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1e5      	bne.n	80032d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3314      	adds	r3, #20
 800330c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	e853 3f00 	ldrex	r3, [r3]
 8003314:	613b      	str	r3, [r7, #16]
   return(result);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	63bb      	str	r3, [r7, #56]	; 0x38
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3314      	adds	r3, #20
 8003324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003326:	623a      	str	r2, [r7, #32]
 8003328:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	69f9      	ldr	r1, [r7, #28]
 800332c:	6a3a      	ldr	r2, [r7, #32]
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	61bb      	str	r3, [r7, #24]
   return(result);
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e5      	bne.n	8003306 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e00f      	b.n	8003376 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	429a      	cmp	r2, r3
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	429a      	cmp	r2, r3
 8003372:	d09f      	beq.n	80032b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3740      	adds	r7, #64	; 0x40
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80033c0:	f023 030c 	bic.w	r3, r3, #12
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	68b9      	ldr	r1, [r7, #8]
 80033ca:	430b      	orrs	r3, r1
 80033cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699a      	ldr	r2, [r3, #24]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a55      	ldr	r2, [pc, #340]	; (8003540 <UART_SetConfig+0x1c0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d103      	bne.n	80033f6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033ee:	f7fe fcdf 	bl	8001db0 <HAL_RCC_GetPCLK2Freq>
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	e002      	b.n	80033fc <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033f6:	f7fe fcc7 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 80033fa:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003404:	d14c      	bne.n	80034a0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	009a      	lsls	r2, r3, #2
 8003410:	441a      	add	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	fbb2 f3f3 	udiv	r3, r2, r3
 800341c:	4a49      	ldr	r2, [pc, #292]	; (8003544 <UART_SetConfig+0x1c4>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	0119      	lsls	r1, r3, #4
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	009a      	lsls	r2, r3, #2
 8003430:	441a      	add	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fbb2 f2f3 	udiv	r2, r2, r3
 800343c:	4b41      	ldr	r3, [pc, #260]	; (8003544 <UART_SetConfig+0x1c4>)
 800343e:	fba3 0302 	umull	r0, r3, r3, r2
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2064      	movs	r0, #100	; 0x64
 8003446:	fb00 f303 	mul.w	r3, r0, r3
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	3332      	adds	r3, #50	; 0x32
 8003450:	4a3c      	ldr	r2, [pc, #240]	; (8003544 <UART_SetConfig+0x1c4>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800345e:	4419      	add	r1, r3
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	009a      	lsls	r2, r3, #2
 800346a:	441a      	add	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	fbb2 f2f3 	udiv	r2, r2, r3
 8003476:	4b33      	ldr	r3, [pc, #204]	; (8003544 <UART_SetConfig+0x1c4>)
 8003478:	fba3 0302 	umull	r0, r3, r3, r2
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	2064      	movs	r0, #100	; 0x64
 8003480:	fb00 f303 	mul.w	r3, r0, r3
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	3332      	adds	r3, #50	; 0x32
 800348a:	4a2e      	ldr	r2, [pc, #184]	; (8003544 <UART_SetConfig+0x1c4>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	f003 0207 	and.w	r2, r3, #7
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	440a      	add	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800349e:	e04a      	b.n	8003536 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	009a      	lsls	r2, r3, #2
 80034aa:	441a      	add	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	4a23      	ldr	r2, [pc, #140]	; (8003544 <UART_SetConfig+0x1c4>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	0119      	lsls	r1, r3, #4
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	009a      	lsls	r2, r3, #2
 80034ca:	441a      	add	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d6:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <UART_SetConfig+0x1c4>)
 80034d8:	fba3 0302 	umull	r0, r3, r3, r2
 80034dc:	095b      	lsrs	r3, r3, #5
 80034de:	2064      	movs	r0, #100	; 0x64
 80034e0:	fb00 f303 	mul.w	r3, r0, r3
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	3332      	adds	r3, #50	; 0x32
 80034ea:	4a16      	ldr	r2, [pc, #88]	; (8003544 <UART_SetConfig+0x1c4>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f6:	4419      	add	r1, r3
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	009a      	lsls	r2, r3, #2
 8003502:	441a      	add	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	fbb2 f2f3 	udiv	r2, r2, r3
 800350e:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <UART_SetConfig+0x1c4>)
 8003510:	fba3 0302 	umull	r0, r3, r3, r2
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	2064      	movs	r0, #100	; 0x64
 8003518:	fb00 f303 	mul.w	r3, r0, r3
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	3332      	adds	r3, #50	; 0x32
 8003522:	4a08      	ldr	r2, [pc, #32]	; (8003544 <UART_SetConfig+0x1c4>)
 8003524:	fba2 2303 	umull	r2, r3, r2, r3
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	f003 020f 	and.w	r2, r3, #15
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	440a      	add	r2, r1
 8003534:	609a      	str	r2, [r3, #8]
}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40013800 	.word	0x40013800
 8003544:	51eb851f 	.word	0x51eb851f

08003548 <__errno>:
 8003548:	4b01      	ldr	r3, [pc, #4]	; (8003550 <__errno+0x8>)
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	2000000c 	.word	0x2000000c

08003554 <__libc_init_array>:
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	2600      	movs	r6, #0
 8003558:	4d0c      	ldr	r5, [pc, #48]	; (800358c <__libc_init_array+0x38>)
 800355a:	4c0d      	ldr	r4, [pc, #52]	; (8003590 <__libc_init_array+0x3c>)
 800355c:	1b64      	subs	r4, r4, r5
 800355e:	10a4      	asrs	r4, r4, #2
 8003560:	42a6      	cmp	r6, r4
 8003562:	d109      	bne.n	8003578 <__libc_init_array+0x24>
 8003564:	f000 fd18 	bl	8003f98 <_init>
 8003568:	2600      	movs	r6, #0
 800356a:	4d0a      	ldr	r5, [pc, #40]	; (8003594 <__libc_init_array+0x40>)
 800356c:	4c0a      	ldr	r4, [pc, #40]	; (8003598 <__libc_init_array+0x44>)
 800356e:	1b64      	subs	r4, r4, r5
 8003570:	10a4      	asrs	r4, r4, #2
 8003572:	42a6      	cmp	r6, r4
 8003574:	d105      	bne.n	8003582 <__libc_init_array+0x2e>
 8003576:	bd70      	pop	{r4, r5, r6, pc}
 8003578:	f855 3b04 	ldr.w	r3, [r5], #4
 800357c:	4798      	blx	r3
 800357e:	3601      	adds	r6, #1
 8003580:	e7ee      	b.n	8003560 <__libc_init_array+0xc>
 8003582:	f855 3b04 	ldr.w	r3, [r5], #4
 8003586:	4798      	blx	r3
 8003588:	3601      	adds	r6, #1
 800358a:	e7f2      	b.n	8003572 <__libc_init_array+0x1e>
 800358c:	0800405c 	.word	0x0800405c
 8003590:	0800405c 	.word	0x0800405c
 8003594:	0800405c 	.word	0x0800405c
 8003598:	08004060 	.word	0x08004060

0800359c <memset>:
 800359c:	4603      	mov	r3, r0
 800359e:	4402      	add	r2, r0
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d100      	bne.n	80035a6 <memset+0xa>
 80035a4:	4770      	bx	lr
 80035a6:	f803 1b01 	strb.w	r1, [r3], #1
 80035aa:	e7f9      	b.n	80035a0 <memset+0x4>

080035ac <_puts_r>:
 80035ac:	b570      	push	{r4, r5, r6, lr}
 80035ae:	460e      	mov	r6, r1
 80035b0:	4605      	mov	r5, r0
 80035b2:	b118      	cbz	r0, 80035bc <_puts_r+0x10>
 80035b4:	6983      	ldr	r3, [r0, #24]
 80035b6:	b90b      	cbnz	r3, 80035bc <_puts_r+0x10>
 80035b8:	f000 fa44 	bl	8003a44 <__sinit>
 80035bc:	69ab      	ldr	r3, [r5, #24]
 80035be:	68ac      	ldr	r4, [r5, #8]
 80035c0:	b913      	cbnz	r3, 80035c8 <_puts_r+0x1c>
 80035c2:	4628      	mov	r0, r5
 80035c4:	f000 fa3e 	bl	8003a44 <__sinit>
 80035c8:	4b2c      	ldr	r3, [pc, #176]	; (800367c <_puts_r+0xd0>)
 80035ca:	429c      	cmp	r4, r3
 80035cc:	d120      	bne.n	8003610 <_puts_r+0x64>
 80035ce:	686c      	ldr	r4, [r5, #4]
 80035d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035d2:	07db      	lsls	r3, r3, #31
 80035d4:	d405      	bmi.n	80035e2 <_puts_r+0x36>
 80035d6:	89a3      	ldrh	r3, [r4, #12]
 80035d8:	0598      	lsls	r0, r3, #22
 80035da:	d402      	bmi.n	80035e2 <_puts_r+0x36>
 80035dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035de:	f000 facf 	bl	8003b80 <__retarget_lock_acquire_recursive>
 80035e2:	89a3      	ldrh	r3, [r4, #12]
 80035e4:	0719      	lsls	r1, r3, #28
 80035e6:	d51d      	bpl.n	8003624 <_puts_r+0x78>
 80035e8:	6923      	ldr	r3, [r4, #16]
 80035ea:	b1db      	cbz	r3, 8003624 <_puts_r+0x78>
 80035ec:	3e01      	subs	r6, #1
 80035ee:	68a3      	ldr	r3, [r4, #8]
 80035f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035f4:	3b01      	subs	r3, #1
 80035f6:	60a3      	str	r3, [r4, #8]
 80035f8:	bb39      	cbnz	r1, 800364a <_puts_r+0x9e>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	da38      	bge.n	8003670 <_puts_r+0xc4>
 80035fe:	4622      	mov	r2, r4
 8003600:	210a      	movs	r1, #10
 8003602:	4628      	mov	r0, r5
 8003604:	f000 f848 	bl	8003698 <__swbuf_r>
 8003608:	3001      	adds	r0, #1
 800360a:	d011      	beq.n	8003630 <_puts_r+0x84>
 800360c:	250a      	movs	r5, #10
 800360e:	e011      	b.n	8003634 <_puts_r+0x88>
 8003610:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <_puts_r+0xd4>)
 8003612:	429c      	cmp	r4, r3
 8003614:	d101      	bne.n	800361a <_puts_r+0x6e>
 8003616:	68ac      	ldr	r4, [r5, #8]
 8003618:	e7da      	b.n	80035d0 <_puts_r+0x24>
 800361a:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <_puts_r+0xd8>)
 800361c:	429c      	cmp	r4, r3
 800361e:	bf08      	it	eq
 8003620:	68ec      	ldreq	r4, [r5, #12]
 8003622:	e7d5      	b.n	80035d0 <_puts_r+0x24>
 8003624:	4621      	mov	r1, r4
 8003626:	4628      	mov	r0, r5
 8003628:	f000 f888 	bl	800373c <__swsetup_r>
 800362c:	2800      	cmp	r0, #0
 800362e:	d0dd      	beq.n	80035ec <_puts_r+0x40>
 8003630:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003634:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003636:	07da      	lsls	r2, r3, #31
 8003638:	d405      	bmi.n	8003646 <_puts_r+0x9a>
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	059b      	lsls	r3, r3, #22
 800363e:	d402      	bmi.n	8003646 <_puts_r+0x9a>
 8003640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003642:	f000 fa9e 	bl	8003b82 <__retarget_lock_release_recursive>
 8003646:	4628      	mov	r0, r5
 8003648:	bd70      	pop	{r4, r5, r6, pc}
 800364a:	2b00      	cmp	r3, #0
 800364c:	da04      	bge.n	8003658 <_puts_r+0xac>
 800364e:	69a2      	ldr	r2, [r4, #24]
 8003650:	429a      	cmp	r2, r3
 8003652:	dc06      	bgt.n	8003662 <_puts_r+0xb6>
 8003654:	290a      	cmp	r1, #10
 8003656:	d004      	beq.n	8003662 <_puts_r+0xb6>
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	6022      	str	r2, [r4, #0]
 800365e:	7019      	strb	r1, [r3, #0]
 8003660:	e7c5      	b.n	80035ee <_puts_r+0x42>
 8003662:	4622      	mov	r2, r4
 8003664:	4628      	mov	r0, r5
 8003666:	f000 f817 	bl	8003698 <__swbuf_r>
 800366a:	3001      	adds	r0, #1
 800366c:	d1bf      	bne.n	80035ee <_puts_r+0x42>
 800366e:	e7df      	b.n	8003630 <_puts_r+0x84>
 8003670:	250a      	movs	r5, #10
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	6022      	str	r2, [r4, #0]
 8003678:	701d      	strb	r5, [r3, #0]
 800367a:	e7db      	b.n	8003634 <_puts_r+0x88>
 800367c:	08004014 	.word	0x08004014
 8003680:	08004034 	.word	0x08004034
 8003684:	08003ff4 	.word	0x08003ff4

08003688 <puts>:
 8003688:	4b02      	ldr	r3, [pc, #8]	; (8003694 <puts+0xc>)
 800368a:	4601      	mov	r1, r0
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	f7ff bf8d 	b.w	80035ac <_puts_r>
 8003692:	bf00      	nop
 8003694:	2000000c 	.word	0x2000000c

08003698 <__swbuf_r>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	460e      	mov	r6, r1
 800369c:	4614      	mov	r4, r2
 800369e:	4605      	mov	r5, r0
 80036a0:	b118      	cbz	r0, 80036aa <__swbuf_r+0x12>
 80036a2:	6983      	ldr	r3, [r0, #24]
 80036a4:	b90b      	cbnz	r3, 80036aa <__swbuf_r+0x12>
 80036a6:	f000 f9cd 	bl	8003a44 <__sinit>
 80036aa:	4b21      	ldr	r3, [pc, #132]	; (8003730 <__swbuf_r+0x98>)
 80036ac:	429c      	cmp	r4, r3
 80036ae:	d12b      	bne.n	8003708 <__swbuf_r+0x70>
 80036b0:	686c      	ldr	r4, [r5, #4]
 80036b2:	69a3      	ldr	r3, [r4, #24]
 80036b4:	60a3      	str	r3, [r4, #8]
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	071a      	lsls	r2, r3, #28
 80036ba:	d52f      	bpl.n	800371c <__swbuf_r+0x84>
 80036bc:	6923      	ldr	r3, [r4, #16]
 80036be:	b36b      	cbz	r3, 800371c <__swbuf_r+0x84>
 80036c0:	6923      	ldr	r3, [r4, #16]
 80036c2:	6820      	ldr	r0, [r4, #0]
 80036c4:	b2f6      	uxtb	r6, r6
 80036c6:	1ac0      	subs	r0, r0, r3
 80036c8:	6963      	ldr	r3, [r4, #20]
 80036ca:	4637      	mov	r7, r6
 80036cc:	4283      	cmp	r3, r0
 80036ce:	dc04      	bgt.n	80036da <__swbuf_r+0x42>
 80036d0:	4621      	mov	r1, r4
 80036d2:	4628      	mov	r0, r5
 80036d4:	f000 f922 	bl	800391c <_fflush_r>
 80036d8:	bb30      	cbnz	r0, 8003728 <__swbuf_r+0x90>
 80036da:	68a3      	ldr	r3, [r4, #8]
 80036dc:	3001      	adds	r0, #1
 80036de:	3b01      	subs	r3, #1
 80036e0:	60a3      	str	r3, [r4, #8]
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	6022      	str	r2, [r4, #0]
 80036e8:	701e      	strb	r6, [r3, #0]
 80036ea:	6963      	ldr	r3, [r4, #20]
 80036ec:	4283      	cmp	r3, r0
 80036ee:	d004      	beq.n	80036fa <__swbuf_r+0x62>
 80036f0:	89a3      	ldrh	r3, [r4, #12]
 80036f2:	07db      	lsls	r3, r3, #31
 80036f4:	d506      	bpl.n	8003704 <__swbuf_r+0x6c>
 80036f6:	2e0a      	cmp	r6, #10
 80036f8:	d104      	bne.n	8003704 <__swbuf_r+0x6c>
 80036fa:	4621      	mov	r1, r4
 80036fc:	4628      	mov	r0, r5
 80036fe:	f000 f90d 	bl	800391c <_fflush_r>
 8003702:	b988      	cbnz	r0, 8003728 <__swbuf_r+0x90>
 8003704:	4638      	mov	r0, r7
 8003706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003708:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <__swbuf_r+0x9c>)
 800370a:	429c      	cmp	r4, r3
 800370c:	d101      	bne.n	8003712 <__swbuf_r+0x7a>
 800370e:	68ac      	ldr	r4, [r5, #8]
 8003710:	e7cf      	b.n	80036b2 <__swbuf_r+0x1a>
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <__swbuf_r+0xa0>)
 8003714:	429c      	cmp	r4, r3
 8003716:	bf08      	it	eq
 8003718:	68ec      	ldreq	r4, [r5, #12]
 800371a:	e7ca      	b.n	80036b2 <__swbuf_r+0x1a>
 800371c:	4621      	mov	r1, r4
 800371e:	4628      	mov	r0, r5
 8003720:	f000 f80c 	bl	800373c <__swsetup_r>
 8003724:	2800      	cmp	r0, #0
 8003726:	d0cb      	beq.n	80036c0 <__swbuf_r+0x28>
 8003728:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800372c:	e7ea      	b.n	8003704 <__swbuf_r+0x6c>
 800372e:	bf00      	nop
 8003730:	08004014 	.word	0x08004014
 8003734:	08004034 	.word	0x08004034
 8003738:	08003ff4 	.word	0x08003ff4

0800373c <__swsetup_r>:
 800373c:	4b32      	ldr	r3, [pc, #200]	; (8003808 <__swsetup_r+0xcc>)
 800373e:	b570      	push	{r4, r5, r6, lr}
 8003740:	681d      	ldr	r5, [r3, #0]
 8003742:	4606      	mov	r6, r0
 8003744:	460c      	mov	r4, r1
 8003746:	b125      	cbz	r5, 8003752 <__swsetup_r+0x16>
 8003748:	69ab      	ldr	r3, [r5, #24]
 800374a:	b913      	cbnz	r3, 8003752 <__swsetup_r+0x16>
 800374c:	4628      	mov	r0, r5
 800374e:	f000 f979 	bl	8003a44 <__sinit>
 8003752:	4b2e      	ldr	r3, [pc, #184]	; (800380c <__swsetup_r+0xd0>)
 8003754:	429c      	cmp	r4, r3
 8003756:	d10f      	bne.n	8003778 <__swsetup_r+0x3c>
 8003758:	686c      	ldr	r4, [r5, #4]
 800375a:	89a3      	ldrh	r3, [r4, #12]
 800375c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003760:	0719      	lsls	r1, r3, #28
 8003762:	d42c      	bmi.n	80037be <__swsetup_r+0x82>
 8003764:	06dd      	lsls	r5, r3, #27
 8003766:	d411      	bmi.n	800378c <__swsetup_r+0x50>
 8003768:	2309      	movs	r3, #9
 800376a:	6033      	str	r3, [r6, #0]
 800376c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003774:	81a3      	strh	r3, [r4, #12]
 8003776:	e03e      	b.n	80037f6 <__swsetup_r+0xba>
 8003778:	4b25      	ldr	r3, [pc, #148]	; (8003810 <__swsetup_r+0xd4>)
 800377a:	429c      	cmp	r4, r3
 800377c:	d101      	bne.n	8003782 <__swsetup_r+0x46>
 800377e:	68ac      	ldr	r4, [r5, #8]
 8003780:	e7eb      	b.n	800375a <__swsetup_r+0x1e>
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <__swsetup_r+0xd8>)
 8003784:	429c      	cmp	r4, r3
 8003786:	bf08      	it	eq
 8003788:	68ec      	ldreq	r4, [r5, #12]
 800378a:	e7e6      	b.n	800375a <__swsetup_r+0x1e>
 800378c:	0758      	lsls	r0, r3, #29
 800378e:	d512      	bpl.n	80037b6 <__swsetup_r+0x7a>
 8003790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003792:	b141      	cbz	r1, 80037a6 <__swsetup_r+0x6a>
 8003794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003798:	4299      	cmp	r1, r3
 800379a:	d002      	beq.n	80037a2 <__swsetup_r+0x66>
 800379c:	4630      	mov	r0, r6
 800379e:	f000 fa57 	bl	8003c50 <_free_r>
 80037a2:	2300      	movs	r3, #0
 80037a4:	6363      	str	r3, [r4, #52]	; 0x34
 80037a6:	89a3      	ldrh	r3, [r4, #12]
 80037a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037ac:	81a3      	strh	r3, [r4, #12]
 80037ae:	2300      	movs	r3, #0
 80037b0:	6063      	str	r3, [r4, #4]
 80037b2:	6923      	ldr	r3, [r4, #16]
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	89a3      	ldrh	r3, [r4, #12]
 80037b8:	f043 0308 	orr.w	r3, r3, #8
 80037bc:	81a3      	strh	r3, [r4, #12]
 80037be:	6923      	ldr	r3, [r4, #16]
 80037c0:	b94b      	cbnz	r3, 80037d6 <__swsetup_r+0x9a>
 80037c2:	89a3      	ldrh	r3, [r4, #12]
 80037c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037cc:	d003      	beq.n	80037d6 <__swsetup_r+0x9a>
 80037ce:	4621      	mov	r1, r4
 80037d0:	4630      	mov	r0, r6
 80037d2:	f000 f9fd 	bl	8003bd0 <__smakebuf_r>
 80037d6:	89a0      	ldrh	r0, [r4, #12]
 80037d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037dc:	f010 0301 	ands.w	r3, r0, #1
 80037e0:	d00a      	beq.n	80037f8 <__swsetup_r+0xbc>
 80037e2:	2300      	movs	r3, #0
 80037e4:	60a3      	str	r3, [r4, #8]
 80037e6:	6963      	ldr	r3, [r4, #20]
 80037e8:	425b      	negs	r3, r3
 80037ea:	61a3      	str	r3, [r4, #24]
 80037ec:	6923      	ldr	r3, [r4, #16]
 80037ee:	b943      	cbnz	r3, 8003802 <__swsetup_r+0xc6>
 80037f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80037f4:	d1ba      	bne.n	800376c <__swsetup_r+0x30>
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
 80037f8:	0781      	lsls	r1, r0, #30
 80037fa:	bf58      	it	pl
 80037fc:	6963      	ldrpl	r3, [r4, #20]
 80037fe:	60a3      	str	r3, [r4, #8]
 8003800:	e7f4      	b.n	80037ec <__swsetup_r+0xb0>
 8003802:	2000      	movs	r0, #0
 8003804:	e7f7      	b.n	80037f6 <__swsetup_r+0xba>
 8003806:	bf00      	nop
 8003808:	2000000c 	.word	0x2000000c
 800380c:	08004014 	.word	0x08004014
 8003810:	08004034 	.word	0x08004034
 8003814:	08003ff4 	.word	0x08003ff4

08003818 <__sflush_r>:
 8003818:	898a      	ldrh	r2, [r1, #12]
 800381a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381c:	4605      	mov	r5, r0
 800381e:	0710      	lsls	r0, r2, #28
 8003820:	460c      	mov	r4, r1
 8003822:	d457      	bmi.n	80038d4 <__sflush_r+0xbc>
 8003824:	684b      	ldr	r3, [r1, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	dc04      	bgt.n	8003834 <__sflush_r+0x1c>
 800382a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800382c:	2b00      	cmp	r3, #0
 800382e:	dc01      	bgt.n	8003834 <__sflush_r+0x1c>
 8003830:	2000      	movs	r0, #0
 8003832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003836:	2e00      	cmp	r6, #0
 8003838:	d0fa      	beq.n	8003830 <__sflush_r+0x18>
 800383a:	2300      	movs	r3, #0
 800383c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003840:	682f      	ldr	r7, [r5, #0]
 8003842:	602b      	str	r3, [r5, #0]
 8003844:	d032      	beq.n	80038ac <__sflush_r+0x94>
 8003846:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003848:	89a3      	ldrh	r3, [r4, #12]
 800384a:	075a      	lsls	r2, r3, #29
 800384c:	d505      	bpl.n	800385a <__sflush_r+0x42>
 800384e:	6863      	ldr	r3, [r4, #4]
 8003850:	1ac0      	subs	r0, r0, r3
 8003852:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003854:	b10b      	cbz	r3, 800385a <__sflush_r+0x42>
 8003856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003858:	1ac0      	subs	r0, r0, r3
 800385a:	2300      	movs	r3, #0
 800385c:	4602      	mov	r2, r0
 800385e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003860:	4628      	mov	r0, r5
 8003862:	6a21      	ldr	r1, [r4, #32]
 8003864:	47b0      	blx	r6
 8003866:	1c43      	adds	r3, r0, #1
 8003868:	89a3      	ldrh	r3, [r4, #12]
 800386a:	d106      	bne.n	800387a <__sflush_r+0x62>
 800386c:	6829      	ldr	r1, [r5, #0]
 800386e:	291d      	cmp	r1, #29
 8003870:	d82c      	bhi.n	80038cc <__sflush_r+0xb4>
 8003872:	4a29      	ldr	r2, [pc, #164]	; (8003918 <__sflush_r+0x100>)
 8003874:	40ca      	lsrs	r2, r1
 8003876:	07d6      	lsls	r6, r2, #31
 8003878:	d528      	bpl.n	80038cc <__sflush_r+0xb4>
 800387a:	2200      	movs	r2, #0
 800387c:	6062      	str	r2, [r4, #4]
 800387e:	6922      	ldr	r2, [r4, #16]
 8003880:	04d9      	lsls	r1, r3, #19
 8003882:	6022      	str	r2, [r4, #0]
 8003884:	d504      	bpl.n	8003890 <__sflush_r+0x78>
 8003886:	1c42      	adds	r2, r0, #1
 8003888:	d101      	bne.n	800388e <__sflush_r+0x76>
 800388a:	682b      	ldr	r3, [r5, #0]
 800388c:	b903      	cbnz	r3, 8003890 <__sflush_r+0x78>
 800388e:	6560      	str	r0, [r4, #84]	; 0x54
 8003890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003892:	602f      	str	r7, [r5, #0]
 8003894:	2900      	cmp	r1, #0
 8003896:	d0cb      	beq.n	8003830 <__sflush_r+0x18>
 8003898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800389c:	4299      	cmp	r1, r3
 800389e:	d002      	beq.n	80038a6 <__sflush_r+0x8e>
 80038a0:	4628      	mov	r0, r5
 80038a2:	f000 f9d5 	bl	8003c50 <_free_r>
 80038a6:	2000      	movs	r0, #0
 80038a8:	6360      	str	r0, [r4, #52]	; 0x34
 80038aa:	e7c2      	b.n	8003832 <__sflush_r+0x1a>
 80038ac:	6a21      	ldr	r1, [r4, #32]
 80038ae:	2301      	movs	r3, #1
 80038b0:	4628      	mov	r0, r5
 80038b2:	47b0      	blx	r6
 80038b4:	1c41      	adds	r1, r0, #1
 80038b6:	d1c7      	bne.n	8003848 <__sflush_r+0x30>
 80038b8:	682b      	ldr	r3, [r5, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0c4      	beq.n	8003848 <__sflush_r+0x30>
 80038be:	2b1d      	cmp	r3, #29
 80038c0:	d001      	beq.n	80038c6 <__sflush_r+0xae>
 80038c2:	2b16      	cmp	r3, #22
 80038c4:	d101      	bne.n	80038ca <__sflush_r+0xb2>
 80038c6:	602f      	str	r7, [r5, #0]
 80038c8:	e7b2      	b.n	8003830 <__sflush_r+0x18>
 80038ca:	89a3      	ldrh	r3, [r4, #12]
 80038cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038d0:	81a3      	strh	r3, [r4, #12]
 80038d2:	e7ae      	b.n	8003832 <__sflush_r+0x1a>
 80038d4:	690f      	ldr	r7, [r1, #16]
 80038d6:	2f00      	cmp	r7, #0
 80038d8:	d0aa      	beq.n	8003830 <__sflush_r+0x18>
 80038da:	0793      	lsls	r3, r2, #30
 80038dc:	bf18      	it	ne
 80038de:	2300      	movne	r3, #0
 80038e0:	680e      	ldr	r6, [r1, #0]
 80038e2:	bf08      	it	eq
 80038e4:	694b      	ldreq	r3, [r1, #20]
 80038e6:	1bf6      	subs	r6, r6, r7
 80038e8:	600f      	str	r7, [r1, #0]
 80038ea:	608b      	str	r3, [r1, #8]
 80038ec:	2e00      	cmp	r6, #0
 80038ee:	dd9f      	ble.n	8003830 <__sflush_r+0x18>
 80038f0:	4633      	mov	r3, r6
 80038f2:	463a      	mov	r2, r7
 80038f4:	4628      	mov	r0, r5
 80038f6:	6a21      	ldr	r1, [r4, #32]
 80038f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80038fc:	47e0      	blx	ip
 80038fe:	2800      	cmp	r0, #0
 8003900:	dc06      	bgt.n	8003910 <__sflush_r+0xf8>
 8003902:	89a3      	ldrh	r3, [r4, #12]
 8003904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800390c:	81a3      	strh	r3, [r4, #12]
 800390e:	e790      	b.n	8003832 <__sflush_r+0x1a>
 8003910:	4407      	add	r7, r0
 8003912:	1a36      	subs	r6, r6, r0
 8003914:	e7ea      	b.n	80038ec <__sflush_r+0xd4>
 8003916:	bf00      	nop
 8003918:	20400001 	.word	0x20400001

0800391c <_fflush_r>:
 800391c:	b538      	push	{r3, r4, r5, lr}
 800391e:	690b      	ldr	r3, [r1, #16]
 8003920:	4605      	mov	r5, r0
 8003922:	460c      	mov	r4, r1
 8003924:	b913      	cbnz	r3, 800392c <_fflush_r+0x10>
 8003926:	2500      	movs	r5, #0
 8003928:	4628      	mov	r0, r5
 800392a:	bd38      	pop	{r3, r4, r5, pc}
 800392c:	b118      	cbz	r0, 8003936 <_fflush_r+0x1a>
 800392e:	6983      	ldr	r3, [r0, #24]
 8003930:	b90b      	cbnz	r3, 8003936 <_fflush_r+0x1a>
 8003932:	f000 f887 	bl	8003a44 <__sinit>
 8003936:	4b14      	ldr	r3, [pc, #80]	; (8003988 <_fflush_r+0x6c>)
 8003938:	429c      	cmp	r4, r3
 800393a:	d11b      	bne.n	8003974 <_fflush_r+0x58>
 800393c:	686c      	ldr	r4, [r5, #4]
 800393e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0ef      	beq.n	8003926 <_fflush_r+0xa>
 8003946:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003948:	07d0      	lsls	r0, r2, #31
 800394a:	d404      	bmi.n	8003956 <_fflush_r+0x3a>
 800394c:	0599      	lsls	r1, r3, #22
 800394e:	d402      	bmi.n	8003956 <_fflush_r+0x3a>
 8003950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003952:	f000 f915 	bl	8003b80 <__retarget_lock_acquire_recursive>
 8003956:	4628      	mov	r0, r5
 8003958:	4621      	mov	r1, r4
 800395a:	f7ff ff5d 	bl	8003818 <__sflush_r>
 800395e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003960:	4605      	mov	r5, r0
 8003962:	07da      	lsls	r2, r3, #31
 8003964:	d4e0      	bmi.n	8003928 <_fflush_r+0xc>
 8003966:	89a3      	ldrh	r3, [r4, #12]
 8003968:	059b      	lsls	r3, r3, #22
 800396a:	d4dd      	bmi.n	8003928 <_fflush_r+0xc>
 800396c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800396e:	f000 f908 	bl	8003b82 <__retarget_lock_release_recursive>
 8003972:	e7d9      	b.n	8003928 <_fflush_r+0xc>
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <_fflush_r+0x70>)
 8003976:	429c      	cmp	r4, r3
 8003978:	d101      	bne.n	800397e <_fflush_r+0x62>
 800397a:	68ac      	ldr	r4, [r5, #8]
 800397c:	e7df      	b.n	800393e <_fflush_r+0x22>
 800397e:	4b04      	ldr	r3, [pc, #16]	; (8003990 <_fflush_r+0x74>)
 8003980:	429c      	cmp	r4, r3
 8003982:	bf08      	it	eq
 8003984:	68ec      	ldreq	r4, [r5, #12]
 8003986:	e7da      	b.n	800393e <_fflush_r+0x22>
 8003988:	08004014 	.word	0x08004014
 800398c:	08004034 	.word	0x08004034
 8003990:	08003ff4 	.word	0x08003ff4

08003994 <std>:
 8003994:	2300      	movs	r3, #0
 8003996:	b510      	push	{r4, lr}
 8003998:	4604      	mov	r4, r0
 800399a:	e9c0 3300 	strd	r3, r3, [r0]
 800399e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039a2:	6083      	str	r3, [r0, #8]
 80039a4:	8181      	strh	r1, [r0, #12]
 80039a6:	6643      	str	r3, [r0, #100]	; 0x64
 80039a8:	81c2      	strh	r2, [r0, #14]
 80039aa:	6183      	str	r3, [r0, #24]
 80039ac:	4619      	mov	r1, r3
 80039ae:	2208      	movs	r2, #8
 80039b0:	305c      	adds	r0, #92	; 0x5c
 80039b2:	f7ff fdf3 	bl	800359c <memset>
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <std+0x38>)
 80039b8:	6224      	str	r4, [r4, #32]
 80039ba:	6263      	str	r3, [r4, #36]	; 0x24
 80039bc:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <std+0x3c>)
 80039be:	62a3      	str	r3, [r4, #40]	; 0x28
 80039c0:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <std+0x40>)
 80039c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <std+0x44>)
 80039c6:	6323      	str	r3, [r4, #48]	; 0x30
 80039c8:	bd10      	pop	{r4, pc}
 80039ca:	bf00      	nop
 80039cc:	08003e29 	.word	0x08003e29
 80039d0:	08003e4b 	.word	0x08003e4b
 80039d4:	08003e83 	.word	0x08003e83
 80039d8:	08003ea7 	.word	0x08003ea7

080039dc <_cleanup_r>:
 80039dc:	4901      	ldr	r1, [pc, #4]	; (80039e4 <_cleanup_r+0x8>)
 80039de:	f000 b8af 	b.w	8003b40 <_fwalk_reent>
 80039e2:	bf00      	nop
 80039e4:	0800391d 	.word	0x0800391d

080039e8 <__sfmoreglue>:
 80039e8:	2268      	movs	r2, #104	; 0x68
 80039ea:	b570      	push	{r4, r5, r6, lr}
 80039ec:	1e4d      	subs	r5, r1, #1
 80039ee:	4355      	muls	r5, r2
 80039f0:	460e      	mov	r6, r1
 80039f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039f6:	f000 f993 	bl	8003d20 <_malloc_r>
 80039fa:	4604      	mov	r4, r0
 80039fc:	b140      	cbz	r0, 8003a10 <__sfmoreglue+0x28>
 80039fe:	2100      	movs	r1, #0
 8003a00:	e9c0 1600 	strd	r1, r6, [r0]
 8003a04:	300c      	adds	r0, #12
 8003a06:	60a0      	str	r0, [r4, #8]
 8003a08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a0c:	f7ff fdc6 	bl	800359c <memset>
 8003a10:	4620      	mov	r0, r4
 8003a12:	bd70      	pop	{r4, r5, r6, pc}

08003a14 <__sfp_lock_acquire>:
 8003a14:	4801      	ldr	r0, [pc, #4]	; (8003a1c <__sfp_lock_acquire+0x8>)
 8003a16:	f000 b8b3 	b.w	8003b80 <__retarget_lock_acquire_recursive>
 8003a1a:	bf00      	nop
 8003a1c:	2000016d 	.word	0x2000016d

08003a20 <__sfp_lock_release>:
 8003a20:	4801      	ldr	r0, [pc, #4]	; (8003a28 <__sfp_lock_release+0x8>)
 8003a22:	f000 b8ae 	b.w	8003b82 <__retarget_lock_release_recursive>
 8003a26:	bf00      	nop
 8003a28:	2000016d 	.word	0x2000016d

08003a2c <__sinit_lock_acquire>:
 8003a2c:	4801      	ldr	r0, [pc, #4]	; (8003a34 <__sinit_lock_acquire+0x8>)
 8003a2e:	f000 b8a7 	b.w	8003b80 <__retarget_lock_acquire_recursive>
 8003a32:	bf00      	nop
 8003a34:	2000016e 	.word	0x2000016e

08003a38 <__sinit_lock_release>:
 8003a38:	4801      	ldr	r0, [pc, #4]	; (8003a40 <__sinit_lock_release+0x8>)
 8003a3a:	f000 b8a2 	b.w	8003b82 <__retarget_lock_release_recursive>
 8003a3e:	bf00      	nop
 8003a40:	2000016e 	.word	0x2000016e

08003a44 <__sinit>:
 8003a44:	b510      	push	{r4, lr}
 8003a46:	4604      	mov	r4, r0
 8003a48:	f7ff fff0 	bl	8003a2c <__sinit_lock_acquire>
 8003a4c:	69a3      	ldr	r3, [r4, #24]
 8003a4e:	b11b      	cbz	r3, 8003a58 <__sinit+0x14>
 8003a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a54:	f7ff bff0 	b.w	8003a38 <__sinit_lock_release>
 8003a58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a5c:	6523      	str	r3, [r4, #80]	; 0x50
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <__sinit+0x68>)
 8003a60:	4a13      	ldr	r2, [pc, #76]	; (8003ab0 <__sinit+0x6c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a66:	42a3      	cmp	r3, r4
 8003a68:	bf08      	it	eq
 8003a6a:	2301      	moveq	r3, #1
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	bf08      	it	eq
 8003a70:	61a3      	streq	r3, [r4, #24]
 8003a72:	f000 f81f 	bl	8003ab4 <__sfp>
 8003a76:	6060      	str	r0, [r4, #4]
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f000 f81b 	bl	8003ab4 <__sfp>
 8003a7e:	60a0      	str	r0, [r4, #8]
 8003a80:	4620      	mov	r0, r4
 8003a82:	f000 f817 	bl	8003ab4 <__sfp>
 8003a86:	2200      	movs	r2, #0
 8003a88:	2104      	movs	r1, #4
 8003a8a:	60e0      	str	r0, [r4, #12]
 8003a8c:	6860      	ldr	r0, [r4, #4]
 8003a8e:	f7ff ff81 	bl	8003994 <std>
 8003a92:	2201      	movs	r2, #1
 8003a94:	2109      	movs	r1, #9
 8003a96:	68a0      	ldr	r0, [r4, #8]
 8003a98:	f7ff ff7c 	bl	8003994 <std>
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	2112      	movs	r1, #18
 8003aa0:	68e0      	ldr	r0, [r4, #12]
 8003aa2:	f7ff ff77 	bl	8003994 <std>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	61a3      	str	r3, [r4, #24]
 8003aaa:	e7d1      	b.n	8003a50 <__sinit+0xc>
 8003aac:	08003ff0 	.word	0x08003ff0
 8003ab0:	080039dd 	.word	0x080039dd

08003ab4 <__sfp>:
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab6:	4607      	mov	r7, r0
 8003ab8:	f7ff ffac 	bl	8003a14 <__sfp_lock_acquire>
 8003abc:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <__sfp+0x84>)
 8003abe:	681e      	ldr	r6, [r3, #0]
 8003ac0:	69b3      	ldr	r3, [r6, #24]
 8003ac2:	b913      	cbnz	r3, 8003aca <__sfp+0x16>
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	f7ff ffbd 	bl	8003a44 <__sinit>
 8003aca:	3648      	adds	r6, #72	; 0x48
 8003acc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	d503      	bpl.n	8003adc <__sfp+0x28>
 8003ad4:	6833      	ldr	r3, [r6, #0]
 8003ad6:	b30b      	cbz	r3, 8003b1c <__sfp+0x68>
 8003ad8:	6836      	ldr	r6, [r6, #0]
 8003ada:	e7f7      	b.n	8003acc <__sfp+0x18>
 8003adc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ae0:	b9d5      	cbnz	r5, 8003b18 <__sfp+0x64>
 8003ae2:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <__sfp+0x88>)
 8003ae4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ae8:	60e3      	str	r3, [r4, #12]
 8003aea:	6665      	str	r5, [r4, #100]	; 0x64
 8003aec:	f000 f847 	bl	8003b7e <__retarget_lock_init_recursive>
 8003af0:	f7ff ff96 	bl	8003a20 <__sfp_lock_release>
 8003af4:	2208      	movs	r2, #8
 8003af6:	4629      	mov	r1, r5
 8003af8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003afc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b00:	6025      	str	r5, [r4, #0]
 8003b02:	61a5      	str	r5, [r4, #24]
 8003b04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b08:	f7ff fd48 	bl	800359c <memset>
 8003b0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b14:	4620      	mov	r0, r4
 8003b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b18:	3468      	adds	r4, #104	; 0x68
 8003b1a:	e7d9      	b.n	8003ad0 <__sfp+0x1c>
 8003b1c:	2104      	movs	r1, #4
 8003b1e:	4638      	mov	r0, r7
 8003b20:	f7ff ff62 	bl	80039e8 <__sfmoreglue>
 8003b24:	4604      	mov	r4, r0
 8003b26:	6030      	str	r0, [r6, #0]
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	d1d5      	bne.n	8003ad8 <__sfp+0x24>
 8003b2c:	f7ff ff78 	bl	8003a20 <__sfp_lock_release>
 8003b30:	230c      	movs	r3, #12
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	e7ee      	b.n	8003b14 <__sfp+0x60>
 8003b36:	bf00      	nop
 8003b38:	08003ff0 	.word	0x08003ff0
 8003b3c:	ffff0001 	.word	0xffff0001

08003b40 <_fwalk_reent>:
 8003b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b44:	4606      	mov	r6, r0
 8003b46:	4688      	mov	r8, r1
 8003b48:	2700      	movs	r7, #0
 8003b4a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b52:	f1b9 0901 	subs.w	r9, r9, #1
 8003b56:	d505      	bpl.n	8003b64 <_fwalk_reent+0x24>
 8003b58:	6824      	ldr	r4, [r4, #0]
 8003b5a:	2c00      	cmp	r4, #0
 8003b5c:	d1f7      	bne.n	8003b4e <_fwalk_reent+0xe>
 8003b5e:	4638      	mov	r0, r7
 8003b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b64:	89ab      	ldrh	r3, [r5, #12]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d907      	bls.n	8003b7a <_fwalk_reent+0x3a>
 8003b6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	d003      	beq.n	8003b7a <_fwalk_reent+0x3a>
 8003b72:	4629      	mov	r1, r5
 8003b74:	4630      	mov	r0, r6
 8003b76:	47c0      	blx	r8
 8003b78:	4307      	orrs	r7, r0
 8003b7a:	3568      	adds	r5, #104	; 0x68
 8003b7c:	e7e9      	b.n	8003b52 <_fwalk_reent+0x12>

08003b7e <__retarget_lock_init_recursive>:
 8003b7e:	4770      	bx	lr

08003b80 <__retarget_lock_acquire_recursive>:
 8003b80:	4770      	bx	lr

08003b82 <__retarget_lock_release_recursive>:
 8003b82:	4770      	bx	lr

08003b84 <__swhatbuf_r>:
 8003b84:	b570      	push	{r4, r5, r6, lr}
 8003b86:	460e      	mov	r6, r1
 8003b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b8c:	4614      	mov	r4, r2
 8003b8e:	2900      	cmp	r1, #0
 8003b90:	461d      	mov	r5, r3
 8003b92:	b096      	sub	sp, #88	; 0x58
 8003b94:	da08      	bge.n	8003ba8 <__swhatbuf_r+0x24>
 8003b96:	2200      	movs	r2, #0
 8003b98:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003b9c:	602a      	str	r2, [r5, #0]
 8003b9e:	061a      	lsls	r2, r3, #24
 8003ba0:	d410      	bmi.n	8003bc4 <__swhatbuf_r+0x40>
 8003ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba6:	e00e      	b.n	8003bc6 <__swhatbuf_r+0x42>
 8003ba8:	466a      	mov	r2, sp
 8003baa:	f000 f9a3 	bl	8003ef4 <_fstat_r>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	dbf1      	blt.n	8003b96 <__swhatbuf_r+0x12>
 8003bb2:	9a01      	ldr	r2, [sp, #4]
 8003bb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003bb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003bbc:	425a      	negs	r2, r3
 8003bbe:	415a      	adcs	r2, r3
 8003bc0:	602a      	str	r2, [r5, #0]
 8003bc2:	e7ee      	b.n	8003ba2 <__swhatbuf_r+0x1e>
 8003bc4:	2340      	movs	r3, #64	; 0x40
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	6023      	str	r3, [r4, #0]
 8003bca:	b016      	add	sp, #88	; 0x58
 8003bcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08003bd0 <__smakebuf_r>:
 8003bd0:	898b      	ldrh	r3, [r1, #12]
 8003bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bd4:	079d      	lsls	r5, r3, #30
 8003bd6:	4606      	mov	r6, r0
 8003bd8:	460c      	mov	r4, r1
 8003bda:	d507      	bpl.n	8003bec <__smakebuf_r+0x1c>
 8003bdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003be0:	6023      	str	r3, [r4, #0]
 8003be2:	6123      	str	r3, [r4, #16]
 8003be4:	2301      	movs	r3, #1
 8003be6:	6163      	str	r3, [r4, #20]
 8003be8:	b002      	add	sp, #8
 8003bea:	bd70      	pop	{r4, r5, r6, pc}
 8003bec:	466a      	mov	r2, sp
 8003bee:	ab01      	add	r3, sp, #4
 8003bf0:	f7ff ffc8 	bl	8003b84 <__swhatbuf_r>
 8003bf4:	9900      	ldr	r1, [sp, #0]
 8003bf6:	4605      	mov	r5, r0
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	f000 f891 	bl	8003d20 <_malloc_r>
 8003bfe:	b948      	cbnz	r0, 8003c14 <__smakebuf_r+0x44>
 8003c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c04:	059a      	lsls	r2, r3, #22
 8003c06:	d4ef      	bmi.n	8003be8 <__smakebuf_r+0x18>
 8003c08:	f023 0303 	bic.w	r3, r3, #3
 8003c0c:	f043 0302 	orr.w	r3, r3, #2
 8003c10:	81a3      	strh	r3, [r4, #12]
 8003c12:	e7e3      	b.n	8003bdc <__smakebuf_r+0xc>
 8003c14:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <__smakebuf_r+0x7c>)
 8003c16:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c18:	89a3      	ldrh	r3, [r4, #12]
 8003c1a:	6020      	str	r0, [r4, #0]
 8003c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c20:	81a3      	strh	r3, [r4, #12]
 8003c22:	9b00      	ldr	r3, [sp, #0]
 8003c24:	6120      	str	r0, [r4, #16]
 8003c26:	6163      	str	r3, [r4, #20]
 8003c28:	9b01      	ldr	r3, [sp, #4]
 8003c2a:	b15b      	cbz	r3, 8003c44 <__smakebuf_r+0x74>
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c32:	f000 f971 	bl	8003f18 <_isatty_r>
 8003c36:	b128      	cbz	r0, 8003c44 <__smakebuf_r+0x74>
 8003c38:	89a3      	ldrh	r3, [r4, #12]
 8003c3a:	f023 0303 	bic.w	r3, r3, #3
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	81a3      	strh	r3, [r4, #12]
 8003c44:	89a0      	ldrh	r0, [r4, #12]
 8003c46:	4305      	orrs	r5, r0
 8003c48:	81a5      	strh	r5, [r4, #12]
 8003c4a:	e7cd      	b.n	8003be8 <__smakebuf_r+0x18>
 8003c4c:	080039dd 	.word	0x080039dd

08003c50 <_free_r>:
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	4605      	mov	r5, r0
 8003c54:	2900      	cmp	r1, #0
 8003c56:	d040      	beq.n	8003cda <_free_r+0x8a>
 8003c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c5c:	1f0c      	subs	r4, r1, #4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	bfb8      	it	lt
 8003c62:	18e4      	addlt	r4, r4, r3
 8003c64:	f000 f97a 	bl	8003f5c <__malloc_lock>
 8003c68:	4a1c      	ldr	r2, [pc, #112]	; (8003cdc <_free_r+0x8c>)
 8003c6a:	6813      	ldr	r3, [r2, #0]
 8003c6c:	b933      	cbnz	r3, 8003c7c <_free_r+0x2c>
 8003c6e:	6063      	str	r3, [r4, #4]
 8003c70:	6014      	str	r4, [r2, #0]
 8003c72:	4628      	mov	r0, r5
 8003c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c78:	f000 b976 	b.w	8003f68 <__malloc_unlock>
 8003c7c:	42a3      	cmp	r3, r4
 8003c7e:	d908      	bls.n	8003c92 <_free_r+0x42>
 8003c80:	6820      	ldr	r0, [r4, #0]
 8003c82:	1821      	adds	r1, r4, r0
 8003c84:	428b      	cmp	r3, r1
 8003c86:	bf01      	itttt	eq
 8003c88:	6819      	ldreq	r1, [r3, #0]
 8003c8a:	685b      	ldreq	r3, [r3, #4]
 8003c8c:	1809      	addeq	r1, r1, r0
 8003c8e:	6021      	streq	r1, [r4, #0]
 8003c90:	e7ed      	b.n	8003c6e <_free_r+0x1e>
 8003c92:	461a      	mov	r2, r3
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	b10b      	cbz	r3, 8003c9c <_free_r+0x4c>
 8003c98:	42a3      	cmp	r3, r4
 8003c9a:	d9fa      	bls.n	8003c92 <_free_r+0x42>
 8003c9c:	6811      	ldr	r1, [r2, #0]
 8003c9e:	1850      	adds	r0, r2, r1
 8003ca0:	42a0      	cmp	r0, r4
 8003ca2:	d10b      	bne.n	8003cbc <_free_r+0x6c>
 8003ca4:	6820      	ldr	r0, [r4, #0]
 8003ca6:	4401      	add	r1, r0
 8003ca8:	1850      	adds	r0, r2, r1
 8003caa:	4283      	cmp	r3, r0
 8003cac:	6011      	str	r1, [r2, #0]
 8003cae:	d1e0      	bne.n	8003c72 <_free_r+0x22>
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4401      	add	r1, r0
 8003cb6:	6011      	str	r1, [r2, #0]
 8003cb8:	6053      	str	r3, [r2, #4]
 8003cba:	e7da      	b.n	8003c72 <_free_r+0x22>
 8003cbc:	d902      	bls.n	8003cc4 <_free_r+0x74>
 8003cbe:	230c      	movs	r3, #12
 8003cc0:	602b      	str	r3, [r5, #0]
 8003cc2:	e7d6      	b.n	8003c72 <_free_r+0x22>
 8003cc4:	6820      	ldr	r0, [r4, #0]
 8003cc6:	1821      	adds	r1, r4, r0
 8003cc8:	428b      	cmp	r3, r1
 8003cca:	bf01      	itttt	eq
 8003ccc:	6819      	ldreq	r1, [r3, #0]
 8003cce:	685b      	ldreq	r3, [r3, #4]
 8003cd0:	1809      	addeq	r1, r1, r0
 8003cd2:	6021      	streq	r1, [r4, #0]
 8003cd4:	6063      	str	r3, [r4, #4]
 8003cd6:	6054      	str	r4, [r2, #4]
 8003cd8:	e7cb      	b.n	8003c72 <_free_r+0x22>
 8003cda:	bd38      	pop	{r3, r4, r5, pc}
 8003cdc:	20000170 	.word	0x20000170

08003ce0 <sbrk_aligned>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	4e0e      	ldr	r6, [pc, #56]	; (8003d1c <sbrk_aligned+0x3c>)
 8003ce4:	460c      	mov	r4, r1
 8003ce6:	6831      	ldr	r1, [r6, #0]
 8003ce8:	4605      	mov	r5, r0
 8003cea:	b911      	cbnz	r1, 8003cf2 <sbrk_aligned+0x12>
 8003cec:	f000 f88c 	bl	8003e08 <_sbrk_r>
 8003cf0:	6030      	str	r0, [r6, #0]
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	f000 f887 	bl	8003e08 <_sbrk_r>
 8003cfa:	1c43      	adds	r3, r0, #1
 8003cfc:	d00a      	beq.n	8003d14 <sbrk_aligned+0x34>
 8003cfe:	1cc4      	adds	r4, r0, #3
 8003d00:	f024 0403 	bic.w	r4, r4, #3
 8003d04:	42a0      	cmp	r0, r4
 8003d06:	d007      	beq.n	8003d18 <sbrk_aligned+0x38>
 8003d08:	1a21      	subs	r1, r4, r0
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	f000 f87c 	bl	8003e08 <_sbrk_r>
 8003d10:	3001      	adds	r0, #1
 8003d12:	d101      	bne.n	8003d18 <sbrk_aligned+0x38>
 8003d14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003d18:	4620      	mov	r0, r4
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
 8003d1c:	20000174 	.word	0x20000174

08003d20 <_malloc_r>:
 8003d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d24:	1ccd      	adds	r5, r1, #3
 8003d26:	f025 0503 	bic.w	r5, r5, #3
 8003d2a:	3508      	adds	r5, #8
 8003d2c:	2d0c      	cmp	r5, #12
 8003d2e:	bf38      	it	cc
 8003d30:	250c      	movcc	r5, #12
 8003d32:	2d00      	cmp	r5, #0
 8003d34:	4607      	mov	r7, r0
 8003d36:	db01      	blt.n	8003d3c <_malloc_r+0x1c>
 8003d38:	42a9      	cmp	r1, r5
 8003d3a:	d905      	bls.n	8003d48 <_malloc_r+0x28>
 8003d3c:	230c      	movs	r3, #12
 8003d3e:	2600      	movs	r6, #0
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	4630      	mov	r0, r6
 8003d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d48:	4e2e      	ldr	r6, [pc, #184]	; (8003e04 <_malloc_r+0xe4>)
 8003d4a:	f000 f907 	bl	8003f5c <__malloc_lock>
 8003d4e:	6833      	ldr	r3, [r6, #0]
 8003d50:	461c      	mov	r4, r3
 8003d52:	bb34      	cbnz	r4, 8003da2 <_malloc_r+0x82>
 8003d54:	4629      	mov	r1, r5
 8003d56:	4638      	mov	r0, r7
 8003d58:	f7ff ffc2 	bl	8003ce0 <sbrk_aligned>
 8003d5c:	1c43      	adds	r3, r0, #1
 8003d5e:	4604      	mov	r4, r0
 8003d60:	d14d      	bne.n	8003dfe <_malloc_r+0xde>
 8003d62:	6834      	ldr	r4, [r6, #0]
 8003d64:	4626      	mov	r6, r4
 8003d66:	2e00      	cmp	r6, #0
 8003d68:	d140      	bne.n	8003dec <_malloc_r+0xcc>
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	4631      	mov	r1, r6
 8003d6e:	4638      	mov	r0, r7
 8003d70:	eb04 0803 	add.w	r8, r4, r3
 8003d74:	f000 f848 	bl	8003e08 <_sbrk_r>
 8003d78:	4580      	cmp	r8, r0
 8003d7a:	d13a      	bne.n	8003df2 <_malloc_r+0xd2>
 8003d7c:	6821      	ldr	r1, [r4, #0]
 8003d7e:	3503      	adds	r5, #3
 8003d80:	1a6d      	subs	r5, r5, r1
 8003d82:	f025 0503 	bic.w	r5, r5, #3
 8003d86:	3508      	adds	r5, #8
 8003d88:	2d0c      	cmp	r5, #12
 8003d8a:	bf38      	it	cc
 8003d8c:	250c      	movcc	r5, #12
 8003d8e:	4638      	mov	r0, r7
 8003d90:	4629      	mov	r1, r5
 8003d92:	f7ff ffa5 	bl	8003ce0 <sbrk_aligned>
 8003d96:	3001      	adds	r0, #1
 8003d98:	d02b      	beq.n	8003df2 <_malloc_r+0xd2>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	442b      	add	r3, r5
 8003d9e:	6023      	str	r3, [r4, #0]
 8003da0:	e00e      	b.n	8003dc0 <_malloc_r+0xa0>
 8003da2:	6822      	ldr	r2, [r4, #0]
 8003da4:	1b52      	subs	r2, r2, r5
 8003da6:	d41e      	bmi.n	8003de6 <_malloc_r+0xc6>
 8003da8:	2a0b      	cmp	r2, #11
 8003daa:	d916      	bls.n	8003dda <_malloc_r+0xba>
 8003dac:	1961      	adds	r1, r4, r5
 8003dae:	42a3      	cmp	r3, r4
 8003db0:	6025      	str	r5, [r4, #0]
 8003db2:	bf18      	it	ne
 8003db4:	6059      	strne	r1, [r3, #4]
 8003db6:	6863      	ldr	r3, [r4, #4]
 8003db8:	bf08      	it	eq
 8003dba:	6031      	streq	r1, [r6, #0]
 8003dbc:	5162      	str	r2, [r4, r5]
 8003dbe:	604b      	str	r3, [r1, #4]
 8003dc0:	4638      	mov	r0, r7
 8003dc2:	f104 060b 	add.w	r6, r4, #11
 8003dc6:	f000 f8cf 	bl	8003f68 <__malloc_unlock>
 8003dca:	f026 0607 	bic.w	r6, r6, #7
 8003dce:	1d23      	adds	r3, r4, #4
 8003dd0:	1af2      	subs	r2, r6, r3
 8003dd2:	d0b6      	beq.n	8003d42 <_malloc_r+0x22>
 8003dd4:	1b9b      	subs	r3, r3, r6
 8003dd6:	50a3      	str	r3, [r4, r2]
 8003dd8:	e7b3      	b.n	8003d42 <_malloc_r+0x22>
 8003dda:	6862      	ldr	r2, [r4, #4]
 8003ddc:	42a3      	cmp	r3, r4
 8003dde:	bf0c      	ite	eq
 8003de0:	6032      	streq	r2, [r6, #0]
 8003de2:	605a      	strne	r2, [r3, #4]
 8003de4:	e7ec      	b.n	8003dc0 <_malloc_r+0xa0>
 8003de6:	4623      	mov	r3, r4
 8003de8:	6864      	ldr	r4, [r4, #4]
 8003dea:	e7b2      	b.n	8003d52 <_malloc_r+0x32>
 8003dec:	4634      	mov	r4, r6
 8003dee:	6876      	ldr	r6, [r6, #4]
 8003df0:	e7b9      	b.n	8003d66 <_malloc_r+0x46>
 8003df2:	230c      	movs	r3, #12
 8003df4:	4638      	mov	r0, r7
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	f000 f8b6 	bl	8003f68 <__malloc_unlock>
 8003dfc:	e7a1      	b.n	8003d42 <_malloc_r+0x22>
 8003dfe:	6025      	str	r5, [r4, #0]
 8003e00:	e7de      	b.n	8003dc0 <_malloc_r+0xa0>
 8003e02:	bf00      	nop
 8003e04:	20000170 	.word	0x20000170

08003e08 <_sbrk_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	4d05      	ldr	r5, [pc, #20]	; (8003e24 <_sbrk_r+0x1c>)
 8003e0e:	4604      	mov	r4, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	602b      	str	r3, [r5, #0]
 8003e14:	f7fc feca 	bl	8000bac <_sbrk>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_sbrk_r+0x1a>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_sbrk_r+0x1a>
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	20000178 	.word	0x20000178

08003e28 <__sread>:
 8003e28:	b510      	push	{r4, lr}
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e30:	f000 f8a0 	bl	8003f74 <_read_r>
 8003e34:	2800      	cmp	r0, #0
 8003e36:	bfab      	itete	ge
 8003e38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e3a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e3c:	181b      	addge	r3, r3, r0
 8003e3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e42:	bfac      	ite	ge
 8003e44:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e46:	81a3      	strhlt	r3, [r4, #12]
 8003e48:	bd10      	pop	{r4, pc}

08003e4a <__swrite>:
 8003e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e4e:	461f      	mov	r7, r3
 8003e50:	898b      	ldrh	r3, [r1, #12]
 8003e52:	4605      	mov	r5, r0
 8003e54:	05db      	lsls	r3, r3, #23
 8003e56:	460c      	mov	r4, r1
 8003e58:	4616      	mov	r6, r2
 8003e5a:	d505      	bpl.n	8003e68 <__swrite+0x1e>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e64:	f000 f868 	bl	8003f38 <_lseek_r>
 8003e68:	89a3      	ldrh	r3, [r4, #12]
 8003e6a:	4632      	mov	r2, r6
 8003e6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e70:	81a3      	strh	r3, [r4, #12]
 8003e72:	4628      	mov	r0, r5
 8003e74:	463b      	mov	r3, r7
 8003e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7e:	f000 b817 	b.w	8003eb0 <_write_r>

08003e82 <__sseek>:
 8003e82:	b510      	push	{r4, lr}
 8003e84:	460c      	mov	r4, r1
 8003e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e8a:	f000 f855 	bl	8003f38 <_lseek_r>
 8003e8e:	1c43      	adds	r3, r0, #1
 8003e90:	89a3      	ldrh	r3, [r4, #12]
 8003e92:	bf15      	itete	ne
 8003e94:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e9e:	81a3      	strheq	r3, [r4, #12]
 8003ea0:	bf18      	it	ne
 8003ea2:	81a3      	strhne	r3, [r4, #12]
 8003ea4:	bd10      	pop	{r4, pc}

08003ea6 <__sclose>:
 8003ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eaa:	f000 b813 	b.w	8003ed4 <_close_r>
	...

08003eb0 <_write_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	2200      	movs	r2, #0
 8003eba:	4d05      	ldr	r5, [pc, #20]	; (8003ed0 <_write_r+0x20>)
 8003ebc:	602a      	str	r2, [r5, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f7fc fe2e 	bl	8000b20 <_write>
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	d102      	bne.n	8003ece <_write_r+0x1e>
 8003ec8:	682b      	ldr	r3, [r5, #0]
 8003eca:	b103      	cbz	r3, 8003ece <_write_r+0x1e>
 8003ecc:	6023      	str	r3, [r4, #0]
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
 8003ed0:	20000178 	.word	0x20000178

08003ed4 <_close_r>:
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	4d05      	ldr	r5, [pc, #20]	; (8003ef0 <_close_r+0x1c>)
 8003eda:	4604      	mov	r4, r0
 8003edc:	4608      	mov	r0, r1
 8003ede:	602b      	str	r3, [r5, #0]
 8003ee0:	f7fc fe34 	bl	8000b4c <_close>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d102      	bne.n	8003eee <_close_r+0x1a>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	b103      	cbz	r3, 8003eee <_close_r+0x1a>
 8003eec:	6023      	str	r3, [r4, #0]
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	20000178 	.word	0x20000178

08003ef4 <_fstat_r>:
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	4d06      	ldr	r5, [pc, #24]	; (8003f14 <_fstat_r+0x20>)
 8003efa:	4604      	mov	r4, r0
 8003efc:	4608      	mov	r0, r1
 8003efe:	4611      	mov	r1, r2
 8003f00:	602b      	str	r3, [r5, #0]
 8003f02:	f7fc fe2e 	bl	8000b62 <_fstat>
 8003f06:	1c43      	adds	r3, r0, #1
 8003f08:	d102      	bne.n	8003f10 <_fstat_r+0x1c>
 8003f0a:	682b      	ldr	r3, [r5, #0]
 8003f0c:	b103      	cbz	r3, 8003f10 <_fstat_r+0x1c>
 8003f0e:	6023      	str	r3, [r4, #0]
 8003f10:	bd38      	pop	{r3, r4, r5, pc}
 8003f12:	bf00      	nop
 8003f14:	20000178 	.word	0x20000178

08003f18 <_isatty_r>:
 8003f18:	b538      	push	{r3, r4, r5, lr}
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	4d05      	ldr	r5, [pc, #20]	; (8003f34 <_isatty_r+0x1c>)
 8003f1e:	4604      	mov	r4, r0
 8003f20:	4608      	mov	r0, r1
 8003f22:	602b      	str	r3, [r5, #0]
 8003f24:	f7fc fe2c 	bl	8000b80 <_isatty>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d102      	bne.n	8003f32 <_isatty_r+0x1a>
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	b103      	cbz	r3, 8003f32 <_isatty_r+0x1a>
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	bd38      	pop	{r3, r4, r5, pc}
 8003f34:	20000178 	.word	0x20000178

08003f38 <_lseek_r>:
 8003f38:	b538      	push	{r3, r4, r5, lr}
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	2200      	movs	r2, #0
 8003f42:	4d05      	ldr	r5, [pc, #20]	; (8003f58 <_lseek_r+0x20>)
 8003f44:	602a      	str	r2, [r5, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f7fc fe24 	bl	8000b94 <_lseek>
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d102      	bne.n	8003f56 <_lseek_r+0x1e>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	b103      	cbz	r3, 8003f56 <_lseek_r+0x1e>
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	bd38      	pop	{r3, r4, r5, pc}
 8003f58:	20000178 	.word	0x20000178

08003f5c <__malloc_lock>:
 8003f5c:	4801      	ldr	r0, [pc, #4]	; (8003f64 <__malloc_lock+0x8>)
 8003f5e:	f7ff be0f 	b.w	8003b80 <__retarget_lock_acquire_recursive>
 8003f62:	bf00      	nop
 8003f64:	2000016c 	.word	0x2000016c

08003f68 <__malloc_unlock>:
 8003f68:	4801      	ldr	r0, [pc, #4]	; (8003f70 <__malloc_unlock+0x8>)
 8003f6a:	f7ff be0a 	b.w	8003b82 <__retarget_lock_release_recursive>
 8003f6e:	bf00      	nop
 8003f70:	2000016c 	.word	0x2000016c

08003f74 <_read_r>:
 8003f74:	b538      	push	{r3, r4, r5, lr}
 8003f76:	4604      	mov	r4, r0
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	4d05      	ldr	r5, [pc, #20]	; (8003f94 <_read_r+0x20>)
 8003f80:	602a      	str	r2, [r5, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f7fc fdae 	bl	8000ae4 <_read>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d102      	bne.n	8003f92 <_read_r+0x1e>
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	b103      	cbz	r3, 8003f92 <_read_r+0x1e>
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	20000178 	.word	0x20000178

08003f98 <_init>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	bf00      	nop
 8003f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9e:	bc08      	pop	{r3}
 8003fa0:	469e      	mov	lr, r3
 8003fa2:	4770      	bx	lr

08003fa4 <_fini>:
 8003fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa6:	bf00      	nop
 8003fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003faa:	bc08      	pop	{r3}
 8003fac:	469e      	mov	lr, r3
 8003fae:	4770      	bx	lr
