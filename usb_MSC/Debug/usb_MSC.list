
usb_MSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008810  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080089cc  080089cc  000189cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a74  08008a74  00020174  2**0
                  CONTENTS
  4 .ARM          00000000  08008a74  08008a74  00020174  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a74  08008a74  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a74  08008a74  00018a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a78  08008a78  00018a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08008a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010c78  20000174  08008bf0  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010dec  08008bf0  00020dec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001198f  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032f2  00000000  00000000  00031b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00034e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00035d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cba1  00000000  00000000  00036af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d95  00000000  00000000  00063699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcf5c  00000000  00000000  0007742e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017438a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bfc  00000000  00000000  001743dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000174 	.word	0x20000174
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080089b4 	.word	0x080089b4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000178 	.word	0x20000178
 80001f8:	080089b4 	.word	0x080089b4

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 f917 	bl	8000432 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f805 	bl	8000212 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f856 	bl	80002b8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800020c:	f007 fd66 	bl	8007cdc <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000210:	e7fe      	b.n	8000210 <main+0x14>

08000212 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000212:	b580      	push	{r7, lr}
 8000214:	b096      	sub	sp, #88	; 0x58
 8000216:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000218:	f107 0314 	add.w	r3, r7, #20
 800021c:	2244      	movs	r2, #68	; 0x44
 800021e:	2100      	movs	r1, #0
 8000220:	4618      	mov	r0, r3
 8000222:	f008 fbbf 	bl	80089a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000226:	463b      	mov	r3, r7
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]
 800022e:	609a      	str	r2, [r3, #8]
 8000230:	60da      	str	r2, [r3, #12]
 8000232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000234:	2000      	movs	r0, #0
 8000236:	f001 fe45 	bl	8001ec4 <HAL_PWREx_ControlVoltageScaling>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000240:	f000 f85e 	bl	8000300 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000244:	2322      	movs	r3, #34	; 0x22
 8000246:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800024c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000252:	2340      	movs	r3, #64	; 0x40
 8000254:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800025a:	2302      	movs	r3, #2
 800025c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800025e:	2302      	movs	r3, #2
 8000260:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000262:	231e      	movs	r3, #30
 8000264:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000266:	2302      	movs	r3, #2
 8000268:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800026a:	2302      	movs	r3, #2
 800026c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800026e:	2302      	movs	r3, #2
 8000270:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000272:	f107 0314 	add.w	r3, r7, #20
 8000276:	4618      	mov	r0, r3
 8000278:	f001 fed8 	bl	800202c <HAL_RCC_OscConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000282:	f000 f83d 	bl	8000300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000286:	230f      	movs	r3, #15
 8000288:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028a:	2303      	movs	r3, #3
 800028c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800029c:	463b      	mov	r3, r7
 800029e:	2105      	movs	r1, #5
 80002a0:	4618      	mov	r0, r3
 80002a2:	f002 fadd 	bl	8002860 <HAL_RCC_ClockConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80002ac:	f000 f828 	bl	8000300 <Error_Handler>
  }
}
 80002b0:	bf00      	nop
 80002b2:	3758      	adds	r7, #88	; 0x58
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002be:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <MX_GPIO_Init+0x44>)
 80002c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c2:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <MX_GPIO_Init+0x44>)
 80002c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <MX_GPIO_Init+0x44>)
 80002cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <MX_GPIO_Init+0x44>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002da:	4a08      	ldr	r2, [pc, #32]	; (80002fc <MX_GPIO_Init+0x44>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e2:	4b06      	ldr	r3, [pc, #24]	; (80002fc <MX_GPIO_Init+0x44>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	603b      	str	r3, [r7, #0]
 80002ec:	683b      	ldr	r3, [r7, #0]

}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40021000 	.word	0x40021000

08000300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000304:	b672      	cpsid	i
}
 8000306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000308:	e7fe      	b.n	8000308 <Error_Handler+0x8>
	...

0800030c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000312:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <HAL_MspInit+0x44>)
 8000314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000316:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <HAL_MspInit+0x44>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6613      	str	r3, [r2, #96]	; 0x60
 800031e:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <HAL_MspInit+0x44>)
 8000320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <HAL_MspInit+0x44>)
 800032c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800032e:	4a08      	ldr	r2, [pc, #32]	; (8000350 <HAL_MspInit+0x44>)
 8000330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000334:	6593      	str	r3, [r2, #88]	; 0x58
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <HAL_MspInit+0x44>)
 8000338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800033a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800033e:	603b      	str	r3, [r7, #0]
 8000340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000

08000354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000358:	e7fe      	b.n	8000358 <NMI_Handler+0x4>

0800035a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800035e:	e7fe      	b.n	800035e <HardFault_Handler+0x4>

08000360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000364:	e7fe      	b.n	8000364 <MemManage_Handler+0x4>

08000366 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800036a:	e7fe      	b.n	800036a <BusFault_Handler+0x4>

0800036c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000370:	e7fe      	b.n	8000370 <UsageFault_Handler+0x4>

08000372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr

0800038e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003a0:	f000 f89c 	bl	80004dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80003ac:	4802      	ldr	r0, [pc, #8]	; (80003b8 <OTG_FS_IRQHandler+0x10>)
 80003ae:	f000 fcd0 	bl	8000d52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20010668 	.word	0x20010668

080003bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <SystemInit+0x20>)
 80003c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003c6:	4a05      	ldr	r2, [pc, #20]	; (80003dc <SystemInit+0x20>)
 80003c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	e000ed00 	.word	0xe000ed00

080003e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000418 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003e4:	f7ff ffea 	bl	80003bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e8:	480c      	ldr	r0, [pc, #48]	; (800041c <LoopForever+0x6>)
  ldr r1, =_edata
 80003ea:	490d      	ldr	r1, [pc, #52]	; (8000420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003ec:	4a0d      	ldr	r2, [pc, #52]	; (8000424 <LoopForever+0xe>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f0:	e002      	b.n	80003f8 <LoopCopyDataInit>

080003f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f6:	3304      	adds	r3, #4

080003f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003fc:	d3f9      	bcc.n	80003f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fe:	4a0a      	ldr	r2, [pc, #40]	; (8000428 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000400:	4c0a      	ldr	r4, [pc, #40]	; (800042c <LoopForever+0x16>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000404:	e001      	b.n	800040a <LoopFillZerobss>

08000406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000408:	3204      	adds	r2, #4

0800040a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800040c:	d3fb      	bcc.n	8000406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800040e:	f008 fa97 	bl	8008940 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000412:	f7ff fef3 	bl	80001fc <main>

08000416 <LoopForever>:

LoopForever:
    b LoopForever
 8000416:	e7fe      	b.n	8000416 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000418:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800041c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000420:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000424:	08008a7c 	.word	0x08008a7c
  ldr r2, =_sbss
 8000428:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 800042c:	20010dec 	.word	0x20010dec

08000430 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000430:	e7fe      	b.n	8000430 <ADC1_IRQHandler>

08000432 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000438:	2300      	movs	r3, #0
 800043a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800043c:	2003      	movs	r0, #3
 800043e:	f000 f961 	bl	8000704 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000442:	2000      	movs	r0, #0
 8000444:	f000 f80e 	bl	8000464 <HAL_InitTick>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d002      	beq.n	8000454 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800044e:	2301      	movs	r3, #1
 8000450:	71fb      	strb	r3, [r7, #7]
 8000452:	e001      	b.n	8000458 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000454:	f7ff ff5a 	bl	800030c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000458:	79fb      	ldrb	r3, [r7, #7]
}
 800045a:	4618      	mov	r0, r3
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800046c:	2300      	movs	r3, #0
 800046e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000470:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <HAL_InitTick+0x6c>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d023      	beq.n	80004c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000478:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <HAL_InitTick+0x70>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <HAL_InitTick+0x6c>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	4619      	mov	r1, r3
 8000482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000486:	fbb3 f3f1 	udiv	r3, r3, r1
 800048a:	fbb2 f3f3 	udiv	r3, r2, r3
 800048e:	4618      	mov	r0, r3
 8000490:	f000 f96d 	bl	800076e <HAL_SYSTICK_Config>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d10f      	bne.n	80004ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2b0f      	cmp	r3, #15
 800049e:	d809      	bhi.n	80004b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004a0:	2200      	movs	r2, #0
 80004a2:	6879      	ldr	r1, [r7, #4]
 80004a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004a8:	f000 f937 	bl	800071a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004ac:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <HAL_InitTick+0x74>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	6013      	str	r3, [r2, #0]
 80004b2:	e007      	b.n	80004c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80004b4:	2301      	movs	r3, #1
 80004b6:	73fb      	strb	r3, [r7, #15]
 80004b8:	e004      	b.n	80004c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004ba:	2301      	movs	r3, #1
 80004bc:	73fb      	strb	r3, [r7, #15]
 80004be:	e001      	b.n	80004c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004c0:	2301      	movs	r3, #1
 80004c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000008 	.word	0x20000008
 80004d4:	20000000 	.word	0x20000000
 80004d8:	20000004 	.word	0x20000004

080004dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_IncTick+0x20>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	461a      	mov	r2, r3
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <HAL_IncTick+0x24>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4413      	add	r3, r2
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <HAL_IncTick+0x24>)
 80004ee:	6013      	str	r3, [r2, #0]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000008 	.word	0x20000008
 8000500:	20000190 	.word	0x20000190

08000504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  return uwTick;
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <HAL_GetTick+0x14>)
 800050a:	681b      	ldr	r3, [r3, #0]
}
 800050c:	4618      	mov	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	20000190 	.word	0x20000190

0800051c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000524:	f7ff ffee 	bl	8000504 <HAL_GetTick>
 8000528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000534:	d005      	beq.n	8000542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <HAL_Delay+0x44>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	461a      	mov	r2, r3
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	4413      	add	r3, r2
 8000540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000542:	bf00      	nop
 8000544:	f7ff ffde 	bl	8000504 <HAL_GetTick>
 8000548:	4602      	mov	r2, r0
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	1ad3      	subs	r3, r2, r3
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	429a      	cmp	r2, r3
 8000552:	d8f7      	bhi.n	8000544 <HAL_Delay+0x28>
  {
  }
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000008 	.word	0x20000008

08000564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f003 0307 	and.w	r3, r3, #7
 8000572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000596:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	60d3      	str	r3, [r2, #12]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_GetPriorityGrouping+0x18>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	f003 0307 	and.w	r3, r3, #7
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	db0b      	blt.n	80005f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 021f 	and.w	r2, r3, #31
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <__NVIC_EnableIRQ+0x38>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	095b      	lsrs	r3, r3, #5
 80005e8:	2001      	movs	r0, #1
 80005ea:	fa00 f202 	lsl.w	r2, r0, r2
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e100 	.word	0xe000e100

08000604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	db0a      	blt.n	800062e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <__NVIC_SetPriority+0x4c>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	440b      	add	r3, r1
 8000628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800062c:	e00a      	b.n	8000644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4908      	ldr	r1, [pc, #32]	; (8000654 <__NVIC_SetPriority+0x50>)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	3b04      	subs	r3, #4
 800063c:	0112      	lsls	r2, r2, #4
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	440b      	add	r3, r1
 8000642:	761a      	strb	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000658:	b480      	push	{r7}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	f1c3 0307 	rsb	r3, r3, #7
 8000672:	2b04      	cmp	r3, #4
 8000674:	bf28      	it	cs
 8000676:	2304      	movcs	r3, #4
 8000678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3304      	adds	r3, #4
 800067e:	2b06      	cmp	r3, #6
 8000680:	d902      	bls.n	8000688 <NVIC_EncodePriority+0x30>
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3b03      	subs	r3, #3
 8000686:	e000      	b.n	800068a <NVIC_EncodePriority+0x32>
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43da      	mvns	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	401a      	ands	r2, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43d9      	mvns	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	4313      	orrs	r3, r2
         );
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3724      	adds	r7, #36	; 0x24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006d0:	d301      	bcc.n	80006d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006d2:	2301      	movs	r3, #1
 80006d4:	e00f      	b.n	80006f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <SysTick_Config+0x40>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3b01      	subs	r3, #1
 80006dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006de:	210f      	movs	r1, #15
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e4:	f7ff ff8e 	bl	8000604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <SysTick_Config+0x40>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <SysTick_Config+0x40>)
 80006f0:	2207      	movs	r2, #7
 80006f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	e000e010 	.word	0xe000e010

08000704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ff29 	bl	8000564 <__NVIC_SetPriorityGrouping>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b086      	sub	sp, #24
 800071e:	af00      	add	r7, sp, #0
 8000720:	4603      	mov	r3, r0
 8000722:	60b9      	str	r1, [r7, #8]
 8000724:	607a      	str	r2, [r7, #4]
 8000726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800072c:	f7ff ff3e 	bl	80005ac <__NVIC_GetPriorityGrouping>
 8000730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	68b9      	ldr	r1, [r7, #8]
 8000736:	6978      	ldr	r0, [r7, #20]
 8000738:	f7ff ff8e 	bl	8000658 <NVIC_EncodePriority>
 800073c:	4602      	mov	r2, r0
 800073e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff5d 	bl	8000604 <__NVIC_SetPriority>
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff31 	bl	80005c8 <__NVIC_EnableIRQ>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ffa2 	bl	80006c0 <SysTick_Config>
 800077c:	4603      	mov	r3, r0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000788:	b480      	push	{r7}
 800078a:	b087      	sub	sp, #28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000796:	e166      	b.n	8000a66 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	2101      	movs	r1, #1
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	fa01 f303 	lsl.w	r3, r1, r3
 80007a4:	4013      	ands	r3, r2
 80007a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	f000 8158 	beq.w	8000a60 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	f003 0303 	and.w	r3, r3, #3
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d005      	beq.n	80007c8 <HAL_GPIO_Init+0x40>
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f003 0303 	and.w	r3, r3, #3
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d130      	bne.n	800082a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	2203      	movs	r2, #3
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	43db      	mvns	r3, r3
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	4013      	ands	r3, r2
 80007de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	68da      	ldr	r2, [r3, #12]
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007fe:	2201      	movs	r2, #1
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	43db      	mvns	r3, r3
 8000808:	693a      	ldr	r2, [r7, #16]
 800080a:	4013      	ands	r3, r2
 800080c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	091b      	lsrs	r3, r3, #4
 8000814:	f003 0201 	and.w	r2, r3, #1
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	4313      	orrs	r3, r2
 8000822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f003 0303 	and.w	r3, r3, #3
 8000832:	2b03      	cmp	r3, #3
 8000834:	d017      	beq.n	8000866 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	2203      	movs	r2, #3
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	43db      	mvns	r3, r3
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	4013      	ands	r3, r2
 800084c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	689a      	ldr	r2, [r3, #8]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	4313      	orrs	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f003 0303 	and.w	r3, r3, #3
 800086e:	2b02      	cmp	r3, #2
 8000870:	d123      	bne.n	80008ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	08da      	lsrs	r2, r3, #3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3208      	adds	r2, #8
 800087a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800087e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	220f      	movs	r2, #15
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4013      	ands	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	691a      	ldr	r2, [r3, #16]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	f003 0307 	and.w	r3, r3, #7
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	08da      	lsrs	r2, r3, #3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3208      	adds	r2, #8
 80008b4:	6939      	ldr	r1, [r7, #16]
 80008b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	2203      	movs	r2, #3
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43db      	mvns	r3, r3
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	4013      	ands	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	f003 0203 	and.w	r2, r3, #3
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f000 80b2 	beq.w	8000a60 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fc:	4b61      	ldr	r3, [pc, #388]	; (8000a84 <HAL_GPIO_Init+0x2fc>)
 80008fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000900:	4a60      	ldr	r2, [pc, #384]	; (8000a84 <HAL_GPIO_Init+0x2fc>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6613      	str	r3, [r2, #96]	; 0x60
 8000908:	4b5e      	ldr	r3, [pc, #376]	; (8000a84 <HAL_GPIO_Init+0x2fc>)
 800090a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000914:	4a5c      	ldr	r2, [pc, #368]	; (8000a88 <HAL_GPIO_Init+0x300>)
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	089b      	lsrs	r3, r3, #2
 800091a:	3302      	adds	r3, #2
 800091c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000920:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	f003 0303 	and.w	r3, r3, #3
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	220f      	movs	r2, #15
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	4013      	ands	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800093e:	d02b      	beq.n	8000998 <HAL_GPIO_Init+0x210>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a52      	ldr	r2, [pc, #328]	; (8000a8c <HAL_GPIO_Init+0x304>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d025      	beq.n	8000994 <HAL_GPIO_Init+0x20c>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a51      	ldr	r2, [pc, #324]	; (8000a90 <HAL_GPIO_Init+0x308>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d01f      	beq.n	8000990 <HAL_GPIO_Init+0x208>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a50      	ldr	r2, [pc, #320]	; (8000a94 <HAL_GPIO_Init+0x30c>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d019      	beq.n	800098c <HAL_GPIO_Init+0x204>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a4f      	ldr	r2, [pc, #316]	; (8000a98 <HAL_GPIO_Init+0x310>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d013      	beq.n	8000988 <HAL_GPIO_Init+0x200>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a4e      	ldr	r2, [pc, #312]	; (8000a9c <HAL_GPIO_Init+0x314>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d00d      	beq.n	8000984 <HAL_GPIO_Init+0x1fc>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a4d      	ldr	r2, [pc, #308]	; (8000aa0 <HAL_GPIO_Init+0x318>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d007      	beq.n	8000980 <HAL_GPIO_Init+0x1f8>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a4c      	ldr	r2, [pc, #304]	; (8000aa4 <HAL_GPIO_Init+0x31c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d101      	bne.n	800097c <HAL_GPIO_Init+0x1f4>
 8000978:	2307      	movs	r3, #7
 800097a:	e00e      	b.n	800099a <HAL_GPIO_Init+0x212>
 800097c:	2308      	movs	r3, #8
 800097e:	e00c      	b.n	800099a <HAL_GPIO_Init+0x212>
 8000980:	2306      	movs	r3, #6
 8000982:	e00a      	b.n	800099a <HAL_GPIO_Init+0x212>
 8000984:	2305      	movs	r3, #5
 8000986:	e008      	b.n	800099a <HAL_GPIO_Init+0x212>
 8000988:	2304      	movs	r3, #4
 800098a:	e006      	b.n	800099a <HAL_GPIO_Init+0x212>
 800098c:	2303      	movs	r3, #3
 800098e:	e004      	b.n	800099a <HAL_GPIO_Init+0x212>
 8000990:	2302      	movs	r3, #2
 8000992:	e002      	b.n	800099a <HAL_GPIO_Init+0x212>
 8000994:	2301      	movs	r3, #1
 8000996:	e000      	b.n	800099a <HAL_GPIO_Init+0x212>
 8000998:	2300      	movs	r3, #0
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	f002 0203 	and.w	r2, r2, #3
 80009a0:	0092      	lsls	r2, r2, #2
 80009a2:	4093      	lsls	r3, r2
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009aa:	4937      	ldr	r1, [pc, #220]	; (8000a88 <HAL_GPIO_Init+0x300>)
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	3302      	adds	r3, #2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009b8:	4b3b      	ldr	r3, [pc, #236]	; (8000aa8 <HAL_GPIO_Init+0x320>)
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	43db      	mvns	r3, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009dc:	4a32      	ldr	r2, [pc, #200]	; (8000aa8 <HAL_GPIO_Init+0x320>)
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <HAL_GPIO_Init+0x320>)
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	43db      	mvns	r3, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a06:	4a28      	ldr	r2, [pc, #160]	; (8000aa8 <HAL_GPIO_Init+0x320>)
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <HAL_GPIO_Init+0x320>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a30:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <HAL_GPIO_Init+0x320>)
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_GPIO_Init+0x320>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a5a:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <HAL_GPIO_Init+0x320>)
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	3301      	adds	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f47f ae91 	bne.w	8000798 <HAL_GPIO_Init+0x10>
  }
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	371c      	adds	r7, #28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40010000 	.word	0x40010000
 8000a8c:	48000400 	.word	0x48000400
 8000a90:	48000800 	.word	0x48000800
 8000a94:	48000c00 	.word	0x48000c00
 8000a98:	48001000 	.word	0x48001000
 8000a9c:	48001400 	.word	0x48001400
 8000aa0:	48001800 	.word	0x48001800
 8000aa4:	48001c00 	.word	0x48001c00
 8000aa8:	40010400 	.word	0x40010400

08000aac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aae:	b08f      	sub	sp, #60	; 0x3c
 8000ab0:	af0a      	add	r7, sp, #40	; 0x28
 8000ab2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d101      	bne.n	8000abe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e116      	b.n	8000cec <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d106      	bne.n	8000ade <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f007 fac9 	bl	8008070 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d102      	bne.n	8000af8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 ff32 	bl	8003966 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	687e      	ldr	r6, [r7, #4]
 8000b0a:	466d      	mov	r5, sp
 8000b0c:	f106 0410 	add.w	r4, r6, #16
 8000b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b20:	1d33      	adds	r3, r6, #4
 8000b22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b24:	6838      	ldr	r0, [r7, #0]
 8000b26:	f002 fe45 	bl	80037b4 <USB_CoreInit>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d005      	beq.n	8000b3c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2202      	movs	r2, #2
 8000b34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e0d7      	b.n	8000cec <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 ff20 	bl	8003988 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	e04a      	b.n	8000be4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b4e:	7bfa      	ldrb	r2, [r7, #15]
 8000b50:	6879      	ldr	r1, [r7, #4]
 8000b52:	4613      	mov	r3, r2
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	333d      	adds	r3, #61	; 0x3d
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b62:	7bfa      	ldrb	r2, [r7, #15]
 8000b64:	6879      	ldr	r1, [r7, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	440b      	add	r3, r1
 8000b70:	333c      	adds	r3, #60	; 0x3c
 8000b72:	7bfa      	ldrb	r2, [r7, #15]
 8000b74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b76:	7bfa      	ldrb	r2, [r7, #15]
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	b298      	uxth	r0, r3
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	4413      	add	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	440b      	add	r3, r1
 8000b88:	3344      	adds	r3, #68	; 0x44
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b8e:	7bfa      	ldrb	r2, [r7, #15]
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	4613      	mov	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	4413      	add	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3340      	adds	r3, #64	; 0x40
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ba2:	7bfa      	ldrb	r2, [r7, #15]
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	4413      	add	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	440b      	add	r3, r1
 8000bb0:	3348      	adds	r3, #72	; 0x48
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bb6:	7bfa      	ldrb	r2, [r7, #15]
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	334c      	adds	r3, #76	; 0x4c
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bca:	7bfa      	ldrb	r2, [r7, #15]
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	3354      	adds	r3, #84	; 0x54
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	3301      	adds	r3, #1
 8000be2:	73fb      	strb	r3, [r7, #15]
 8000be4:	7bfa      	ldrb	r2, [r7, #15]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d3af      	bcc.n	8000b4e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e044      	b.n	8000c7e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000bf4:	7bfa      	ldrb	r2, [r7, #15]
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	440b      	add	r3, r1
 8000c02:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c0a:	7bfa      	ldrb	r2, [r7, #15]
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	440b      	add	r3, r1
 8000c18:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000c1c:	7bfa      	ldrb	r2, [r7, #15]
 8000c1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	4613      	mov	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	4413      	add	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c36:	7bfa      	ldrb	r2, [r7, #15]
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	4413      	add	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	440b      	add	r3, r1
 8000c44:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	4613      	mov	r3, r2
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	4413      	add	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	440b      	add	r3, r1
 8000c5a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c62:	7bfa      	ldrb	r2, [r7, #15]
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	4613      	mov	r3, r2
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	4413      	add	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	7bfa      	ldrb	r2, [r7, #15]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d3b5      	bcc.n	8000bf4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	687e      	ldr	r6, [r7, #4]
 8000c90:	466d      	mov	r5, sp
 8000c92:	f106 0410 	add.w	r4, r6, #16
 8000c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ca2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ca6:	1d33      	adds	r3, r6, #4
 8000ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000caa:	6838      	ldr	r0, [r7, #0]
 8000cac:	f002 feb8 	bl	8003a20 <USB_DevInit>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d005      	beq.n	8000cc2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2202      	movs	r2, #2
 8000cba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e014      	b.n	8000cec <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d102      	bne.n	8000ce0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f001 f8ae 	bl	8001e3c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 ff40 	bl	8004b6a <USB_DevDisconnect>

  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cf4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d101      	bne.n	8000d10 <HAL_PCD_Start+0x1c>
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	e01c      	b.n	8000d4a <HAL_PCD_Start+0x56>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2201      	movs	r2, #1
 8000d14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d105      	bne.n	8000d2c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f002 fe07 	bl	8003944 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f003 fef4 	bl	8004b28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d52:	b590      	push	{r4, r7, lr}
 8000d54:	b08d      	sub	sp, #52	; 0x34
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 ffb2 	bl	8004cd2 <USB_GetMode>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f040 847e 	bne.w	8001672 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f003 ff16 	bl	8004bac <USB_ReadInterrupts>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 8474 	beq.w	8001670 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f003 ff03 	bl	8004bac <USB_ReadInterrupts>
 8000da6:	4603      	mov	r3, r0
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d107      	bne.n	8000dc0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	695a      	ldr	r2, [r3, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f002 0202 	and.w	r2, r2, #2
 8000dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 fef1 	bl	8004bac <USB_ReadInterrupts>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	2b10      	cmp	r3, #16
 8000dd2:	d161      	bne.n	8000e98 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	699a      	ldr	r2, [r3, #24]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 0210 	bic.w	r2, r2, #16
 8000de2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	f003 020f 	and.w	r2, r3, #15
 8000df0:	4613      	mov	r3, r2
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	4413      	add	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	3304      	adds	r3, #4
 8000e02:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	0c5b      	lsrs	r3, r3, #17
 8000e08:	f003 030f 	and.w	r3, r3, #15
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d124      	bne.n	8000e5a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000e16:	4013      	ands	r3, r2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d035      	beq.n	8000e88 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	091b      	lsrs	r3, r3, #4
 8000e24:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	6a38      	ldr	r0, [r7, #32]
 8000e30:	f003 fd28 	bl	8004884 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	691a      	ldr	r2, [r3, #16]
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e40:	441a      	add	r2, r3
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	6a1a      	ldr	r2, [r3, #32]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	091b      	lsrs	r3, r3, #4
 8000e4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e52:	441a      	add	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	621a      	str	r2, [r3, #32]
 8000e58:	e016      	b.n	8000e88 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	0c5b      	lsrs	r3, r3, #17
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d110      	bne.n	8000e88 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	4619      	mov	r1, r3
 8000e70:	6a38      	ldr	r0, [r7, #32]
 8000e72:	f003 fd07 	bl	8004884 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	6a1a      	ldr	r2, [r3, #32]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	091b      	lsrs	r3, r3, #4
 8000e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e82:	441a      	add	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	699a      	ldr	r2, [r3, #24]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0210 	orr.w	r2, r2, #16
 8000e96:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fe85 	bl	8004bac <USB_ReadInterrupts>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ea8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000eac:	f040 80a7 	bne.w	8000ffe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 fe8a 	bl	8004bd2 <USB_ReadDevAllOutEpInterrupt>
 8000ebe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000ec0:	e099      	b.n	8000ff6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 808e 	beq.w	8000fea <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f003 feae 	bl	8004c3a <USB_ReadDevOutEPInterrupt>
 8000ede:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00c      	beq.n	8000f04 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	015a      	lsls	r2, r3, #5
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	2301      	movs	r3, #1
 8000efa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 fec2 	bl	8001c88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00c      	beq.n	8000f28 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	015a      	lsls	r2, r3, #5
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	4413      	add	r3, r2
 8000f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 fefe 	bl	8001d24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d008      	beq.n	8000f44 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	015a      	lsls	r2, r3, #5
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	4413      	add	r3, r2
 8000f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f3e:	461a      	mov	r2, r3
 8000f40:	2310      	movs	r3, #16
 8000f42:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d030      	beq.n	8000fb0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f56:	2b80      	cmp	r3, #128	; 0x80
 8000f58:	d109      	bne.n	8000f6e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	69fa      	ldr	r2, [r7, #28]
 8000f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000f68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8000f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f70:	4613      	mov	r3, r2
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	3304      	adds	r3, #4
 8000f82:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	78db      	ldrb	r3, [r3, #3]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d108      	bne.n	8000f9e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	4619      	mov	r1, r3
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f007 f9ad 	bl	80082f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	015a      	lsls	r2, r3, #5
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000faa:	461a      	mov	r2, r3
 8000fac:	2302      	movs	r3, #2
 8000fae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	f003 0320 	and.w	r3, r3, #32
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d008      	beq.n	8000fcc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	015a      	lsls	r2, r3, #5
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	2320      	movs	r3, #32
 8000fca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d009      	beq.n	8000fea <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	015a      	lsls	r2, r3, #5
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	4413      	add	r3, r2
 8000fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	3301      	adds	r3, #1
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff2:	085b      	lsrs	r3, r3, #1
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f47f af62 	bne.w	8000ec2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f003 fdd2 	bl	8004bac <USB_ReadInterrupts>
 8001008:	4603      	mov	r3, r0
 800100a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800100e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001012:	f040 80a4 	bne.w	800115e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f003 fdf3 	bl	8004c06 <USB_ReadDevAllInEpInterrupt>
 8001020:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001026:	e096      	b.n	8001156 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 808b 	beq.w	800114a <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f003 fe19 	bl	8004c76 <USB_ReadDevInEPInterrupt>
 8001044:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d020      	beq.n	8001092 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	2201      	movs	r2, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	43db      	mvns	r3, r3
 800106a:	69f9      	ldr	r1, [r7, #28]
 800106c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001070:	4013      	ands	r3, r2
 8001072:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	015a      	lsls	r2, r3, #5
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	4413      	add	r3, r2
 800107c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001080:	461a      	mov	r2, r3
 8001082:	2301      	movs	r3, #1
 8001084:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	b2db      	uxtb	r3, r3
 800108a:	4619      	mov	r1, r3
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f007 f89e 	bl	80081ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	2b00      	cmp	r3, #0
 800109a:	d008      	beq.n	80010ae <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	015a      	lsls	r2, r3, #5
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	4413      	add	r3, r2
 80010a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010a8:	461a      	mov	r2, r3
 80010aa:	2308      	movs	r3, #8
 80010ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	015a      	lsls	r2, r3, #5
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	4413      	add	r3, r2
 80010c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010c4:	461a      	mov	r2, r3
 80010c6:	2310      	movs	r3, #16
 80010c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d008      	beq.n	80010e6 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	015a      	lsls	r2, r3, #5
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	4413      	add	r3, r2
 80010dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010e0:	461a      	mov	r2, r3
 80010e2:	2340      	movs	r3, #64	; 0x40
 80010e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d023      	beq.n	8001138 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80010f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010f2:	6a38      	ldr	r0, [r7, #32]
 80010f4:	f002 fde0 	bl	8003cb8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80010f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	3338      	adds	r3, #56	; 0x38
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4413      	add	r3, r2
 8001108:	3304      	adds	r3, #4
 800110a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	78db      	ldrb	r3, [r3, #3]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d108      	bne.n	8001126 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2200      	movs	r2, #0
 8001118:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4619      	mov	r1, r3
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f007 f8fb 	bl	800831c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	015a      	lsls	r2, r3, #5
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	4413      	add	r3, r2
 800112e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001132:	461a      	mov	r2, r3
 8001134:	2302      	movs	r3, #2
 8001136:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001142:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 fd17 	bl	8001b78 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	3301      	adds	r3, #1
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001152:	085b      	lsrs	r3, r3, #1
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001158:	2b00      	cmp	r3, #0
 800115a:	f47f af65 	bne.w	8001028 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f003 fd22 	bl	8004bac <USB_ReadInterrupts>
 8001168:	4603      	mov	r3, r0
 800116a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800116e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001172:	d122      	bne.n	80011ba <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001182:	f023 0301 	bic.w	r3, r3, #1
 8001186:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800118e:	2b01      	cmp	r3, #1
 8001190:	d108      	bne.n	80011a4 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800119a:	2100      	movs	r1, #0
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f007 fb63 	bl	8008868 <HAL_PCDEx_LPM_Callback>
 80011a2:	e002      	b.n	80011aa <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f007 f87f 	bl	80082a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	695a      	ldr	r2, [r3, #20]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80011b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 fcf4 	bl	8004bac <USB_ReadInterrupts>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011ce:	d112      	bne.n	80011f6 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d102      	bne.n	80011e6 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f007 f83b 	bl	800825c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	695a      	ldr	r2, [r3, #20]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80011f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 fcd6 	bl	8004bac <USB_ReadInterrupts>
 8001200:	4603      	mov	r3, r0
 8001202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800120a:	d121      	bne.n	8001250 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800121a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001222:	2b00      	cmp	r3, #0
 8001224:	d111      	bne.n	800124a <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	f003 020f 	and.w	r2, r3, #15
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001240:	2101      	movs	r1, #1
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f007 fb10 	bl	8008868 <HAL_PCDEx_LPM_Callback>
 8001248:	e002      	b.n	8001250 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f007 f806 	bl	800825c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fca9 	bl	8004bac <USB_ReadInterrupts>
 800125a:	4603      	mov	r3, r0
 800125c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001264:	f040 80b5 	bne.w	80013d2 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2110      	movs	r1, #16
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fd18 	bl	8003cb8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800128c:	e046      	b.n	800131c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001290:	015a      	lsls	r2, r3, #5
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	4413      	add	r3, r2
 8001296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800129a:	461a      	mov	r2, r3
 800129c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80012a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a4:	015a      	lsls	r2, r3, #5
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	4413      	add	r3, r2
 80012aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012b2:	0151      	lsls	r1, r2, #5
 80012b4:	69fa      	ldr	r2, [r7, #28]
 80012b6:	440a      	add	r2, r1
 80012b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80012bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	015a      	lsls	r2, r3, #5
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	4413      	add	r3, r2
 80012ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ce:	461a      	mov	r2, r3
 80012d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80012d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d8:	015a      	lsls	r2, r3, #5
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	4413      	add	r3, r2
 80012de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e6:	0151      	lsls	r1, r2, #5
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	440a      	add	r2, r1
 80012ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80012f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80012f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f8:	015a      	lsls	r2, r3, #5
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	4413      	add	r3, r2
 80012fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001306:	0151      	lsls	r1, r2, #5
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	440a      	add	r2, r1
 800130c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001310:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001314:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001318:	3301      	adds	r3, #1
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001322:	429a      	cmp	r2, r3
 8001324:	d3b3      	bcc.n	800128e <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001334:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001338:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	2b00      	cmp	r3, #0
 8001340:	d016      	beq.n	8001370 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001352:	f043 030b 	orr.w	r3, r3, #11
 8001356:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001368:	f043 030b 	orr.w	r3, r3, #11
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	e015      	b.n	800139c <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800137e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001382:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001386:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001396:	f043 030b 	orr.w	r3, r3, #11
 800139a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	69fa      	ldr	r2, [r7, #28]
 80013a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013ba:	4619      	mov	r1, r3
 80013bc:	4610      	mov	r0, r2
 80013be:	f003 fcb9 	bl	8004d34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	695a      	ldr	r2, [r3, #20]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80013d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fbe8 	bl	8004bac <USB_ReadInterrupts>
 80013dc:	4603      	mov	r3, r0
 80013de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013e6:	d124      	bne.n	8001432 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 fc7e 	bl	8004cee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 fcdb 	bl	8003db2 <USB_GetDevSpeed>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681c      	ldr	r4, [r3, #0]
 8001408:	f001 fbf0 	bl	8002bec <HAL_RCC_GetHCLKFreq>
 800140c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	4620      	mov	r0, r4
 8001418:	f002 f9f8 	bl	800380c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f006 fefe 	bl	800821e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	695a      	ldr	r2, [r3, #20]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001430:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f003 fbb8 	bl	8004bac <USB_ReadInterrupts>
 800143c:	4603      	mov	r3, r0
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b08      	cmp	r3, #8
 8001444:	d10a      	bne.n	800145c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f006 fedb 	bl	8008202 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	695a      	ldr	r2, [r3, #20]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f002 0208 	and.w	r2, r2, #8
 800145a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fba3 	bl	8004bac <USB_ReadInterrupts>
 8001466:	4603      	mov	r3, r0
 8001468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146c:	2b80      	cmp	r3, #128	; 0x80
 800146e:	d122      	bne.n	80014b6 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800147c:	2301      	movs	r3, #1
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
 8001480:	e014      	b.n	80014ac <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001486:	4613      	mov	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d105      	bne.n	80014a6 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4619      	mov	r1, r3
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 fb0b 	bl	8001abc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	3301      	adds	r3, #1
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d3e5      	bcc.n	8001482 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 fb76 	bl	8004bac <USB_ReadInterrupts>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014ca:	d13b      	bne.n	8001544 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014cc:	2301      	movs	r3, #1
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
 80014d0:	e02b      	b.n	800152a <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	015a      	lsls	r2, r3, #5
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	4413      	add	r3, r2
 80014da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e6:	4613      	mov	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	3340      	adds	r3, #64	; 0x40
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d115      	bne.n	8001524 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80014f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	da12      	bge.n	8001524 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001502:	4613      	mov	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	333f      	adds	r3, #63	; 0x3f
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4619      	mov	r1, r3
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 facc 	bl	8001abc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	3301      	adds	r3, #1
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001530:	429a      	cmp	r2, r3
 8001532:	d3ce      	bcc.n	80014d2 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001542:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f003 fb2f 	bl	8004bac <USB_ReadInterrupts>
 800154e:	4603      	mov	r3, r0
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001558:	d155      	bne.n	8001606 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800155a:	2301      	movs	r3, #1
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
 800155e:	e045      	b.n	80015ec <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	015a      	lsls	r2, r3, #5
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	4413      	add	r3, r2
 8001568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d12e      	bne.n	80015e6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001588:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800158a:	2b00      	cmp	r3, #0
 800158c:	da2b      	bge.n	80015e6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800159a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800159e:	429a      	cmp	r2, r3
 80015a0:	d121      	bne.n	80015e6 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a6:	4613      	mov	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	4413      	add	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10a      	bne.n	80015e6 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e2:	6053      	str	r3, [r2, #4]
            break;
 80015e4:	e007      	b.n	80015f6 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	3301      	adds	r3, #1
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d3b4      	bcc.n	8001560 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001604:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f003 face 	bl	8004bac <USB_ReadInterrupts>
 8001610:	4603      	mov	r3, r0
 8001612:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800161a:	d10a      	bne.n	8001632 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f006 fe8f 	bl	8008340 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001630:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f003 fab8 	bl	8004bac <USB_ReadInterrupts>
 800163c:	4603      	mov	r3, r0
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	2b04      	cmp	r3, #4
 8001644:	d115      	bne.n	8001672 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f006 fe7f 	bl	800835c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	430a      	orrs	r2, r1
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	e000      	b.n	8001672 <HAL_PCD_IRQHandler+0x920>
      return;
 8001670:	bf00      	nop
    }
  }
}
 8001672:	3734      	adds	r7, #52	; 0x34
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}

08001678 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_PCD_SetAddress+0x1a>
 800168e:	2302      	movs	r3, #2
 8001690:	e013      	b.n	80016ba <HAL_PCD_SetAddress+0x42>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	78fa      	ldrb	r2, [r7, #3]
 800169e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	78fa      	ldrb	r2, [r7, #3]
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 fa16 	bl	8004adc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	4608      	mov	r0, r1
 80016cc:	4611      	mov	r1, r2
 80016ce:	461a      	mov	r2, r3
 80016d0:	4603      	mov	r3, r0
 80016d2:	70fb      	strb	r3, [r7, #3]
 80016d4:	460b      	mov	r3, r1
 80016d6:	803b      	strh	r3, [r7, #0]
 80016d8:	4613      	mov	r3, r2
 80016da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	da0f      	bge.n	8001708 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	f003 020f 	and.w	r2, r3, #15
 80016ee:	4613      	mov	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	3338      	adds	r3, #56	; 0x38
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	3304      	adds	r3, #4
 80016fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2201      	movs	r2, #1
 8001704:	705a      	strb	r2, [r3, #1]
 8001706:	e00f      	b.n	8001728 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	f003 020f 	and.w	r2, r3, #15
 800170e:	4613      	mov	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	3304      	adds	r3, #4
 8001720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	b2da      	uxtb	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001734:	883a      	ldrh	r2, [r7, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	78ba      	ldrb	r2, [r7, #2]
 800173e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	785b      	ldrb	r3, [r3, #1]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001752:	78bb      	ldrb	r3, [r7, #2]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d102      	bne.n	800175e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_PCD_EP_Open+0xaa>
 8001768:	2302      	movs	r3, #2
 800176a:	e00e      	b.n	800178a <HAL_PCD_EP_Open+0xc8>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68f9      	ldr	r1, [r7, #12]
 800177a:	4618      	mov	r0, r3
 800177c:	f002 fb38 	bl	8003df0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001788:	7afb      	ldrb	r3, [r7, #11]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	460b      	mov	r3, r1
 800179c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800179e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da0f      	bge.n	80017c6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	f003 020f 	and.w	r2, r3, #15
 80017ac:	4613      	mov	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	3338      	adds	r3, #56	; 0x38
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	3304      	adds	r3, #4
 80017bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2201      	movs	r2, #1
 80017c2:	705a      	strb	r2, [r3, #1]
 80017c4:	e00f      	b.n	80017e6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	f003 020f 	and.w	r2, r3, #15
 80017cc:	4613      	mov	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	3304      	adds	r3, #4
 80017de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_PCD_EP_Close+0x6e>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e00e      	b.n	800181e <HAL_PCD_EP_Close+0x8c>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68f9      	ldr	r1, [r7, #12]
 800180e:	4618      	mov	r0, r3
 8001810:	f002 fb76 	bl	8003f00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	460b      	mov	r3, r1
 8001834:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001836:	7afb      	ldrb	r3, [r7, #11]
 8001838:	f003 020f 	and.w	r2, r3, #15
 800183c:	4613      	mov	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	3304      	adds	r3, #4
 800184e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	2200      	movs	r2, #0
 8001860:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2200      	movs	r2, #0
 8001866:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001868:	7afb      	ldrb	r3, [r7, #11]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	b2da      	uxtb	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001874:	7afb      	ldrb	r3, [r7, #11]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6979      	ldr	r1, [r7, #20]
 8001884:	4618      	mov	r0, r3
 8001886:	f002 fdf7 	bl	8004478 <USB_EP0StartXfer>
 800188a:	e005      	b.n	8001898 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6979      	ldr	r1, [r7, #20]
 8001892:	4618      	mov	r0, r3
 8001894:	f002 fc10 	bl	80040b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	f003 020f 	and.w	r2, r3, #15
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80018c4:	681b      	ldr	r3, [r3, #0]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	460b      	mov	r3, r1
 80018e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018e2:	7afb      	ldrb	r3, [r7, #11]
 80018e4:	f003 020f 	and.w	r2, r3, #15
 80018e8:	4613      	mov	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	3338      	adds	r3, #56	; 0x38
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	4413      	add	r3, r2
 80018f6:	3304      	adds	r3, #4
 80018f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2201      	movs	r2, #1
 8001910:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001912:	7afb      	ldrb	r3, [r7, #11]
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	b2da      	uxtb	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800191e:	7afb      	ldrb	r3, [r7, #11]
 8001920:	f003 030f 	and.w	r3, r3, #15
 8001924:	2b00      	cmp	r3, #0
 8001926:	d106      	bne.n	8001936 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6979      	ldr	r1, [r7, #20]
 800192e:	4618      	mov	r0, r3
 8001930:	f002 fda2 	bl	8004478 <USB_EP0StartXfer>
 8001934:	e005      	b.n	8001942 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6979      	ldr	r1, [r7, #20]
 800193c:	4618      	mov	r0, r3
 800193e:	f002 fbbb 	bl	80040b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	f003 020f 	and.w	r2, r3, #15
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	429a      	cmp	r2, r3
 8001964:	d901      	bls.n	800196a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e04e      	b.n	8001a08 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800196a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800196e:	2b00      	cmp	r3, #0
 8001970:	da0f      	bge.n	8001992 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	f003 020f 	and.w	r2, r3, #15
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	3338      	adds	r3, #56	; 0x38
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	3304      	adds	r3, #4
 8001988:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2201      	movs	r2, #1
 800198e:	705a      	strb	r2, [r3, #1]
 8001990:	e00d      	b.n	80019ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	4613      	mov	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4413      	add	r3, r2
 80019a4:	3304      	adds	r3, #4
 80019a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2201      	movs	r2, #1
 80019b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_PCD_EP_SetStall+0x82>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e01c      	b.n	8001a08 <HAL_PCD_EP_SetStall+0xbc>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68f9      	ldr	r1, [r7, #12]
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 ffa9 	bl	8004934 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d108      	bne.n	80019fe <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4610      	mov	r0, r2
 80019fa:	f003 f99b 	bl	8004d34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	f003 020f 	and.w	r2, r3, #15
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d901      	bls.n	8001a2e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e042      	b.n	8001ab4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da0f      	bge.n	8001a56 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	f003 020f 	and.w	r2, r3, #15
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	3338      	adds	r3, #56	; 0x38
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	705a      	strb	r2, [r3, #1]
 8001a54:	e00f      	b.n	8001a76 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	f003 020f 	and.w	r2, r3, #15
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4413      	add	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_PCD_EP_ClrStall+0x86>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e00e      	b.n	8001ab4 <HAL_PCD_EP_ClrStall+0xa4>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68f9      	ldr	r1, [r7, #12]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 ffb3 	bl	8004a10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	da0c      	bge.n	8001aea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	f003 020f 	and.w	r2, r3, #15
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4413      	add	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	3338      	adds	r3, #56	; 0x38
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e00c      	b.n	8001b04 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	f003 020f 	and.w	r2, r3, #15
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	3304      	adds	r3, #4
 8001b02:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68f9      	ldr	r1, [r7, #12]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 fdd6 	bl	80046bc <USB_EPStopXfer>
 8001b10:	4603      	mov	r3, r0
 8001b12:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001b14:	7afb      	ldrb	r3, [r7, #11]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	460b      	mov	r3, r1
 8001b28:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_PCD_EP_Flush+0x1a>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e01b      	b.n	8001b70 <HAL_PCD_EP_Flush+0x52>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	da09      	bge.n	8001b5c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	4619      	mov	r1, r3
 8001b54:	4610      	mov	r0, r2
 8001b56:	f002 f8af 	bl	8003cb8 <USB_FlushTxFifo>
 8001b5a:	e004      	b.n	8001b66 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f002 f8dd 	bl	8003d20 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	3338      	adds	r3, #56	; 0x38
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a1a      	ldr	r2, [r3, #32]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d901      	bls.n	8001bb0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e067      	b.n	8001c80 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	699a      	ldr	r2, [r3, #24]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d902      	bls.n	8001bcc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	3303      	adds	r3, #3
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001bd4:	e026      	b.n	8001c24 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d902      	bls.n	8001bf2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3303      	adds	r3, #3
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6919      	ldr	r1, [r3, #16]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	6978      	ldr	r0, [r7, #20]
 8001c08:	f002 fe02 	bl	8004810 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	441a      	add	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a1a      	ldr	r2, [r3, #32]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	441a      	add	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	015a      	lsls	r2, r3, #5
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d809      	bhi.n	8001c4e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a1a      	ldr	r2, [r3, #32]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d203      	bcs.n	8001c4e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1c3      	bne.n	8001bd6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d811      	bhi.n	8001c7e <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	2201      	movs	r2, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	6939      	ldr	r1, [r7, #16]
 8001c76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3720      	adds	r7, #32
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	333c      	adds	r3, #60	; 0x3c
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <PCD_EP_OutXfrComplete_int+0x98>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d124      	bne.n	8001d08 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00a      	beq.n	8001cde <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cda:	6093      	str	r3, [r2, #8]
 8001cdc:	e01a      	b.n	8001d14 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	015a      	lsls	r2, r3, #5
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2320      	movs	r3, #32
 8001cf8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	4619      	mov	r1, r3
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f006 fa49 	bl	8008198 <HAL_PCD_DataOutStageCallback>
 8001d06:	e005      	b.n	8001d14 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f006 fa42 	bl	8008198 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	4f54310a 	.word	0x4f54310a

08001d24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	333c      	adds	r3, #60	; 0x3c
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <PCD_EP_OutSetupPacket_int+0x64>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d90e      	bls.n	8001d78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d009      	beq.n	8001d78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d70:	461a      	mov	r2, r3
 8001d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f006 f9fb 	bl	8008174 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	4f54300a 	.word	0x4f54300a

08001d8c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d107      	bne.n	8001dba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001daa:	883b      	ldrh	r3, [r7, #0]
 8001dac:	0419      	lsls	r1, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
 8001db8:	e028      	b.n	8001e0c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	e00d      	b.n	8001dea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	3340      	adds	r3, #64	; 0x40
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	4413      	add	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	3301      	adds	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d3ec      	bcc.n	8001dce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001df4:	883b      	ldrh	r3, [r7, #0]
 8001df6:	0418      	lsls	r0, r3, #16
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6819      	ldr	r1, [r3, #0]
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	4302      	orrs	r2, r0
 8001e04:	3340      	adds	r3, #64	; 0x40
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	f043 0303 	orr.w	r3, r3, #3
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e94:	d102      	bne.n	8001e9c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e9a:	e00b      	b.n	8001eb4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eaa:	d102      	bne.n	8001eb2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb0:	e000      	b.n	8001eb4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001eb2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40007000 	.word	0x40007000

08001ec4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d141      	bne.n	8001f56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ed2:	4b4b      	ldr	r3, [pc, #300]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ede:	d131      	bne.n	8001f44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ee0:	4b47      	ldr	r3, [pc, #284]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ee6:	4a46      	ldr	r2, [pc, #280]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ef0:	4b43      	ldr	r3, [pc, #268]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ef8:	4a41      	ldr	r2, [pc, #260]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001efe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f00:	4b40      	ldr	r3, [pc, #256]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2232      	movs	r2, #50	; 0x32
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	4a3f      	ldr	r2, [pc, #252]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	0c9b      	lsrs	r3, r3, #18
 8001f12:	3301      	adds	r3, #1
 8001f14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f16:	e002      	b.n	8001f1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f1e:	4b38      	ldr	r3, [pc, #224]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f2a:	d102      	bne.n	8001f32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f2      	bne.n	8001f18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f32:	4b33      	ldr	r3, [pc, #204]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3e:	d158      	bne.n	8001ff2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e057      	b.n	8001ff4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f44:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f4a:	4a2d      	ldr	r2, [pc, #180]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f54:	e04d      	b.n	8001ff2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f5c:	d141      	bne.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f5e:	4b28      	ldr	r3, [pc, #160]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6a:	d131      	bne.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f72:	4a23      	ldr	r2, [pc, #140]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f7c:	4b20      	ldr	r3, [pc, #128]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f84:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2232      	movs	r2, #50	; 0x32
 8001f92:	fb02 f303 	mul.w	r3, r2, r3
 8001f96:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f98:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9c:	0c9b      	lsrs	r3, r3, #18
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa2:	e002      	b.n	8001faa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb6:	d102      	bne.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f2      	bne.n	8001fa4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fca:	d112      	bne.n	8001ff2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e011      	b.n	8001ff4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fe0:	e007      	b.n	8001ff2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fea:	4a05      	ldr	r2, [pc, #20]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ff0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	40007000 	.word	0x40007000
 8002004:	20000000 	.word	0x20000000
 8002008:	431bde83 	.word	0x431bde83

0800200c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a04      	ldr	r2, [pc, #16]	; (8002028 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800201a:	6053      	str	r3, [r2, #4]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40007000 	.word	0x40007000

0800202c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d102      	bne.n	8002040 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	f000 bc08 	b.w	8002850 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002040:	4b96      	ldr	r3, [pc, #600]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800204a:	4b94      	ldr	r3, [pc, #592]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80e4 	beq.w	800222a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d007      	beq.n	8002078 <HAL_RCC_OscConfig+0x4c>
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	f040 808b 	bne.w	8002186 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b01      	cmp	r3, #1
 8002074:	f040 8087 	bne.w	8002186 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002078:	4b88      	ldr	r3, [pc, #544]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_RCC_OscConfig+0x64>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e3df      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1a      	ldr	r2, [r3, #32]
 8002094:	4b81      	ldr	r3, [pc, #516]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d004      	beq.n	80020aa <HAL_RCC_OscConfig+0x7e>
 80020a0:	4b7e      	ldr	r3, [pc, #504]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a8:	e005      	b.n	80020b6 <HAL_RCC_OscConfig+0x8a>
 80020aa:	4b7c      	ldr	r3, [pc, #496]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d223      	bcs.n	8002102 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fda0 	bl	8002c04 <RCC_SetFlashLatencyFromMSIRange>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e3c0      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ce:	4b73      	ldr	r3, [pc, #460]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a72      	ldr	r2, [pc, #456]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020d4:	f043 0308 	orr.w	r3, r3, #8
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b70      	ldr	r3, [pc, #448]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	496d      	ldr	r1, [pc, #436]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ec:	4b6b      	ldr	r3, [pc, #428]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	4968      	ldr	r1, [pc, #416]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
 8002100:	e025      	b.n	800214e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002102:	4b66      	ldr	r3, [pc, #408]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a65      	ldr	r2, [pc, #404]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002108:	f043 0308 	orr.w	r3, r3, #8
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4b63      	ldr	r3, [pc, #396]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4960      	ldr	r1, [pc, #384]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002120:	4b5e      	ldr	r3, [pc, #376]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	495b      	ldr	r1, [pc, #364]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4618      	mov	r0, r3
 8002140:	f000 fd60 	bl	8002c04 <RCC_SetFlashLatencyFromMSIRange>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e380      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800214e:	f000 fcc1 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 8002152:	4602      	mov	r2, r0
 8002154:	4b51      	ldr	r3, [pc, #324]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	4950      	ldr	r1, [pc, #320]	; (80022a0 <HAL_RCC_OscConfig+0x274>)
 8002160:	5ccb      	ldrb	r3, [r1, r3]
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	fa22 f303 	lsr.w	r3, r2, r3
 800216a:	4a4e      	ldr	r2, [pc, #312]	; (80022a4 <HAL_RCC_OscConfig+0x278>)
 800216c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800216e:	4b4e      	ldr	r3, [pc, #312]	; (80022a8 <HAL_RCC_OscConfig+0x27c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe f976 	bl	8000464 <HAL_InitTick>
 8002178:	4603      	mov	r3, r0
 800217a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d052      	beq.n	8002228 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	e364      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d032      	beq.n	80021f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800218e:	4b43      	ldr	r3, [pc, #268]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a42      	ldr	r2, [pc, #264]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800219a:	f7fe f9b3 	bl	8000504 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a2:	f7fe f9af 	bl	8000504 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e34d      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b4:	4b39      	ldr	r3, [pc, #228]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c0:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a35      	ldr	r2, [pc, #212]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021c6:	f043 0308 	orr.w	r3, r3, #8
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	4b33      	ldr	r3, [pc, #204]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4930      	ldr	r1, [pc, #192]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021de:	4b2f      	ldr	r3, [pc, #188]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	492b      	ldr	r1, [pc, #172]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	604b      	str	r3, [r1, #4]
 80021f2:	e01a      	b.n	800222a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a28      	ldr	r2, [pc, #160]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021fa:	f023 0301 	bic.w	r3, r3, #1
 80021fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002200:	f7fe f980 	bl	8000504 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002208:	f7fe f97c 	bl	8000504 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e31a      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x1dc>
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002228:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d073      	beq.n	800231e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d005      	beq.n	8002248 <HAL_RCC_OscConfig+0x21c>
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2b0c      	cmp	r3, #12
 8002240:	d10e      	bne.n	8002260 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10b      	bne.n	8002260 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d063      	beq.n	800231c <HAL_RCC_OscConfig+0x2f0>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d15f      	bne.n	800231c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e2f7      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002268:	d106      	bne.n	8002278 <HAL_RCC_OscConfig+0x24c>
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a0b      	ldr	r2, [pc, #44]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e025      	b.n	80022c4 <HAL_RCC_OscConfig+0x298>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002280:	d114      	bne.n	80022ac <HAL_RCC_OscConfig+0x280>
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a05      	ldr	r2, [pc, #20]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b03      	ldr	r3, [pc, #12]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a02      	ldr	r2, [pc, #8]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e013      	b.n	80022c4 <HAL_RCC_OscConfig+0x298>
 800229c:	40021000 	.word	0x40021000
 80022a0:	08008a10 	.word	0x08008a10
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000004 	.word	0x20000004
 80022ac:	4ba0      	ldr	r3, [pc, #640]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a9f      	ldr	r2, [pc, #636]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b9d      	ldr	r3, [pc, #628]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a9c      	ldr	r2, [pc, #624]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80022be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d013      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe f91a 	bl	8000504 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d4:	f7fe f916 	bl	8000504 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e2b4      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e6:	4b92      	ldr	r3, [pc, #584]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x2a8>
 80022f2:	e014      	b.n	800231e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe f906 	bl	8000504 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022fc:	f7fe f902 	bl	8000504 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e2a0      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230e:	4b88      	ldr	r3, [pc, #544]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x2d0>
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d060      	beq.n	80023ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d005      	beq.n	800233c <HAL_RCC_OscConfig+0x310>
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d119      	bne.n	800236a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d116      	bne.n	800236a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800233c:	4b7c      	ldr	r3, [pc, #496]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_OscConfig+0x328>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e27d      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002354:	4b76      	ldr	r3, [pc, #472]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	061b      	lsls	r3, r3, #24
 8002362:	4973      	ldr	r1, [pc, #460]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002368:	e040      	b.n	80023ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d023      	beq.n	80023ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002372:	4b6f      	ldr	r3, [pc, #444]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6e      	ldr	r2, [pc, #440]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7fe f8c1 	bl	8000504 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002386:	f7fe f8bd 	bl	8000504 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e25b      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002398:	4b65      	ldr	r3, [pc, #404]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	4b62      	ldr	r3, [pc, #392]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	495f      	ldr	r1, [pc, #380]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
 80023b8:	e018      	b.n	80023ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ba:	4b5d      	ldr	r3, [pc, #372]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a5c      	ldr	r2, [pc, #368]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80023c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7fe f89d 	bl	8000504 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ce:	f7fe f899 	bl	8000504 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e237      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f0      	bne.n	80023ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d03c      	beq.n	8002472 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01c      	beq.n	800243a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002400:	4b4b      	ldr	r3, [pc, #300]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002406:	4a4a      	ldr	r2, [pc, #296]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7fe f878 	bl	8000504 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002418:	f7fe f874 	bl	8000504 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e212      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242a:	4b41      	ldr	r3, [pc, #260]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800242c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0ef      	beq.n	8002418 <HAL_RCC_OscConfig+0x3ec>
 8002438:	e01b      	b.n	8002472 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243a:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800243c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002440:	4a3b      	ldr	r2, [pc, #236]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244a:	f7fe f85b 	bl	8000504 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002452:	f7fe f857 	bl	8000504 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e1f5      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002464:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1ef      	bne.n	8002452 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80a6 	beq.w	80025cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002484:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10d      	bne.n	80024ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002490:	4b27      	ldr	r3, [pc, #156]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	4a26      	ldr	r2, [pc, #152]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249a:	6593      	str	r3, [r2, #88]	; 0x58
 800249c:	4b24      	ldr	r3, [pc, #144]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a8:	2301      	movs	r3, #1
 80024aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <HAL_RCC_OscConfig+0x508>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d118      	bne.n	80024ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b8:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_RCC_OscConfig+0x508>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <HAL_RCC_OscConfig+0x508>)
 80024be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c4:	f7fe f81e 	bl	8000504 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024cc:	f7fe f81a 	bl	8000504 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e1b8      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_RCC_OscConfig+0x508>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d108      	bne.n	8002504 <HAL_RCC_OscConfig+0x4d8>
 80024f2:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002502:	e029      	b.n	8002558 <HAL_RCC_OscConfig+0x52c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b05      	cmp	r3, #5
 800250a:	d115      	bne.n	8002538 <HAL_RCC_OscConfig+0x50c>
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002512:	4a07      	ldr	r2, [pc, #28]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	4a03      	ldr	r2, [pc, #12]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800252c:	e014      	b.n	8002558 <HAL_RCC_OscConfig+0x52c>
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	40007000 	.word	0x40007000
 8002538:	4b9d      	ldr	r3, [pc, #628]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	4a9c      	ldr	r2, [pc, #624]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002548:	4b99      	ldr	r3, [pc, #612]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254e:	4a98      	ldr	r2, [pc, #608]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d016      	beq.n	800258e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7fd ffd0 	bl	8000504 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002566:	e00a      	b.n	800257e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f7fd ffcc 	bl	8000504 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e168      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257e:	4b8c      	ldr	r3, [pc, #560]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ed      	beq.n	8002568 <HAL_RCC_OscConfig+0x53c>
 800258c:	e015      	b.n	80025ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7fd ffb9 	bl	8000504 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002594:	e00a      	b.n	80025ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7fd ffb5 	bl	8000504 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e151      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ac:	4b80      	ldr	r3, [pc, #512]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ed      	bne.n	8002596 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ba:	7ffb      	ldrb	r3, [r7, #31]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c0:	4b7b      	ldr	r3, [pc, #492]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	4a7a      	ldr	r2, [pc, #488]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 80025c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d03c      	beq.n	8002652 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01c      	beq.n	800261a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025e0:	4b73      	ldr	r3, [pc, #460]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 80025e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025e6:	4a72      	ldr	r2, [pc, #456]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7fd ff88 	bl	8000504 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025f8:	f7fd ff84 	bl	8000504 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e122      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800260a:	4b69      	ldr	r3, [pc, #420]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 800260c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ef      	beq.n	80025f8 <HAL_RCC_OscConfig+0x5cc>
 8002618:	e01b      	b.n	8002652 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800261a:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 800261c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002620:	4a63      	ldr	r2, [pc, #396]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7fd ff6b 	bl	8000504 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002632:	f7fd ff67 	bl	8000504 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e105      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002644:	4b5a      	ldr	r3, [pc, #360]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 8002646:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ef      	bne.n	8002632 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80f9 	beq.w	800284e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	2b02      	cmp	r3, #2
 8002662:	f040 80cf 	bne.w	8002804 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002666:	4b52      	ldr	r3, [pc, #328]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 0203 	and.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	429a      	cmp	r2, r3
 8002678:	d12c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	3b01      	subs	r3, #1
 8002686:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002688:	429a      	cmp	r2, r3
 800268a:	d123      	bne.n	80026d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002696:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d11b      	bne.n	80026d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d113      	bne.n	80026d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	085b      	lsrs	r3, r3, #1
 80026b8:	3b01      	subs	r3, #1
 80026ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d109      	bne.n	80026d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	3b01      	subs	r3, #1
 80026ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d071      	beq.n	80027b8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	d068      	beq.n	80027ac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026da:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d105      	bne.n	80026f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026e6:	4b32      	ldr	r3, [pc, #200]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0ac      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026f6:	4b2e      	ldr	r3, [pc, #184]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a2d      	ldr	r2, [pc, #180]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 80026fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002700:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002702:	f7fd feff 	bl	8000504 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270a:	f7fd fefb 	bl	8000504 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e099      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271c:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002728:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCC_OscConfig+0x788>)
 800272e:	4013      	ands	r3, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002738:	3a01      	subs	r2, #1
 800273a:	0112      	lsls	r2, r2, #4
 800273c:	4311      	orrs	r1, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002742:	0212      	lsls	r2, r2, #8
 8002744:	4311      	orrs	r1, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800274a:	0852      	lsrs	r2, r2, #1
 800274c:	3a01      	subs	r2, #1
 800274e:	0552      	lsls	r2, r2, #21
 8002750:	4311      	orrs	r1, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002756:	0852      	lsrs	r2, r2, #1
 8002758:	3a01      	subs	r2, #1
 800275a:	0652      	lsls	r2, r2, #25
 800275c:	4311      	orrs	r1, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002762:	06d2      	lsls	r2, r2, #27
 8002764:	430a      	orrs	r2, r1
 8002766:	4912      	ldr	r1, [pc, #72]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 8002768:	4313      	orrs	r3, r2
 800276a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800276c:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0f      	ldr	r2, [pc, #60]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 8002772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002776:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002778:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a0c      	ldr	r2, [pc, #48]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 800277e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002782:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002784:	f7fd febe 	bl	8000504 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278c:	f7fd feba 	bl	8000504 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e058      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279e:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027aa:	e050      	b.n	800284e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e04f      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
 80027b0:	40021000 	.word	0x40021000
 80027b4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_RCC_OscConfig+0x82c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d144      	bne.n	800284e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027c4:	4b24      	ldr	r3, [pc, #144]	; (8002858 <HAL_RCC_OscConfig+0x82c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a23      	ldr	r2, [pc, #140]	; (8002858 <HAL_RCC_OscConfig+0x82c>)
 80027ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027d0:	4b21      	ldr	r3, [pc, #132]	; (8002858 <HAL_RCC_OscConfig+0x82c>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4a20      	ldr	r2, [pc, #128]	; (8002858 <HAL_RCC_OscConfig+0x82c>)
 80027d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027dc:	f7fd fe92 	bl	8000504 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e4:	f7fd fe8e 	bl	8000504 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e02c      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f6:	4b18      	ldr	r3, [pc, #96]	; (8002858 <HAL_RCC_OscConfig+0x82c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x7b8>
 8002802:	e024      	b.n	800284e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b0c      	cmp	r3, #12
 8002808:	d01f      	beq.n	800284a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280a:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_RCC_OscConfig+0x82c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a12      	ldr	r2, [pc, #72]	; (8002858 <HAL_RCC_OscConfig+0x82c>)
 8002810:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fd fe75 	bl	8000504 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281e:	f7fd fe71 	bl	8000504 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e00f      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002830:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_OscConfig+0x82c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_RCC_OscConfig+0x82c>)
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	4905      	ldr	r1, [pc, #20]	; (8002858 <HAL_RCC_OscConfig+0x82c>)
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_RCC_OscConfig+0x830>)
 8002844:	4013      	ands	r3, r2
 8002846:	60cb      	str	r3, [r1, #12]
 8002848:	e001      	b.n	800284e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	feeefffc 	.word	0xfeeefffc

08002860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e11d      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002878:	4b90      	ldr	r3, [pc, #576]	; (8002abc <HAL_RCC_ClockConfig+0x25c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d910      	bls.n	80028a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b8d      	ldr	r3, [pc, #564]	; (8002abc <HAL_RCC_ClockConfig+0x25c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 020f 	bic.w	r2, r3, #15
 800288e:	498b      	ldr	r1, [pc, #556]	; (8002abc <HAL_RCC_ClockConfig+0x25c>)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002896:	4b89      	ldr	r3, [pc, #548]	; (8002abc <HAL_RCC_ClockConfig+0x25c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e105      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d010      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	4b81      	ldr	r3, [pc, #516]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d908      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c4:	4b7e      	ldr	r3, [pc, #504]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	497b      	ldr	r1, [pc, #492]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d079      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d11e      	bne.n	8002928 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ea:	4b75      	ldr	r3, [pc, #468]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0dc      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80028fa:	f000 f9dd 	bl	8002cb8 <RCC_GetSysClockFreqFromPLLSource>
 80028fe:	4603      	mov	r3, r0
 8002900:	4a70      	ldr	r2, [pc, #448]	; (8002ac4 <HAL_RCC_ClockConfig+0x264>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d946      	bls.n	8002994 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002906:	4b6e      	ldr	r3, [pc, #440]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d140      	bne.n	8002994 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002912:	4b6b      	ldr	r3, [pc, #428]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800291a:	4a69      	ldr	r2, [pc, #420]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 800291c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002920:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	e035      	b.n	8002994 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d107      	bne.n	8002940 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002930:	4b63      	ldr	r3, [pc, #396]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d115      	bne.n	8002968 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0b9      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d107      	bne.n	8002958 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002948:	4b5d      	ldr	r3, [pc, #372]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d109      	bne.n	8002968 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0ad      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002958:	4b59      	ldr	r3, [pc, #356]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0a5      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002968:	f000 f8b4 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 800296c:	4603      	mov	r3, r0
 800296e:	4a55      	ldr	r2, [pc, #340]	; (8002ac4 <HAL_RCC_ClockConfig+0x264>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d90f      	bls.n	8002994 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002974:	4b52      	ldr	r3, [pc, #328]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d109      	bne.n	8002994 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002980:	4b4f      	ldr	r3, [pc, #316]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002988:	4a4d      	ldr	r2, [pc, #308]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 800298a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002994:	4b4a      	ldr	r3, [pc, #296]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f023 0203 	bic.w	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4947      	ldr	r1, [pc, #284]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a6:	f7fd fdad 	bl	8000504 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ac:	e00a      	b.n	80029c4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ae:	f7fd fda9 	bl	8000504 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029bc:	4293      	cmp	r3, r2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e077      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c4:	4b3e      	ldr	r3, [pc, #248]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 020c 	and.w	r2, r3, #12
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d1eb      	bne.n	80029ae <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b80      	cmp	r3, #128	; 0x80
 80029da:	d105      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029dc:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a37      	ldr	r2, [pc, #220]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 80029e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029e6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d010      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d208      	bcs.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a04:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	492b      	ldr	r1, [pc, #172]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a16:	4b29      	ldr	r3, [pc, #164]	; (8002abc <HAL_RCC_ClockConfig+0x25c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d210      	bcs.n	8002a46 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <HAL_RCC_ClockConfig+0x25c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 020f 	bic.w	r2, r3, #15
 8002a2c:	4923      	ldr	r1, [pc, #140]	; (8002abc <HAL_RCC_ClockConfig+0x25c>)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <HAL_RCC_ClockConfig+0x25c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e036      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a52:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	4918      	ldr	r1, [pc, #96]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d009      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4910      	ldr	r1, [pc, #64]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a84:	f000 f826 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	091b      	lsrs	r3, r3, #4
 8002a90:	f003 030f 	and.w	r3, r3, #15
 8002a94:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <HAL_RCC_ClockConfig+0x268>)
 8002a96:	5ccb      	ldrb	r3, [r1, r3]
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa0:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <HAL_RCC_ClockConfig+0x26c>)
 8002aa2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <HAL_RCC_ClockConfig+0x270>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fcdb 	bl	8000464 <HAL_InitTick>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	73fb      	strb	r3, [r7, #15]

  return status;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40022000 	.word	0x40022000
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	04c4b400 	.word	0x04c4b400
 8002ac8:	08008a10 	.word	0x08008a10
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	20000004 	.word	0x20000004

08002ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	; 0x24
 8002ad8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae2:	4b3e      	ldr	r3, [pc, #248]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aec:	4b3b      	ldr	r3, [pc, #236]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x34>
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	d121      	bne.n	8002b46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d11e      	bne.n	8002b46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b08:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b14:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	e005      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b24:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b30:	4a2b      	ldr	r2, [pc, #172]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10d      	bne.n	8002b5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d102      	bne.n	8002b52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b4c:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	e004      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b58:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	2b0c      	cmp	r3, #12
 8002b60:	d134      	bne.n	8002bcc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b62:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d003      	beq.n	8002b7a <HAL_RCC_GetSysClockFreq+0xa6>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d003      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0xac>
 8002b78:	e005      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b7c:	617b      	str	r3, [r7, #20]
      break;
 8002b7e:	e005      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b82:	617b      	str	r3, [r7, #20]
      break;
 8002b84:	e002      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	617b      	str	r3, [r7, #20]
      break;
 8002b8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	3301      	adds	r3, #1
 8002b98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	fb03 f202 	mul.w	r2, r3, r2
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	0e5b      	lsrs	r3, r3, #25
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	; 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	08008a20 	.word	0x08008a20
 8002be4:	00f42400 	.word	0x00f42400
 8002be8:	007a1200 	.word	0x007a1200

08002bec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000000 	.word	0x20000000

08002c04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c10:	4b27      	ldr	r3, [pc, #156]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c1c:	f7ff f932 	bl	8001e84 <HAL_PWREx_GetVoltageRange>
 8002c20:	6178      	str	r0, [r7, #20]
 8002c22:	e014      	b.n	8002c4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c28:	4a21      	ldr	r2, [pc, #132]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c30:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c3c:	f7ff f922 	bl	8001e84 <HAL_PWREx_GetVoltageRange>
 8002c40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	4a1a      	ldr	r2, [pc, #104]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c54:	d10b      	bne.n	8002c6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d913      	bls.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2ba0      	cmp	r3, #160	; 0xa0
 8002c60:	d902      	bls.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c62:	2302      	movs	r3, #2
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	e00d      	b.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c68:	2301      	movs	r3, #1
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	e00a      	b.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b7f      	cmp	r3, #127	; 0x7f
 8002c72:	d902      	bls.n	8002c7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002c74:	2302      	movs	r3, #2
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	e004      	b.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b70      	cmp	r3, #112	; 0x70
 8002c7e:	d101      	bne.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c80:	2301      	movs	r3, #1
 8002c82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f023 020f 	bic.w	r2, r3, #15
 8002c8c:	4909      	ldr	r1, [pc, #36]	; (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c94:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d001      	beq.n	8002ca6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40022000 	.word	0x40022000

08002cb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cbe:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d00b      	beq.n	8002ce6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d825      	bhi.n	8002d20 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d008      	beq.n	8002cec <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d11f      	bne.n	8002d20 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ce2:	613b      	str	r3, [r7, #16]
    break;
 8002ce4:	e01f      	b.n	8002d26 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002ce6:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002ce8:	613b      	str	r3, [r7, #16]
    break;
 8002cea:	e01c      	b.n	8002d26 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cec:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e005      	b.n	8002d14 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d08:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002d14:	4a1a      	ldr	r2, [pc, #104]	; (8002d80 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1c:	613b      	str	r3, [r7, #16]
    break;
 8002d1e:	e002      	b.n	8002d26 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]
    break;
 8002d24:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d26:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	091b      	lsrs	r3, r3, #4
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	3301      	adds	r3, #1
 8002d32:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d34:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	0a1b      	lsrs	r3, r3, #8
 8002d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	fb03 f202 	mul.w	r2, r3, r2
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	0e5b      	lsrs	r3, r3, #25
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	3301      	adds	r3, #1
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002d66:	683b      	ldr	r3, [r7, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40021000 	.word	0x40021000
 8002d78:	00f42400 	.word	0x00f42400
 8002d7c:	007a1200 	.word	0x007a1200
 8002d80:	08008a20 	.word	0x08008a20

08002d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d90:	2300      	movs	r3, #0
 8002d92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d040      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da4:	2b80      	cmp	r3, #128	; 0x80
 8002da6:	d02a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002da8:	2b80      	cmp	r3, #128	; 0x80
 8002daa:	d825      	bhi.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002dac:	2b60      	cmp	r3, #96	; 0x60
 8002dae:	d026      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002db0:	2b60      	cmp	r3, #96	; 0x60
 8002db2:	d821      	bhi.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d006      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d81d      	bhi.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d009      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d010      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002dc4:	e018      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dc6:	4b89      	ldr	r3, [pc, #548]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	4a88      	ldr	r2, [pc, #544]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dd2:	e015      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fb02 	bl	80033e4 <RCCEx_PLLSAI1_Config>
 8002de0:	4603      	mov	r3, r0
 8002de2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002de4:	e00c      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3320      	adds	r3, #32
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fbed 	bl	80035cc <RCCEx_PLLSAI2_Config>
 8002df2:	4603      	mov	r3, r0
 8002df4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002df6:	e003      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	74fb      	strb	r3, [r7, #19]
      break;
 8002dfc:	e000      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10b      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e06:	4b79      	ldr	r3, [pc, #484]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e0c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e14:	4975      	ldr	r1, [pc, #468]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002e1c:	e001      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1e:	7cfb      	ldrb	r3, [r7, #19]
 8002e20:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d047      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e36:	d030      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3c:	d82a      	bhi.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e42:	d02a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e48:	d824      	bhi.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e54:	d81e      	bhi.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5e:	d010      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e60:	e018      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e62:	4b62      	ldr	r3, [pc, #392]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	4a61      	ldr	r2, [pc, #388]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e6e:	e015      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fab4 	bl	80033e4 <RCCEx_PLLSAI1_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e80:	e00c      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3320      	adds	r3, #32
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fb9f 	bl	80035cc <RCCEx_PLLSAI2_Config>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e92:	e003      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	74fb      	strb	r3, [r7, #19]
      break;
 8002e98:	e000      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ea2:	4b52      	ldr	r3, [pc, #328]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ea4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	494e      	ldr	r1, [pc, #312]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002eb8:	e001      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eba:	7cfb      	ldrb	r3, [r7, #19]
 8002ebc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 809f 	beq.w	800300a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ed0:	4b46      	ldr	r3, [pc, #280]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00d      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee6:	4b41      	ldr	r3, [pc, #260]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eea:	4a40      	ldr	r2, [pc, #256]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef2:	4b3e      	ldr	r3, [pc, #248]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efe:	2301      	movs	r3, #1
 8002f00:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f02:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a3a      	ldr	r2, [pc, #232]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f0e:	f7fd faf9 	bl	8000504 <HAL_GetTick>
 8002f12:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f14:	e009      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f16:	f7fd faf5 	bl	8000504 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d902      	bls.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	74fb      	strb	r3, [r7, #19]
        break;
 8002f28:	e005      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f2a:	4b31      	ldr	r3, [pc, #196]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ef      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002f36:	7cfb      	ldrb	r3, [r7, #19]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d15b      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f46:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01f      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d019      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f5a:	4b24      	ldr	r3, [pc, #144]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f66:	4b21      	ldr	r3, [pc, #132]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f76:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f86:	4a19      	ldr	r2, [pc, #100]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d016      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fd fab4 	bl	8000504 <HAL_GetTick>
 8002f9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9e:	e00b      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa0:	f7fd fab0 	bl	8000504 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d902      	bls.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	74fb      	strb	r3, [r7, #19]
            break;
 8002fb6:	e006      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0ec      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002fc6:	7cfb      	ldrb	r3, [r7, #19]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10c      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fdc:	4903      	ldr	r1, [pc, #12]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fe6:	7cfb      	ldrb	r3, [r7, #19]
 8002fe8:	74bb      	strb	r3, [r7, #18]
 8002fea:	e005      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff8:	7c7b      	ldrb	r3, [r7, #17]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d105      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffe:	4ba0      	ldr	r3, [pc, #640]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003002:	4a9f      	ldr	r2, [pc, #636]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003008:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003016:	4b9a      	ldr	r3, [pc, #616]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301c:	f023 0203 	bic.w	r2, r3, #3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003024:	4996      	ldr	r1, [pc, #600]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003038:	4b91      	ldr	r3, [pc, #580]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303e:	f023 020c 	bic.w	r2, r3, #12
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	498e      	ldr	r1, [pc, #568]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800305a:	4b89      	ldr	r3, [pc, #548]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003060:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	4985      	ldr	r1, [pc, #532]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800307c:	4b80      	ldr	r3, [pc, #512]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003082:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308a:	497d      	ldr	r1, [pc, #500]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800309e:	4b78      	ldr	r3, [pc, #480]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ac:	4974      	ldr	r1, [pc, #464]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030c0:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ce:	496c      	ldr	r1, [pc, #432]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030e2:	4b67      	ldr	r3, [pc, #412]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030f0:	4963      	ldr	r1, [pc, #396]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003104:	4b5e      	ldr	r3, [pc, #376]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003112:	495b      	ldr	r1, [pc, #364]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003126:	4b56      	ldr	r3, [pc, #344]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	4952      	ldr	r1, [pc, #328]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003148:	4b4d      	ldr	r3, [pc, #308]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	494a      	ldr	r1, [pc, #296]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800316a:	4b45      	ldr	r3, [pc, #276]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003178:	4941      	ldr	r1, [pc, #260]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800318c:	4b3c      	ldr	r3, [pc, #240]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003192:	f023 0203 	bic.w	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319a:	4939      	ldr	r1, [pc, #228]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d028      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ae:	4b34      	ldr	r3, [pc, #208]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031bc:	4930      	ldr	r1, [pc, #192]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031cc:	d106      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ce:	4b2c      	ldr	r3, [pc, #176]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	4a2b      	ldr	r2, [pc, #172]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031d8:	60d3      	str	r3, [r2, #12]
 80031da:	e011      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031e4:	d10c      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2101      	movs	r1, #1
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f8f9 	bl	80033e4 <RCCEx_PLLSAI1_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031f6:	7cfb      	ldrb	r3, [r7, #19]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d04d      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003214:	d108      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003216:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003218:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800321c:	4a18      	ldr	r2, [pc, #96]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800321e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003222:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003226:	e012      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003228:	4b15      	ldr	r3, [pc, #84]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800322a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800322e:	4a14      	ldr	r2, [pc, #80]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003234:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003246:	490e      	ldr	r1, [pc, #56]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003256:	d106      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4a08      	ldr	r2, [pc, #32]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800325e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003262:	60d3      	str	r3, [r2, #12]
 8003264:	e020      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800326a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800326e:	d109      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4a02      	ldr	r2, [pc, #8]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327a:	60d3      	str	r3, [r2, #12]
 800327c:	e014      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800328c:	d10c      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3304      	adds	r3, #4
 8003292:	2101      	movs	r1, #1
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f8a5 	bl	80033e4 <RCCEx_PLLSAI1_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80032a4:	7cfb      	ldrb	r3, [r7, #19]
 80032a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d028      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032b4:	4b4a      	ldr	r3, [pc, #296]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032c2:	4947      	ldr	r1, [pc, #284]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032d2:	d106      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d4:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4a41      	ldr	r2, [pc, #260]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032de:	60d3      	str	r3, [r2, #12]
 80032e0:	e011      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ea:	d10c      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3304      	adds	r3, #4
 80032f0:	2101      	movs	r1, #1
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 f876 	bl	80033e4 <RCCEx_PLLSAI1_Config>
 80032f8:	4603      	mov	r3, r0
 80032fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003302:	7cfb      	ldrb	r3, [r7, #19]
 8003304:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01e      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003312:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003318:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003322:	492f      	ldr	r1, [pc, #188]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003330:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003334:	d10c      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3304      	adds	r3, #4
 800333a:	2102      	movs	r1, #2
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f851 	bl	80033e4 <RCCEx_PLLSAI1_Config>
 8003342:	4603      	mov	r3, r0
 8003344:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003346:	7cfb      	ldrb	r3, [r7, #19]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00b      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800335c:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800335e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003362:	f023 0204 	bic.w	r2, r3, #4
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336c:	491c      	ldr	r1, [pc, #112]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00b      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003380:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003386:	f023 0218 	bic.w	r2, r3, #24
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	4913      	ldr	r1, [pc, #76]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d017      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b4:	490a      	ldr	r1, [pc, #40]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033c6:	d105      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4a04      	ldr	r2, [pc, #16]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000

080033e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033f2:	4b72      	ldr	r3, [pc, #456]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00e      	beq.n	800341c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033fe:	4b6f      	ldr	r3, [pc, #444]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f003 0203 	and.w	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d103      	bne.n	8003416 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
       ||
 8003412:	2b00      	cmp	r3, #0
 8003414:	d142      	bne.n	800349c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
 800341a:	e03f      	b.n	800349c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b03      	cmp	r3, #3
 8003422:	d018      	beq.n	8003456 <RCCEx_PLLSAI1_Config+0x72>
 8003424:	2b03      	cmp	r3, #3
 8003426:	d825      	bhi.n	8003474 <RCCEx_PLLSAI1_Config+0x90>
 8003428:	2b01      	cmp	r3, #1
 800342a:	d002      	beq.n	8003432 <RCCEx_PLLSAI1_Config+0x4e>
 800342c:	2b02      	cmp	r3, #2
 800342e:	d009      	beq.n	8003444 <RCCEx_PLLSAI1_Config+0x60>
 8003430:	e020      	b.n	8003474 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003432:	4b62      	ldr	r3, [pc, #392]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d11d      	bne.n	800347a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003442:	e01a      	b.n	800347a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003444:	4b5d      	ldr	r3, [pc, #372]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344c:	2b00      	cmp	r3, #0
 800344e:	d116      	bne.n	800347e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003454:	e013      	b.n	800347e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003456:	4b59      	ldr	r3, [pc, #356]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10f      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003462:	4b56      	ldr	r3, [pc, #344]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003472:	e006      	b.n	8003482 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      break;
 8003478:	e004      	b.n	8003484 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800347a:	bf00      	nop
 800347c:	e002      	b.n	8003484 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800347e:	bf00      	nop
 8003480:	e000      	b.n	8003484 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003482:	bf00      	nop
    }

    if(status == HAL_OK)
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d108      	bne.n	800349c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800348a:	4b4c      	ldr	r3, [pc, #304]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f023 0203 	bic.w	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4949      	ldr	r1, [pc, #292]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003498:	4313      	orrs	r3, r2
 800349a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f040 8086 	bne.w	80035b0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034a4:	4b45      	ldr	r3, [pc, #276]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a44      	ldr	r2, [pc, #272]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80034aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b0:	f7fd f828 	bl	8000504 <HAL_GetTick>
 80034b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034b6:	e009      	b.n	80034cc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034b8:	f7fd f824 	bl	8000504 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d902      	bls.n	80034cc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	73fb      	strb	r3, [r7, #15]
        break;
 80034ca:	e005      	b.n	80034d8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034cc:	4b3b      	ldr	r3, [pc, #236]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ef      	bne.n	80034b8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d168      	bne.n	80035b0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d113      	bne.n	800350c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e4:	4b35      	ldr	r3, [pc, #212]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	4b35      	ldr	r3, [pc, #212]	; (80035c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6892      	ldr	r2, [r2, #8]
 80034f0:	0211      	lsls	r1, r2, #8
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68d2      	ldr	r2, [r2, #12]
 80034f6:	06d2      	lsls	r2, r2, #27
 80034f8:	4311      	orrs	r1, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6852      	ldr	r2, [r2, #4]
 80034fe:	3a01      	subs	r2, #1
 8003500:	0112      	lsls	r2, r2, #4
 8003502:	430a      	orrs	r2, r1
 8003504:	492d      	ldr	r1, [pc, #180]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003506:	4313      	orrs	r3, r2
 8003508:	610b      	str	r3, [r1, #16]
 800350a:	e02d      	b.n	8003568 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d115      	bne.n	800353e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003512:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003518:	4013      	ands	r3, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6892      	ldr	r2, [r2, #8]
 800351e:	0211      	lsls	r1, r2, #8
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6912      	ldr	r2, [r2, #16]
 8003524:	0852      	lsrs	r2, r2, #1
 8003526:	3a01      	subs	r2, #1
 8003528:	0552      	lsls	r2, r2, #21
 800352a:	4311      	orrs	r1, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6852      	ldr	r2, [r2, #4]
 8003530:	3a01      	subs	r2, #1
 8003532:	0112      	lsls	r2, r2, #4
 8003534:	430a      	orrs	r2, r1
 8003536:	4921      	ldr	r1, [pc, #132]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003538:	4313      	orrs	r3, r2
 800353a:	610b      	str	r3, [r1, #16]
 800353c:	e014      	b.n	8003568 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800353e:	4b1f      	ldr	r3, [pc, #124]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003544:	4013      	ands	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6892      	ldr	r2, [r2, #8]
 800354a:	0211      	lsls	r1, r2, #8
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6952      	ldr	r2, [r2, #20]
 8003550:	0852      	lsrs	r2, r2, #1
 8003552:	3a01      	subs	r2, #1
 8003554:	0652      	lsls	r2, r2, #25
 8003556:	4311      	orrs	r1, r2
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6852      	ldr	r2, [r2, #4]
 800355c:	3a01      	subs	r2, #1
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	430a      	orrs	r2, r1
 8003562:	4916      	ldr	r1, [pc, #88]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003564:	4313      	orrs	r3, r2
 8003566:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003568:	4b14      	ldr	r3, [pc, #80]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a13      	ldr	r2, [pc, #76]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800356e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fc ffc6 	bl	8000504 <HAL_GetTick>
 8003578:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800357a:	e009      	b.n	8003590 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800357c:	f7fc ffc2 	bl	8000504 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d902      	bls.n	8003590 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	73fb      	strb	r3, [r7, #15]
          break;
 800358e:	e005      	b.n	800359c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0ef      	beq.n	800357c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	4904      	ldr	r1, [pc, #16]	; (80035bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
 80035c0:	07ff800f 	.word	0x07ff800f
 80035c4:	ff9f800f 	.word	0xff9f800f
 80035c8:	f9ff800f 	.word	0xf9ff800f

080035cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035da:	4b72      	ldr	r3, [pc, #456]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00e      	beq.n	8003604 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035e6:	4b6f      	ldr	r3, [pc, #444]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0203 	and.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d103      	bne.n	80035fe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
       ||
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d142      	bne.n	8003684 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
 8003602:	e03f      	b.n	8003684 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d018      	beq.n	800363e <RCCEx_PLLSAI2_Config+0x72>
 800360c:	2b03      	cmp	r3, #3
 800360e:	d825      	bhi.n	800365c <RCCEx_PLLSAI2_Config+0x90>
 8003610:	2b01      	cmp	r3, #1
 8003612:	d002      	beq.n	800361a <RCCEx_PLLSAI2_Config+0x4e>
 8003614:	2b02      	cmp	r3, #2
 8003616:	d009      	beq.n	800362c <RCCEx_PLLSAI2_Config+0x60>
 8003618:	e020      	b.n	800365c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800361a:	4b62      	ldr	r3, [pc, #392]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d11d      	bne.n	8003662 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362a:	e01a      	b.n	8003662 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800362c:	4b5d      	ldr	r3, [pc, #372]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003634:	2b00      	cmp	r3, #0
 8003636:	d116      	bne.n	8003666 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800363c:	e013      	b.n	8003666 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800363e:	4b59      	ldr	r3, [pc, #356]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10f      	bne.n	800366a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800364a:	4b56      	ldr	r3, [pc, #344]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800365a:	e006      	b.n	800366a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      break;
 8003660:	e004      	b.n	800366c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003662:	bf00      	nop
 8003664:	e002      	b.n	800366c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003666:	bf00      	nop
 8003668:	e000      	b.n	800366c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800366a:	bf00      	nop
    }

    if(status == HAL_OK)
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d108      	bne.n	8003684 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003672:	4b4c      	ldr	r3, [pc, #304]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f023 0203 	bic.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4949      	ldr	r1, [pc, #292]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003680:	4313      	orrs	r3, r2
 8003682:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b00      	cmp	r3, #0
 8003688:	f040 8086 	bne.w	8003798 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800368c:	4b45      	ldr	r3, [pc, #276]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a44      	ldr	r2, [pc, #272]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003698:	f7fc ff34 	bl	8000504 <HAL_GetTick>
 800369c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800369e:	e009      	b.n	80036b4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036a0:	f7fc ff30 	bl	8000504 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d902      	bls.n	80036b4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	73fb      	strb	r3, [r7, #15]
        break;
 80036b2:	e005      	b.n	80036c0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036b4:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ef      	bne.n	80036a0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d168      	bne.n	8003798 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d113      	bne.n	80036f4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036cc:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6892      	ldr	r2, [r2, #8]
 80036d8:	0211      	lsls	r1, r2, #8
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68d2      	ldr	r2, [r2, #12]
 80036de:	06d2      	lsls	r2, r2, #27
 80036e0:	4311      	orrs	r1, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6852      	ldr	r2, [r2, #4]
 80036e6:	3a01      	subs	r2, #1
 80036e8:	0112      	lsls	r2, r2, #4
 80036ea:	430a      	orrs	r2, r1
 80036ec:	492d      	ldr	r1, [pc, #180]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	614b      	str	r3, [r1, #20]
 80036f2:	e02d      	b.n	8003750 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d115      	bne.n	8003726 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036fa:	4b2a      	ldr	r3, [pc, #168]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <RCCEx_PLLSAI2_Config+0x1e0>)
 8003700:	4013      	ands	r3, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6892      	ldr	r2, [r2, #8]
 8003706:	0211      	lsls	r1, r2, #8
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6912      	ldr	r2, [r2, #16]
 800370c:	0852      	lsrs	r2, r2, #1
 800370e:	3a01      	subs	r2, #1
 8003710:	0552      	lsls	r2, r2, #21
 8003712:	4311      	orrs	r1, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6852      	ldr	r2, [r2, #4]
 8003718:	3a01      	subs	r2, #1
 800371a:	0112      	lsls	r2, r2, #4
 800371c:	430a      	orrs	r2, r1
 800371e:	4921      	ldr	r1, [pc, #132]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003720:	4313      	orrs	r3, r2
 8003722:	614b      	str	r3, [r1, #20]
 8003724:	e014      	b.n	8003750 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003726:	4b1f      	ldr	r3, [pc, #124]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800372c:	4013      	ands	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6892      	ldr	r2, [r2, #8]
 8003732:	0211      	lsls	r1, r2, #8
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6952      	ldr	r2, [r2, #20]
 8003738:	0852      	lsrs	r2, r2, #1
 800373a:	3a01      	subs	r2, #1
 800373c:	0652      	lsls	r2, r2, #25
 800373e:	4311      	orrs	r1, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6852      	ldr	r2, [r2, #4]
 8003744:	3a01      	subs	r2, #1
 8003746:	0112      	lsls	r2, r2, #4
 8003748:	430a      	orrs	r2, r1
 800374a:	4916      	ldr	r1, [pc, #88]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800374c:	4313      	orrs	r3, r2
 800374e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003750:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a13      	ldr	r2, [pc, #76]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375c:	f7fc fed2 	bl	8000504 <HAL_GetTick>
 8003760:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003762:	e009      	b.n	8003778 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003764:	f7fc fece 	bl	8000504 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d902      	bls.n	8003778 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	73fb      	strb	r3, [r7, #15]
          break;
 8003776:	e005      	b.n	8003784 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ef      	beq.n	8003764 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	4904      	ldr	r1, [pc, #16]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003794:	4313      	orrs	r3, r2
 8003796:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003798:	7bfb      	ldrb	r3, [r7, #15]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000
 80037a8:	07ff800f 	.word	0x07ff800f
 80037ac:	ff9f800f 	.word	0xff9f800f
 80037b0:	f9ff800f 	.word	0xf9ff800f

080037b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037b4:	b084      	sub	sp, #16
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	f107 001c 	add.w	r0, r7, #28
 80037c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f001 faf6 	bl	8004dc4 <USB_CoreReset>
 80037d8:	4603      	mov	r3, r0
 80037da:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80037dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
 80037ee:	e005      	b.n	80037fc <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003808:	b004      	add	sp, #16
 800380a:	4770      	bx	lr

0800380c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	4613      	mov	r3, r2
 8003818:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d165      	bne.n	80038ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4a3e      	ldr	r2, [pc, #248]	; (800391c <USB_SetTurnaroundTime+0x110>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d906      	bls.n	8003836 <USB_SetTurnaroundTime+0x2a>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4a3d      	ldr	r2, [pc, #244]	; (8003920 <USB_SetTurnaroundTime+0x114>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d202      	bcs.n	8003836 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003830:	230f      	movs	r3, #15
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	e05c      	b.n	80038f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4a39      	ldr	r2, [pc, #228]	; (8003920 <USB_SetTurnaroundTime+0x114>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d306      	bcc.n	800384c <USB_SetTurnaroundTime+0x40>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4a38      	ldr	r2, [pc, #224]	; (8003924 <USB_SetTurnaroundTime+0x118>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d202      	bcs.n	800384c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003846:	230e      	movs	r3, #14
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	e051      	b.n	80038f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4a35      	ldr	r2, [pc, #212]	; (8003924 <USB_SetTurnaroundTime+0x118>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d306      	bcc.n	8003862 <USB_SetTurnaroundTime+0x56>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4a34      	ldr	r2, [pc, #208]	; (8003928 <USB_SetTurnaroundTime+0x11c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d202      	bcs.n	8003862 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800385c:	230d      	movs	r3, #13
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e046      	b.n	80038f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	4a30      	ldr	r2, [pc, #192]	; (8003928 <USB_SetTurnaroundTime+0x11c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d306      	bcc.n	8003878 <USB_SetTurnaroundTime+0x6c>
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4a2f      	ldr	r2, [pc, #188]	; (800392c <USB_SetTurnaroundTime+0x120>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d802      	bhi.n	8003878 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003872:	230c      	movs	r3, #12
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	e03b      	b.n	80038f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4a2c      	ldr	r2, [pc, #176]	; (800392c <USB_SetTurnaroundTime+0x120>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d906      	bls.n	800388e <USB_SetTurnaroundTime+0x82>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4a2b      	ldr	r2, [pc, #172]	; (8003930 <USB_SetTurnaroundTime+0x124>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d802      	bhi.n	800388e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003888:	230b      	movs	r3, #11
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	e030      	b.n	80038f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4a27      	ldr	r2, [pc, #156]	; (8003930 <USB_SetTurnaroundTime+0x124>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d906      	bls.n	80038a4 <USB_SetTurnaroundTime+0x98>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	4a26      	ldr	r2, [pc, #152]	; (8003934 <USB_SetTurnaroundTime+0x128>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d802      	bhi.n	80038a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800389e:	230a      	movs	r3, #10
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	e025      	b.n	80038f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4a23      	ldr	r2, [pc, #140]	; (8003934 <USB_SetTurnaroundTime+0x128>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d906      	bls.n	80038ba <USB_SetTurnaroundTime+0xae>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4a22      	ldr	r2, [pc, #136]	; (8003938 <USB_SetTurnaroundTime+0x12c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d202      	bcs.n	80038ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80038b4:	2309      	movs	r3, #9
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	e01a      	b.n	80038f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <USB_SetTurnaroundTime+0x12c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d306      	bcc.n	80038d0 <USB_SetTurnaroundTime+0xc4>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	4a1d      	ldr	r2, [pc, #116]	; (800393c <USB_SetTurnaroundTime+0x130>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d802      	bhi.n	80038d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80038ca:	2308      	movs	r3, #8
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e00f      	b.n	80038f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4a1a      	ldr	r2, [pc, #104]	; (800393c <USB_SetTurnaroundTime+0x130>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d906      	bls.n	80038e6 <USB_SetTurnaroundTime+0xda>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4a19      	ldr	r2, [pc, #100]	; (8003940 <USB_SetTurnaroundTime+0x134>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d202      	bcs.n	80038e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80038e0:	2307      	movs	r3, #7
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e004      	b.n	80038f0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80038e6:	2306      	movs	r3, #6
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e001      	b.n	80038f0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80038ec:	2309      	movs	r3, #9
 80038ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	029b      	lsls	r3, r3, #10
 8003904:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003908:	431a      	orrs	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	00d8acbf 	.word	0x00d8acbf
 8003920:	00e4e1c0 	.word	0x00e4e1c0
 8003924:	00f42400 	.word	0x00f42400
 8003928:	01067380 	.word	0x01067380
 800392c:	011a499f 	.word	0x011a499f
 8003930:	01312cff 	.word	0x01312cff
 8003934:	014ca43f 	.word	0x014ca43f
 8003938:	016e3600 	.word	0x016e3600
 800393c:	01a6ab1f 	.word	0x01a6ab1f
 8003940:	01e84800 	.word	0x01e84800

08003944 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f043 0201 	orr.w	r2, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f023 0201 	bic.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d115      	bne.n	80039d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039b6:	2001      	movs	r0, #1
 80039b8:	f7fc fdb0 	bl	800051c <HAL_Delay>
      ms++;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3301      	adds	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f001 f985 	bl	8004cd2 <USB_GetMode>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d01e      	beq.n	8003a0c <USB_SetCurrentMode+0x84>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b31      	cmp	r3, #49	; 0x31
 80039d2:	d9f0      	bls.n	80039b6 <USB_SetCurrentMode+0x2e>
 80039d4:	e01a      	b.n	8003a0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d115      	bne.n	8003a08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039e8:	2001      	movs	r0, #1
 80039ea:	f7fc fd97 	bl	800051c <HAL_Delay>
      ms++;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3301      	adds	r3, #1
 80039f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f001 f96c 	bl	8004cd2 <USB_GetMode>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <USB_SetCurrentMode+0x84>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b31      	cmp	r3, #49	; 0x31
 8003a04:	d9f0      	bls.n	80039e8 <USB_SetCurrentMode+0x60>
 8003a06:	e001      	b.n	8003a0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e005      	b.n	8003a18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b32      	cmp	r3, #50	; 0x32
 8003a10:	d101      	bne.n	8003a16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a20:	b084      	sub	sp, #16
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b086      	sub	sp, #24
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	e009      	b.n	8003a54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	3340      	adds	r3, #64	; 0x40
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	3301      	adds	r3, #1
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b0e      	cmp	r3, #14
 8003a58:	d9f2      	bls.n	8003a40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d11c      	bne.n	8003a9a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a6e:	f043 0302 	orr.w	r3, r3, #2
 8003a72:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	e005      	b.n	8003aa6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003aac:	461a      	mov	r2, r3
 8003aae:	2300      	movs	r3, #0
 8003ab0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab8:	4619      	mov	r1, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	680b      	ldr	r3, [r1, #0]
 8003ac4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ac6:	2103      	movs	r1, #3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f959 	bl	8003d80 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ace:	2110      	movs	r1, #16
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f8f1 	bl	8003cb8 <USB_FlushTxFifo>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f91d 	bl	8003d20 <USB_FlushRxFifo>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af6:	461a      	mov	r2, r3
 8003af8:	2300      	movs	r3, #0
 8003afa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b02:	461a      	mov	r2, r3
 8003b04:	2300      	movs	r3, #0
 8003b06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2300      	movs	r3, #0
 8003b12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	e043      	b.n	8003ba2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b30:	d118      	bne.n	8003b64 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b44:	461a      	mov	r2, r3
 8003b46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	e013      	b.n	8003b76 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e008      	b.n	8003b76 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b70:	461a      	mov	r2, r3
 8003b72:	2300      	movs	r3, #0
 8003b74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b82:	461a      	mov	r2, r3
 8003b84:	2300      	movs	r3, #0
 8003b86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b94:	461a      	mov	r2, r3
 8003b96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d3b7      	bcc.n	8003b1a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	e043      	b.n	8003c38 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bc6:	d118      	bne.n	8003bfa <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10a      	bne.n	8003be4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	e013      	b.n	8003c0c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	e008      	b.n	8003c0c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c06:	461a      	mov	r2, r3
 8003c08:	2300      	movs	r3, #0
 8003c0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	3301      	adds	r3, #1
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d3b7      	bcc.n	8003bb0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f043 0210 	orr.w	r2, r3, #16
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699a      	ldr	r2, [r3, #24]
 8003c72:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <USB_DevInit+0x294>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f043 0208 	orr.w	r2, r3, #8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c9a:	f043 0304 	orr.w	r3, r3, #4
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cae:	b004      	add	sp, #16
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	803c3800 	.word	0x803c3800

08003cb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <USB_FlushTxFifo+0x64>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d901      	bls.n	8003cd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e01b      	b.n	8003d10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	daf2      	bge.n	8003cc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	019b      	lsls	r3, r3, #6
 8003ce8:	f043 0220 	orr.w	r2, r3, #32
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4a08      	ldr	r2, [pc, #32]	; (8003d1c <USB_FlushTxFifo+0x64>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e006      	b.n	8003d10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d0f0      	beq.n	8003cf0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	00030d40 	.word	0x00030d40

08003d20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4a11      	ldr	r2, [pc, #68]	; (8003d7c <USB_FlushRxFifo+0x5c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e018      	b.n	8003d70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	daf2      	bge.n	8003d2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3301      	adds	r3, #1
 8003d54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4a08      	ldr	r2, [pc, #32]	; (8003d7c <USB_FlushRxFifo+0x5c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e006      	b.n	8003d70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0310 	and.w	r3, r3, #16
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	d0f0      	beq.n	8003d50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	00030d40 	.word	0x00030d40

08003d80 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	68f9      	ldr	r1, [r7, #12]
 8003d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b087      	sub	sp, #28
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 0306 	and.w	r3, r3, #6
 8003dca:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d002      	beq.n	8003dd8 <USB_GetDevSpeed+0x26>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b06      	cmp	r3, #6
 8003dd6:	d102      	bne.n	8003dde <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	75fb      	strb	r3, [r7, #23]
 8003ddc:	e001      	b.n	8003de2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003dde:	230f      	movs	r3, #15
 8003de0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	785b      	ldrb	r3, [r3, #1]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d13a      	bne.n	8003e82 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	68f9      	ldr	r1, [r7, #12]
 8003e26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d155      	bne.n	8003ef0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	791b      	ldrb	r3, [r3, #4]
 8003e5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	059b      	lsls	r3, r3, #22
 8003e66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	0151      	lsls	r1, r2, #5
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	440a      	add	r2, r1
 8003e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	e036      	b.n	8003ef0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e88:	69da      	ldr	r2, [r3, #28]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	2101      	movs	r1, #1
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	041b      	lsls	r3, r3, #16
 8003e9a:	68f9      	ldr	r1, [r7, #12]
 8003e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d11a      	bne.n	8003ef0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	791b      	ldrb	r3, [r3, #4]
 8003ed4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	0151      	lsls	r1, r2, #5
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	440a      	add	r2, r1
 8003ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	785b      	ldrb	r3, [r3, #1]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d161      	bne.n	8003fe0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f32:	d11f      	bne.n	8003f74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	0151      	lsls	r1, r2, #5
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	440a      	add	r2, r1
 8003f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	0151      	lsls	r1, r2, #5
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	440a      	add	r2, r1
 8003f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	2101      	movs	r1, #1
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	68f9      	ldr	r1, [r7, #12]
 8003f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f94:	4013      	ands	r3, r2
 8003f96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	2101      	movs	r1, #1
 8003faa:	fa01 f303 	lsl.w	r3, r1, r3
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	68f9      	ldr	r1, [r7, #12]
 8003fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	0159      	lsls	r1, r3, #5
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	440b      	add	r3, r1
 8003fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4b35      	ldr	r3, [pc, #212]	; (80040b0 <USB_DeactivateEndpoint+0x1b0>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	600b      	str	r3, [r1, #0]
 8003fde:	e060      	b.n	80040a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ff6:	d11f      	bne.n	8004038 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	0151      	lsls	r1, r2, #5
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	440a      	add	r2, r1
 800400e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004012:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004016:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	0151      	lsls	r1, r2, #5
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	440a      	add	r2, r1
 800402e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004032:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004036:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	2101      	movs	r1, #1
 800404a:	fa01 f303 	lsl.w	r3, r1, r3
 800404e:	041b      	lsls	r3, r3, #16
 8004050:	43db      	mvns	r3, r3
 8004052:	68f9      	ldr	r1, [r7, #12]
 8004054:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004058:	4013      	ands	r3, r2
 800405a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f303 	lsl.w	r3, r1, r3
 8004072:	041b      	lsls	r3, r3, #16
 8004074:	43db      	mvns	r3, r3
 8004076:	68f9      	ldr	r1, [r7, #12]
 8004078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800407c:	4013      	ands	r3, r2
 800407e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	0159      	lsls	r1, r3, #5
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	440b      	add	r3, r1
 8004096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409a:	4619      	mov	r1, r3
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <USB_DeactivateEndpoint+0x1b4>)
 800409e:	4013      	ands	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	ec337800 	.word	0xec337800
 80040b4:	eff37800 	.word	0xeff37800

080040b8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	785b      	ldrb	r3, [r3, #1]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	f040 810a 	bne.w	80042ea <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d132      	bne.n	8004144 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	0151      	lsls	r1, r2, #5
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	440a      	add	r2, r1
 80040f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004100:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	0151      	lsls	r1, r2, #5
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	440a      	add	r2, r1
 8004118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800411c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004120:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	0151      	lsls	r1, r2, #5
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	440a      	add	r2, r1
 8004138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800413c:	0cdb      	lsrs	r3, r3, #19
 800413e:	04db      	lsls	r3, r3, #19
 8004140:	6113      	str	r3, [r2, #16]
 8004142:	e074      	b.n	800422e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	0151      	lsls	r1, r2, #5
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	440a      	add	r2, r1
 800415a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415e:	0cdb      	lsrs	r3, r3, #19
 8004160:	04db      	lsls	r3, r3, #19
 8004162:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	0151      	lsls	r1, r2, #5
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	440a      	add	r2, r1
 800417a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004182:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004186:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004194:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	6999      	ldr	r1, [r3, #24]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	440b      	add	r3, r1
 80041a0:	1e59      	subs	r1, r3, #1
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80041aa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80041ac:	4b9e      	ldr	r3, [pc, #632]	; (8004428 <USB_EPStartXfer+0x370>)
 80041ae:	400b      	ands	r3, r1
 80041b0:	6939      	ldr	r1, [r7, #16]
 80041b2:	0148      	lsls	r0, r1, #5
 80041b4:	6979      	ldr	r1, [r7, #20]
 80041b6:	4401      	add	r1, r0
 80041b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041bc:	4313      	orrs	r3, r2
 80041be:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d6:	6939      	ldr	r1, [r7, #16]
 80041d8:	0148      	lsls	r0, r1, #5
 80041da:	6979      	ldr	r1, [r7, #20]
 80041dc:	4401      	add	r1, r0
 80041de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041e2:	4313      	orrs	r3, r2
 80041e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	791b      	ldrb	r3, [r3, #4]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d11f      	bne.n	800422e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	0151      	lsls	r1, r2, #5
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	440a      	add	r2, r1
 8004204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004208:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800420c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	0151      	lsls	r1, r2, #5
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	440a      	add	r2, r1
 8004224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004228:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800422c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	0151      	lsls	r1, r2, #5
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	440a      	add	r2, r1
 8004244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004248:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800424c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	791b      	ldrb	r3, [r3, #4]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d015      	beq.n	8004282 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8106 	beq.w	800446c <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	2101      	movs	r1, #1
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	6979      	ldr	r1, [r7, #20]
 8004278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800427c:	4313      	orrs	r3, r2
 800427e:	634b      	str	r3, [r1, #52]	; 0x34
 8004280:	e0f4      	b.n	800446c <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d110      	bne.n	80042b4 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	e00f      	b.n	80042d4 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	0151      	lsls	r1, r2, #5
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	440a      	add	r2, r1
 80042ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	6919      	ldr	r1, [r3, #16]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	781a      	ldrb	r2, [r3, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fa94 	bl	8004810 <USB_WritePacket>
 80042e8:	e0c0      	b.n	800446c <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	0151      	lsls	r1, r2, #5
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	440a      	add	r2, r1
 8004300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004304:	0cdb      	lsrs	r3, r3, #19
 8004306:	04db      	lsls	r3, r3, #19
 8004308:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	0151      	lsls	r1, r2, #5
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	440a      	add	r2, r1
 8004320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004324:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004328:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800432c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d123      	bne.n	800437e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434c:	6939      	ldr	r1, [r7, #16]
 800434e:	0148      	lsls	r0, r1, #5
 8004350:	6979      	ldr	r1, [r7, #20]
 8004352:	4401      	add	r1, r0
 8004354:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004358:	4313      	orrs	r3, r2
 800435a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	0151      	lsls	r1, r2, #5
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	440a      	add	r2, r1
 8004372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800437a:	6113      	str	r3, [r2, #16]
 800437c:	e037      	b.n	80043ee <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	4413      	add	r3, r2
 8004388:	1e5a      	subs	r2, r3, #1
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004392:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	89fa      	ldrh	r2, [r7, #14]
 800439a:	fb03 f202 	mul.w	r2, r3, r2
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	89fb      	ldrh	r3, [r7, #14]
 80043b2:	04d9      	lsls	r1, r3, #19
 80043b4:	4b1c      	ldr	r3, [pc, #112]	; (8004428 <USB_EPStartXfer+0x370>)
 80043b6:	400b      	ands	r3, r1
 80043b8:	6939      	ldr	r1, [r7, #16]
 80043ba:	0148      	lsls	r0, r1, #5
 80043bc:	6979      	ldr	r1, [r7, #20]
 80043be:	4401      	add	r1, r0
 80043c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043c4:	4313      	orrs	r3, r2
 80043c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043de:	6939      	ldr	r1, [r7, #16]
 80043e0:	0148      	lsls	r0, r1, #5
 80043e2:	6979      	ldr	r1, [r7, #20]
 80043e4:	4401      	add	r1, r0
 80043e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043ea:	4313      	orrs	r3, r2
 80043ec:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	791b      	ldrb	r3, [r3, #4]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d12a      	bne.n	800444c <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d112      	bne.n	800442c <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	0151      	lsls	r1, r2, #5
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	440a      	add	r2, r1
 800441c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004420:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	e011      	b.n	800444c <USB_EPStartXfer+0x394>
 8004428:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	0151      	lsls	r1, r2, #5
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	440a      	add	r2, r1
 8004442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	0151      	lsls	r1, r2, #5
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	440a      	add	r2, r1
 8004462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004466:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800446a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop

08004478 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	2b01      	cmp	r3, #1
 8004492:	f040 80ab 	bne.w	80045ec <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d132      	bne.n	8004504 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	0151      	lsls	r1, r2, #5
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	440a      	add	r2, r1
 80044b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	0151      	lsls	r1, r2, #5
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	440a      	add	r2, r1
 80044d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	0151      	lsls	r1, r2, #5
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	440a      	add	r2, r1
 80044f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044fc:	0cdb      	lsrs	r3, r3, #19
 80044fe:	04db      	lsls	r3, r3, #19
 8004500:	6113      	str	r3, [r2, #16]
 8004502:	e04e      	b.n	80045a2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	0151      	lsls	r1, r2, #5
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	440a      	add	r2, r1
 800451a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800451e:	0cdb      	lsrs	r3, r3, #19
 8004520:	04db      	lsls	r3, r3, #19
 8004522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	440a      	add	r2, r1
 800453a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800453e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004542:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004546:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	699a      	ldr	r2, [r3, #24]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	429a      	cmp	r2, r3
 8004552:	d903      	bls.n	800455c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	0151      	lsls	r1, r2, #5
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	440a      	add	r2, r1
 8004572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004576:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800457a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	0148      	lsls	r0, r1, #5
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	4401      	add	r1, r0
 800459a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800459e:	4313      	orrs	r3, r2
 80045a0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	0151      	lsls	r1, r2, #5
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	440a      	add	r2, r1
 80045b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045c0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d071      	beq.n	80046ae <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	2101      	movs	r1, #1
 80045dc:	fa01 f303 	lsl.w	r3, r1, r3
 80045e0:	68f9      	ldr	r1, [r7, #12]
 80045e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045e6:	4313      	orrs	r3, r2
 80045e8:	634b      	str	r3, [r1, #52]	; 0x34
 80045ea:	e060      	b.n	80046ae <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	440a      	add	r2, r1
 8004602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004606:	0cdb      	lsrs	r3, r3, #19
 8004608:	04db      	lsls	r3, r3, #19
 800460a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	0151      	lsls	r1, r2, #5
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	440a      	add	r2, r1
 8004622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004626:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800462a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800462e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	0151      	lsls	r1, r2, #5
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	440a      	add	r2, r1
 800465e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004666:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	0148      	lsls	r0, r1, #5
 8004682:	68f9      	ldr	r1, [r7, #12]
 8004684:	4401      	add	r1, r0
 8004686:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800468a:	4313      	orrs	r3, r2
 800468c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	0151      	lsls	r1, r2, #5
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	440a      	add	r2, r1
 80046a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	785b      	ldrb	r3, [r3, #1]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d14a      	bne.n	8004770 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046f2:	f040 8086 	bne.w	8004802 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	7812      	ldrb	r2, [r2, #0]
 800470a:	0151      	lsls	r1, r2, #5
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	440a      	add	r2, r1
 8004710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004714:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004718:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	7812      	ldrb	r2, [r2, #0]
 800472e:	0151      	lsls	r1, r2, #5
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	440a      	add	r2, r1
 8004734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004738:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800473c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3301      	adds	r3, #1
 8004742:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f242 7210 	movw	r2, #10000	; 0x2710
 800474a:	4293      	cmp	r3, r2
 800474c:	d902      	bls.n	8004754 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	75fb      	strb	r3, [r7, #23]
          break;
 8004752:	e056      	b.n	8004802 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800476c:	d0e7      	beq.n	800473e <USB_EPStopXfer+0x82>
 800476e:	e048      	b.n	8004802 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004788:	d13b      	bne.n	8004802 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	7812      	ldrb	r2, [r2, #0]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	7812      	ldrb	r2, [r2, #0]
 80047c2:	0151      	lsls	r1, r2, #5
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	440a      	add	r2, r1
 80047c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3301      	adds	r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f242 7210 	movw	r2, #10000	; 0x2710
 80047de:	4293      	cmp	r3, r2
 80047e0:	d902      	bls.n	80047e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	75fb      	strb	r3, [r7, #23]
          break;
 80047e6:	e00c      	b.n	8004802 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004800:	d0e7      	beq.n	80047d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004802:	7dfb      	ldrb	r3, [r7, #23]
}
 8004804:	4618      	mov	r0, r3
 8004806:	371c      	adds	r7, #28
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004810:	b480      	push	{r7}
 8004812:	b089      	sub	sp, #36	; 0x24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	4611      	mov	r1, r2
 800481c:	461a      	mov	r2, r3
 800481e:	460b      	mov	r3, r1
 8004820:	71fb      	strb	r3, [r7, #7]
 8004822:	4613      	mov	r3, r2
 8004824:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800482e:	88bb      	ldrh	r3, [r7, #4]
 8004830:	3303      	adds	r3, #3
 8004832:	089b      	lsrs	r3, r3, #2
 8004834:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004836:	2300      	movs	r3, #0
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	e018      	b.n	800486e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	031a      	lsls	r2, r3, #12
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	4413      	add	r3, r2
 8004844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004848:	461a      	mov	r2, r3
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	3301      	adds	r3, #1
 8004854:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	3301      	adds	r3, #1
 800485a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	3301      	adds	r3, #1
 8004860:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	3301      	adds	r3, #1
 8004866:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	3301      	adds	r3, #1
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	429a      	cmp	r2, r3
 8004874:	d3e2      	bcc.n	800483c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3724      	adds	r7, #36	; 0x24
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004884:	b480      	push	{r7}
 8004886:	b08b      	sub	sp, #44	; 0x2c
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	4613      	mov	r3, r2
 8004890:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	089b      	lsrs	r3, r3, #2
 800489e:	b29b      	uxth	r3, r3
 80048a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80048aa:	2300      	movs	r3, #0
 80048ac:	623b      	str	r3, [r7, #32]
 80048ae:	e014      	b.n	80048da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	3301      	adds	r3, #1
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	3301      	adds	r3, #1
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	3301      	adds	r3, #1
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	3301      	adds	r3, #1
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	3301      	adds	r3, #1
 80048d8:	623b      	str	r3, [r7, #32]
 80048da:	6a3a      	ldr	r2, [r7, #32]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d3e6      	bcc.n	80048b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048e2:	8bfb      	ldrh	r3, [r7, #30]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01e      	beq.n	8004926 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f2:	461a      	mov	r2, r3
 80048f4:	f107 0310 	add.w	r3, r7, #16
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
 8004908:	b2da      	uxtb	r2, r3
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	701a      	strb	r2, [r3, #0]
      i++;
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	3301      	adds	r3, #1
 8004912:	623b      	str	r3, [r7, #32]
      pDest++;
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	3301      	adds	r3, #1
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800491a:	8bfb      	ldrh	r3, [r7, #30]
 800491c:	3b01      	subs	r3, #1
 800491e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004920:	8bfb      	ldrh	r3, [r7, #30]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1ea      	bne.n	80048fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004928:	4618      	mov	r0, r3
 800492a:	372c      	adds	r7, #44	; 0x2c
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	785b      	ldrb	r3, [r3, #1]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d12c      	bne.n	80049aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	db12      	blt.n	8004988 <USB_EPSetStall+0x54>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00f      	beq.n	8004988 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	0151      	lsls	r1, r2, #5
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	440a      	add	r2, r1
 800497e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004982:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004986:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	e02b      	b.n	8004a02 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	db12      	blt.n	80049e2 <USB_EPSetStall+0xae>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00f      	beq.n	80049e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	0151      	lsls	r1, r2, #5
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	440a      	add	r2, r1
 80049d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	0151      	lsls	r1, r2, #5
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	440a      	add	r2, r1
 80049f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	785b      	ldrb	r3, [r3, #1]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d128      	bne.n	8004a7e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	0151      	lsls	r1, r2, #5
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	440a      	add	r2, r1
 8004a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	791b      	ldrb	r3, [r3, #4]
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d003      	beq.n	8004a5c <USB_EPClearStall+0x4c>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	791b      	ldrb	r3, [r3, #4]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d138      	bne.n	8004ace <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	0151      	lsls	r1, r2, #5
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	440a      	add	r2, r1
 8004a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	e027      	b.n	8004ace <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	0151      	lsls	r1, r2, #5
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	440a      	add	r2, r1
 8004a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	791b      	ldrb	r3, [r3, #4]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d003      	beq.n	8004aae <USB_EPClearStall+0x9e>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	791b      	ldrb	r3, [r3, #4]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d10f      	bne.n	8004ace <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	0151      	lsls	r1, r2, #5
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	440a      	add	r2, r1
 8004ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004acc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004afa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004afe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004b10:	68f9      	ldr	r1, [r7, #12]
 8004b12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b16:	4313      	orrs	r3, r2
 8004b18:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b42:	f023 0303 	bic.w	r3, r3, #3
 8004b46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b56:	f023 0302 	bic.w	r3, r3, #2
 8004b5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b085      	sub	sp, #20
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b84:	f023 0303 	bic.w	r3, r3, #3
 8004b88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b98:	f043 0302 	orr.w	r3, r3, #2
 8004b9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	0c1b      	lsrs	r3, r3, #16
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	4013      	ands	r3, r2
 8004c28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	b29b      	uxth	r3, r3
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b085      	sub	sp, #20
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	460b      	mov	r3, r1
 8004c44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	4013      	ands	r3, r2
 8004c66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c68:	68bb      	ldr	r3, [r7, #8]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b087      	sub	sp, #28
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c98:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c9a:	78fb      	ldrb	r3, [r7, #3]
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca6:	01db      	lsls	r3, r3, #7
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f003 0301 	and.w	r3, r3, #1
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d0c:	f023 0307 	bic.w	r3, r3, #7
 8004d10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	333c      	adds	r3, #60	; 0x3c
 8004d46:	3304      	adds	r3, #4
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4a1c      	ldr	r2, [pc, #112]	; (8004dc0 <USB_EP0_OutStart+0x8c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d90a      	bls.n	8004d6a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d64:	d101      	bne.n	8004d6a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	e024      	b.n	8004db4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d70:	461a      	mov	r2, r3
 8004d72:	2300      	movs	r3, #0
 8004d74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d98:	f043 0318 	orr.w	r3, r3, #24
 8004d9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004db0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	4f54300a 	.word	0x4f54300a

08004dc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4a13      	ldr	r2, [pc, #76]	; (8004e28 <USB_CoreReset+0x64>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d901      	bls.n	8004de2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e01b      	b.n	8004e1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	daf2      	bge.n	8004dd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f043 0201 	orr.w	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4a09      	ldr	r2, [pc, #36]	; (8004e28 <USB_CoreReset+0x64>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d901      	bls.n	8004e0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e006      	b.n	8004e1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d0f0      	beq.n	8004dfa <USB_CoreReset+0x36>

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	00030d40 	.word	0x00030d40

08004e2c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8004e38:	f44f 701d 	mov.w	r0, #628	; 0x274
 8004e3c:	f003 fd62 	bl	8008904 <USBD_static_malloc>
 8004e40:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d105      	bne.n	8004e54 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004e50:	2302      	movs	r3, #2
 8004e52:	e034      	b.n	8004ebe <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	7c1b      	ldrb	r3, [r3, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d115      	bne.n	8004e90 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e68:	2202      	movs	r2, #2
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f003 faff 	bl	8008470 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e7e:	2202      	movs	r2, #2
 8004e80:	2181      	movs	r1, #129	; 0x81
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f003 faf4 	bl	8008470 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	871a      	strh	r2, [r3, #56]	; 0x38
 8004e8e:	e012      	b.n	8004eb6 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004e90:	2340      	movs	r3, #64	; 0x40
 8004e92:	2202      	movs	r2, #2
 8004e94:	2101      	movs	r1, #1
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f003 faea 	bl	8008470 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004ea4:	2340      	movs	r3, #64	; 0x40
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	2181      	movs	r1, #129	; 0x81
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f003 fae0 	bl	8008470 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f999 	bl	80051ee <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f003 fb09 	bl	80084ec <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8004ee2:	2181      	movs	r1, #129	; 0x81
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f003 fb01 	bl	80084ec <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00c      	beq.n	8004f14 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f9d5 	bl	80052aa <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f06:	4618      	mov	r0, r3
 8004f08:	f003 fd0a 	bl	8008920 <USBD_static_free>
    pdev->pClassData = NULL;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f30:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e0db      	b.n	80050fc <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d04e      	beq.n	8004fee <USBD_MSC_Setup+0xce>
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	f040 80cb 	bne.w	80050ec <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	2bfe      	cmp	r3, #254	; 0xfe
 8004f5c:	d002      	beq.n	8004f64 <USBD_MSC_Setup+0x44>
 8004f5e:	2bff      	cmp	r3, #255	; 0xff
 8004f60:	d025      	beq.n	8004fae <USBD_MSC_Setup+0x8e>
 8004f62:	e03c      	b.n	8004fde <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	885b      	ldrh	r3, [r3, #2]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d119      	bne.n	8004fa0 <USBD_MSC_Setup+0x80>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	88db      	ldrh	r3, [r3, #6]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d115      	bne.n	8004fa0 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	da10      	bge.n	8004fa0 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	4798      	blx	r3
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	2201      	movs	r2, #1
 8004f94:	4619      	mov	r1, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f002 fe3d 	bl	8007c16 <USBD_CtlSendData>
 8004f9c:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f9e:	e025      	b.n	8004fec <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8004fa0:	6839      	ldr	r1, [r7, #0]
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f002 fdc6 	bl	8007b34 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	75fb      	strb	r3, [r7, #23]
          break;
 8004fac:	e01e      	b.n	8004fec <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	885b      	ldrh	r3, [r3, #2]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10c      	bne.n	8004fd0 <USBD_MSC_Setup+0xb0>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	88db      	ldrh	r3, [r3, #6]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d108      	bne.n	8004fd0 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	db03      	blt.n	8004fd0 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f948 	bl	800525e <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fce:	e00d      	b.n	8004fec <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8004fd0:	6839      	ldr	r1, [r7, #0]
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f002 fdae 	bl	8007b34 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	75fb      	strb	r3, [r7, #23]
          break;
 8004fdc:	e006      	b.n	8004fec <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8004fde:	6839      	ldr	r1, [r7, #0]
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f002 fda7 	bl	8007b34 <USBD_CtlError>
          ret = USBD_FAIL;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	75fb      	strb	r3, [r7, #23]
          break;
 8004fea:	bf00      	nop
      }
      break;
 8004fec:	e085      	b.n	80050fa <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	785b      	ldrb	r3, [r3, #1]
 8004ff2:	2b0b      	cmp	r3, #11
 8004ff4:	d871      	bhi.n	80050da <USBD_MSC_Setup+0x1ba>
 8004ff6:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <USBD_MSC_Setup+0xdc>)
 8004ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffc:	0800502d 	.word	0x0800502d
 8005000:	080050a9 	.word	0x080050a9
 8005004:	080050db 	.word	0x080050db
 8005008:	080050db 	.word	0x080050db
 800500c:	080050db 	.word	0x080050db
 8005010:	080050db 	.word	0x080050db
 8005014:	080050db 	.word	0x080050db
 8005018:	080050db 	.word	0x080050db
 800501c:	080050db 	.word	0x080050db
 8005020:	080050db 	.word	0x080050db
 8005024:	08005057 	.word	0x08005057
 8005028:	08005081 	.word	0x08005081
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b03      	cmp	r3, #3
 8005036:	d107      	bne.n	8005048 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005038:	f107 030e 	add.w	r3, r7, #14
 800503c:	2202      	movs	r2, #2
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f002 fde8 	bl	8007c16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005046:	e050      	b.n	80050ea <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8005048:	6839      	ldr	r1, [r7, #0]
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f002 fd72 	bl	8007b34 <USBD_CtlError>
            ret = USBD_FAIL;
 8005050:	2303      	movs	r3, #3
 8005052:	75fb      	strb	r3, [r7, #23]
          break;
 8005054:	e049      	b.n	80050ea <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b03      	cmp	r3, #3
 8005060:	d107      	bne.n	8005072 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	3304      	adds	r3, #4
 8005066:	2201      	movs	r2, #1
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f002 fdd3 	bl	8007c16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005070:	e03b      	b.n	80050ea <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8005072:	6839      	ldr	r1, [r7, #0]
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f002 fd5d 	bl	8007b34 <USBD_CtlError>
            ret = USBD_FAIL;
 800507a:	2303      	movs	r3, #3
 800507c:	75fb      	strb	r3, [r7, #23]
          break;
 800507e:	e034      	b.n	80050ea <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b03      	cmp	r3, #3
 800508a:	d106      	bne.n	800509a <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	885b      	ldrh	r3, [r3, #2]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	461a      	mov	r2, r3
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005098:	e027      	b.n	80050ea <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800509a:	6839      	ldr	r1, [r7, #0]
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f002 fd49 	bl	8007b34 <USBD_CtlError>
            ret = USBD_FAIL;
 80050a2:	2303      	movs	r3, #3
 80050a4:	75fb      	strb	r3, [r7, #23]
          break;
 80050a6:	e020      	b.n	80050ea <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d119      	bne.n	80050e8 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	885b      	ldrh	r3, [r3, #2]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d115      	bne.n	80050e8 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	889b      	ldrh	r3, [r3, #4]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f003 fa47 	bl	8008558 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	889b      	ldrh	r3, [r3, #4]
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa82 	bl	80055dc <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80050d8:	e006      	b.n	80050e8 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 80050da:	6839      	ldr	r1, [r7, #0]
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f002 fd29 	bl	8007b34 <USBD_CtlError>
          ret = USBD_FAIL;
 80050e2:	2303      	movs	r3, #3
 80050e4:	75fb      	strb	r3, [r7, #23]
          break;
 80050e6:	e000      	b.n	80050ea <USBD_MSC_Setup+0x1ca>
          break;
 80050e8:	bf00      	nop
      }
      break;
 80050ea:	e006      	b.n	80050fa <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 80050ec:	6839      	ldr	r1, [r7, #0]
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f002 fd20 	bl	8007b34 <USBD_CtlError>
      ret = USBD_FAIL;
 80050f4:	2303      	movs	r3, #3
 80050f6:	75fb      	strb	r3, [r7, #23]
      break;
 80050f8:	bf00      	nop
  }

  return (uint8_t)ret;
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	4619      	mov	r1, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f8dc 	bl	80052d2 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8005130:	78fb      	ldrb	r3, [r7, #3]
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f902 	bl	800533e <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8005152:	4b03      	ldr	r3, [pc, #12]	; (8005160 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	20000044 	.word	0x20000044

08005164 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8005172:	4b03      	ldr	r3, [pc, #12]	; (8005180 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	20000064 	.word	0x20000064

08005184 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8005192:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005194:	4618      	mov	r0, r3
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	20000084 	.word	0x20000084

080051a4 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	220a      	movs	r2, #10
 80051b0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80051b2:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	200000a4 	.word	0x200000a4

080051c4 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e004      	b.n	80051e2 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b084      	sub	sp, #16
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051fc:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d028      	beq.n	8005256 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2000      	movs	r0, #0
 8005232:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8005234:	2101      	movs	r1, #1
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f003 f98e 	bl	8008558 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800523c:	2181      	movs	r1, #129	; 0x81
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f003 f98a 	bl	8008558 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800524a:	231f      	movs	r3, #31
 800524c:	2101      	movs	r1, #1
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f003 fabe 	bl	80087d0 <USBD_LL_PrepareReceive>
 8005254:	e000      	b.n	8005258 <MSC_BOT_Init+0x6a>
    return;
 8005256:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800526c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d016      	beq.n	80052a2 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8005280:	2181      	movs	r1, #129	; 0x81
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f003 f9d4 	bl	8008630 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8005288:	2101      	movs	r1, #1
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f003 f9d0 	bl	8008630 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8005296:	231f      	movs	r3, #31
 8005298:	2101      	movs	r1, #1
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f003 fa98 	bl	80087d0 <USBD_LL_PrepareReceive>
 80052a0:	e000      	b.n	80052a4 <MSC_BOT_Reset+0x46>
    return;
 80052a2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052b8:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	721a      	strb	r2, [r3, #8]
  }
}
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	460b      	mov	r3, r1
 80052dc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052e4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d020      	beq.n	800532e <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	7a1b      	ldrb	r3, [r3, #8]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d005      	beq.n	8005300 <MSC_BOT_DataIn+0x2e>
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	db1c      	blt.n	8005332 <MSC_BOT_DataIn+0x60>
 80052f8:	3b03      	subs	r3, #3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d819      	bhi.n	8005332 <MSC_BOT_DataIn+0x60>
 80052fe:	e011      	b.n	8005324 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800530c:	461a      	mov	r2, r3
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f992 	bl	8005638 <SCSI_ProcessCmd>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	da0d      	bge.n	8005336 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800531a:	2101      	movs	r1, #1
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f8fb 	bl	8005518 <MSC_BOT_SendCSW>
      }
      break;
 8005322:	e008      	b.n	8005336 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005324:	2100      	movs	r1, #0
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f8f6 	bl	8005518 <MSC_BOT_SendCSW>
      break;
 800532c:	e004      	b.n	8005338 <MSC_BOT_DataIn+0x66>
    return;
 800532e:	bf00      	nop
 8005330:	e002      	b.n	8005338 <MSC_BOT_DataIn+0x66>

    default:
      break;
 8005332:	bf00      	nop
 8005334:	e000      	b.n	8005338 <MSC_BOT_DataIn+0x66>
      break;
 8005336:	bf00      	nop
  }
}
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	460b      	mov	r3, r1
 8005348:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005350:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01c      	beq.n	8005392 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	7a1b      	ldrb	r3, [r3, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <MSC_BOT_DataOut+0x28>
 8005360:	2b01      	cmp	r3, #1
 8005362:	d004      	beq.n	800536e <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8005364:	e018      	b.n	8005398 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f81a 	bl	80053a0 <MSC_BOT_CBW_Decode>
      break;
 800536c:	e014      	b.n	8005398 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800537a:	461a      	mov	r2, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f95b 	bl	8005638 <SCSI_ProcessCmd>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	da06      	bge.n	8005396 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005388:	2101      	movs	r1, #1
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f8c4 	bl	8005518 <MSC_BOT_SendCSW>
      break;
 8005390:	e001      	b.n	8005396 <MSC_BOT_DataOut+0x58>
    return;
 8005392:	bf00      	nop
 8005394:	e000      	b.n	8005398 <MSC_BOT_DataOut+0x5a>
      break;
 8005396:	bf00      	nop
  }
}
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053ae:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d077      	beq.n	80054a6 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80053ce:	2101      	movs	r1, #1
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f003 fa35 	bl	8008840 <USBD_LL_GetRxDataSize>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b1f      	cmp	r3, #31
 80053da:	d114      	bne.n	8005406 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80053e2:	4a34      	ldr	r2, [pc, #208]	; (80054b4 <MSC_BOT_CBW_Decode+0x114>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d10e      	bne.n	8005406 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d809      	bhi.n	8005406 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d004      	beq.n	8005406 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8005402:	2b10      	cmp	r3, #16
 8005404:	d90e      	bls.n	8005424 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800540c:	2320      	movs	r3, #32
 800540e:	2205      	movs	r2, #5
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fdbc 	bl	8005f8e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2202      	movs	r2, #2
 800541a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f8ab 	bl	8005578 <MSC_BOT_Abort>
 8005422:	e043      	b.n	80054ac <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8005430:	461a      	mov	r2, r3
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f900 	bl	8005638 <SCSI_ProcessCmd>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	da0c      	bge.n	8005458 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	7a1b      	ldrb	r3, [r3, #8]
 8005442:	2b05      	cmp	r3, #5
 8005444:	d104      	bne.n	8005450 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005446:	2101      	movs	r1, #1
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f865 	bl	8005518 <MSC_BOT_SendCSW>
 800544e:	e02d      	b.n	80054ac <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f891 	bl	8005578 <MSC_BOT_Abort>
 8005456:	e029      	b.n	80054ac <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	7a1b      	ldrb	r3, [r3, #8]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d024      	beq.n	80054aa <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005464:	2b01      	cmp	r3, #1
 8005466:	d020      	beq.n	80054aa <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800546c:	2b03      	cmp	r3, #3
 800546e:	d01c      	beq.n	80054aa <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d009      	beq.n	800548c <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f103 0110 	add.w	r1, r3, #16
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	461a      	mov	r2, r3
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f817 	bl	80054b8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800548a:	e00f      	b.n	80054ac <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d104      	bne.n	800549e <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005494:	2100      	movs	r1, #0
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f83e 	bl	8005518 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800549c:	e006      	b.n	80054ac <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f86a 	bl	8005578 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80054a4:	e002      	b.n	80054ac <MSC_BOT_CBW_Decode+0x10c>
    return;
 80054a6:	bf00      	nop
 80054a8:	e000      	b.n	80054ac <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 80054aa:	bf00      	nop
    }
  }
}
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	43425355 	.word	0x43425355

080054b8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ca:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	4293      	cmp	r3, r2
 80054d6:	bf28      	it	cs
 80054d8:	4613      	movcs	r3, r2
 80054da:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d015      	beq.n	800550e <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	1ad2      	subs	r2, r2, r3
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2204      	movs	r2, #4
 80054fe:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	2181      	movs	r1, #129	; 0x81
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f003 f92a 	bl	8008760 <USBD_LL_Transmit>
 800550c:	e000      	b.n	8005510 <MSC_BOT_SendData+0x58>
    return;
 800550e:	bf00      	nop
}
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800552a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d01b      	beq.n	800556a <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4a0f      	ldr	r2, [pc, #60]	; (8005574 <MSC_BOT_SendCSW+0x5c>)
 8005536:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	78fa      	ldrb	r2, [r7, #3]
 800553e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800554e:	230d      	movs	r3, #13
 8005550:	2181      	movs	r1, #129	; 0x81
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f003 f904 	bl	8008760 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800555e:	231f      	movs	r3, #31
 8005560:	2101      	movs	r1, #1
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f003 f934 	bl	80087d0 <USBD_LL_PrepareReceive>
 8005568:	e000      	b.n	800556c <MSC_BOT_SendCSW+0x54>
    return;
 800556a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	53425355 	.word	0x53425355

08005578 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005586:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d022      	beq.n	80055d4 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10c      	bne.n	80055b2 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d007      	beq.n	80055b2 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d103      	bne.n	80055b2 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80055aa:	2101      	movs	r1, #1
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f003 f809 	bl	80085c4 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80055b2:	2181      	movs	r1, #129	; 0x81
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f003 f805 	bl	80085c4 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	7a5b      	ldrb	r3, [r3, #9]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d109      	bne.n	80055d6 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80055c2:	2181      	movs	r1, #129	; 0x81
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f002 fffd 	bl	80085c4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80055ca:	2101      	movs	r1, #1
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f002 fff9 	bl	80085c4 <USBD_LL_StallEP>
 80055d2:	e000      	b.n	80055d6 <MSC_BOT_Abort+0x5e>
    return;
 80055d4:	bf00      	nop
  }
}
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	460b      	mov	r3, r1
 80055e6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055ee:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d019      	beq.n	800562a <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	7a5b      	ldrb	r3, [r3, #9]
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d108      	bne.n	8005610 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80055fe:	2181      	movs	r1, #129	; 0x81
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f002 ffdf 	bl	80085c4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8005606:	2101      	movs	r1, #1
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f002 ffdb 	bl	80085c4 <USBD_LL_StallEP>
 800560e:	e00f      	b.n	8005630 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8005610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005614:	2b00      	cmp	r3, #0
 8005616:	da0a      	bge.n	800562e <MSC_BOT_CplClrFeature+0x52>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	7a5b      	ldrb	r3, [r3, #9]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d006      	beq.n	800562e <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005620:	2101      	movs	r1, #1
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff ff78 	bl	8005518 <MSC_BOT_SendCSW>
 8005628:	e002      	b.n	8005630 <MSC_BOT_CplClrFeature+0x54>
    return;
 800562a:	bf00      	nop
 800562c:	e000      	b.n	8005630 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 800562e:	bf00      	nop
  }
}
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	460b      	mov	r3, r1
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800564c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8005654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005658:	e168      	b.n	800592c <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2baa      	cmp	r3, #170	; 0xaa
 8005660:	f000 8144 	beq.w	80058ec <SCSI_ProcessCmd+0x2b4>
 8005664:	2baa      	cmp	r3, #170	; 0xaa
 8005666:	f300 8153 	bgt.w	8005910 <SCSI_ProcessCmd+0x2d8>
 800566a:	2ba8      	cmp	r3, #168	; 0xa8
 800566c:	f000 812c 	beq.w	80058c8 <SCSI_ProcessCmd+0x290>
 8005670:	2ba8      	cmp	r3, #168	; 0xa8
 8005672:	f300 814d 	bgt.w	8005910 <SCSI_ProcessCmd+0x2d8>
 8005676:	2b5a      	cmp	r3, #90	; 0x5a
 8005678:	f300 80c0 	bgt.w	80057fc <SCSI_ProcessCmd+0x1c4>
 800567c:	2b00      	cmp	r3, #0
 800567e:	f2c0 8147 	blt.w	8005910 <SCSI_ProcessCmd+0x2d8>
 8005682:	2b5a      	cmp	r3, #90	; 0x5a
 8005684:	f200 8144 	bhi.w	8005910 <SCSI_ProcessCmd+0x2d8>
 8005688:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <SCSI_ProcessCmd+0x58>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	08005803 	.word	0x08005803
 8005694:	08005911 	.word	0x08005911
 8005698:	08005911 	.word	0x08005911
 800569c:	08005815 	.word	0x08005815
 80056a0:	08005911 	.word	0x08005911
 80056a4:	08005911 	.word	0x08005911
 80056a8:	08005911 	.word	0x08005911
 80056ac:	08005911 	.word	0x08005911
 80056b0:	08005911 	.word	0x08005911
 80056b4:	08005911 	.word	0x08005911
 80056b8:	08005911 	.word	0x08005911
 80056bc:	08005911 	.word	0x08005911
 80056c0:	08005911 	.word	0x08005911
 80056c4:	08005911 	.word	0x08005911
 80056c8:	08005911 	.word	0x08005911
 80056cc:	08005911 	.word	0x08005911
 80056d0:	08005911 	.word	0x08005911
 80056d4:	08005911 	.word	0x08005911
 80056d8:	08005827 	.word	0x08005827
 80056dc:	08005911 	.word	0x08005911
 80056e0:	08005911 	.word	0x08005911
 80056e4:	08005911 	.word	0x08005911
 80056e8:	08005911 	.word	0x08005911
 80056ec:	08005911 	.word	0x08005911
 80056f0:	08005911 	.word	0x08005911
 80056f4:	08005911 	.word	0x08005911
 80056f8:	0800585d 	.word	0x0800585d
 80056fc:	08005839 	.word	0x08005839
 8005700:	08005911 	.word	0x08005911
 8005704:	08005911 	.word	0x08005911
 8005708:	0800584b 	.word	0x0800584b
 800570c:	08005911 	.word	0x08005911
 8005710:	08005911 	.word	0x08005911
 8005714:	08005911 	.word	0x08005911
 8005718:	08005911 	.word	0x08005911
 800571c:	08005881 	.word	0x08005881
 8005720:	08005911 	.word	0x08005911
 8005724:	08005893 	.word	0x08005893
 8005728:	08005911 	.word	0x08005911
 800572c:	08005911 	.word	0x08005911
 8005730:	080058b7 	.word	0x080058b7
 8005734:	08005911 	.word	0x08005911
 8005738:	080058db 	.word	0x080058db
 800573c:	08005911 	.word	0x08005911
 8005740:	08005911 	.word	0x08005911
 8005744:	08005911 	.word	0x08005911
 8005748:	08005911 	.word	0x08005911
 800574c:	080058ff 	.word	0x080058ff
 8005750:	08005911 	.word	0x08005911
 8005754:	08005911 	.word	0x08005911
 8005758:	08005911 	.word	0x08005911
 800575c:	08005911 	.word	0x08005911
 8005760:	08005911 	.word	0x08005911
 8005764:	08005911 	.word	0x08005911
 8005768:	08005911 	.word	0x08005911
 800576c:	08005911 	.word	0x08005911
 8005770:	08005911 	.word	0x08005911
 8005774:	08005911 	.word	0x08005911
 8005778:	08005911 	.word	0x08005911
 800577c:	08005911 	.word	0x08005911
 8005780:	08005911 	.word	0x08005911
 8005784:	08005911 	.word	0x08005911
 8005788:	08005911 	.word	0x08005911
 800578c:	08005911 	.word	0x08005911
 8005790:	08005911 	.word	0x08005911
 8005794:	08005911 	.word	0x08005911
 8005798:	08005911 	.word	0x08005911
 800579c:	08005911 	.word	0x08005911
 80057a0:	08005911 	.word	0x08005911
 80057a4:	08005911 	.word	0x08005911
 80057a8:	08005911 	.word	0x08005911
 80057ac:	08005911 	.word	0x08005911
 80057b0:	08005911 	.word	0x08005911
 80057b4:	08005911 	.word	0x08005911
 80057b8:	08005911 	.word	0x08005911
 80057bc:	08005911 	.word	0x08005911
 80057c0:	08005911 	.word	0x08005911
 80057c4:	08005911 	.word	0x08005911
 80057c8:	08005911 	.word	0x08005911
 80057cc:	08005911 	.word	0x08005911
 80057d0:	08005911 	.word	0x08005911
 80057d4:	08005911 	.word	0x08005911
 80057d8:	08005911 	.word	0x08005911
 80057dc:	08005911 	.word	0x08005911
 80057e0:	08005911 	.word	0x08005911
 80057e4:	08005911 	.word	0x08005911
 80057e8:	08005911 	.word	0x08005911
 80057ec:	08005911 	.word	0x08005911
 80057f0:	08005911 	.word	0x08005911
 80057f4:	08005911 	.word	0x08005911
 80057f8:	0800586f 	.word	0x0800586f
 80057fc:	2b9e      	cmp	r3, #158	; 0x9e
 80057fe:	d051      	beq.n	80058a4 <SCSI_ProcessCmd+0x26c>
 8005800:	e086      	b.n	8005910 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8005802:	7afb      	ldrb	r3, [r7, #11]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	4619      	mov	r1, r3
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 f893 	bl	8005934 <SCSI_TestUnitReady>
 800580e:	4603      	mov	r3, r0
 8005810:	75fb      	strb	r3, [r7, #23]
      break;
 8005812:	e089      	b.n	8005928 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8005814:	7afb      	ldrb	r3, [r7, #11]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	4619      	mov	r1, r3
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 fb38 	bl	8005e90 <SCSI_RequestSense>
 8005820:	4603      	mov	r3, r0
 8005822:	75fb      	strb	r3, [r7, #23]
      break;
 8005824:	e080      	b.n	8005928 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8005826:	7afb      	ldrb	r3, [r7, #11]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	4619      	mov	r1, r3
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f8d1 	bl	80059d4 <SCSI_Inquiry>
 8005832:	4603      	mov	r3, r0
 8005834:	75fb      	strb	r3, [r7, #23]
      break;
 8005836:	e077      	b.n	8005928 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8005838:	7afb      	ldrb	r3, [r7, #11]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	4619      	mov	r1, r3
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 fbec 	bl	800601c <SCSI_StartStopUnit>
 8005844:	4603      	mov	r3, r0
 8005846:	75fb      	strb	r3, [r7, #23]
      break;
 8005848:	e06e      	b.n	8005928 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800584a:	7afb      	ldrb	r3, [r7, #11]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4619      	mov	r1, r3
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 fc34 	bl	80060be <SCSI_AllowPreventRemovable>
 8005856:	4603      	mov	r3, r0
 8005858:	75fb      	strb	r3, [r7, #23]
      break;
 800585a:	e065      	b.n	8005928 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800585c:	7afb      	ldrb	r3, [r7, #11]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	4619      	mov	r1, r3
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 fabc 	bl	8005de0 <SCSI_ModeSense6>
 8005868:	4603      	mov	r3, r0
 800586a:	75fb      	strb	r3, [r7, #23]
      break;
 800586c:	e05c      	b.n	8005928 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800586e:	7afb      	ldrb	r3, [r7, #11]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	4619      	mov	r1, r3
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 fadf 	bl	8005e38 <SCSI_ModeSense10>
 800587a:	4603      	mov	r3, r0
 800587c:	75fb      	strb	r3, [r7, #23]
      break;
 800587e:	e053      	b.n	8005928 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8005880:	7afb      	ldrb	r3, [r7, #11]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	4619      	mov	r1, r3
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fa37 	bl	8005cfa <SCSI_ReadFormatCapacity>
 800588c:	4603      	mov	r3, r0
 800588e:	75fb      	strb	r3, [r7, #23]
      break;
 8005890:	e04a      	b.n	8005928 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8005892:	7afb      	ldrb	r3, [r7, #11]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	4619      	mov	r1, r3
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 f90f 	bl	8005abc <SCSI_ReadCapacity10>
 800589e:	4603      	mov	r3, r0
 80058a0:	75fb      	strb	r3, [r7, #23]
      break;
 80058a2:	e041      	b.n	8005928 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80058a4:	7afb      	ldrb	r3, [r7, #11]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	4619      	mov	r1, r3
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f97b 	bl	8005ba6 <SCSI_ReadCapacity16>
 80058b0:	4603      	mov	r3, r0
 80058b2:	75fb      	strb	r3, [r7, #23]
      break;
 80058b4:	e038      	b.n	8005928 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80058b6:	7afb      	ldrb	r3, [r7, #11]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	4619      	mov	r1, r3
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 fc27 	bl	8006110 <SCSI_Read10>
 80058c2:	4603      	mov	r3, r0
 80058c4:	75fb      	strb	r3, [r7, #23]
      break;
 80058c6:	e02f      	b.n	8005928 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80058c8:	7afb      	ldrb	r3, [r7, #11]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	4619      	mov	r1, r3
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 fcbe 	bl	8006250 <SCSI_Read12>
 80058d4:	4603      	mov	r3, r0
 80058d6:	75fb      	strb	r3, [r7, #23]
      break;
 80058d8:	e026      	b.n	8005928 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80058da:	7afb      	ldrb	r3, [r7, #11]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	4619      	mov	r1, r3
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 fd60 	bl	80063a6 <SCSI_Write10>
 80058e6:	4603      	mov	r3, r0
 80058e8:	75fb      	strb	r3, [r7, #23]
      break;
 80058ea:	e01d      	b.n	8005928 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80058ec:	7afb      	ldrb	r3, [r7, #11]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	4619      	mov	r1, r3
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 fe1c 	bl	8006530 <SCSI_Write12>
 80058f8:	4603      	mov	r3, r0
 80058fa:	75fb      	strb	r3, [r7, #23]
      break;
 80058fc:	e014      	b.n	8005928 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80058fe:	7afb      	ldrb	r3, [r7, #11]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	4619      	mov	r1, r3
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 fee8 	bl	80066da <SCSI_Verify10>
 800590a:	4603      	mov	r3, r0
 800590c:	75fb      	strb	r3, [r7, #23]
      break;
 800590e:	e00b      	b.n	8005928 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8005910:	7af9      	ldrb	r1, [r7, #11]
 8005912:	2320      	movs	r3, #32
 8005914:	2205      	movs	r2, #5
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 fb39 	bl	8005f8e <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2202      	movs	r2, #2
 8005920:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8005922:	23ff      	movs	r3, #255	; 0xff
 8005924:	75fb      	strb	r3, [r7, #23]
      break;
 8005926:	bf00      	nop
  }

  return ret;
 8005928:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	460b      	mov	r3, r1
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005948:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8005950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005954:	e03a      	b.n	80059cc <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005966:	2320      	movs	r3, #32
 8005968:	2205      	movs	r2, #5
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 fb0f 	bl	8005f8e <SCSI_SenseCode>

    return -1;
 8005970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005974:	e02a      	b.n	80059cc <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800597c:	2b02      	cmp	r3, #2
 800597e:	d10b      	bne.n	8005998 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005980:	7af9      	ldrb	r1, [r7, #11]
 8005982:	233a      	movs	r3, #58	; 0x3a
 8005984:	2202      	movs	r2, #2
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fb01 	bl	8005f8e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2205      	movs	r2, #5
 8005990:	721a      	strb	r2, [r3, #8]
    return -1;
 8005992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005996:	e019      	b.n	80059cc <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	7afa      	ldrb	r2, [r7, #11]
 80059a2:	4610      	mov	r0, r2
 80059a4:	4798      	blx	r3
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00b      	beq.n	80059c4 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80059ac:	7af9      	ldrb	r1, [r7, #11]
 80059ae:	233a      	movs	r3, #58	; 0x3a
 80059b0:	2202      	movs	r2, #2
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 faeb 	bl	8005f8e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2205      	movs	r2, #5
 80059bc:	721a      	strb	r2, [r3, #8]

    return -1;
 80059be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059c2:	e003      	b.n	80059cc <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2200      	movs	r2, #0
 80059c8:	60da      	str	r2, [r3, #12]

  return 0;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	460b      	mov	r3, r1
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059e8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d102      	bne.n	80059f6 <SCSI_Inquiry+0x22>
  {
    return -1;
 80059f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059f4:	e05a      	b.n	8005aac <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005a06:	2320      	movs	r3, #32
 8005a08:	2205      	movs	r2, #5
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fabf 	bl	8005f8e <SCSI_SenseCode>
    return -1;
 8005a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a14:	e04a      	b.n	8005aac <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d020      	beq.n	8005a66 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3302      	adds	r3, #2
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d105      	bne.n	8005a3a <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8005a2e:	2206      	movs	r2, #6
 8005a30:	4920      	ldr	r1, [pc, #128]	; (8005ab4 <SCSI_Inquiry+0xe0>)
 8005a32:	69b8      	ldr	r0, [r7, #24]
 8005a34:	f000 ffb4 	bl	80069a0 <SCSI_UpdateBotData>
 8005a38:	e037      	b.n	8005aaa <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3302      	adds	r3, #2
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b80      	cmp	r3, #128	; 0x80
 8005a42:	d105      	bne.n	8005a50 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8005a44:	2208      	movs	r2, #8
 8005a46:	491c      	ldr	r1, [pc, #112]	; (8005ab8 <SCSI_Inquiry+0xe4>)
 8005a48:	69b8      	ldr	r0, [r7, #24]
 8005a4a:	f000 ffa9 	bl	80069a0 <SCSI_UpdateBotData>
 8005a4e:	e02c      	b.n	8005aaa <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005a56:	2324      	movs	r3, #36	; 0x24
 8005a58:	2205      	movs	r2, #5
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 fa97 	bl	8005f8e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8005a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a64:	e022      	b.n	8005aac <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a6c:	69d9      	ldr	r1, [r3, #28]
 8005a6e:	7afa      	ldrb	r2, [r7, #11]
 8005a70:	4613      	mov	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3305      	adds	r3, #5
 8005a86:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	8bfa      	ldrh	r2, [r7, #30]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d303      	bcc.n	8005a9e <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8005a9e:	8bfb      	ldrh	r3, [r7, #30]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	6979      	ldr	r1, [r7, #20]
 8005aa4:	69b8      	ldr	r0, [r7, #24]
 8005aa6:	f000 ff7b 	bl	80069a0 <SCSI_UpdateBotData>
  }

  return 0;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3720      	adds	r7, #32
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	200000b0 	.word	0x200000b0
 8005ab8:	200000b8 	.word	0x200000b8

08005abc <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ad0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d102      	bne.n	8005ade <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8005ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005adc:	e05f      	b.n	8005b9e <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8005af2:	7af8      	ldrb	r0, [r7, #11]
 8005af4:	4798      	blx	r3
 8005af6:	4603      	mov	r3, r0
 8005af8:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005afa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d104      	bne.n	8005b0c <SCSI_ReadCapacity10+0x50>
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d108      	bne.n	8005b1e <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005b0c:	7af9      	ldrb	r1, [r7, #11]
 8005b0e:	233a      	movs	r3, #58	; 0x3a
 8005b10:	2202      	movs	r2, #2
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 fa3b 	bl	8005f8e <SCSI_SenseCode>
    return -1;
 8005b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b1c:	e03f      	b.n	8005b9e <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005b24:	3b01      	subs	r3, #1
 8005b26:	0e1b      	lsrs	r3, r3, #24
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005b34:	3b01      	subs	r3, #1
 8005b36:	0c1b      	lsrs	r3, r3, #16
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005b44:	3b01      	subs	r3, #1
 8005b46:	0a1b      	lsrs	r3, r3, #8
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005b64:	161b      	asrs	r3, r3, #24
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005b72:	141b      	asrs	r3, r3, #16
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005b80:	0a1b      	lsrs	r3, r3, #8
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2208      	movs	r2, #8
 8005b9a:	60da      	str	r2, [r3, #12]

  return 0;
 8005b9c:	2300      	movs	r3, #0

}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b088      	sub	sp, #32
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bba:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d102      	bne.n	8005bc8 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8005bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bc6:	e094      	b.n	8005cf2 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8005bdc:	7af8      	ldrb	r0, [r7, #11]
 8005bde:	4798      	blx	r3
 8005be0:	4603      	mov	r3, r0
 8005be2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005be4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <SCSI_ReadCapacity16+0x50>
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d108      	bne.n	8005c08 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005bf6:	7af9      	ldrb	r1, [r7, #11]
 8005bf8:	233a      	movs	r3, #58	; 0x3a
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f9c6 	bl	8005f8e <SCSI_SenseCode>
    return -1;
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c06:	e074      	b.n	8005cf2 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	330a      	adds	r3, #10
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	330b      	adds	r3, #11
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005c18:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	330c      	adds	r3, #12
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005c22:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	320d      	adds	r2, #13
 8005c28:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005c2a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005c30:	2300      	movs	r3, #0
 8005c32:	77fb      	strb	r3, [r7, #31]
 8005c34:	e007      	b.n	8005c46 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8005c36:	7ffb      	ldrb	r3, [r7, #31]
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005c40:	7ffb      	ldrb	r3, [r7, #31]
 8005c42:	3301      	adds	r3, #1
 8005c44:	77fb      	strb	r3, [r7, #31]
 8005c46:	7ffa      	ldrb	r2, [r7, #31]
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d3f2      	bcc.n	8005c36 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005c56:	3b01      	subs	r3, #1
 8005c58:	0e1b      	lsrs	r3, r3, #24
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005c66:	3b01      	subs	r3, #1
 8005c68:	0c1b      	lsrs	r3, r3, #16
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005c76:	3b01      	subs	r3, #1
 8005c78:	0a1b      	lsrs	r3, r3, #8
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005c96:	161b      	asrs	r3, r3, #24
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005ca4:	141b      	asrs	r3, r3, #16
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005cb2:	0a1b      	lsrs	r3, r3, #8
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	330a      	adds	r3, #10
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	330b      	adds	r3, #11
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005cd8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	330c      	adds	r3, #12
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005ce2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	320d      	adds	r2, #13
 8005ce8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005cea:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	60da      	str	r2, [r3, #12]

  return 0;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3720      	adds	r7, #32
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b088      	sub	sp, #32
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	460b      	mov	r3, r1
 8005d04:	607a      	str	r2, [r7, #4]
 8005d06:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d0e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d102      	bne.n	8005d1c <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8005d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d1a:	e05c      	b.n	8005dd6 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f107 0214 	add.w	r2, r7, #20
 8005d28:	f107 0110 	add.w	r1, r7, #16
 8005d2c:	7af8      	ldrb	r0, [r7, #11]
 8005d2e:	4798      	blx	r3
 8005d30:	4603      	mov	r3, r0
 8005d32:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <SCSI_ReadFormatCapacity+0x4c>
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d108      	bne.n	8005d58 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005d46:	7af9      	ldrb	r1, [r7, #11]
 8005d48:	233a      	movs	r3, #58	; 0x3a
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f91e 	bl	8005f8e <SCSI_SenseCode>
    return -1;
 8005d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d56:	e03e      	b.n	8005dd6 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	83fb      	strh	r3, [r7, #30]
 8005d5c:	e007      	b.n	8005d6e <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8005d5e:	8bfb      	ldrh	r3, [r7, #30]
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4413      	add	r3, r2
 8005d64:	2200      	movs	r2, #0
 8005d66:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8005d68:	8bfb      	ldrh	r3, [r7, #30]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	83fb      	strh	r3, [r7, #30]
 8005d6e:	8bfb      	ldrh	r3, [r7, #30]
 8005d70:	2b0b      	cmp	r3, #11
 8005d72:	d9f4      	bls.n	8005d5e <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2208      	movs	r2, #8
 8005d78:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	0e1b      	lsrs	r3, r3, #24
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	0c1b      	lsrs	r3, r3, #16
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	0a1b      	lsrs	r3, r3, #8
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	2202      	movs	r2, #2
 8005dae:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005db0:	8abb      	ldrh	r3, [r7, #20]
 8005db2:	141b      	asrs	r3, r3, #16
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8005dba:	8abb      	ldrh	r3, [r7, #20]
 8005dbc:	0a1b      	lsrs	r3, r3, #8
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8005dc6:	8abb      	ldrh	r3, [r7, #20]
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	220c      	movs	r2, #12
 8005dd2:	60da      	str	r2, [r3, #12]

  return 0;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3720      	adds	r7, #32
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	460b      	mov	r3, r1
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005df4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8005df6:	2317      	movs	r3, #23
 8005df8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d102      	bne.n	8005e06 <SCSI_ModeSense6+0x26>
  {
    return -1;
 8005e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e04:	e011      	b.n	8005e2a <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	8afa      	ldrh	r2, [r7, #22]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d303      	bcc.n	8005e1c <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3304      	adds	r3, #4
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8005e1c:	8afb      	ldrh	r3, [r7, #22]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4904      	ldr	r1, [pc, #16]	; (8005e34 <SCSI_ModeSense6+0x54>)
 8005e22:	6938      	ldr	r0, [r7, #16]
 8005e24:	f000 fdbc 	bl	80069a0 <SCSI_UpdateBotData>

  return 0;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	200000c0 	.word	0x200000c0

08005e38 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	460b      	mov	r3, r1
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e4c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8005e4e:	231b      	movs	r3, #27
 8005e50:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d102      	bne.n	8005e5e <SCSI_ModeSense10+0x26>
  {
    return -1;
 8005e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e5c:	e011      	b.n	8005e82 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	3308      	adds	r3, #8
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	8afa      	ldrh	r2, [r7, #22]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d303      	bcc.n	8005e74 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3308      	adds	r3, #8
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8005e74:	8afb      	ldrh	r3, [r7, #22]
 8005e76:	461a      	mov	r2, r3
 8005e78:	4904      	ldr	r1, [pc, #16]	; (8005e8c <SCSI_ModeSense10+0x54>)
 8005e7a:	6938      	ldr	r0, [r7, #16]
 8005e7c:	f000 fd90 	bl	80069a0 <SCSI_UpdateBotData>

  return 0;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	200000d8 	.word	0x200000d8

08005e90 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ea4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d102      	bne.n	8005eb2 <SCSI_RequestSense+0x22>
  {
    return -1;
 8005eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eb0:	e069      	b.n	8005f86 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10a      	bne.n	8005ed2 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005ec2:	2320      	movs	r3, #32
 8005ec4:	2205      	movs	r2, #5
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 f861 	bl	8005f8e <SCSI_SenseCode>
    return -1;
 8005ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ed0:	e059      	b.n	8005f86 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	75fb      	strb	r3, [r7, #23]
 8005ed6:	e007      	b.n	8005ee8 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4413      	add	r3, r2
 8005ede:	2200      	movs	r2, #0
 8005ee0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	75fb      	strb	r3, [r7, #23]
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	2b11      	cmp	r3, #17
 8005eec:	d9f4      	bls.n	8005ed8 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2270      	movs	r2, #112	; 0x70
 8005ef2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	220c      	movs	r2, #12
 8005ef8:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d02e      	beq.n	8005f68 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005f10:	461a      	mov	r2, r3
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	3248      	adds	r2, #72	; 0x48
 8005f16:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	3348      	adds	r3, #72	; 0x48
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	791a      	ldrb	r2, [r3, #4]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	3348      	adds	r3, #72	; 0x48
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	4413      	add	r3, r2
 8005f40:	795a      	ldrb	r2, [r3, #5]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	d103      	bne.n	8005f68 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	2212      	movs	r2, #18
 8005f6c:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3304      	adds	r3, #4
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b12      	cmp	r3, #18
 8005f76:	d805      	bhi.n	8005f84 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b085      	sub	sp, #20
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	4608      	mov	r0, r1
 8005f98:	4611      	mov	r1, r2
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	70fb      	strb	r3, [r7, #3]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	70bb      	strb	r3, [r7, #2]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fae:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d02c      	beq.n	8006010 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3248      	adds	r2, #72	; 0x48
 8005fc2:	78b9      	ldrb	r1, [r7, #2]
 8005fc4:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	3348      	adds	r3, #72	; 0x48
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	4413      	add	r3, r2
 8005fd6:	787a      	ldrb	r2, [r7, #1]
 8005fd8:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	3348      	adds	r3, #72	; 0x48
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	2200      	movs	r2, #0
 8005fea:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8006002:	2b04      	cmp	r3, #4
 8006004:	d105      	bne.n	8006012 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800600e:	e000      	b.n	8006012 <SCSI_SenseCode+0x84>
    return;
 8006010:	bf00      	nop
  }
}
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	460b      	mov	r3, r1
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006030:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8006038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800603c:	e03b      	b.n	80060b6 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006044:	2b01      	cmp	r3, #1
 8006046:	d10f      	bne.n	8006068 <SCSI_StartStopUnit+0x4c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3304      	adds	r3, #4
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d108      	bne.n	8006068 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8006056:	7af9      	ldrb	r1, [r7, #11]
 8006058:	2324      	movs	r3, #36	; 0x24
 800605a:	2205      	movs	r2, #5
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7ff ff96 	bl	8005f8e <SCSI_SenseCode>

    return -1;
 8006062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006066:	e026      	b.n	80060b6 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3304      	adds	r3, #4
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	2b01      	cmp	r3, #1
 8006074:	d104      	bne.n	8006080 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800607e:	e016      	b.n	80060ae <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3304      	adds	r3, #4
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d104      	bne.n	8006098 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2202      	movs	r2, #2
 8006092:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8006096:	e00a      	b.n	80060ae <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3304      	adds	r3, #4
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d103      	bne.n	80060ae <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2200      	movs	r2, #0
 80060b2:	60da      	str	r2, [r3, #12]

  return 0;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80060be:	b480      	push	{r7}
 80060c0:	b087      	sub	sp, #28
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	460b      	mov	r3, r1
 80060c8:	607a      	str	r2, [r7, #4]
 80060ca:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060d2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d102      	bne.n	80060e0 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 80060da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060de:	e011      	b.n	8006104 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3304      	adds	r3, #4
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d104      	bne.n	80060f4 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80060f2:	e003      	b.n	80060fc <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2200      	movs	r2, #0
 8006100:	60da      	str	r2, [r3, #12]

  return 0;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	460b      	mov	r3, r1
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006124:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <SCSI_Read10+0x22>
  {
    return -1;
 800612c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006130:	e08a      	b.n	8006248 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	7a1b      	ldrb	r3, [r3, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d17c      	bne.n	8006234 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8006140:	b25b      	sxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	db0a      	blt.n	800615c <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800614c:	2320      	movs	r3, #32
 800614e:	2205      	movs	r2, #5
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7ff ff1c 	bl	8005f8e <SCSI_SenseCode>
      return -1;
 8006156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800615a:	e075      	b.n	8006248 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006162:	2b02      	cmp	r3, #2
 8006164:	d108      	bne.n	8006178 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006166:	7af9      	ldrb	r1, [r7, #11]
 8006168:	233a      	movs	r3, #58	; 0x3a
 800616a:	2202      	movs	r2, #2
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f7ff ff0e 	bl	8005f8e <SCSI_SenseCode>

      return -1;
 8006172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006176:	e067      	b.n	8006248 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	7afa      	ldrb	r2, [r7, #11]
 8006182:	4610      	mov	r0, r2
 8006184:	4798      	blx	r3
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d008      	beq.n	800619e <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800618c:	7af9      	ldrb	r1, [r7, #11]
 800618e:	233a      	movs	r3, #58	; 0x3a
 8006190:	2202      	movs	r2, #2
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f7ff fefb 	bl	8005f8e <SCSI_SenseCode>
      return -1;
 8006198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800619c:	e054      	b.n	8006248 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3302      	adds	r3, #2
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	3303      	adds	r3, #3
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80061ae:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3304      	adds	r3, #4
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80061b8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	3205      	adds	r2, #5
 80061be:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80061c0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3307      	adds	r3, #7
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	021b      	lsls	r3, r3, #8
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	3208      	adds	r2, #8
 80061d4:	7812      	ldrb	r2, [r2, #0]
 80061d6:	431a      	orrs	r2, r3
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80061ea:	7af9      	ldrb	r1, [r7, #11]
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 faad 	bl	800674c <SCSI_CheckAddressRange>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	da02      	bge.n	80061fe <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80061f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061fc:	e024      	b.n	8006248 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800620a:	6979      	ldr	r1, [r7, #20]
 800620c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8006210:	fb01 f303 	mul.w	r3, r1, r3
 8006214:	429a      	cmp	r2, r3
 8006216:	d00a      	beq.n	800622e <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800621e:	2320      	movs	r3, #32
 8006220:	2205      	movs	r2, #5
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f7ff feb3 	bl	8005f8e <SCSI_SenseCode>
      return -1;
 8006228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800622c:	e00c      	b.n	8006248 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2202      	movs	r2, #2
 8006232:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800623a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800623c:	7afb      	ldrb	r3, [r7, #11]
 800623e:	4619      	mov	r1, r3
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 faab 	bl	800679c <SCSI_ProcessRead>
 8006246:	4603      	mov	r3, r0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	460b      	mov	r3, r1
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006264:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d102      	bne.n	8006272 <SCSI_Read12+0x22>
  {
    return -1;
 800626c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006270:	e095      	b.n	800639e <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	7a1b      	ldrb	r3, [r3, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	f040 8087 	bne.w	800638a <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8006282:	b25b      	sxtb	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	db0a      	blt.n	800629e <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800628e:	2320      	movs	r3, #32
 8006290:	2205      	movs	r2, #5
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f7ff fe7b 	bl	8005f8e <SCSI_SenseCode>
      return -1;
 8006298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800629c:	e07f      	b.n	800639e <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d108      	bne.n	80062ba <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80062a8:	7af9      	ldrb	r1, [r7, #11]
 80062aa:	233a      	movs	r3, #58	; 0x3a
 80062ac:	2202      	movs	r2, #2
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f7ff fe6d 	bl	8005f8e <SCSI_SenseCode>
      return -1;
 80062b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062b8:	e071      	b.n	800639e <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	7afa      	ldrb	r2, [r7, #11]
 80062c4:	4610      	mov	r0, r2
 80062c6:	4798      	blx	r3
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d008      	beq.n	80062e0 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80062ce:	7af9      	ldrb	r1, [r7, #11]
 80062d0:	233a      	movs	r3, #58	; 0x3a
 80062d2:	2202      	movs	r2, #2
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f7ff fe5a 	bl	8005f8e <SCSI_SenseCode>
      return -1;
 80062da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062de:	e05e      	b.n	800639e <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3302      	adds	r3, #2
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3303      	adds	r3, #3
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80062f0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3304      	adds	r3, #4
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80062fa:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	3205      	adds	r2, #5
 8006300:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8006302:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3306      	adds	r3, #6
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3307      	adds	r3, #7
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800631a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3308      	adds	r3, #8
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8006324:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	3209      	adds	r2, #9
 800632a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800632c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006340:	7af9      	ldrb	r1, [r7, #11]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 fa02 	bl	800674c <SCSI_CheckAddressRange>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	da02      	bge.n	8006354 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800634e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006352:	e024      	b.n	800639e <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006360:	6979      	ldr	r1, [r7, #20]
 8006362:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8006366:	fb01 f303 	mul.w	r3, r1, r3
 800636a:	429a      	cmp	r2, r3
 800636c:	d00a      	beq.n	8006384 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006374:	2320      	movs	r3, #32
 8006376:	2205      	movs	r2, #5
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f7ff fe08 	bl	8005f8e <SCSI_SenseCode>
      return -1;
 800637e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006382:	e00c      	b.n	800639e <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2202      	movs	r2, #2
 8006388:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006390:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8006392:	7afb      	ldrb	r3, [r7, #11]
 8006394:	4619      	mov	r1, r3
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 fa00 	bl	800679c <SCSI_ProcessRead>
 800639c:	4603      	mov	r3, r0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b086      	sub	sp, #24
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	460b      	mov	r3, r1
 80063b0:	607a      	str	r2, [r7, #4]
 80063b2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ba:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d102      	bne.n	80063c8 <SCSI_Write10+0x22>
  {
    return -1;
 80063c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063c6:	e0af      	b.n	8006528 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	7a1b      	ldrb	r3, [r3, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f040 80a5 	bne.w	800651c <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10a      	bne.n	80063f2 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80063e2:	2320      	movs	r3, #32
 80063e4:	2205      	movs	r2, #5
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f7ff fdd1 	bl	8005f8e <SCSI_SenseCode>
      return -1;
 80063ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063f0:	e09a      	b.n	8006528 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80063f8:	b25b      	sxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	da0a      	bge.n	8006414 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006404:	2320      	movs	r3, #32
 8006406:	2205      	movs	r2, #5
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f7ff fdc0 	bl	8005f8e <SCSI_SenseCode>
      return -1;
 800640e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006412:	e089      	b.n	8006528 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	7afa      	ldrb	r2, [r7, #11]
 800641e:	4610      	mov	r0, r2
 8006420:	4798      	blx	r3
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d008      	beq.n	800643a <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006428:	7af9      	ldrb	r1, [r7, #11]
 800642a:	233a      	movs	r3, #58	; 0x3a
 800642c:	2202      	movs	r2, #2
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f7ff fdad 	bl	8005f8e <SCSI_SenseCode>
      return -1;
 8006434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006438:	e076      	b.n	8006528 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	7afa      	ldrb	r2, [r7, #11]
 8006444:	4610      	mov	r0, r2
 8006446:	4798      	blx	r3
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d008      	beq.n	8006460 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800644e:	7af9      	ldrb	r1, [r7, #11]
 8006450:	2327      	movs	r3, #39	; 0x27
 8006452:	2202      	movs	r2, #2
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f7ff fd9a 	bl	8005f8e <SCSI_SenseCode>
      return -1;
 800645a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800645e:	e063      	b.n	8006528 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3302      	adds	r3, #2
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3303      	adds	r3, #3
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006470:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3304      	adds	r3, #4
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800647a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	3205      	adds	r2, #5
 8006480:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8006482:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3307      	adds	r3, #7
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	3208      	adds	r2, #8
 8006496:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006498:	431a      	orrs	r2, r3
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80064ac:	7af9      	ldrb	r1, [r7, #11]
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 f94c 	bl	800674c <SCSI_CheckAddressRange>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	da02      	bge.n	80064c0 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80064ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064be:	e033      	b.n	8006528 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80064cc:	fb02 f303 	mul.w	r3, r2, r3
 80064d0:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d00a      	beq.n	80064f4 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80064e4:	2320      	movs	r3, #32
 80064e6:	2205      	movs	r2, #5
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7ff fd50 	bl	8005f8e <SCSI_SenseCode>
      return -1;
 80064ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064f2:	e019      	b.n	8006528 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064fa:	bf28      	it	cs
 80064fc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006500:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2201      	movs	r2, #1
 8006506:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f103 0210 	add.w	r2, r3, #16
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	2101      	movs	r1, #1
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f002 f95c 	bl	80087d0 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8006518:	2300      	movs	r3, #0
 800651a:	e005      	b.n	8006528 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 800651c:	7afb      	ldrb	r3, [r7, #11]
 800651e:	4619      	mov	r1, r3
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 f9b4 	bl	800688e <SCSI_ProcessWrite>
 8006526:	4603      	mov	r3, r0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	460b      	mov	r3, r1
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006544:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d102      	bne.n	8006552 <SCSI_Write12+0x22>
  {
    return -1;
 800654c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006550:	e0bf      	b.n	80066d2 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	7a1b      	ldrb	r3, [r3, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f040 80b5 	bne.w	80066c6 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800656c:	2320      	movs	r3, #32
 800656e:	2205      	movs	r2, #5
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f7ff fd0c 	bl	8005f8e <SCSI_SenseCode>
      return -1;
 8006576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800657a:	e0aa      	b.n	80066d2 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8006582:	b25b      	sxtb	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	da0a      	bge.n	800659e <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800658e:	2320      	movs	r3, #32
 8006590:	2205      	movs	r2, #5
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f7ff fcfb 	bl	8005f8e <SCSI_SenseCode>
      return -1;
 8006598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800659c:	e099      	b.n	80066d2 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	7afa      	ldrb	r2, [r7, #11]
 80065a8:	4610      	mov	r0, r2
 80065aa:	4798      	blx	r3
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00b      	beq.n	80065ca <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80065b2:	7af9      	ldrb	r1, [r7, #11]
 80065b4:	233a      	movs	r3, #58	; 0x3a
 80065b6:	2202      	movs	r2, #2
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f7ff fce8 	bl	8005f8e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2205      	movs	r2, #5
 80065c2:	721a      	strb	r2, [r3, #8]
      return -1;
 80065c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065c8:	e083      	b.n	80066d2 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	7afa      	ldrb	r2, [r7, #11]
 80065d4:	4610      	mov	r0, r2
 80065d6:	4798      	blx	r3
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00b      	beq.n	80065f6 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80065de:	7af9      	ldrb	r1, [r7, #11]
 80065e0:	2327      	movs	r3, #39	; 0x27
 80065e2:	2202      	movs	r2, #2
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff fcd2 	bl	8005f8e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2205      	movs	r2, #5
 80065ee:	721a      	strb	r2, [r3, #8]
      return -1;
 80065f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065f4:	e06d      	b.n	80066d2 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3302      	adds	r3, #2
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3303      	adds	r3, #3
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006606:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3304      	adds	r3, #4
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006610:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	3205      	adds	r2, #5
 8006616:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8006618:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3306      	adds	r3, #6
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3307      	adds	r3, #7
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006630:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3308      	adds	r3, #8
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800663a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	3209      	adds	r2, #9
 8006640:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8006642:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006656:	7af9      	ldrb	r1, [r7, #11]
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 f877 	bl	800674c <SCSI_CheckAddressRange>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	da02      	bge.n	800666a <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006668:	e033      	b.n	80066d2 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006676:	fb02 f303 	mul.w	r3, r2, r3
 800667a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	429a      	cmp	r2, r3
 8006686:	d00a      	beq.n	800669e <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800668e:	2320      	movs	r3, #32
 8006690:	2205      	movs	r2, #5
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f7ff fc7b 	bl	8005f8e <SCSI_SenseCode>
      return -1;
 8006698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800669c:	e019      	b.n	80066d2 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a4:	bf28      	it	cs
 80066a6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80066aa:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2201      	movs	r2, #1
 80066b0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f103 0210 	add.w	r2, r3, #16
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	2101      	movs	r1, #1
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f002 f887 	bl	80087d0 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	e005      	b.n	80066d2 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 80066c6:	7afb      	ldrb	r3, [r7, #11]
 80066c8:	4619      	mov	r1, r3
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 f8df 	bl	800688e <SCSI_ProcessWrite>
 80066d0:	4603      	mov	r3, r0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b086      	sub	sp, #24
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	460b      	mov	r3, r1
 80066e4:	607a      	str	r2, [r7, #4]
 80066e6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ee:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d102      	bne.n	80066fc <SCSI_Verify10+0x22>
  {
    return -1;
 80066f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066fa:	e023      	b.n	8006744 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3301      	adds	r3, #1
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d008      	beq.n	800671c <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800670a:	7af9      	ldrb	r1, [r7, #11]
 800670c:	2324      	movs	r3, #36	; 0x24
 800670e:	2205      	movs	r2, #5
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f7ff fc3c 	bl	8005f8e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8006716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800671a:	e013      	b.n	8006744 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006728:	7af9      	ldrb	r1, [r7, #11]
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 f80e 	bl	800674c <SCSI_CheckAddressRange>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	da02      	bge.n	800673c <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8006736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800673a:	e003      	b.n	8006744 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2200      	movs	r2, #0
 8006740:	60da      	str	r2, [r3, #12]

  return 0;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	607a      	str	r2, [r7, #4]
 8006756:	603b      	str	r3, [r7, #0]
 8006758:	460b      	mov	r3, r1
 800675a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006762:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d102      	bne.n	8006770 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 800676a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800676e:	e011      	b.n	8006794 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	441a      	add	r2, r3
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800677c:	429a      	cmp	r2, r3
 800677e:	d908      	bls.n	8006792 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8006780:	7af9      	ldrb	r1, [r7, #11]
 8006782:	2321      	movs	r3, #33	; 0x21
 8006784:	2205      	movs	r2, #5
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f7ff fc01 	bl	8005f8e <SCSI_SenseCode>
    return -1;
 800678c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006790:	e000      	b.n	8006794 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800679c:	b590      	push	{r4, r7, lr}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067ae:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80067bc:	fb02 f303 	mul.w	r3, r2, r3
 80067c0:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d102      	bne.n	80067ce <SCSI_ProcessRead+0x32>
  {
    return -1;
 80067c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067cc:	e05b      	b.n	8006886 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d4:	bf28      	it	cs
 80067d6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80067da:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067e2:	691c      	ldr	r4, [r3, #16]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f103 0110 	add.w	r1, r3, #16
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80067f6:	4618      	mov	r0, r3
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80067fe:	b29b      	uxth	r3, r3
 8006800:	78f8      	ldrb	r0, [r7, #3]
 8006802:	47a0      	blx	r4
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	da08      	bge.n	800681c <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800680a:	78f9      	ldrb	r1, [r7, #3]
 800680c:	2311      	movs	r3, #17
 800680e:	2204      	movs	r2, #4
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff fbbc 	bl	8005f8e <SCSI_SenseCode>
    return -1;
 8006816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800681a:	e034      	b.n	8006886 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f103 0210 	add.w	r2, r3, #16
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2181      	movs	r1, #129	; 0x81
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 ff9a 	bl	8008760 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006838:	4619      	mov	r1, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006840:	441a      	add	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006854:	4619      	mov	r1, r3
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	fbb3 f3f1 	udiv	r3, r3, r1
 800685c:	1ad2      	subs	r2, r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	1ad2      	subs	r2, r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800687a:	2b00      	cmp	r3, #0
 800687c:	d102      	bne.n	8006884 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2203      	movs	r2, #3
 8006882:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	bd90      	pop	{r4, r7, pc}

0800688e <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800688e:	b590      	push	{r4, r7, lr}
 8006890:	b085      	sub	sp, #20
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	460b      	mov	r3, r1
 8006898:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068a0:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80068ae:	fb02 f303 	mul.w	r3, r2, r3
 80068b2:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d102      	bne.n	80068c0 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 80068ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068be:	e06b      	b.n	8006998 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c6:	bf28      	it	cs
 80068c8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80068cc:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068d4:	695c      	ldr	r4, [r3, #20]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f103 0110 	add.w	r1, r3, #16
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80068e8:	4618      	mov	r0, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	78f8      	ldrb	r0, [r7, #3]
 80068f4:	47a0      	blx	r4
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	da08      	bge.n	800690e <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80068fc:	78f9      	ldrb	r1, [r7, #3]
 80068fe:	2303      	movs	r3, #3
 8006900:	2204      	movs	r2, #4
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff fb43 	bl	8005f8e <SCSI_SenseCode>
    return -1;
 8006908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800690c:	e044      	b.n	8006998 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800691a:	4619      	mov	r1, r3
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006922:	441a      	add	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006936:	4619      	mov	r1, r3
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	fbb3 f3f1 	udiv	r3, r3, r1
 800693e:	1ad2      	subs	r2, r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	1ad2      	subs	r2, r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800695c:	2b00      	cmp	r3, #0
 800695e:	d104      	bne.n	800696a <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006960:	2100      	movs	r1, #0
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7fe fdd8 	bl	8005518 <MSC_BOT_SendCSW>
 8006968:	e015      	b.n	8006996 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006976:	fb02 f303 	mul.w	r3, r2, r3
 800697a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800697e:	bf28      	it	cs
 8006980:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006984:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f103 0210 	add.w	r2, r3, #16
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2101      	movs	r1, #1
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 ff1d 	bl	80087d0 <USBD_LL_PrepareReceive>
  }

  return 0;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	bd90      	pop	{r4, r7, pc}

080069a0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	4613      	mov	r3, r2
 80069ac:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80069ae:	88fb      	ldrh	r3, [r7, #6]
 80069b0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d102      	bne.n	80069be <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80069b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069bc:	e013      	b.n	80069e6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80069be:	8afa      	ldrh	r2, [r7, #22]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80069c4:	e00b      	b.n	80069de <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80069c6:	8afb      	ldrh	r3, [r7, #22]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80069cc:	8afb      	ldrh	r3, [r7, #22]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	441a      	add	r2, r3
 80069d2:	8afb      	ldrh	r3, [r7, #22]
 80069d4:	7811      	ldrb	r1, [r2, #0]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	460a      	mov	r2, r1
 80069dc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80069de:	8afb      	ldrh	r3, [r7, #22]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1f0      	bne.n	80069c6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b086      	sub	sp, #24
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	4613      	mov	r3, r2
 80069fe:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e01f      	b.n	8006a4a <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	79fa      	ldrb	r2, [r7, #7]
 8006a3c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f001 fc9a 	bl	8008378 <USBD_LL_Init>
 8006a44:	4603      	mov	r3, r0
 8006a46:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e016      	b.n	8006a98 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00b      	beq.n	8006a96 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a86:	f107 020e 	add.w	r2, r7, #14
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	4798      	blx	r3
 8006a8e:	4602      	mov	r2, r0
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 fcaf 	bl	800840c <USBD_LL_Start>
 8006aae:	4603      	mov	r3, r0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ada:	2303      	movs	r3, #3
 8006adc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d009      	beq.n	8006afc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	78fa      	ldrb	r2, [r7, #3]
 8006af2:	4611      	mov	r1, r2
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	4798      	blx	r3
 8006af8:	4603      	mov	r3, r0
 8006afa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d007      	beq.n	8006b2c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	78fa      	ldrb	r2, [r7, #3]
 8006b26:	4611      	mov	r1, r2
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
  }

  return USBD_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 ffb9 	bl	8007ac0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b6a:	f003 031f 	and.w	r3, r3, #31
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d01a      	beq.n	8006ba8 <USBD_LL_SetupStage+0x72>
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d822      	bhi.n	8006bbc <USBD_LL_SetupStage+0x86>
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <USBD_LL_SetupStage+0x4a>
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d00a      	beq.n	8006b94 <USBD_LL_SetupStage+0x5e>
 8006b7e:	e01d      	b.n	8006bbc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fa61 	bl	8007050 <USBD_StdDevReq>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	73fb      	strb	r3, [r7, #15]
      break;
 8006b92:	e020      	b.n	8006bd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fac5 	bl	800712c <USBD_StdItfReq>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba6:	e016      	b.n	8006bd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fb04 	bl	80071be <USBD_StdEPReq>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bba:	e00c      	b.n	8006bd6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006bc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f001 fcfa 	bl	80085c4 <USBD_LL_StallEP>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd4:	bf00      	nop
  }

  return ret;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	460b      	mov	r3, r1
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006bee:	7afb      	ldrb	r3, [r7, #11]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d138      	bne.n	8006c66 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006bfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d14a      	bne.n	8006c9c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d913      	bls.n	8006c3a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	1ad2      	subs	r2, r2, r3
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	bf28      	it	cs
 8006c2c:	4613      	movcs	r3, r2
 8006c2e:	461a      	mov	r2, r3
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f001 f81b 	bl	8007c6e <USBD_CtlContinueRx>
 8006c38:	e030      	b.n	8006c9c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d10b      	bne.n	8006c5e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d005      	beq.n	8006c5e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f001 f816 	bl	8007c90 <USBD_CtlSendStatus>
 8006c64:	e01a      	b.n	8006c9c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d114      	bne.n	8006c9c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00e      	beq.n	8006c9c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	7afa      	ldrb	r2, [r7, #11]
 8006c88:	4611      	mov	r1, r2
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	4798      	blx	r3
 8006c8e:	4603      	mov	r3, r0
 8006c90:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	e000      	b.n	8006c9e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b086      	sub	sp, #24
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	607a      	str	r2, [r7, #4]
 8006cb2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006cb4:	7afb      	ldrb	r3, [r7, #11]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d16b      	bne.n	8006d92 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3314      	adds	r3, #20
 8006cbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d156      	bne.n	8006d78 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d914      	bls.n	8006d00 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6879      	ldr	r1, [r7, #4]
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 ffad 	bl	8007c4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f001 fd69 	bl	80087d0 <USBD_LL_PrepareReceive>
 8006cfe:	e03b      	b.n	8006d78 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	68da      	ldr	r2, [r3, #12]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d11c      	bne.n	8006d46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d316      	bcc.n	8006d46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d20f      	bcs.n	8006d46 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d26:	2200      	movs	r2, #0
 8006d28:	2100      	movs	r1, #0
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 ff8e 	bl	8007c4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d38:	2300      	movs	r3, #0
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f001 fd46 	bl	80087d0 <USBD_LL_PrepareReceive>
 8006d44:	e018      	b.n	8006d78 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d10b      	bne.n	8006d6a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d005      	beq.n	8006d6a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d6a:	2180      	movs	r1, #128	; 0x80
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f001 fc29 	bl	80085c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 ff9f 	bl	8007cb6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d122      	bne.n	8006dc8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f7ff fe98 	bl	8006ab8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d90:	e01a      	b.n	8006dc8 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d114      	bne.n	8006dc8 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00e      	beq.n	8006dc8 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	7afa      	ldrb	r2, [r7, #11]
 8006db4:	4611      	mov	r1, r2
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	4798      	blx	r3
 8006dba:	4603      	mov	r3, r0
 8006dbc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
 8006dc6:	e000      	b.n	8006dca <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b082      	sub	sp, #8
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e02f      	b.n	8006e66 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00f      	beq.n	8006e30 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d009      	beq.n	8006e30 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	6852      	ldr	r2, [r2, #4]
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e30:	2340      	movs	r3, #64	; 0x40
 8006e32:	2200      	movs	r2, #0
 8006e34:	2100      	movs	r1, #0
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f001 fb1a 	bl	8008470 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2240      	movs	r2, #64	; 0x40
 8006e48:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e4c:	2340      	movs	r3, #64	; 0x40
 8006e4e:	2200      	movs	r2, #0
 8006e50:	2180      	movs	r1, #128	; 0x80
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f001 fb0c 	bl	8008470 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2240      	movs	r2, #64	; 0x40
 8006e62:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	460b      	mov	r3, r1
 8006e78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	78fa      	ldrb	r2, [r7, #3]
 8006e7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2204      	movs	r2, #4
 8006ea8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d106      	bne.n	8006edc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b082      	sub	sp, #8
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e012      	b.n	8006f26 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	d10b      	bne.n	8006f24 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b082      	sub	sp, #8
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e014      	b.n	8006f72 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d10d      	bne.n	8006f70 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d007      	beq.n	8006f70 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	78fa      	ldrb	r2, [r7, #3]
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	460b      	mov	r3, r1
 8006f84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e014      	b.n	8006fbe <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d10d      	bne.n	8006fbc <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d007      	beq.n	8006fbc <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	78fa      	ldrb	r2, [r7, #3]
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d009      	beq.n	800700a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6852      	ldr	r2, [r2, #4]
 8007002:	b2d2      	uxtb	r2, r2
 8007004:	4611      	mov	r1, r2
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	4798      	blx	r3
  }

  return USBD_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	3301      	adds	r3, #1
 800702a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007032:	8a3b      	ldrh	r3, [r7, #16]
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	b21a      	sxth	r2, r3
 8007038:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800703c:	4313      	orrs	r3, r2
 800703e:	b21b      	sxth	r3, r3
 8007040:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007042:	89fb      	ldrh	r3, [r7, #14]
}
 8007044:	4618      	mov	r0, r3
 8007046:	371c      	adds	r7, #28
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007066:	2b40      	cmp	r3, #64	; 0x40
 8007068:	d005      	beq.n	8007076 <USBD_StdDevReq+0x26>
 800706a:	2b40      	cmp	r3, #64	; 0x40
 800706c:	d853      	bhi.n	8007116 <USBD_StdDevReq+0xc6>
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00b      	beq.n	800708a <USBD_StdDevReq+0x3a>
 8007072:	2b20      	cmp	r3, #32
 8007074:	d14f      	bne.n	8007116 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	4798      	blx	r3
 8007084:	4603      	mov	r3, r0
 8007086:	73fb      	strb	r3, [r7, #15]
      break;
 8007088:	e04a      	b.n	8007120 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	785b      	ldrb	r3, [r3, #1]
 800708e:	2b09      	cmp	r3, #9
 8007090:	d83b      	bhi.n	800710a <USBD_StdDevReq+0xba>
 8007092:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <USBD_StdDevReq+0x48>)
 8007094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007098:	080070ed 	.word	0x080070ed
 800709c:	08007101 	.word	0x08007101
 80070a0:	0800710b 	.word	0x0800710b
 80070a4:	080070f7 	.word	0x080070f7
 80070a8:	0800710b 	.word	0x0800710b
 80070ac:	080070cb 	.word	0x080070cb
 80070b0:	080070c1 	.word	0x080070c1
 80070b4:	0800710b 	.word	0x0800710b
 80070b8:	080070e3 	.word	0x080070e3
 80070bc:	080070d5 	.word	0x080070d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f9de 	bl	8007484 <USBD_GetDescriptor>
          break;
 80070c8:	e024      	b.n	8007114 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fb6d 	bl	80077ac <USBD_SetAddress>
          break;
 80070d2:	e01f      	b.n	8007114 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fbac 	bl	8007834 <USBD_SetConfig>
 80070dc:	4603      	mov	r3, r0
 80070de:	73fb      	strb	r3, [r7, #15]
          break;
 80070e0:	e018      	b.n	8007114 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fc4b 	bl	8007980 <USBD_GetConfig>
          break;
 80070ea:	e013      	b.n	8007114 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fc7c 	bl	80079ec <USBD_GetStatus>
          break;
 80070f4:	e00e      	b.n	8007114 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fcab 	bl	8007a54 <USBD_SetFeature>
          break;
 80070fe:	e009      	b.n	8007114 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fcba 	bl	8007a7c <USBD_ClrFeature>
          break;
 8007108:	e004      	b.n	8007114 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fd11 	bl	8007b34 <USBD_CtlError>
          break;
 8007112:	bf00      	nop
      }
      break;
 8007114:	e004      	b.n	8007120 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fd0b 	bl	8007b34 <USBD_CtlError>
      break;
 800711e:	bf00      	nop
  }

  return ret;
 8007120:	7bfb      	ldrb	r3, [r7, #15]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop

0800712c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007142:	2b40      	cmp	r3, #64	; 0x40
 8007144:	d005      	beq.n	8007152 <USBD_StdItfReq+0x26>
 8007146:	2b40      	cmp	r3, #64	; 0x40
 8007148:	d82f      	bhi.n	80071aa <USBD_StdItfReq+0x7e>
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <USBD_StdItfReq+0x26>
 800714e:	2b20      	cmp	r3, #32
 8007150:	d12b      	bne.n	80071aa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007158:	b2db      	uxtb	r3, r3
 800715a:	3b01      	subs	r3, #1
 800715c:	2b02      	cmp	r3, #2
 800715e:	d81d      	bhi.n	800719c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	889b      	ldrh	r3, [r3, #4]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b01      	cmp	r3, #1
 8007168:	d813      	bhi.n	8007192 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	4798      	blx	r3
 8007178:	4603      	mov	r3, r0
 800717a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	88db      	ldrh	r3, [r3, #6]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d110      	bne.n	80071a6 <USBD_StdItfReq+0x7a>
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10d      	bne.n	80071a6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fd80 	bl	8007c90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007190:	e009      	b.n	80071a6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fccd 	bl	8007b34 <USBD_CtlError>
          break;
 800719a:	e004      	b.n	80071a6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fcc8 	bl	8007b34 <USBD_CtlError>
          break;
 80071a4:	e000      	b.n	80071a8 <USBD_StdItfReq+0x7c>
          break;
 80071a6:	bf00      	nop
      }
      break;
 80071a8:	e004      	b.n	80071b4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fcc1 	bl	8007b34 <USBD_CtlError>
      break;
 80071b2:	bf00      	nop
  }

  return ret;
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	889b      	ldrh	r3, [r3, #4]
 80071d0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071da:	2b40      	cmp	r3, #64	; 0x40
 80071dc:	d007      	beq.n	80071ee <USBD_StdEPReq+0x30>
 80071de:	2b40      	cmp	r3, #64	; 0x40
 80071e0:	f200 8145 	bhi.w	800746e <USBD_StdEPReq+0x2b0>
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00c      	beq.n	8007202 <USBD_StdEPReq+0x44>
 80071e8:	2b20      	cmp	r3, #32
 80071ea:	f040 8140 	bne.w	800746e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	4798      	blx	r3
 80071fc:	4603      	mov	r3, r0
 80071fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007200:	e13a      	b.n	8007478 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	785b      	ldrb	r3, [r3, #1]
 8007206:	2b03      	cmp	r3, #3
 8007208:	d007      	beq.n	800721a <USBD_StdEPReq+0x5c>
 800720a:	2b03      	cmp	r3, #3
 800720c:	f300 8129 	bgt.w	8007462 <USBD_StdEPReq+0x2a4>
 8007210:	2b00      	cmp	r3, #0
 8007212:	d07f      	beq.n	8007314 <USBD_StdEPReq+0x156>
 8007214:	2b01      	cmp	r3, #1
 8007216:	d03c      	beq.n	8007292 <USBD_StdEPReq+0xd4>
 8007218:	e123      	b.n	8007462 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d002      	beq.n	800722c <USBD_StdEPReq+0x6e>
 8007226:	2b03      	cmp	r3, #3
 8007228:	d016      	beq.n	8007258 <USBD_StdEPReq+0x9a>
 800722a:	e02c      	b.n	8007286 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00d      	beq.n	800724e <USBD_StdEPReq+0x90>
 8007232:	7bbb      	ldrb	r3, [r7, #14]
 8007234:	2b80      	cmp	r3, #128	; 0x80
 8007236:	d00a      	beq.n	800724e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 f9c1 	bl	80085c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007242:	2180      	movs	r1, #128	; 0x80
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 f9bd 	bl	80085c4 <USBD_LL_StallEP>
 800724a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800724c:	e020      	b.n	8007290 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fc6f 	bl	8007b34 <USBD_CtlError>
              break;
 8007256:	e01b      	b.n	8007290 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	885b      	ldrh	r3, [r3, #2]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10e      	bne.n	800727e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007260:	7bbb      	ldrb	r3, [r7, #14]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00b      	beq.n	800727e <USBD_StdEPReq+0xc0>
 8007266:	7bbb      	ldrb	r3, [r7, #14]
 8007268:	2b80      	cmp	r3, #128	; 0x80
 800726a:	d008      	beq.n	800727e <USBD_StdEPReq+0xc0>
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	88db      	ldrh	r3, [r3, #6]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d104      	bne.n	800727e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 f9a3 	bl	80085c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fd06 	bl	8007c90 <USBD_CtlSendStatus>

              break;
 8007284:	e004      	b.n	8007290 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fc53 	bl	8007b34 <USBD_CtlError>
              break;
 800728e:	bf00      	nop
          }
          break;
 8007290:	e0ec      	b.n	800746c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b02      	cmp	r3, #2
 800729c:	d002      	beq.n	80072a4 <USBD_StdEPReq+0xe6>
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d016      	beq.n	80072d0 <USBD_StdEPReq+0x112>
 80072a2:	e030      	b.n	8007306 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00d      	beq.n	80072c6 <USBD_StdEPReq+0x108>
 80072aa:	7bbb      	ldrb	r3, [r7, #14]
 80072ac:	2b80      	cmp	r3, #128	; 0x80
 80072ae:	d00a      	beq.n	80072c6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f001 f985 	bl	80085c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072ba:	2180      	movs	r1, #128	; 0x80
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 f981 	bl	80085c4 <USBD_LL_StallEP>
 80072c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072c4:	e025      	b.n	8007312 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fc33 	bl	8007b34 <USBD_CtlError>
              break;
 80072ce:	e020      	b.n	8007312 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	885b      	ldrh	r3, [r3, #2]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d11b      	bne.n	8007310 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
 80072da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d004      	beq.n	80072ec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f001 f9a2 	bl	8008630 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fccf 	bl	8007c90 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	4798      	blx	r3
 8007300:	4603      	mov	r3, r0
 8007302:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007304:	e004      	b.n	8007310 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fc13 	bl	8007b34 <USBD_CtlError>
              break;
 800730e:	e000      	b.n	8007312 <USBD_StdEPReq+0x154>
              break;
 8007310:	bf00      	nop
          }
          break;
 8007312:	e0ab      	b.n	800746c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d002      	beq.n	8007326 <USBD_StdEPReq+0x168>
 8007320:	2b03      	cmp	r3, #3
 8007322:	d032      	beq.n	800738a <USBD_StdEPReq+0x1cc>
 8007324:	e097      	b.n	8007456 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007326:	7bbb      	ldrb	r3, [r7, #14]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d007      	beq.n	800733c <USBD_StdEPReq+0x17e>
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	2b80      	cmp	r3, #128	; 0x80
 8007330:	d004      	beq.n	800733c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fbfd 	bl	8007b34 <USBD_CtlError>
                break;
 800733a:	e091      	b.n	8007460 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800733c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007340:	2b00      	cmp	r3, #0
 8007342:	da0b      	bge.n	800735c <USBD_StdEPReq+0x19e>
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800734a:	4613      	mov	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	3310      	adds	r3, #16
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	4413      	add	r3, r2
 8007358:	3304      	adds	r3, #4
 800735a:	e00b      	b.n	8007374 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007362:	4613      	mov	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	4413      	add	r3, r2
 8007372:	3304      	adds	r3, #4
 8007374:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2202      	movs	r2, #2
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fc47 	bl	8007c16 <USBD_CtlSendData>
              break;
 8007388:	e06a      	b.n	8007460 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800738a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800738e:	2b00      	cmp	r3, #0
 8007390:	da11      	bge.n	80073b6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	f003 020f 	and.w	r2, r3, #15
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	440b      	add	r3, r1
 80073a4:	3324      	adds	r3, #36	; 0x24
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d117      	bne.n	80073dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fbc0 	bl	8007b34 <USBD_CtlError>
                  break;
 80073b4:	e054      	b.n	8007460 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	f003 020f 	and.w	r2, r3, #15
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d104      	bne.n	80073dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fbad 	bl	8007b34 <USBD_CtlError>
                  break;
 80073da:	e041      	b.n	8007460 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	da0b      	bge.n	80073fc <USBD_StdEPReq+0x23e>
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
 80073e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073ea:	4613      	mov	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	3310      	adds	r3, #16
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	4413      	add	r3, r2
 80073f8:	3304      	adds	r3, #4
 80073fa:	e00b      	b.n	8007414 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007402:	4613      	mov	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	4413      	add	r3, r2
 8007412:	3304      	adds	r3, #4
 8007414:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <USBD_StdEPReq+0x264>
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	2b80      	cmp	r3, #128	; 0x80
 8007420:	d103      	bne.n	800742a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2200      	movs	r2, #0
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	e00e      	b.n	8007448 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f001 f934 	bl	800869c <USBD_LL_IsStallEP>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2201      	movs	r2, #1
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	e002      	b.n	8007448 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2202      	movs	r2, #2
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fbe1 	bl	8007c16 <USBD_CtlSendData>
              break;
 8007454:	e004      	b.n	8007460 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fb6b 	bl	8007b34 <USBD_CtlError>
              break;
 800745e:	bf00      	nop
          }
          break;
 8007460:	e004      	b.n	800746c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fb65 	bl	8007b34 <USBD_CtlError>
          break;
 800746a:	bf00      	nop
      }
      break;
 800746c:	e004      	b.n	8007478 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fb5f 	bl	8007b34 <USBD_CtlError>
      break;
 8007476:	bf00      	nop
  }

  return ret;
 8007478:	7bfb      	ldrb	r3, [r7, #15]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	885b      	ldrh	r3, [r3, #2]
 800749e:	0a1b      	lsrs	r3, r3, #8
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	3b01      	subs	r3, #1
 80074a4:	2b0e      	cmp	r3, #14
 80074a6:	f200 8152 	bhi.w	800774e <USBD_GetDescriptor+0x2ca>
 80074aa:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <USBD_GetDescriptor+0x2c>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	08007521 	.word	0x08007521
 80074b4:	08007539 	.word	0x08007539
 80074b8:	08007579 	.word	0x08007579
 80074bc:	0800774f 	.word	0x0800774f
 80074c0:	0800774f 	.word	0x0800774f
 80074c4:	080076ef 	.word	0x080076ef
 80074c8:	0800771b 	.word	0x0800771b
 80074cc:	0800774f 	.word	0x0800774f
 80074d0:	0800774f 	.word	0x0800774f
 80074d4:	0800774f 	.word	0x0800774f
 80074d8:	0800774f 	.word	0x0800774f
 80074dc:	0800774f 	.word	0x0800774f
 80074e0:	0800774f 	.word	0x0800774f
 80074e4:	0800774f 	.word	0x0800774f
 80074e8:	080074ed 	.word	0x080074ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00b      	beq.n	8007510 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	7c12      	ldrb	r2, [r2, #16]
 8007504:	f107 0108 	add.w	r1, r7, #8
 8007508:	4610      	mov	r0, r2
 800750a:	4798      	blx	r3
 800750c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800750e:	e126      	b.n	800775e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fb0e 	bl	8007b34 <USBD_CtlError>
        err++;
 8007518:	7afb      	ldrb	r3, [r7, #11]
 800751a:	3301      	adds	r3, #1
 800751c:	72fb      	strb	r3, [r7, #11]
      break;
 800751e:	e11e      	b.n	800775e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	7c12      	ldrb	r2, [r2, #16]
 800752c:	f107 0108 	add.w	r1, r7, #8
 8007530:	4610      	mov	r0, r2
 8007532:	4798      	blx	r3
 8007534:	60f8      	str	r0, [r7, #12]
      break;
 8007536:	e112      	b.n	800775e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	7c1b      	ldrb	r3, [r3, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10d      	bne.n	800755c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007548:	f107 0208 	add.w	r2, r7, #8
 800754c:	4610      	mov	r0, r2
 800754e:	4798      	blx	r3
 8007550:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3301      	adds	r3, #1
 8007556:	2202      	movs	r2, #2
 8007558:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800755a:	e100      	b.n	800775e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007564:	f107 0208 	add.w	r2, r7, #8
 8007568:	4610      	mov	r0, r2
 800756a:	4798      	blx	r3
 800756c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	2202      	movs	r2, #2
 8007574:	701a      	strb	r2, [r3, #0]
      break;
 8007576:	e0f2      	b.n	800775e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	885b      	ldrh	r3, [r3, #2]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b05      	cmp	r3, #5
 8007580:	f200 80ac 	bhi.w	80076dc <USBD_GetDescriptor+0x258>
 8007584:	a201      	add	r2, pc, #4	; (adr r2, 800758c <USBD_GetDescriptor+0x108>)
 8007586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758a:	bf00      	nop
 800758c:	080075a5 	.word	0x080075a5
 8007590:	080075d9 	.word	0x080075d9
 8007594:	0800760d 	.word	0x0800760d
 8007598:	08007641 	.word	0x08007641
 800759c:	08007675 	.word	0x08007675
 80075a0:	080076a9 	.word	0x080076a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	7c12      	ldrb	r2, [r2, #16]
 80075bc:	f107 0108 	add.w	r1, r7, #8
 80075c0:	4610      	mov	r0, r2
 80075c2:	4798      	blx	r3
 80075c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075c6:	e091      	b.n	80076ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fab2 	bl	8007b34 <USBD_CtlError>
            err++;
 80075d0:	7afb      	ldrb	r3, [r7, #11]
 80075d2:	3301      	adds	r3, #1
 80075d4:	72fb      	strb	r3, [r7, #11]
          break;
 80075d6:	e089      	b.n	80076ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00b      	beq.n	80075fc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	7c12      	ldrb	r2, [r2, #16]
 80075f0:	f107 0108 	add.w	r1, r7, #8
 80075f4:	4610      	mov	r0, r2
 80075f6:	4798      	blx	r3
 80075f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075fa:	e077      	b.n	80076ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fa98 	bl	8007b34 <USBD_CtlError>
            err++;
 8007604:	7afb      	ldrb	r3, [r7, #11]
 8007606:	3301      	adds	r3, #1
 8007608:	72fb      	strb	r3, [r7, #11]
          break;
 800760a:	e06f      	b.n	80076ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00b      	beq.n	8007630 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	7c12      	ldrb	r2, [r2, #16]
 8007624:	f107 0108 	add.w	r1, r7, #8
 8007628:	4610      	mov	r0, r2
 800762a:	4798      	blx	r3
 800762c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800762e:	e05d      	b.n	80076ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fa7e 	bl	8007b34 <USBD_CtlError>
            err++;
 8007638:	7afb      	ldrb	r3, [r7, #11]
 800763a:	3301      	adds	r3, #1
 800763c:	72fb      	strb	r3, [r7, #11]
          break;
 800763e:	e055      	b.n	80076ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	7c12      	ldrb	r2, [r2, #16]
 8007658:	f107 0108 	add.w	r1, r7, #8
 800765c:	4610      	mov	r0, r2
 800765e:	4798      	blx	r3
 8007660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007662:	e043      	b.n	80076ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fa64 	bl	8007b34 <USBD_CtlError>
            err++;
 800766c:	7afb      	ldrb	r3, [r7, #11]
 800766e:	3301      	adds	r3, #1
 8007670:	72fb      	strb	r3, [r7, #11]
          break;
 8007672:	e03b      	b.n	80076ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00b      	beq.n	8007698 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	7c12      	ldrb	r2, [r2, #16]
 800768c:	f107 0108 	add.w	r1, r7, #8
 8007690:	4610      	mov	r0, r2
 8007692:	4798      	blx	r3
 8007694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007696:	e029      	b.n	80076ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fa4a 	bl	8007b34 <USBD_CtlError>
            err++;
 80076a0:	7afb      	ldrb	r3, [r7, #11]
 80076a2:	3301      	adds	r3, #1
 80076a4:	72fb      	strb	r3, [r7, #11]
          break;
 80076a6:	e021      	b.n	80076ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00b      	beq.n	80076cc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	7c12      	ldrb	r2, [r2, #16]
 80076c0:	f107 0108 	add.w	r1, r7, #8
 80076c4:	4610      	mov	r0, r2
 80076c6:	4798      	blx	r3
 80076c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ca:	e00f      	b.n	80076ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fa30 	bl	8007b34 <USBD_CtlError>
            err++;
 80076d4:	7afb      	ldrb	r3, [r7, #11]
 80076d6:	3301      	adds	r3, #1
 80076d8:	72fb      	strb	r3, [r7, #11]
          break;
 80076da:	e007      	b.n	80076ec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa28 	bl	8007b34 <USBD_CtlError>
          err++;
 80076e4:	7afb      	ldrb	r3, [r7, #11]
 80076e6:	3301      	adds	r3, #1
 80076e8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80076ea:	bf00      	nop
      }
      break;
 80076ec:	e037      	b.n	800775e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	7c1b      	ldrb	r3, [r3, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d109      	bne.n	800770a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fe:	f107 0208 	add.w	r2, r7, #8
 8007702:	4610      	mov	r0, r2
 8007704:	4798      	blx	r3
 8007706:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007708:	e029      	b.n	800775e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fa11 	bl	8007b34 <USBD_CtlError>
        err++;
 8007712:	7afb      	ldrb	r3, [r7, #11]
 8007714:	3301      	adds	r3, #1
 8007716:	72fb      	strb	r3, [r7, #11]
      break;
 8007718:	e021      	b.n	800775e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	7c1b      	ldrb	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10d      	bne.n	800773e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772a:	f107 0208 	add.w	r2, r7, #8
 800772e:	4610      	mov	r0, r2
 8007730:	4798      	blx	r3
 8007732:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	3301      	adds	r3, #1
 8007738:	2207      	movs	r2, #7
 800773a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800773c:	e00f      	b.n	800775e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f9f7 	bl	8007b34 <USBD_CtlError>
        err++;
 8007746:	7afb      	ldrb	r3, [r7, #11]
 8007748:	3301      	adds	r3, #1
 800774a:	72fb      	strb	r3, [r7, #11]
      break;
 800774c:	e007      	b.n	800775e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f9ef 	bl	8007b34 <USBD_CtlError>
      err++;
 8007756:	7afb      	ldrb	r3, [r7, #11]
 8007758:	3301      	adds	r3, #1
 800775a:	72fb      	strb	r3, [r7, #11]
      break;
 800775c:	bf00      	nop
  }

  if (err != 0U)
 800775e:	7afb      	ldrb	r3, [r7, #11]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d11e      	bne.n	80077a2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	88db      	ldrh	r3, [r3, #6]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d016      	beq.n	800779a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800776c:	893b      	ldrh	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00e      	beq.n	8007790 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	88da      	ldrh	r2, [r3, #6]
 8007776:	893b      	ldrh	r3, [r7, #8]
 8007778:	4293      	cmp	r3, r2
 800777a:	bf28      	it	cs
 800777c:	4613      	movcs	r3, r2
 800777e:	b29b      	uxth	r3, r3
 8007780:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007782:	893b      	ldrh	r3, [r7, #8]
 8007784:	461a      	mov	r2, r3
 8007786:	68f9      	ldr	r1, [r7, #12]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fa44 	bl	8007c16 <USBD_CtlSendData>
 800778e:	e009      	b.n	80077a4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f9ce 	bl	8007b34 <USBD_CtlError>
 8007798:	e004      	b.n	80077a4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fa78 	bl	8007c90 <USBD_CtlSendStatus>
 80077a0:	e000      	b.n	80077a4 <USBD_GetDescriptor+0x320>
    return;
 80077a2:	bf00      	nop
  }
}
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop

080077ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	889b      	ldrh	r3, [r3, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d131      	bne.n	8007822 <USBD_SetAddress+0x76>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	88db      	ldrh	r3, [r3, #6]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d12d      	bne.n	8007822 <USBD_SetAddress+0x76>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	885b      	ldrh	r3, [r3, #2]
 80077ca:	2b7f      	cmp	r3, #127	; 0x7f
 80077cc:	d829      	bhi.n	8007822 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	885b      	ldrh	r3, [r3, #2]
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d104      	bne.n	80077f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f9a3 	bl	8007b34 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ee:	e01d      	b.n	800782c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	7bfa      	ldrb	r2, [r7, #15]
 80077f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 ff79 	bl	80086f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fa44 	bl	8007c90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d004      	beq.n	8007818 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2202      	movs	r2, #2
 8007812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007816:	e009      	b.n	800782c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007820:	e004      	b.n	800782c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f985 	bl	8007b34 <USBD_CtlError>
  }
}
 800782a:	bf00      	nop
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	885b      	ldrh	r3, [r3, #2]
 8007846:	b2da      	uxtb	r2, r3
 8007848:	4b4c      	ldr	r3, [pc, #304]	; (800797c <USBD_SetConfig+0x148>)
 800784a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800784c:	4b4b      	ldr	r3, [pc, #300]	; (800797c <USBD_SetConfig+0x148>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d905      	bls.n	8007860 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f96c 	bl	8007b34 <USBD_CtlError>
    return USBD_FAIL;
 800785c:	2303      	movs	r3, #3
 800785e:	e088      	b.n	8007972 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b02      	cmp	r3, #2
 800786a:	d002      	beq.n	8007872 <USBD_SetConfig+0x3e>
 800786c:	2b03      	cmp	r3, #3
 800786e:	d025      	beq.n	80078bc <USBD_SetConfig+0x88>
 8007870:	e071      	b.n	8007956 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007872:	4b42      	ldr	r3, [pc, #264]	; (800797c <USBD_SetConfig+0x148>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d01c      	beq.n	80078b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800787a:	4b40      	ldr	r3, [pc, #256]	; (800797c <USBD_SetConfig+0x148>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	461a      	mov	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007884:	4b3d      	ldr	r3, [pc, #244]	; (800797c <USBD_SetConfig+0x148>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff f91f 	bl	8006ace <USBD_SetClassConfig>
 8007890:	4603      	mov	r3, r0
 8007892:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007894:	7bfb      	ldrb	r3, [r7, #15]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d004      	beq.n	80078a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f949 	bl	8007b34 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078a2:	e065      	b.n	8007970 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f9f3 	bl	8007c90 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2203      	movs	r2, #3
 80078ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078b2:	e05d      	b.n	8007970 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f9eb 	bl	8007c90 <USBD_CtlSendStatus>
      break;
 80078ba:	e059      	b.n	8007970 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80078bc:	4b2f      	ldr	r3, [pc, #188]	; (800797c <USBD_SetConfig+0x148>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d112      	bne.n	80078ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80078cc:	4b2b      	ldr	r3, [pc, #172]	; (800797c <USBD_SetConfig+0x148>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	461a      	mov	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078d6:	4b29      	ldr	r3, [pc, #164]	; (800797c <USBD_SetConfig+0x148>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff f912 	bl	8006b06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f9d4 	bl	8007c90 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078e8:	e042      	b.n	8007970 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80078ea:	4b24      	ldr	r3, [pc, #144]	; (800797c <USBD_SetConfig+0x148>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d02a      	beq.n	800794e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff f900 	bl	8006b06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007906:	4b1d      	ldr	r3, [pc, #116]	; (800797c <USBD_SetConfig+0x148>)
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007910:	4b1a      	ldr	r3, [pc, #104]	; (800797c <USBD_SetConfig+0x148>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7ff f8d9 	bl	8006ace <USBD_SetClassConfig>
 800791c:	4603      	mov	r3, r0
 800791e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00f      	beq.n	8007946 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f903 	bl	8007b34 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	b2db      	uxtb	r3, r3
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7ff f8e5 	bl	8006b06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2202      	movs	r2, #2
 8007940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007944:	e014      	b.n	8007970 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f9a2 	bl	8007c90 <USBD_CtlSendStatus>
      break;
 800794c:	e010      	b.n	8007970 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f99e 	bl	8007c90 <USBD_CtlSendStatus>
      break;
 8007954:	e00c      	b.n	8007970 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f8eb 	bl	8007b34 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800795e:	4b07      	ldr	r3, [pc, #28]	; (800797c <USBD_SetConfig+0x148>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7ff f8ce 	bl	8006b06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800796a:	2303      	movs	r3, #3
 800796c:	73fb      	strb	r3, [r7, #15]
      break;
 800796e:	bf00      	nop
  }

  return ret;
 8007970:	7bfb      	ldrb	r3, [r7, #15]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20000194 	.word	0x20000194

08007980 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	88db      	ldrh	r3, [r3, #6]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d004      	beq.n	800799c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f8cd 	bl	8007b34 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800799a:	e023      	b.n	80079e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	dc02      	bgt.n	80079ae <USBD_GetConfig+0x2e>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	dc03      	bgt.n	80079b4 <USBD_GetConfig+0x34>
 80079ac:	e015      	b.n	80079da <USBD_GetConfig+0x5a>
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d00b      	beq.n	80079ca <USBD_GetConfig+0x4a>
 80079b2:	e012      	b.n	80079da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3308      	adds	r3, #8
 80079be:	2201      	movs	r2, #1
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f927 	bl	8007c16 <USBD_CtlSendData>
        break;
 80079c8:	e00c      	b.n	80079e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3304      	adds	r3, #4
 80079ce:	2201      	movs	r2, #1
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f91f 	bl	8007c16 <USBD_CtlSendData>
        break;
 80079d8:	e004      	b.n	80079e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f8a9 	bl	8007b34 <USBD_CtlError>
        break;
 80079e2:	bf00      	nop
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	3b01      	subs	r3, #1
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d81e      	bhi.n	8007a42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	88db      	ldrh	r3, [r3, #6]
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d004      	beq.n	8007a16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f890 	bl	8007b34 <USBD_CtlError>
        break;
 8007a14:	e01a      	b.n	8007a4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f043 0202 	orr.w	r2, r3, #2
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	330c      	adds	r3, #12
 8007a36:	2202      	movs	r2, #2
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f8eb 	bl	8007c16 <USBD_CtlSendData>
      break;
 8007a40:	e004      	b.n	8007a4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f875 	bl	8007b34 <USBD_CtlError>
      break;
 8007a4a:	bf00      	nop
  }
}
 8007a4c:	bf00      	nop
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	885b      	ldrh	r3, [r3, #2]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d106      	bne.n	8007a74 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f90e 	bl	8007c90 <USBD_CtlSendStatus>
  }
}
 8007a74:	bf00      	nop
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d80b      	bhi.n	8007aac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	885b      	ldrh	r3, [r3, #2]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d10c      	bne.n	8007ab6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f8f3 	bl	8007c90 <USBD_CtlSendStatus>
      }
      break;
 8007aaa:	e004      	b.n	8007ab6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f840 	bl	8007b34 <USBD_CtlError>
      break;
 8007ab4:	e000      	b.n	8007ab8 <USBD_ClrFeature+0x3c>
      break;
 8007ab6:	bf00      	nop
  }
}
 8007ab8:	bf00      	nop
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	781a      	ldrb	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	781a      	ldrb	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f7ff fa92 	bl	8007014 <SWAPBYTE>
 8007af0:	4603      	mov	r3, r0
 8007af2:	461a      	mov	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3301      	adds	r3, #1
 8007afc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3301      	adds	r3, #1
 8007b02:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f7ff fa85 	bl	8007014 <SWAPBYTE>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3301      	adds	r3, #1
 8007b16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f7ff fa78 	bl	8007014 <SWAPBYTE>
 8007b24:	4603      	mov	r3, r0
 8007b26:	461a      	mov	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	80da      	strh	r2, [r3, #6]
}
 8007b2c:	bf00      	nop
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b3e:	2180      	movs	r1, #128	; 0x80
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fd3f 	bl	80085c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b46:	2100      	movs	r1, #0
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fd3b 	bl	80085c4 <USBD_LL_StallEP>
}
 8007b4e:	bf00      	nop
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b086      	sub	sp, #24
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d036      	beq.n	8007bda <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b70:	6938      	ldr	r0, [r7, #16]
 8007b72:	f000 f836 	bl	8007be2 <USBD_GetLen>
 8007b76:	4603      	mov	r3, r0
 8007b78:	3301      	adds	r3, #1
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	005b      	lsls	r3, r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	4413      	add	r3, r2
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	7812      	ldrb	r2, [r2, #0]
 8007b8e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	3301      	adds	r3, #1
 8007b94:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	2203      	movs	r2, #3
 8007b9e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ba6:	e013      	b.n	8007bd0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	4413      	add	r3, r2
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	7812      	ldrb	r2, [r2, #0]
 8007bb2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	613b      	str	r3, [r7, #16]
    idx++;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007bc0:	7dfb      	ldrb	r3, [r7, #23]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	701a      	strb	r2, [r3, #0]
    idx++;
 8007bca:	7dfb      	ldrb	r3, [r7, #23]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e7      	bne.n	8007ba8 <USBD_GetString+0x52>
 8007bd8:	e000      	b.n	8007bdc <USBD_GetString+0x86>
    return;
 8007bda:	bf00      	nop
  }
}
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007bf2:	e005      	b.n	8007c00 <USBD_GetLen+0x1e>
  {
    len++;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1f5      	bne.n	8007bf4 <USBD_GetLen+0x12>
  }

  return len;
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	60f8      	str	r0, [r7, #12]
 8007c1e:	60b9      	str	r1, [r7, #8]
 8007c20:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2202      	movs	r2, #2
 8007c26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 fd8f 	bl	8008760 <USBD_LL_Transmit>

  return USBD_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 fd7e 	bl	8008760 <USBD_LL_Transmit>

  return USBD_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	60f8      	str	r0, [r7, #12]
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	2100      	movs	r1, #0
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 fda5 	bl	80087d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2204      	movs	r2, #4
 8007c9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fd5a 	bl	8008760 <USBD_LL_Transmit>

  return USBD_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2205      	movs	r2, #5
 8007cc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2100      	movs	r1, #0
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fd7f 	bl	80087d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	4912      	ldr	r1, [pc, #72]	; (8007d2c <MX_USB_DEVICE_Init+0x50>)
 8007ce4:	4812      	ldr	r0, [pc, #72]	; (8007d30 <MX_USB_DEVICE_Init+0x54>)
 8007ce6:	f7fe fe84 	bl	80069f2 <USBD_Init>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007cf0:	f7f8 fb06 	bl	8000300 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8007cf4:	490f      	ldr	r1, [pc, #60]	; (8007d34 <MX_USB_DEVICE_Init+0x58>)
 8007cf6:	480e      	ldr	r0, [pc, #56]	; (8007d30 <MX_USB_DEVICE_Init+0x54>)
 8007cf8:	f7fe feab 	bl	8006a52 <USBD_RegisterClass>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d02:	f7f8 fafd 	bl	8000300 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8007d06:	490c      	ldr	r1, [pc, #48]	; (8007d38 <MX_USB_DEVICE_Init+0x5c>)
 8007d08:	4809      	ldr	r0, [pc, #36]	; (8007d30 <MX_USB_DEVICE_Init+0x54>)
 8007d0a:	f7fd fa5b 	bl	80051c4 <USBD_MSC_RegisterStorage>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d14:	f7f8 faf4 	bl	8000300 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d18:	4805      	ldr	r0, [pc, #20]	; (8007d30 <MX_USB_DEVICE_Init+0x54>)
 8007d1a:	f7fe fec1 	bl	8006aa0 <USBD_Start>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d24:	f7f8 faec 	bl	8000300 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d28:	bf00      	nop
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	200000f4 	.word	0x200000f4
 8007d30:	20000198 	.word	0x20000198
 8007d34:	2000000c 	.word	0x2000000c
 8007d38:	20000154 	.word	0x20000154

08007d3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	4603      	mov	r3, r0
 8007d44:	6039      	str	r1, [r7, #0]
 8007d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2212      	movs	r2, #18
 8007d4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d4e:	4b03      	ldr	r3, [pc, #12]	; (8007d5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	20000114 	.word	0x20000114

08007d60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	4603      	mov	r3, r0
 8007d68:	6039      	str	r1, [r7, #0]
 8007d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2204      	movs	r2, #4
 8007d70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d72:	4b03      	ldr	r3, [pc, #12]	; (8007d80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	20000134 	.word	0x20000134

08007d84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	6039      	str	r1, [r7, #0]
 8007d8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d90:	79fb      	ldrb	r3, [r7, #7]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d105      	bne.n	8007da2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	4907      	ldr	r1, [pc, #28]	; (8007db8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d9a:	4808      	ldr	r0, [pc, #32]	; (8007dbc <USBD_FS_ProductStrDescriptor+0x38>)
 8007d9c:	f7ff fedb 	bl	8007b56 <USBD_GetString>
 8007da0:	e004      	b.n	8007dac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007da2:	683a      	ldr	r2, [r7, #0]
 8007da4:	4904      	ldr	r1, [pc, #16]	; (8007db8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007da6:	4805      	ldr	r0, [pc, #20]	; (8007dbc <USBD_FS_ProductStrDescriptor+0x38>)
 8007da8:	f7ff fed5 	bl	8007b56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dac:	4b02      	ldr	r3, [pc, #8]	; (8007db8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20000468 	.word	0x20000468
 8007dbc:	080089cc 	.word	0x080089cc

08007dc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	6039      	str	r1, [r7, #0]
 8007dca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	4904      	ldr	r1, [pc, #16]	; (8007de0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007dd0:	4804      	ldr	r0, [pc, #16]	; (8007de4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007dd2:	f7ff fec0 	bl	8007b56 <USBD_GetString>
  return USBD_StrDesc;
 8007dd6:	4b02      	ldr	r3, [pc, #8]	; (8007de0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	20000468 	.word	0x20000468
 8007de4:	080089e0 	.word	0x080089e0

08007de8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4603      	mov	r3, r0
 8007df0:	6039      	str	r1, [r7, #0]
 8007df2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	221a      	movs	r2, #26
 8007df8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007dfa:	f000 f855 	bl	8007ea8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007dfe:	4b02      	ldr	r3, [pc, #8]	; (8007e08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	20000138 	.word	0x20000138

08007e0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	4603      	mov	r3, r0
 8007e14:	6039      	str	r1, [r7, #0]
 8007e16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e18:	79fb      	ldrb	r3, [r7, #7]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d105      	bne.n	8007e2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	4907      	ldr	r1, [pc, #28]	; (8007e40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e22:	4808      	ldr	r0, [pc, #32]	; (8007e44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e24:	f7ff fe97 	bl	8007b56 <USBD_GetString>
 8007e28:	e004      	b.n	8007e34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	4904      	ldr	r1, [pc, #16]	; (8007e40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e2e:	4805      	ldr	r0, [pc, #20]	; (8007e44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e30:	f7ff fe91 	bl	8007b56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e34:	4b02      	ldr	r3, [pc, #8]	; (8007e40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	20000468 	.word	0x20000468
 8007e44:	080089f4 	.word	0x080089f4

08007e48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	6039      	str	r1, [r7, #0]
 8007e52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e54:	79fb      	ldrb	r3, [r7, #7]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d105      	bne.n	8007e66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	4907      	ldr	r1, [pc, #28]	; (8007e7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e5e:	4808      	ldr	r0, [pc, #32]	; (8007e80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e60:	f7ff fe79 	bl	8007b56 <USBD_GetString>
 8007e64:	e004      	b.n	8007e70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	4904      	ldr	r1, [pc, #16]	; (8007e7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e6a:	4805      	ldr	r0, [pc, #20]	; (8007e80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e6c:	f7ff fe73 	bl	8007b56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e70:	4b02      	ldr	r3, [pc, #8]	; (8007e7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20000468 	.word	0x20000468
 8007e80:	08008a00 	.word	0x08008a00

08007e84 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	6039      	str	r1, [r7, #0]
 8007e8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	220c      	movs	r2, #12
 8007e94:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007e96:	4b03      	ldr	r3, [pc, #12]	; (8007ea4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	20000128 	.word	0x20000128

08007ea8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007eae:	4b0f      	ldr	r3, [pc, #60]	; (8007eec <Get_SerialNum+0x44>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007eb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <Get_SerialNum+0x48>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007eba:	4b0e      	ldr	r3, [pc, #56]	; (8007ef4 <Get_SerialNum+0x4c>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d009      	beq.n	8007ee2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ece:	2208      	movs	r2, #8
 8007ed0:	4909      	ldr	r1, [pc, #36]	; (8007ef8 <Get_SerialNum+0x50>)
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 f814 	bl	8007f00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ed8:	2204      	movs	r2, #4
 8007eda:	4908      	ldr	r1, [pc, #32]	; (8007efc <Get_SerialNum+0x54>)
 8007edc:	68b8      	ldr	r0, [r7, #8]
 8007ede:	f000 f80f 	bl	8007f00 <IntToUnicode>
  }
}
 8007ee2:	bf00      	nop
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	1fff7590 	.word	0x1fff7590
 8007ef0:	1fff7594 	.word	0x1fff7594
 8007ef4:	1fff7598 	.word	0x1fff7598
 8007ef8:	2000013a 	.word	0x2000013a
 8007efc:	2000014a 	.word	0x2000014a

08007f00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f12:	2300      	movs	r3, #0
 8007f14:	75fb      	strb	r3, [r7, #23]
 8007f16:	e027      	b.n	8007f68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	0f1b      	lsrs	r3, r3, #28
 8007f1c:	2b09      	cmp	r3, #9
 8007f1e:	d80b      	bhi.n	8007f38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	0f1b      	lsrs	r3, r3, #28
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	440b      	add	r3, r1
 8007f30:	3230      	adds	r2, #48	; 0x30
 8007f32:	b2d2      	uxtb	r2, r2
 8007f34:	701a      	strb	r2, [r3, #0]
 8007f36:	e00a      	b.n	8007f4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	0f1b      	lsrs	r3, r3, #28
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	4619      	mov	r1, r3
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	440b      	add	r3, r1
 8007f48:	3237      	adds	r2, #55	; 0x37
 8007f4a:	b2d2      	uxtb	r2, r2
 8007f4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	011b      	lsls	r3, r3, #4
 8007f52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	3301      	adds	r3, #1
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	2200      	movs	r2, #0
 8007f60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
 8007f64:	3301      	adds	r3, #1
 8007f66:	75fb      	strb	r3, [r7, #23]
 8007f68:	7dfa      	ldrb	r2, [r7, #23]
 8007f6a:	79fb      	ldrb	r3, [r7, #7]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d3d3      	bcc.n	8007f18 <IntToUnicode+0x18>
  }
}
 8007f70:	bf00      	nop
 8007f72:	bf00      	nop
 8007f74:	371c      	adds	r7, #28
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b083      	sub	sp, #12
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	4603      	mov	r3, r0
 8007f86:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8007f88:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b085      	sub	sp, #20
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	60b9      	str	r1, [r7, #8]
 8007fa0:	607a      	str	r2, [r7, #4]
 8007fa2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2280      	movs	r2, #128	; 0x80
 8007fa8:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fb0:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8007fb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fca:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007fe2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60b9      	str	r1, [r7, #8]
 8007ff8:	607a      	str	r2, [r7, #4]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
 8008000:	4613      	mov	r3, r2
 8008002:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	025b      	lsls	r3, r3, #9
 8008008:	4a06      	ldr	r2, [pc, #24]	; (8008024 <STORAGE_Read_FS+0x34>)
 800800a:	1899      	adds	r1, r3, r2
 800800c:	89bb      	ldrh	r3, [r7, #12]
 800800e:	025b      	lsls	r3, r3, #9
 8008010:	461a      	mov	r2, r3
 8008012:	68b8      	ldr	r0, [r7, #8]
 8008014:	f000 fcb8 	bl	8008988 <memcpy>
  return (USBD_OK);
 8008018:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	20000668 	.word	0x20000668

08008028 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	60b9      	str	r1, [r7, #8]
 8008030:	607a      	str	r2, [r7, #4]
 8008032:	461a      	mov	r2, r3
 8008034:	4603      	mov	r3, r0
 8008036:	73fb      	strb	r3, [r7, #15]
 8008038:	4613      	mov	r3, r2
 800803a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	025b      	lsls	r3, r3, #9
 8008040:	4a06      	ldr	r2, [pc, #24]	; (800805c <STORAGE_Write_FS+0x34>)
 8008042:	1898      	adds	r0, r3, r2
 8008044:	89bb      	ldrh	r3, [r7, #12]
 8008046:	025b      	lsls	r3, r3, #9
 8008048:	461a      	mov	r2, r3
 800804a:	68b9      	ldr	r1, [r7, #8]
 800804c:	f000 fc9c 	bl	8008988 <memcpy>
  return (USBD_OK);
 8008050:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20000668 	.word	0x20000668

08008060 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8008064:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8008066:	4618      	mov	r0, r3
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b0b0      	sub	sp, #192	; 0xc0
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008078:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800807c:	2200      	movs	r2, #0
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	605a      	str	r2, [r3, #4]
 8008082:	609a      	str	r2, [r3, #8]
 8008084:	60da      	str	r2, [r3, #12]
 8008086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008088:	f107 0318 	add.w	r3, r7, #24
 800808c:	2294      	movs	r2, #148	; 0x94
 800808e:	2100      	movs	r1, #0
 8008090:	4618      	mov	r0, r3
 8008092:	f000 fc87 	bl	80089a4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800809e:	d163      	bne.n	8008168 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80080a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80080a6:	2300      	movs	r3, #0
 80080a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80080ac:	f107 0318 	add.w	r3, r7, #24
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fa fe67 	bl	8002d84 <HAL_RCCEx_PeriphCLKConfig>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80080bc:	f7f8 f920 	bl	8000300 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080c0:	4b2b      	ldr	r3, [pc, #172]	; (8008170 <HAL_PCD_MspInit+0x100>)
 80080c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c4:	4a2a      	ldr	r2, [pc, #168]	; (8008170 <HAL_PCD_MspInit+0x100>)
 80080c6:	f043 0301 	orr.w	r3, r3, #1
 80080ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080cc:	4b28      	ldr	r3, [pc, #160]	; (8008170 <HAL_PCD_MspInit+0x100>)
 80080ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	617b      	str	r3, [r7, #20]
 80080d6:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80080d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80080dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080e0:	2302      	movs	r3, #2
 80080e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080ec:	2303      	movs	r3, #3
 80080ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080f2:	230a      	movs	r3, #10
 80080f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80080fc:	4619      	mov	r1, r3
 80080fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008102:	f7f8 fb41 	bl	8000788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008106:	4b1a      	ldr	r3, [pc, #104]	; (8008170 <HAL_PCD_MspInit+0x100>)
 8008108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800810a:	4a19      	ldr	r2, [pc, #100]	; (8008170 <HAL_PCD_MspInit+0x100>)
 800810c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008112:	4b17      	ldr	r3, [pc, #92]	; (8008170 <HAL_PCD_MspInit+0x100>)
 8008114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800811a:	613b      	str	r3, [r7, #16]
 800811c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800811e:	4b14      	ldr	r3, [pc, #80]	; (8008170 <HAL_PCD_MspInit+0x100>)
 8008120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d114      	bne.n	8008154 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800812a:	4b11      	ldr	r3, [pc, #68]	; (8008170 <HAL_PCD_MspInit+0x100>)
 800812c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812e:	4a10      	ldr	r2, [pc, #64]	; (8008170 <HAL_PCD_MspInit+0x100>)
 8008130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008134:	6593      	str	r3, [r2, #88]	; 0x58
 8008136:	4b0e      	ldr	r3, [pc, #56]	; (8008170 <HAL_PCD_MspInit+0x100>)
 8008138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8008142:	f7f9 ff63 	bl	800200c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008146:	4b0a      	ldr	r3, [pc, #40]	; (8008170 <HAL_PCD_MspInit+0x100>)
 8008148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814a:	4a09      	ldr	r2, [pc, #36]	; (8008170 <HAL_PCD_MspInit+0x100>)
 800814c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008150:	6593      	str	r3, [r2, #88]	; 0x58
 8008152:	e001      	b.n	8008158 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008154:	f7f9 ff5a 	bl	800200c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008158:	2200      	movs	r2, #0
 800815a:	2100      	movs	r1, #0
 800815c:	2043      	movs	r0, #67	; 0x43
 800815e:	f7f8 fadc 	bl	800071a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008162:	2043      	movs	r0, #67	; 0x43
 8008164:	f7f8 faf5 	bl	8000752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008168:	bf00      	nop
 800816a:	37c0      	adds	r7, #192	; 0xc0
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	40021000 	.word	0x40021000

08008174 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008188:	4619      	mov	r1, r3
 800818a:	4610      	mov	r0, r2
 800818c:	f7fe fcd3 	bl	8006b36 <USBD_LL_SetupStage>
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80081aa:	78fa      	ldrb	r2, [r7, #3]
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	4613      	mov	r3, r2
 80081b0:	00db      	lsls	r3, r3, #3
 80081b2:	4413      	add	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	440b      	add	r3, r1
 80081b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	78fb      	ldrb	r3, [r7, #3]
 80081c0:	4619      	mov	r1, r3
 80081c2:	f7fe fd0d 	bl	8006be0 <USBD_LL_DataOutStage>
}
 80081c6:	bf00      	nop
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b082      	sub	sp, #8
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	460b      	mov	r3, r1
 80081d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80081e0:	78fa      	ldrb	r2, [r7, #3]
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	4613      	mov	r3, r2
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	4413      	add	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	440b      	add	r3, r1
 80081ee:	334c      	adds	r3, #76	; 0x4c
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	78fb      	ldrb	r3, [r7, #3]
 80081f4:	4619      	mov	r1, r3
 80081f6:	f7fe fd56 	bl	8006ca6 <USBD_LL_DataInStage>
}
 80081fa:	bf00      	nop
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b082      	sub	sp, #8
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe fe6a 	bl	8006eea <USBD_LL_SOF>
}
 8008216:	bf00      	nop
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008226:	2301      	movs	r3, #1
 8008228:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	2b02      	cmp	r3, #2
 8008230:	d001      	beq.n	8008236 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008232:	f7f8 f865 	bl	8000300 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800823c:	7bfa      	ldrb	r2, [r7, #15]
 800823e:	4611      	mov	r1, r2
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe fe14 	bl	8006e6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800824c:	4618      	mov	r0, r3
 800824e:	f7fe fdc0 	bl	8006dd2 <USBD_LL_Reset>
}
 8008252:	bf00      	nop
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
	...

0800825c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	6812      	ldr	r2, [r2, #0]
 8008272:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008276:	f043 0301 	orr.w	r3, r3, #1
 800827a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008282:	4618      	mov	r0, r3
 8008284:	f7fe fe03 	bl	8006e8e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d005      	beq.n	800829c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008290:	4b04      	ldr	r3, [pc, #16]	; (80082a4 <HAL_PCD_SuspendCallback+0x48>)
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	4a03      	ldr	r2, [pc, #12]	; (80082a4 <HAL_PCD_SuspendCallback+0x48>)
 8008296:	f043 0306 	orr.w	r3, r3, #6
 800829a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800829c:	bf00      	nop
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	e000ed00 	.word	0xe000ed00

080082a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	6812      	ldr	r2, [r2, #0]
 80082be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80082c2:	f023 0301 	bic.w	r3, r3, #1
 80082c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a1b      	ldr	r3, [r3, #32]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d007      	beq.n	80082e0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082d0:	4b08      	ldr	r3, [pc, #32]	; (80082f4 <HAL_PCD_ResumeCallback+0x4c>)
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	4a07      	ldr	r2, [pc, #28]	; (80082f4 <HAL_PCD_ResumeCallback+0x4c>)
 80082d6:	f023 0306 	bic.w	r3, r3, #6
 80082da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80082dc:	f000 fb2a 	bl	8008934 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fe fde7 	bl	8006eba <USBD_LL_Resume>
}
 80082ec:	bf00      	nop
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	e000ed00 	.word	0xe000ed00

080082f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800830a:	78fa      	ldrb	r2, [r7, #3]
 800830c:	4611      	mov	r1, r2
 800830e:	4618      	mov	r0, r3
 8008310:	f7fe fe33 	bl	8006f7a <USBD_LL_IsoOUTIncomplete>
}
 8008314:	bf00      	nop
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800832e:	78fa      	ldrb	r2, [r7, #3]
 8008330:	4611      	mov	r1, r2
 8008332:	4618      	mov	r0, r3
 8008334:	f7fe fdfb 	bl	8006f2e <USBD_LL_IsoINIncomplete>
}
 8008338:	bf00      	nop
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe fe39 	bl	8006fc6 <USBD_LL_DevConnected>
}
 8008354:	bf00      	nop
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe fe36 	bl	8006fdc <USBD_LL_DevDisconnected>
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d139      	bne.n	80083fc <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008388:	4a1f      	ldr	r2, [pc, #124]	; (8008408 <USBD_LL_Init+0x90>)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a1d      	ldr	r2, [pc, #116]	; (8008408 <USBD_LL_Init+0x90>)
 8008394:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008398:	4b1b      	ldr	r3, [pc, #108]	; (8008408 <USBD_LL_Init+0x90>)
 800839a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800839e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80083a0:	4b19      	ldr	r3, [pc, #100]	; (8008408 <USBD_LL_Init+0x90>)
 80083a2:	2206      	movs	r2, #6
 80083a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80083a6:	4b18      	ldr	r3, [pc, #96]	; (8008408 <USBD_LL_Init+0x90>)
 80083a8:	2202      	movs	r2, #2
 80083aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80083ac:	4b16      	ldr	r3, [pc, #88]	; (8008408 <USBD_LL_Init+0x90>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80083b2:	4b15      	ldr	r3, [pc, #84]	; (8008408 <USBD_LL_Init+0x90>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80083b8:	4b13      	ldr	r3, [pc, #76]	; (8008408 <USBD_LL_Init+0x90>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80083be:	4b12      	ldr	r3, [pc, #72]	; (8008408 <USBD_LL_Init+0x90>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80083c4:	4b10      	ldr	r3, [pc, #64]	; (8008408 <USBD_LL_Init+0x90>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80083ca:	4b0f      	ldr	r3, [pc, #60]	; (8008408 <USBD_LL_Init+0x90>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80083d0:	480d      	ldr	r0, [pc, #52]	; (8008408 <USBD_LL_Init+0x90>)
 80083d2:	f7f8 fb6b 	bl	8000aac <HAL_PCD_Init>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 80083dc:	f7f7 ff90 	bl	8000300 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80083e0:	2180      	movs	r1, #128	; 0x80
 80083e2:	4809      	ldr	r0, [pc, #36]	; (8008408 <USBD_LL_Init+0x90>)
 80083e4:	f7f9 fd19 	bl	8001e1a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80083e8:	2240      	movs	r2, #64	; 0x40
 80083ea:	2100      	movs	r1, #0
 80083ec:	4806      	ldr	r0, [pc, #24]	; (8008408 <USBD_LL_Init+0x90>)
 80083ee:	f7f9 fccd 	bl	8001d8c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80083f2:	2280      	movs	r2, #128	; 0x80
 80083f4:	2101      	movs	r1, #1
 80083f6:	4804      	ldr	r0, [pc, #16]	; (8008408 <USBD_LL_Init+0x90>)
 80083f8:	f7f9 fcc8 	bl	8001d8c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20010668 	.word	0x20010668

0800840c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008422:	4618      	mov	r0, r3
 8008424:	f7f8 fc66 	bl	8000cf4 <HAL_PCD_Start>
 8008428:	4603      	mov	r3, r0
 800842a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	2b03      	cmp	r3, #3
 8008430:	d816      	bhi.n	8008460 <USBD_LL_Start+0x54>
 8008432:	a201      	add	r2, pc, #4	; (adr r2, 8008438 <USBD_LL_Start+0x2c>)
 8008434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008438:	08008449 	.word	0x08008449
 800843c:	0800844f 	.word	0x0800844f
 8008440:	08008455 	.word	0x08008455
 8008444:	0800845b 	.word	0x0800845b
    case HAL_OK :
      usb_status = USBD_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
    break;
 800844c:	e00b      	b.n	8008466 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800844e:	2303      	movs	r3, #3
 8008450:	73fb      	strb	r3, [r7, #15]
    break;
 8008452:	e008      	b.n	8008466 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008454:	2301      	movs	r3, #1
 8008456:	73fb      	strb	r3, [r7, #15]
    break;
 8008458:	e005      	b.n	8008466 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800845a:	2303      	movs	r3, #3
 800845c:	73fb      	strb	r3, [r7, #15]
    break;
 800845e:	e002      	b.n	8008466 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008460:	2303      	movs	r3, #3
 8008462:	73fb      	strb	r3, [r7, #15]
    break;
 8008464:	bf00      	nop
  }
  return usb_status;
 8008466:	7bfb      	ldrb	r3, [r7, #15]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	4608      	mov	r0, r1
 800847a:	4611      	mov	r1, r2
 800847c:	461a      	mov	r2, r3
 800847e:	4603      	mov	r3, r0
 8008480:	70fb      	strb	r3, [r7, #3]
 8008482:	460b      	mov	r3, r1
 8008484:	70bb      	strb	r3, [r7, #2]
 8008486:	4613      	mov	r3, r2
 8008488:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008498:	78bb      	ldrb	r3, [r7, #2]
 800849a:	883a      	ldrh	r2, [r7, #0]
 800849c:	78f9      	ldrb	r1, [r7, #3]
 800849e:	f7f9 f910 	bl	80016c2 <HAL_PCD_EP_Open>
 80084a2:	4603      	mov	r3, r0
 80084a4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80084a6:	7bbb      	ldrb	r3, [r7, #14]
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d817      	bhi.n	80084dc <USBD_LL_OpenEP+0x6c>
 80084ac:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <USBD_LL_OpenEP+0x44>)
 80084ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b2:	bf00      	nop
 80084b4:	080084c5 	.word	0x080084c5
 80084b8:	080084cb 	.word	0x080084cb
 80084bc:	080084d1 	.word	0x080084d1
 80084c0:	080084d7 	.word	0x080084d7
    case HAL_OK :
      usb_status = USBD_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73fb      	strb	r3, [r7, #15]
    break;
 80084c8:	e00b      	b.n	80084e2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084ca:	2303      	movs	r3, #3
 80084cc:	73fb      	strb	r3, [r7, #15]
    break;
 80084ce:	e008      	b.n	80084e2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084d0:	2301      	movs	r3, #1
 80084d2:	73fb      	strb	r3, [r7, #15]
    break;
 80084d4:	e005      	b.n	80084e2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084d6:	2303      	movs	r3, #3
 80084d8:	73fb      	strb	r3, [r7, #15]
    break;
 80084da:	e002      	b.n	80084e2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80084dc:	2303      	movs	r3, #3
 80084de:	73fb      	strb	r3, [r7, #15]
    break;
 80084e0:	bf00      	nop
  }
  return usb_status;
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008506:	78fa      	ldrb	r2, [r7, #3]
 8008508:	4611      	mov	r1, r2
 800850a:	4618      	mov	r0, r3
 800850c:	f7f9 f941 	bl	8001792 <HAL_PCD_EP_Close>
 8008510:	4603      	mov	r3, r0
 8008512:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008514:	7bbb      	ldrb	r3, [r7, #14]
 8008516:	2b03      	cmp	r3, #3
 8008518:	d816      	bhi.n	8008548 <USBD_LL_CloseEP+0x5c>
 800851a:	a201      	add	r2, pc, #4	; (adr r2, 8008520 <USBD_LL_CloseEP+0x34>)
 800851c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008520:	08008531 	.word	0x08008531
 8008524:	08008537 	.word	0x08008537
 8008528:	0800853d 	.word	0x0800853d
 800852c:	08008543 	.word	0x08008543
    case HAL_OK :
      usb_status = USBD_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	73fb      	strb	r3, [r7, #15]
    break;
 8008534:	e00b      	b.n	800854e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008536:	2303      	movs	r3, #3
 8008538:	73fb      	strb	r3, [r7, #15]
    break;
 800853a:	e008      	b.n	800854e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800853c:	2301      	movs	r3, #1
 800853e:	73fb      	strb	r3, [r7, #15]
    break;
 8008540:	e005      	b.n	800854e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008542:	2303      	movs	r3, #3
 8008544:	73fb      	strb	r3, [r7, #15]
    break;
 8008546:	e002      	b.n	800854e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008548:	2303      	movs	r3, #3
 800854a:	73fb      	strb	r3, [r7, #15]
    break;
 800854c:	bf00      	nop
  }
  return usb_status;
 800854e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	460b      	mov	r3, r1
 8008562:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008572:	78fa      	ldrb	r2, [r7, #3]
 8008574:	4611      	mov	r1, r2
 8008576:	4618      	mov	r0, r3
 8008578:	f7f9 fad1 	bl	8001b1e <HAL_PCD_EP_Flush>
 800857c:	4603      	mov	r3, r0
 800857e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	2b03      	cmp	r3, #3
 8008584:	d816      	bhi.n	80085b4 <USBD_LL_FlushEP+0x5c>
 8008586:	a201      	add	r2, pc, #4	; (adr r2, 800858c <USBD_LL_FlushEP+0x34>)
 8008588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858c:	0800859d 	.word	0x0800859d
 8008590:	080085a3 	.word	0x080085a3
 8008594:	080085a9 	.word	0x080085a9
 8008598:	080085af 	.word	0x080085af
    case HAL_OK :
      usb_status = USBD_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	73fb      	strb	r3, [r7, #15]
    break;
 80085a0:	e00b      	b.n	80085ba <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80085a2:	2303      	movs	r3, #3
 80085a4:	73fb      	strb	r3, [r7, #15]
    break;
 80085a6:	e008      	b.n	80085ba <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085a8:	2301      	movs	r3, #1
 80085aa:	73fb      	strb	r3, [r7, #15]
    break;
 80085ac:	e005      	b.n	80085ba <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085ae:	2303      	movs	r3, #3
 80085b0:	73fb      	strb	r3, [r7, #15]
    break;
 80085b2:	e002      	b.n	80085ba <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80085b4:	2303      	movs	r3, #3
 80085b6:	73fb      	strb	r3, [r7, #15]
    break;
 80085b8:	bf00      	nop
  }
  return usb_status;
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	460b      	mov	r3, r1
 80085ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085de:	78fa      	ldrb	r2, [r7, #3]
 80085e0:	4611      	mov	r1, r2
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7f9 f9b2 	bl	800194c <HAL_PCD_EP_SetStall>
 80085e8:	4603      	mov	r3, r0
 80085ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d816      	bhi.n	8008620 <USBD_LL_StallEP+0x5c>
 80085f2:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <USBD_LL_StallEP+0x34>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	08008609 	.word	0x08008609
 80085fc:	0800860f 	.word	0x0800860f
 8008600:	08008615 	.word	0x08008615
 8008604:	0800861b 	.word	0x0800861b
    case HAL_OK :
      usb_status = USBD_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	73fb      	strb	r3, [r7, #15]
    break;
 800860c:	e00b      	b.n	8008626 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800860e:	2303      	movs	r3, #3
 8008610:	73fb      	strb	r3, [r7, #15]
    break;
 8008612:	e008      	b.n	8008626 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008614:	2301      	movs	r3, #1
 8008616:	73fb      	strb	r3, [r7, #15]
    break;
 8008618:	e005      	b.n	8008626 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800861a:	2303      	movs	r3, #3
 800861c:	73fb      	strb	r3, [r7, #15]
    break;
 800861e:	e002      	b.n	8008626 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008620:	2303      	movs	r3, #3
 8008622:	73fb      	strb	r3, [r7, #15]
    break;
 8008624:	bf00      	nop
  }
  return usb_status;
 8008626:	7bfb      	ldrb	r3, [r7, #15]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800864a:	78fa      	ldrb	r2, [r7, #3]
 800864c:	4611      	mov	r1, r2
 800864e:	4618      	mov	r0, r3
 8008650:	f7f9 f9de 	bl	8001a10 <HAL_PCD_EP_ClrStall>
 8008654:	4603      	mov	r3, r0
 8008656:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	2b03      	cmp	r3, #3
 800865c:	d816      	bhi.n	800868c <USBD_LL_ClearStallEP+0x5c>
 800865e:	a201      	add	r2, pc, #4	; (adr r2, 8008664 <USBD_LL_ClearStallEP+0x34>)
 8008660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008664:	08008675 	.word	0x08008675
 8008668:	0800867b 	.word	0x0800867b
 800866c:	08008681 	.word	0x08008681
 8008670:	08008687 	.word	0x08008687
    case HAL_OK :
      usb_status = USBD_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	73fb      	strb	r3, [r7, #15]
    break;
 8008678:	e00b      	b.n	8008692 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800867a:	2303      	movs	r3, #3
 800867c:	73fb      	strb	r3, [r7, #15]
    break;
 800867e:	e008      	b.n	8008692 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008680:	2301      	movs	r3, #1
 8008682:	73fb      	strb	r3, [r7, #15]
    break;
 8008684:	e005      	b.n	8008692 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008686:	2303      	movs	r3, #3
 8008688:	73fb      	strb	r3, [r7, #15]
    break;
 800868a:	e002      	b.n	8008692 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800868c:	2303      	movs	r3, #3
 800868e:	73fb      	strb	r3, [r7, #15]
    break;
 8008690:	bf00      	nop
  }
  return usb_status;
 8008692:	7bfb      	ldrb	r3, [r7, #15]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	da0b      	bge.n	80086d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086b8:	78fb      	ldrb	r3, [r7, #3]
 80086ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086be:	68f9      	ldr	r1, [r7, #12]
 80086c0:	4613      	mov	r3, r2
 80086c2:	00db      	lsls	r3, r3, #3
 80086c4:	4413      	add	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	440b      	add	r3, r1
 80086ca:	333e      	adds	r3, #62	; 0x3e
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	e00b      	b.n	80086e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086d6:	68f9      	ldr	r1, [r7, #12]
 80086d8:	4613      	mov	r3, r2
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	4413      	add	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	440b      	add	r3, r1
 80086e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80086e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3714      	adds	r7, #20
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800870e:	78fa      	ldrb	r2, [r7, #3]
 8008710:	4611      	mov	r1, r2
 8008712:	4618      	mov	r0, r3
 8008714:	f7f8 ffb0 	bl	8001678 <HAL_PCD_SetAddress>
 8008718:	4603      	mov	r3, r0
 800871a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	2b03      	cmp	r3, #3
 8008720:	d816      	bhi.n	8008750 <USBD_LL_SetUSBAddress+0x5c>
 8008722:	a201      	add	r2, pc, #4	; (adr r2, 8008728 <USBD_LL_SetUSBAddress+0x34>)
 8008724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008728:	08008739 	.word	0x08008739
 800872c:	0800873f 	.word	0x0800873f
 8008730:	08008745 	.word	0x08008745
 8008734:	0800874b 	.word	0x0800874b
    case HAL_OK :
      usb_status = USBD_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	73fb      	strb	r3, [r7, #15]
    break;
 800873c:	e00b      	b.n	8008756 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800873e:	2303      	movs	r3, #3
 8008740:	73fb      	strb	r3, [r7, #15]
    break;
 8008742:	e008      	b.n	8008756 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008744:	2301      	movs	r3, #1
 8008746:	73fb      	strb	r3, [r7, #15]
    break;
 8008748:	e005      	b.n	8008756 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800874a:	2303      	movs	r3, #3
 800874c:	73fb      	strb	r3, [r7, #15]
    break;
 800874e:	e002      	b.n	8008756 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008750:	2303      	movs	r3, #3
 8008752:	73fb      	strb	r3, [r7, #15]
    break;
 8008754:	bf00      	nop
  }
  return usb_status;
 8008756:	7bfb      	ldrb	r3, [r7, #15]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	607a      	str	r2, [r7, #4]
 800876a:	603b      	str	r3, [r7, #0]
 800876c:	460b      	mov	r3, r1
 800876e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800877e:	7af9      	ldrb	r1, [r7, #11]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	f7f9 f8a5 	bl	80018d2 <HAL_PCD_EP_Transmit>
 8008788:	4603      	mov	r3, r0
 800878a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800878c:	7dbb      	ldrb	r3, [r7, #22]
 800878e:	2b03      	cmp	r3, #3
 8008790:	d816      	bhi.n	80087c0 <USBD_LL_Transmit+0x60>
 8008792:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <USBD_LL_Transmit+0x38>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	080087a9 	.word	0x080087a9
 800879c:	080087af 	.word	0x080087af
 80087a0:	080087b5 	.word	0x080087b5
 80087a4:	080087bb 	.word	0x080087bb
    case HAL_OK :
      usb_status = USBD_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	75fb      	strb	r3, [r7, #23]
    break;
 80087ac:	e00b      	b.n	80087c6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087ae:	2303      	movs	r3, #3
 80087b0:	75fb      	strb	r3, [r7, #23]
    break;
 80087b2:	e008      	b.n	80087c6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087b4:	2301      	movs	r3, #1
 80087b6:	75fb      	strb	r3, [r7, #23]
    break;
 80087b8:	e005      	b.n	80087c6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087ba:	2303      	movs	r3, #3
 80087bc:	75fb      	strb	r3, [r7, #23]
    break;
 80087be:	e002      	b.n	80087c6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80087c0:	2303      	movs	r3, #3
 80087c2:	75fb      	strb	r3, [r7, #23]
    break;
 80087c4:	bf00      	nop
  }
  return usb_status;
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3718      	adds	r7, #24
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	607a      	str	r2, [r7, #4]
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	460b      	mov	r3, r1
 80087de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087e4:	2300      	movs	r3, #0
 80087e6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80087ee:	7af9      	ldrb	r1, [r7, #11]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	f7f9 f817 	bl	8001826 <HAL_PCD_EP_Receive>
 80087f8:	4603      	mov	r3, r0
 80087fa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80087fc:	7dbb      	ldrb	r3, [r7, #22]
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d816      	bhi.n	8008830 <USBD_LL_PrepareReceive+0x60>
 8008802:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <USBD_LL_PrepareReceive+0x38>)
 8008804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008808:	08008819 	.word	0x08008819
 800880c:	0800881f 	.word	0x0800881f
 8008810:	08008825 	.word	0x08008825
 8008814:	0800882b 	.word	0x0800882b
    case HAL_OK :
      usb_status = USBD_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	75fb      	strb	r3, [r7, #23]
    break;
 800881c:	e00b      	b.n	8008836 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800881e:	2303      	movs	r3, #3
 8008820:	75fb      	strb	r3, [r7, #23]
    break;
 8008822:	e008      	b.n	8008836 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008824:	2301      	movs	r3, #1
 8008826:	75fb      	strb	r3, [r7, #23]
    break;
 8008828:	e005      	b.n	8008836 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800882a:	2303      	movs	r3, #3
 800882c:	75fb      	strb	r3, [r7, #23]
    break;
 800882e:	e002      	b.n	8008836 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008830:	2303      	movs	r3, #3
 8008832:	75fb      	strb	r3, [r7, #23]
    break;
 8008834:	bf00      	nop
  }
  return usb_status;
 8008836:	7dfb      	ldrb	r3, [r7, #23]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	460b      	mov	r3, r1
 800884a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008852:	78fa      	ldrb	r2, [r7, #3]
 8008854:	4611      	mov	r1, r2
 8008856:	4618      	mov	r0, r3
 8008858:	f7f9 f823 	bl	80018a2 <HAL_PCD_EP_GetRxCount>
 800885c:	4603      	mov	r3, r0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008874:	78fb      	ldrb	r3, [r7, #3]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d002      	beq.n	8008880 <HAL_PCDEx_LPM_Callback+0x18>
 800887a:	2b01      	cmp	r3, #1
 800887c:	d01f      	beq.n	80088be <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800887e:	e03b      	b.n	80088f8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d007      	beq.n	8008898 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008888:	f000 f854 	bl	8008934 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800888c:	4b1c      	ldr	r3, [pc, #112]	; (8008900 <HAL_PCDEx_LPM_Callback+0x98>)
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	4a1b      	ldr	r2, [pc, #108]	; (8008900 <HAL_PCDEx_LPM_Callback+0x98>)
 8008892:	f023 0306 	bic.w	r3, r3, #6
 8008896:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	6812      	ldr	r2, [r2, #0]
 80088a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088aa:	f023 0301 	bic.w	r3, r3, #1
 80088ae:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe faff 	bl	8006eba <USBD_LL_Resume>
    break;
 80088bc:	e01c      	b.n	80088f8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	6812      	ldr	r2, [r2, #0]
 80088cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088d0:	f043 0301 	orr.w	r3, r3, #1
 80088d4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fe fad6 	bl	8006e8e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d005      	beq.n	80088f6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088ea:	4b05      	ldr	r3, [pc, #20]	; (8008900 <HAL_PCDEx_LPM_Callback+0x98>)
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	4a04      	ldr	r2, [pc, #16]	; (8008900 <HAL_PCDEx_LPM_Callback+0x98>)
 80088f0:	f043 0306 	orr.w	r3, r3, #6
 80088f4:	6113      	str	r3, [r2, #16]
    break;
 80088f6:	bf00      	nop
}
 80088f8:	bf00      	nop
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	e000ed00 	.word	0xe000ed00

08008904 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800890c:	4b03      	ldr	r3, [pc, #12]	; (800891c <USBD_static_malloc+0x18>)
}
 800890e:	4618      	mov	r0, r3
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	20010b74 	.word	0x20010b74

08008920 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]

}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008938:	f7f7 fc6b 	bl	8000212 <SystemClock_Config>
}
 800893c:	bf00      	nop
 800893e:	bd80      	pop	{r7, pc}

08008940 <__libc_init_array>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	4d0d      	ldr	r5, [pc, #52]	; (8008978 <__libc_init_array+0x38>)
 8008944:	4c0d      	ldr	r4, [pc, #52]	; (800897c <__libc_init_array+0x3c>)
 8008946:	1b64      	subs	r4, r4, r5
 8008948:	10a4      	asrs	r4, r4, #2
 800894a:	2600      	movs	r6, #0
 800894c:	42a6      	cmp	r6, r4
 800894e:	d109      	bne.n	8008964 <__libc_init_array+0x24>
 8008950:	4d0b      	ldr	r5, [pc, #44]	; (8008980 <__libc_init_array+0x40>)
 8008952:	4c0c      	ldr	r4, [pc, #48]	; (8008984 <__libc_init_array+0x44>)
 8008954:	f000 f82e 	bl	80089b4 <_init>
 8008958:	1b64      	subs	r4, r4, r5
 800895a:	10a4      	asrs	r4, r4, #2
 800895c:	2600      	movs	r6, #0
 800895e:	42a6      	cmp	r6, r4
 8008960:	d105      	bne.n	800896e <__libc_init_array+0x2e>
 8008962:	bd70      	pop	{r4, r5, r6, pc}
 8008964:	f855 3b04 	ldr.w	r3, [r5], #4
 8008968:	4798      	blx	r3
 800896a:	3601      	adds	r6, #1
 800896c:	e7ee      	b.n	800894c <__libc_init_array+0xc>
 800896e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008972:	4798      	blx	r3
 8008974:	3601      	adds	r6, #1
 8008976:	e7f2      	b.n	800895e <__libc_init_array+0x1e>
 8008978:	08008a74 	.word	0x08008a74
 800897c:	08008a74 	.word	0x08008a74
 8008980:	08008a74 	.word	0x08008a74
 8008984:	08008a78 	.word	0x08008a78

08008988 <memcpy>:
 8008988:	440a      	add	r2, r1
 800898a:	4291      	cmp	r1, r2
 800898c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008990:	d100      	bne.n	8008994 <memcpy+0xc>
 8008992:	4770      	bx	lr
 8008994:	b510      	push	{r4, lr}
 8008996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800899a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800899e:	4291      	cmp	r1, r2
 80089a0:	d1f9      	bne.n	8008996 <memcpy+0xe>
 80089a2:	bd10      	pop	{r4, pc}

080089a4 <memset>:
 80089a4:	4402      	add	r2, r0
 80089a6:	4603      	mov	r3, r0
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d100      	bne.n	80089ae <memset+0xa>
 80089ac:	4770      	bx	lr
 80089ae:	f803 1b01 	strb.w	r1, [r3], #1
 80089b2:	e7f9      	b.n	80089a8 <memset+0x4>

080089b4 <_init>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	bf00      	nop
 80089b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ba:	bc08      	pop	{r3}
 80089bc:	469e      	mov	lr, r3
 80089be:	4770      	bx	lr

080089c0 <_fini>:
 80089c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c2:	bf00      	nop
 80089c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c6:	bc08      	pop	{r3}
 80089c8:	469e      	mov	lr, r3
 80089ca:	4770      	bx	lr
