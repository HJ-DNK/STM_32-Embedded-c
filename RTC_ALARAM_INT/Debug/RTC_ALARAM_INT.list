
RTC_ALARAM_INT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f7c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080040b8  080040b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b0  080041b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041b8  080041b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041bc  080041bc  000141bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  08004230  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08004230  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009eef  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a46  00000000  00000000  00029f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002b9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002c210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001687e  00000000  00000000  0002c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f32  00000000  00000000  00043226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008909f  00000000  00000000  0004d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d61f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a28  00000000  00000000  000d6248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	080040a0 	.word	0x080040a0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	080040a0 	.word	0x080040a0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <HAL_RTC_AlarmAEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// below code is alram 4:22 then trigger so led set
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BSP_LED1_GPIO_Port, BSP_LED1_Pin, SET);
 800048c:	2201      	movs	r2, #1
 800048e:	2140      	movs	r1, #64	; 0x40
 8000490:	4803      	ldr	r0, [pc, #12]	; (80004a0 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8000492:	f000 fe79 	bl	8001188 <HAL_GPIO_WritePin>
	//printf("time is out go out side\n");

}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40020400 	.word	0x40020400

080004a4 <HAL_RTCEx_AlarmBEventCallback>:

// below code is evey minit is trigger 4:23 triger so led toggle
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(BSP_LED2_GPIO_Port, BSP_LED2_Pin);
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	4803      	ldr	r0, [pc, #12]	; (80004bc <HAL_RTCEx_AlarmBEventCallback+0x18>)
 80004b0:	f000 fe82 	bl	80011b8 <HAL_GPIO_TogglePin>
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40020400 	.word	0x40020400

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fb40 	bl	8000b4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f841 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f971 	bl	80007b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d2:	f000 f945 	bl	8000760 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80004d6:	f000 f89f 	bl	8000618 <MX_RTC_Init>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	4619      	mov	r1, r3
 80004e0:	4815      	ldr	r0, [pc, #84]	; (8000538 <main+0x78>)
 80004e2:	f001 fea0 	bl	8002226 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80004e6:	463b      	mov	r3, r7
 80004e8:	2200      	movs	r2, #0
 80004ea:	4619      	mov	r1, r3
 80004ec:	4812      	ldr	r0, [pc, #72]	; (8000538 <main+0x78>)
 80004ee:	f001 ff7c 	bl	80023ea <HAL_RTC_GetDate>

		sprintf(Time, "Time: %02d.%02d.%02d\r\n", sTime.Hours, sTime.Minutes,
 80004f2:	793b      	ldrb	r3, [r7, #4]
 80004f4:	461a      	mov	r2, r3
 80004f6:	797b      	ldrb	r3, [r7, #5]
 80004f8:	4619      	mov	r1, r3
				sTime.Seconds);
 80004fa:	79bb      	ldrb	r3, [r7, #6]
		sprintf(Time, "Time: %02d.%02d.%02d\r\n", sTime.Hours, sTime.Minutes,
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	460b      	mov	r3, r1
 8000500:	490e      	ldr	r1, [pc, #56]	; (800053c <main+0x7c>)
 8000502:	480f      	ldr	r0, [pc, #60]	; (8000540 <main+0x80>)
 8000504:	f002 fc74 	bl	8002df0 <siprintf>

		sprintf(Date, "Date: %02d.%02d.%02d\r\n", sDate.Date, sDate.Month,
 8000508:	78bb      	ldrb	r3, [r7, #2]
 800050a:	461a      	mov	r2, r3
 800050c:	787b      	ldrb	r3, [r7, #1]
 800050e:	4619      	mov	r1, r3
				sDate.Year);
 8000510:	78fb      	ldrb	r3, [r7, #3]
		sprintf(Date, "Date: %02d.%02d.%02d\r\n", sDate.Date, sDate.Month,
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	460b      	mov	r3, r1
 8000516:	490b      	ldr	r1, [pc, #44]	; (8000544 <main+0x84>)
 8000518:	480b      	ldr	r0, [pc, #44]	; (8000548 <main+0x88>)
 800051a:	f002 fc69 	bl	8002df0 <siprintf>

//		printf("date is----->%x  %x  %x\r\n", sDate.Date ,sDate.Month,sDate.Year);
//		printf("time is --->%x %x %x \r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);

		printf("--->%s\r\n", Date);
 800051e:	490a      	ldr	r1, [pc, #40]	; (8000548 <main+0x88>)
 8000520:	480a      	ldr	r0, [pc, #40]	; (800054c <main+0x8c>)
 8000522:	f002 fc4d 	bl	8002dc0 <iprintf>
		printf("--->%s\r\n", Time);
 8000526:	4906      	ldr	r1, [pc, #24]	; (8000540 <main+0x80>)
 8000528:	4808      	ldr	r0, [pc, #32]	; (800054c <main+0x8c>)
 800052a:	f002 fc49 	bl	8002dc0 <iprintf>

		HAL_Delay(1000);
 800052e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000532:	f000 fb79 	bl	8000c28 <HAL_Delay>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000536:	e7d0      	b.n	80004da <main+0x1a>
 8000538:	200000c0 	.word	0x200000c0
 800053c:	080040b8 	.word	0x080040b8
 8000540:	2000008c 	.word	0x2000008c
 8000544:	080040d0 	.word	0x080040d0
 8000548:	200000ac 	.word	0x200000ac
 800054c:	080040e8 	.word	0x080040e8

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b096      	sub	sp, #88	; 0x58
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055a:	2234      	movs	r2, #52	; 0x34
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f002 fc26 	bl	8002db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057e:	4b25      	ldr	r3, [pc, #148]	; (8000614 <SystemClock_Config+0xc4>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000586:	4a23      	ldr	r2, [pc, #140]	; (8000614 <SystemClock_Config+0xc4>)
 8000588:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800058c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800058e:	230a      	movs	r3, #10
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000592:	2301      	movs	r3, #1
 8000594:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	2310      	movs	r3, #16
 8000598:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800059a:	2301      	movs	r3, #1
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a2:	2300      	movs	r3, #0
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80005ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80005b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fe18 	bl	80011ec <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80005c2:	f000 f935 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2303      	movs	r3, #3
 80005cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	2101      	movs	r1, #1
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 f933 	bl	800184c <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005ec:	f000 f920 	bl	8000830 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005f0:	2301      	movs	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 fbeb 	bl	8001dd8 <HAL_RCCEx_PeriphCLKConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000608:	f000 f912 	bl	8000830 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3758      	adds	r7, #88	; 0x58
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40007000 	.word	0x40007000

08000618 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b090      	sub	sp, #64	; 0x40
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800061e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800062e:	2300      	movs	r3, #0
 8000630:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000632:	463b      	mov	r3, r7
 8000634:	2228      	movs	r2, #40	; 0x28
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fbb9 	bl	8002db0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800063e:	4b45      	ldr	r3, [pc, #276]	; (8000754 <MX_RTC_Init+0x13c>)
 8000640:	4a45      	ldr	r2, [pc, #276]	; (8000758 <MX_RTC_Init+0x140>)
 8000642:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000644:	4b43      	ldr	r3, [pc, #268]	; (8000754 <MX_RTC_Init+0x13c>)
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800064a:	4b42      	ldr	r3, [pc, #264]	; (8000754 <MX_RTC_Init+0x13c>)
 800064c:	227f      	movs	r2, #127	; 0x7f
 800064e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000650:	4b40      	ldr	r3, [pc, #256]	; (8000754 <MX_RTC_Init+0x13c>)
 8000652:	22ff      	movs	r2, #255	; 0xff
 8000654:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000656:	4b3f      	ldr	r3, [pc, #252]	; (8000754 <MX_RTC_Init+0x13c>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800065c:	4b3d      	ldr	r3, [pc, #244]	; (8000754 <MX_RTC_Init+0x13c>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000662:	4b3c      	ldr	r3, [pc, #240]	; (8000754 <MX_RTC_Init+0x13c>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000668:	483a      	ldr	r0, [pc, #232]	; (8000754 <MX_RTC_Init+0x13c>)
 800066a:	f001 fcbf 	bl	8001fec <HAL_RTC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000674:	f000 f8dc 	bl	8000830 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x4;
 8000678:	2304      	movs	r3, #4
 800067a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x20;
 800067e:	2320      	movs	r3, #32
 8000680:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x8;
 8000684:	2308      	movs	r3, #8
 8000686:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800068a:	2300      	movs	r3, #0
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800068e:	2300      	movs	r3, #0
 8000690:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000696:	2201      	movs	r2, #1
 8000698:	4619      	mov	r1, r3
 800069a:	482e      	ldr	r0, [pc, #184]	; (8000754 <MX_RTC_Init+0x13c>)
 800069c:	f001 fd29 	bl	80020f2 <HAL_RTC_SetTime>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80006a6:	f000 f8c3 	bl	8000830 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80006aa:	2302      	movs	r3, #2
 80006ac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_NOVEMBER;
 80006b0:	2311      	movs	r3, #17
 80006b2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x22;
 80006bc:	2322      	movs	r3, #34	; 0x22
 80006be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c6:	2201      	movs	r2, #1
 80006c8:	4619      	mov	r1, r3
 80006ca:	4822      	ldr	r0, [pc, #136]	; (8000754 <MX_RTC_Init+0x13c>)
 80006cc:	f001 fe09 	bl	80022e2 <HAL_RTC_SetDate>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80006d6:	f000 f8ab 	bl	8000830 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x4;
 80006da:	2304      	movs	r3, #4
 80006dc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x22;
 80006de:	2322      	movs	r3, #34	; 0x22
 80006e0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x5;
 80006e2:	2305      	movs	r3, #5
 80006e4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80006fe:	2301      	movs	r3, #1
 8000700:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	2201      	movs	r2, #1
 800070e:	4619      	mov	r1, r3
 8000710:	4810      	ldr	r0, [pc, #64]	; (8000754 <MX_RTC_Init+0x13c>)
 8000712:	f001 feb9 	bl	8002488 <HAL_RTC_SetAlarm_IT>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800071c:	f000 f888 	bl	8000830 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000720:	2300      	movs	r3, #0
 8000722:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000724:	2300      	movs	r3, #0
 8000726:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x30;
 8000728:	2330      	movs	r3, #48	; 0x30
 800072a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_RTC_Init+0x144>)
 800072e:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.Alarm = RTC_ALARM_B;
 8000730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000736:	463b      	mov	r3, r7
 8000738:	2201      	movs	r2, #1
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_RTC_Init+0x13c>)
 800073e:	f001 fea3 	bl	8002488 <HAL_RTC_SetAlarm_IT>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_RTC_Init+0x134>
  {
    Error_Handler();
 8000748:	f000 f872 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3740      	adds	r7, #64	; 0x40
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000c0 	.word	0x200000c0
 8000758:	40002800 	.word	0x40002800
 800075c:	80808000 	.word	0x80808000

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_USART2_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000798:	f002 f8bb 	bl	8002912 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f845 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000e0 	.word	0x200000e0
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_GPIO_Init+0x74>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a16      	ldr	r2, [pc, #88]	; (8000828 <MX_GPIO_Init+0x74>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	61d3      	str	r3, [r2, #28]
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_GPIO_Init+0x74>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_GPIO_Init+0x74>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <MX_GPIO_Init+0x74>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_GPIO_Init+0x74>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BSP_LED1_Pin|BSP_LED2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	21c0      	movs	r1, #192	; 0xc0
 80007fe:	480b      	ldr	r0, [pc, #44]	; (800082c <MX_GPIO_Init+0x78>)
 8000800:	f000 fcc2 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BSP_LED1_Pin BSP_LED2_Pin */
  GPIO_InitStruct.Pin = BSP_LED1_Pin|BSP_LED2_Pin;
 8000804:	23c0      	movs	r3, #192	; 0xc0
 8000806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4619      	mov	r1, r3
 800081a:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_GPIO_Init+0x78>)
 800081c:	f000 fb34 	bl	8000e88 <HAL_GPIO_Init>

}
 8000820:	bf00      	nop
 8000822:	3720      	adds	r7, #32
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40020400 	.word	0x40020400

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_MspInit+0x5c>)
 8000844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000846:	4a14      	ldr	r2, [pc, #80]	; (8000898 <HAL_MspInit+0x5c>)
 8000848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800084c:	6253      	str	r3, [r2, #36]	; 0x24
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_MspInit+0x5c>)
 8000850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x5c>)
 800085c:	6a1b      	ldr	r3, [r3, #32]
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_MspInit+0x5c>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6213      	str	r3, [r2, #32]
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_MspInit+0x5c>)
 8000868:	6a1b      	ldr	r3, [r3, #32]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_MspInit+0x5c>)
 8000874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <HAL_MspInit+0x5c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6253      	str	r3, [r2, #36]	; 0x24
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_MspInit+0x5c>)
 8000880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800088a:	2007      	movs	r0, #7
 800088c:	f000 faba 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a08      	ldr	r2, [pc, #32]	; (80008cc <HAL_RTC_MspInit+0x30>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d10a      	bne.n	80008c4 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_RTC_MspInit+0x34>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2029      	movs	r0, #41	; 0x29
 80008ba:	f000 faae 	bl	8000e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80008be:	2029      	movs	r0, #41	; 0x29
 80008c0:	f000 fac7 	bl	8000e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40002800 	.word	0x40002800
 80008d0:	424706d8 	.word	0x424706d8

080008d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a17      	ldr	r2, [pc, #92]	; (8000950 <HAL_UART_MspInit+0x7c>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d127      	bne.n	8000946 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <HAL_UART_MspInit+0x80>)
 80008f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008fa:	4a16      	ldr	r2, [pc, #88]	; (8000954 <HAL_UART_MspInit+0x80>)
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	6253      	str	r3, [r2, #36]	; 0x24
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_UART_MspInit+0x80>)
 8000904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_UART_MspInit+0x80>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <HAL_UART_MspInit+0x80>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	61d3      	str	r3, [r2, #28]
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_UART_MspInit+0x80>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000926:	230c      	movs	r3, #12
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000936:	2307      	movs	r3, #7
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <HAL_UART_MspInit+0x84>)
 8000942:	f000 faa1 	bl	8000e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40004400 	.word	0x40004400
 8000954:	40023800 	.word	0x40023800
 8000958:	40020000 	.word	0x40020000

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <NMI_Handler+0x4>

08000962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <MemManage_Handler+0x4>

0800096e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <UsageFault_Handler+0x4>

0800097a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr

08000986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr

0800099e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a2:	f000 f925 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <RTC_Alarm_IRQHandler+0x10>)
 80009b2:	f001 fead 	bl	8002710 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200000c0 	.word	0x200000c0

080009c0 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e00a      	b.n	80009e8 <_read+0x28>
		*ptr++ = __io_getchar();
 80009d2:	f3af 8000 	nop.w
 80009d6:	4601      	mov	r1, r0
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	60ba      	str	r2, [r7, #8]
 80009de:	b2ca      	uxtb	r2, r1
 80009e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbf0      	blt.n	80009d2 <_read+0x12>
	}

	return len;
 80009f0:	687b      	ldr	r3, [r7, #4]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a10:	68b9      	ldr	r1, [r7, #8]
 8000a12:	4804      	ldr	r0, [pc, #16]	; (8000a24 <_write+0x28>)
 8000a14:	f001 ffcd 	bl	80029b2 <HAL_UART_Transmit>

	return len;
 8000a18:	687b      	ldr	r3, [r7, #4]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200000e0 	.word	0x200000e0

08000a28 <_close>:

int _close(int file) {
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr

08000a3e <_fstat>:

int _fstat(int file, struct stat *st) {
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <_isatty>:

int _isatty(int file) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8000a64:	2301      	movs	r3, #1
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a90:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <_sbrk+0x5c>)
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <_sbrk+0x60>)
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d102      	bne.n	8000aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <_sbrk+0x64>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <_sbrk+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d207      	bcs.n	8000ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab8:	f002 f950 	bl	8002d5c <__errno>
 8000abc:	4603      	mov	r3, r0
 8000abe:	220c      	movs	r2, #12
 8000ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ac6:	e009      	b.n	8000adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ace:	4b07      	ldr	r3, [pc, #28]	; (8000aec <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <_sbrk+0x64>)
 8000ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ada:	68fb      	ldr	r3, [r7, #12]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20008000 	.word	0x20008000
 8000ae8:	00000400 	.word	0x00000400
 8000aec:	20000128 	.word	0x20000128
 8000af0:	20000140 	.word	0x20000140

08000af4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b00:	f7ff fff8 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480b      	ldr	r0, [pc, #44]	; (8000b34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b06:	490c      	ldr	r1, [pc, #48]	; (8000b38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b08:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a09      	ldr	r2, [pc, #36]	; (8000b40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b1c:	4c09      	ldr	r4, [pc, #36]	; (8000b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f002 f91d 	bl	8002d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b2e:	f7ff fcc7 	bl	80004c0 <main>
  bx lr
 8000b32:	4770      	bx	lr
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b3c:	080041c0 	.word	0x080041c0
  ldr r2, =_sbss
 8000b40:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b44:	20000140 	.word	0x20000140

08000b48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC1_IRQHandler>

08000b4a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f955 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f000 f80e 	bl	8000b7c <HAL_InitTick>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d002      	beq.n	8000b6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	71fb      	strb	r3, [r7, #7]
 8000b6a:	e001      	b.n	8000b70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b6c:	f7ff fe66 	bl	800083c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b70:	79fb      	ldrb	r3, [r7, #7]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <HAL_InitTick+0x68>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d022      	beq.n	8000bd6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_InitTick+0x6c>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <HAL_InitTick+0x68>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 f962 	bl	8000e6e <HAL_SYSTICK_Config>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10f      	bne.n	8000bd0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b0f      	cmp	r3, #15
 8000bb4:	d809      	bhi.n	8000bca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bbe:	f000 f92c 	bl	8000e1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_InitTick+0x70>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e007      	b.n	8000bda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	73fb      	strb	r3, [r7, #15]
 8000bce:	e004      	b.n	8000bda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	e001      	b.n	8000bda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_IncTick+0x1c>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x20>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a03      	ldr	r2, [pc, #12]	; (8000c0c <HAL_IncTick+0x1c>)
 8000c00:	6013      	str	r3, [r2, #0]
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	2000012c 	.word	0x2000012c
 8000c10:	20000008 	.word	0x20000008

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b02      	ldr	r3, [pc, #8]	; (8000c24 <HAL_GetTick+0x10>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	2000012c 	.word	0x2000012c

08000c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff fff0 	bl	8000c14 <HAL_GetTick>
 8000c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c40:	d004      	beq.n	8000c4c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_Delay+0x40>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4413      	add	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c4c:	bf00      	nop
 8000c4e:	f7ff ffe1 	bl	8000c14 <HAL_GetTick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d8f7      	bhi.n	8000c4e <HAL_Delay+0x26>
  {
  }
}
 8000c5e:	bf00      	nop
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000008 	.word	0x20000008

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4906      	ldr	r1, [pc, #24]	; (8000d04 <__NVIC_EnableIRQ+0x34>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000de4:	f7ff ff90 	bl	8000d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff2d 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff42 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff90 	bl	8000d5c <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5f 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff35 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffa2 	bl	8000dc0 <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e9e:	e154      	b.n	800114a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8146 	beq.w	8001144 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d005      	beq.n	8000ed0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d130      	bne.n	8000f32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000f06:	2201      	movs	r2, #1
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	091b      	lsrs	r3, r3, #4
 8000f1c:	f003 0201 	and.w	r2, r3, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d017      	beq.n	8000f6e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d123      	bne.n	8000fc2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	08da      	lsrs	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3208      	adds	r2, #8
 8000f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f86:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	691a      	ldr	r2, [r3, #16]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	08da      	lsrs	r2, r3, #3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3208      	adds	r2, #8
 8000fbc:	6939      	ldr	r1, [r7, #16]
 8000fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0203 	and.w	r2, r3, #3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 80a0 	beq.w	8001144 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001004:	4b58      	ldr	r3, [pc, #352]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	4a57      	ldr	r2, [pc, #348]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6213      	str	r3, [r2, #32]
 8001010:	4b55      	ldr	r3, [pc, #340]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800101c:	4a53      	ldr	r2, [pc, #332]	; (800116c <HAL_GPIO_Init+0x2e4>)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001028:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	220f      	movs	r2, #15
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a4b      	ldr	r2, [pc, #300]	; (8001170 <HAL_GPIO_Init+0x2e8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d019      	beq.n	800107c <HAL_GPIO_Init+0x1f4>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a4a      	ldr	r2, [pc, #296]	; (8001174 <HAL_GPIO_Init+0x2ec>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d013      	beq.n	8001078 <HAL_GPIO_Init+0x1f0>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a49      	ldr	r2, [pc, #292]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d00d      	beq.n	8001074 <HAL_GPIO_Init+0x1ec>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a48      	ldr	r2, [pc, #288]	; (800117c <HAL_GPIO_Init+0x2f4>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d007      	beq.n	8001070 <HAL_GPIO_Init+0x1e8>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a47      	ldr	r2, [pc, #284]	; (8001180 <HAL_GPIO_Init+0x2f8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d101      	bne.n	800106c <HAL_GPIO_Init+0x1e4>
 8001068:	2304      	movs	r3, #4
 800106a:	e008      	b.n	800107e <HAL_GPIO_Init+0x1f6>
 800106c:	2305      	movs	r3, #5
 800106e:	e006      	b.n	800107e <HAL_GPIO_Init+0x1f6>
 8001070:	2303      	movs	r3, #3
 8001072:	e004      	b.n	800107e <HAL_GPIO_Init+0x1f6>
 8001074:	2302      	movs	r3, #2
 8001076:	e002      	b.n	800107e <HAL_GPIO_Init+0x1f6>
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <HAL_GPIO_Init+0x1f6>
 800107c:	2300      	movs	r3, #0
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	f002 0203 	and.w	r2, r2, #3
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	4093      	lsls	r3, r2
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800108e:	4937      	ldr	r1, [pc, #220]	; (800116c <HAL_GPIO_Init+0x2e4>)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109c:	4b39      	ldr	r3, [pc, #228]	; (8001184 <HAL_GPIO_Init+0x2fc>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010c0:	4a30      	ldr	r2, [pc, #192]	; (8001184 <HAL_GPIO_Init+0x2fc>)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c6:	4b2f      	ldr	r3, [pc, #188]	; (8001184 <HAL_GPIO_Init+0x2fc>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010ea:	4a26      	ldr	r2, [pc, #152]	; (8001184 <HAL_GPIO_Init+0x2fc>)
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010f0:	4b24      	ldr	r3, [pc, #144]	; (8001184 <HAL_GPIO_Init+0x2fc>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001114:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <HAL_GPIO_Init+0x2fc>)
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <HAL_GPIO_Init+0x2fc>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800113e:	4a11      	ldr	r2, [pc, #68]	; (8001184 <HAL_GPIO_Init+0x2fc>)
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	f47f aea3 	bne.w	8000ea0 <HAL_GPIO_Init+0x18>
  }
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	371c      	adds	r7, #28
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800
 800116c:	40010000 	.word	0x40010000
 8001170:	40020000 	.word	0x40020000
 8001174:	40020400 	.word	0x40020400
 8001178:	40020800 	.word	0x40020800
 800117c:	40020c00 	.word	0x40020c00
 8001180:	40021000 	.word	0x40021000
 8001184:	40010400 	.word	0x40010400

08001188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
 8001194:	4613      	mov	r3, r2
 8001196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001198:	787b      	ldrb	r3, [r7, #1]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80011a4:	e003      	b.n	80011ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	041a      	lsls	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	619a      	str	r2, [r3, #24]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4013      	ands	r3, r2
 80011d0:	041a      	lsls	r2, r3, #16
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43d9      	mvns	r1, r3
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	400b      	ands	r3, r1
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	619a      	str	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
	...

080011ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e31d      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011fe:	4b94      	ldr	r3, [pc, #592]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001208:	4b91      	ldr	r3, [pc, #580]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001210:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d07b      	beq.n	8001316 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	2b08      	cmp	r3, #8
 8001222:	d006      	beq.n	8001232 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2b0c      	cmp	r3, #12
 8001228:	d10f      	bne.n	800124a <HAL_RCC_OscConfig+0x5e>
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001230:	d10b      	bne.n	800124a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001232:	4b87      	ldr	r3, [pc, #540]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d06a      	beq.n	8001314 <HAL_RCC_OscConfig+0x128>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d166      	bne.n	8001314 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e2f7      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d106      	bne.n	8001260 <HAL_RCC_OscConfig+0x74>
 8001252:	4b7f      	ldr	r3, [pc, #508]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a7e      	ldr	r2, [pc, #504]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 8001258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e02d      	b.n	80012bc <HAL_RCC_OscConfig+0xd0>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10c      	bne.n	8001282 <HAL_RCC_OscConfig+0x96>
 8001268:	4b79      	ldr	r3, [pc, #484]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a78      	ldr	r2, [pc, #480]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 800126e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b76      	ldr	r3, [pc, #472]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a75      	ldr	r2, [pc, #468]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 800127a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	e01c      	b.n	80012bc <HAL_RCC_OscConfig+0xd0>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b05      	cmp	r3, #5
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0xb8>
 800128a:	4b71      	ldr	r3, [pc, #452]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a70      	ldr	r2, [pc, #448]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b6e      	ldr	r3, [pc, #440]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a6d      	ldr	r2, [pc, #436]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0xd0>
 80012a4:	4b6a      	ldr	r3, [pc, #424]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a69      	ldr	r2, [pc, #420]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 80012aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b67      	ldr	r3, [pc, #412]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a66      	ldr	r2, [pc, #408]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 80012b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fca6 	bl	8000c14 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fca2 	bl	8000c14 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	; 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e2ad      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012de:	4b5c      	ldr	r3, [pc, #368]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0xe0>
 80012ea:	e014      	b.n	8001316 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fc92 	bl	8000c14 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fc8e 	bl	8000c14 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e299      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001306:	4b52      	ldr	r3, [pc, #328]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x108>
 8001312:	e000      	b.n	8001316 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d05a      	beq.n	80013d8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	2b04      	cmp	r3, #4
 8001326:	d005      	beq.n	8001334 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2b0c      	cmp	r3, #12
 800132c:	d119      	bne.n	8001362 <HAL_RCC_OscConfig+0x176>
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d116      	bne.n	8001362 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001334:	4b46      	ldr	r3, [pc, #280]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <HAL_RCC_OscConfig+0x160>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d001      	beq.n	800134c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e276      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134c:	4b40      	ldr	r3, [pc, #256]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	493d      	ldr	r1, [pc, #244]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001360:	e03a      	b.n	80013d8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d020      	beq.n	80013ac <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800136a:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <HAL_RCC_OscConfig+0x268>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fc50 	bl	8000c14 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001378:	f7ff fc4c 	bl	8000c14 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e257      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800138a:	4b31      	ldr	r3, [pc, #196]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	492a      	ldr	r1, [pc, #168]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]
 80013aa:	e015      	b.n	80013d8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ac:	4b29      	ldr	r3, [pc, #164]	; (8001454 <HAL_RCC_OscConfig+0x268>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fc2f 	bl	8000c14 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ba:	f7ff fc2b 	bl	8000c14 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e236      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f0      	bne.n	80013ba <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 80b8 	beq.w	8001556 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d170      	bne.n	80014ce <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_OscConfig+0x218>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e21a      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1a      	ldr	r2, [r3, #32]
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001410:	429a      	cmp	r2, r3
 8001412:	d921      	bls.n	8001458 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fc7d 	bl	8001d18 <RCC_SetFlashLatencyFromMSIRange>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e208      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4906      	ldr	r1, [pc, #24]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	061b      	lsls	r3, r3, #24
 8001448:	4901      	ldr	r1, [pc, #4]	; (8001450 <HAL_RCC_OscConfig+0x264>)
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]
 800144e:	e020      	b.n	8001492 <HAL_RCC_OscConfig+0x2a6>
 8001450:	40023800 	.word	0x40023800
 8001454:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001458:	4b99      	ldr	r3, [pc, #612]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4996      	ldr	r1, [pc, #600]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 8001466:	4313      	orrs	r3, r2
 8001468:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146a:	4b95      	ldr	r3, [pc, #596]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	061b      	lsls	r3, r3, #24
 8001478:	4991      	ldr	r1, [pc, #580]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fc48 	bl	8001d18 <RCC_SetFlashLatencyFromMSIRange>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e1d3      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	0b5b      	lsrs	r3, r3, #13
 8001498:	3301      	adds	r3, #1
 800149a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014a2:	4a87      	ldr	r2, [pc, #540]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 80014a4:	6892      	ldr	r2, [r2, #8]
 80014a6:	0912      	lsrs	r2, r2, #4
 80014a8:	f002 020f 	and.w	r2, r2, #15
 80014ac:	4985      	ldr	r1, [pc, #532]	; (80016c4 <HAL_RCC_OscConfig+0x4d8>)
 80014ae:	5c8a      	ldrb	r2, [r1, r2]
 80014b0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014b2:	4a85      	ldr	r2, [pc, #532]	; (80016c8 <HAL_RCC_OscConfig+0x4dc>)
 80014b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014b6:	4b85      	ldr	r3, [pc, #532]	; (80016cc <HAL_RCC_OscConfig+0x4e0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fb5e 	bl	8000b7c <HAL_InitTick>
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d045      	beq.n	8001556 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	e1b5      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d029      	beq.n	800152a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014d6:	4b7e      	ldr	r3, [pc, #504]	; (80016d0 <HAL_RCC_OscConfig+0x4e4>)
 80014d8:	2201      	movs	r2, #1
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fb9a 	bl	8000c14 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014e4:	f7ff fb96 	bl	8000c14 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e1a1      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014f6:	4b72      	ldr	r3, [pc, #456]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001502:	4b6f      	ldr	r3, [pc, #444]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	496c      	ldr	r1, [pc, #432]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 8001510:	4313      	orrs	r3, r2
 8001512:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001514:	4b6a      	ldr	r3, [pc, #424]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	061b      	lsls	r3, r3, #24
 8001522:	4967      	ldr	r1, [pc, #412]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
 8001528:	e015      	b.n	8001556 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800152a:	4b69      	ldr	r3, [pc, #420]	; (80016d0 <HAL_RCC_OscConfig+0x4e4>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fb70 	bl	8000c14 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001538:	f7ff fb6c 	bl	8000c14 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e177      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800154a:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d030      	beq.n	80015c4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d016      	beq.n	8001598 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156a:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <HAL_RCC_OscConfig+0x4e8>)
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001570:	f7ff fb50 	bl	8000c14 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff fb4c 	bl	8000c14 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e157      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800158a:	4b4d      	ldr	r3, [pc, #308]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 800158c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x38c>
 8001596:	e015      	b.n	80015c4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001598:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <HAL_RCC_OscConfig+0x4e8>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159e:	f7ff fb39 	bl	8000c14 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a6:	f7ff fb35 	bl	8000c14 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e140      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015b8:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 80015ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f0      	bne.n	80015a6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80b5 	beq.w	800173c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d6:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10d      	bne.n	80015fe <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	4a36      	ldr	r2, [pc, #216]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6253      	str	r3, [r2, #36]	; 0x24
 80015ee:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fa:	2301      	movs	r3, #1
 80015fc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fe:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <HAL_RCC_OscConfig+0x4ec>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	2b00      	cmp	r3, #0
 8001608:	d118      	bne.n	800163c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800160a:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <HAL_RCC_OscConfig+0x4ec>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a32      	ldr	r2, [pc, #200]	; (80016d8 <HAL_RCC_OscConfig+0x4ec>)
 8001610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001616:	f7ff fafd 	bl	8000c14 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161e:	f7ff faf9 	bl	8000c14 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b64      	cmp	r3, #100	; 0x64
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e104      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001630:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <HAL_RCC_OscConfig+0x4ec>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x466>
 8001644:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 8001646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001648:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 800164a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164e:	6353      	str	r3, [r2, #52]	; 0x34
 8001650:	e02d      	b.n	80016ae <HAL_RCC_OscConfig+0x4c2>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0x488>
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 800165c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 8001660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001664:	6353      	str	r3, [r2, #52]	; 0x34
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 8001668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166a:	4a15      	ldr	r2, [pc, #84]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 800166c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001670:	6353      	str	r3, [r2, #52]	; 0x34
 8001672:	e01c      	b.n	80016ae <HAL_RCC_OscConfig+0x4c2>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b05      	cmp	r3, #5
 800167a:	d10c      	bne.n	8001696 <HAL_RCC_OscConfig+0x4aa>
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 800167e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001680:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 8001682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001686:	6353      	str	r3, [r2, #52]	; 0x34
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 800168a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168c:	4a0c      	ldr	r2, [pc, #48]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 800168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001692:	6353      	str	r3, [r2, #52]	; 0x34
 8001694:	e00b      	b.n	80016ae <HAL_RCC_OscConfig+0x4c2>
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 8001698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 800169c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016a0:	6353      	str	r3, [r2, #52]	; 0x34
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 80016a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a6:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_RCC_OscConfig+0x4d4>)
 80016a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016ac:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d024      	beq.n	8001700 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b6:	f7ff faad 	bl	8000c14 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016bc:	e019      	b.n	80016f2 <HAL_RCC_OscConfig+0x506>
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	08004100 	.word	0x08004100
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000004 	.word	0x20000004
 80016d0:	42470020 	.word	0x42470020
 80016d4:	42470680 	.word	0x42470680
 80016d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016dc:	f7ff fa9a 	bl	8000c14 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e0a3      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016f2:	4b54      	ldr	r3, [pc, #336]	; (8001844 <HAL_RCC_OscConfig+0x658>)
 80016f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0ee      	beq.n	80016dc <HAL_RCC_OscConfig+0x4f0>
 80016fe:	e014      	b.n	800172a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001700:	f7ff fa88 	bl	8000c14 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001706:	e00a      	b.n	800171e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001708:	f7ff fa84 	bl	8000c14 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	; 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e08d      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800171e:	4b49      	ldr	r3, [pc, #292]	; (8001844 <HAL_RCC_OscConfig+0x658>)
 8001720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ee      	bne.n	8001708 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800172a:	7ffb      	ldrb	r3, [r7, #31]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d105      	bne.n	800173c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001730:	4b44      	ldr	r3, [pc, #272]	; (8001844 <HAL_RCC_OscConfig+0x658>)
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	4a43      	ldr	r2, [pc, #268]	; (8001844 <HAL_RCC_OscConfig+0x658>)
 8001736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	2b00      	cmp	r3, #0
 8001742:	d079      	beq.n	8001838 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b0c      	cmp	r3, #12
 8001748:	d056      	beq.n	80017f8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	2b02      	cmp	r3, #2
 8001750:	d13b      	bne.n	80017ca <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001752:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_RCC_OscConfig+0x65c>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fa5c 	bl	8000c14 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001760:	f7ff fa58 	bl	8000c14 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e063      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001772:	4b34      	ldr	r3, [pc, #208]	; (8001844 <HAL_RCC_OscConfig+0x658>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800177e:	4b31      	ldr	r3, [pc, #196]	; (8001844 <HAL_RCC_OscConfig+0x658>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	4319      	orrs	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	430b      	orrs	r3, r1
 8001796:	492b      	ldr	r1, [pc, #172]	; (8001844 <HAL_RCC_OscConfig+0x658>)
 8001798:	4313      	orrs	r3, r2
 800179a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <HAL_RCC_OscConfig+0x65c>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a2:	f7ff fa37 	bl	8000c14 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017aa:	f7ff fa33 	bl	8000c14 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e03e      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017bc:	4b21      	ldr	r3, [pc, #132]	; (8001844 <HAL_RCC_OscConfig+0x658>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x5be>
 80017c8:	e036      	b.n	8001838 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ca:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <HAL_RCC_OscConfig+0x65c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fa20 	bl	8000c14 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d8:	f7ff fa1c 	bl	8000c14 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e027      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <HAL_RCC_OscConfig+0x658>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x5ec>
 80017f6:	e01f      	b.n	8001838 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e01a      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_RCC_OscConfig+0x658>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001814:	429a      	cmp	r2, r3
 8001816:	d10d      	bne.n	8001834 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	429a      	cmp	r2, r3
 8001824:	d106      	bne.n	8001834 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	42470060 	.word	0x42470060

0800184c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e11a      	b.n	8001a96 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001860:	4b8f      	ldr	r3, [pc, #572]	; (8001aa0 <HAL_RCC_ClockConfig+0x254>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d919      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <HAL_RCC_ClockConfig+0x34>
 8001874:	4b8a      	ldr	r3, [pc, #552]	; (8001aa0 <HAL_RCC_ClockConfig+0x254>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a89      	ldr	r2, [pc, #548]	; (8001aa0 <HAL_RCC_ClockConfig+0x254>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b87      	ldr	r3, [pc, #540]	; (8001aa0 <HAL_RCC_ClockConfig+0x254>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 0201 	bic.w	r2, r3, #1
 8001888:	4985      	ldr	r1, [pc, #532]	; (8001aa0 <HAL_RCC_ClockConfig+0x254>)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001890:	4b83      	ldr	r3, [pc, #524]	; (8001aa0 <HAL_RCC_ClockConfig+0x254>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d001      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e0f9      	b.n	8001a96 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d008      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ae:	4b7d      	ldr	r3, [pc, #500]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	497a      	ldr	r1, [pc, #488]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 808e 	beq.w	80019ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d107      	bne.n	80018e6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018d6:	4b73      	ldr	r3, [pc, #460]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d121      	bne.n	8001926 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e0d7      	b.n	8001a96 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018ee:	4b6d      	ldr	r3, [pc, #436]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d115      	bne.n	8001926 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0cb      	b.n	8001a96 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001906:	4b67      	ldr	r3, [pc, #412]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0bf      	b.n	8001a96 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001916:	4b63      	ldr	r3, [pc, #396]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e0b7      	b.n	8001a96 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001926:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f023 0203 	bic.w	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	495c      	ldr	r1, [pc, #368]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 8001934:	4313      	orrs	r3, r2
 8001936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001938:	f7ff f96c 	bl	8000c14 <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d112      	bne.n	800196c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001946:	e00a      	b.n	800195e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001948:	f7ff f964 	bl	8000c14 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e09b      	b.n	8001a96 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800195e:	4b51      	ldr	r3, [pc, #324]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b08      	cmp	r3, #8
 8001968:	d1ee      	bne.n	8001948 <HAL_RCC_ClockConfig+0xfc>
 800196a:	e03e      	b.n	80019ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d112      	bne.n	800199a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001974:	e00a      	b.n	800198c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001976:	f7ff f94d 	bl	8000c14 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f241 3288 	movw	r2, #5000	; 0x1388
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e084      	b.n	8001a96 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800198c:	4b45      	ldr	r3, [pc, #276]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b0c      	cmp	r3, #12
 8001996:	d1ee      	bne.n	8001976 <HAL_RCC_ClockConfig+0x12a>
 8001998:	e027      	b.n	80019ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d11d      	bne.n	80019de <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a4:	f7ff f936 	bl	8000c14 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e06d      	b.n	8001a96 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ba:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d1ee      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x158>
 80019c6:	e010      	b.n	80019ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c8:	f7ff f924 	bl	8000c14 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e05b      	b.n	8001a96 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80019de:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ee      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ea:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <HAL_RCC_ClockConfig+0x254>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d219      	bcs.n	8001a2c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d105      	bne.n	8001a0a <HAL_RCC_ClockConfig+0x1be>
 80019fe:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <HAL_RCC_ClockConfig+0x254>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a27      	ldr	r2, [pc, #156]	; (8001aa0 <HAL_RCC_ClockConfig+0x254>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_RCC_ClockConfig+0x254>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 0201 	bic.w	r2, r3, #1
 8001a12:	4923      	ldr	r1, [pc, #140]	; (8001aa0 <HAL_RCC_ClockConfig+0x254>)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_RCC_ClockConfig+0x254>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e034      	b.n	8001a96 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4917      	ldr	r1, [pc, #92]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d009      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	490f      	ldr	r1, [pc, #60]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a6a:	f000 f823 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_RCC_ClockConfig+0x258>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	490b      	ldr	r1, [pc, #44]	; (8001aa8 <HAL_RCC_ClockConfig+0x25c>)
 8001a7c:	5ccb      	ldrb	r3, [r1, r3]
 8001a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_RCC_ClockConfig+0x260>)
 8001a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f876 	bl	8000b7c <HAL_InitTick>
 8001a90:	4603      	mov	r3, r0
 8001a92:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a94:	7afb      	ldrb	r3, [r7, #11]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023c00 	.word	0x40023c00
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	08004100 	.word	0x08004100
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab8:	b092      	sub	sp, #72	; 0x48
 8001aba:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001abc:	4b79      	ldr	r3, [pc, #484]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	d00d      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8001acc:	2b0c      	cmp	r3, #12
 8001ace:	f200 80d5 	bhi.w	8001c7c <HAL_RCC_GetSysClockFreq+0x1c8>
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d002      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x28>
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d003      	beq.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x2e>
 8001ada:	e0cf      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001adc:	4b72      	ldr	r3, [pc, #456]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001ade:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001ae0:	e0da      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ae2:	4b72      	ldr	r3, [pc, #456]	; (8001cac <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001ae4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001ae6:	e0d7      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aea:	0c9b      	lsrs	r3, r3, #18
 8001aec:	f003 020f 	and.w	r2, r3, #15
 8001af0:	4b6f      	ldr	r3, [pc, #444]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001af2:	5c9b      	ldrb	r3, [r3, r2]
 8001af4:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af8:	0d9b      	lsrs	r3, r3, #22
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	3301      	adds	r3, #1
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b02:	4b68      	ldr	r3, [pc, #416]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d05d      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b10:	2200      	movs	r2, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	4611      	mov	r1, r2
 8001b16:	4604      	mov	r4, r0
 8001b18:	460d      	mov	r5, r1
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	462b      	mov	r3, r5
 8001b1e:	f04f 0000 	mov.w	r0, #0
 8001b22:	f04f 0100 	mov.w	r1, #0
 8001b26:	0159      	lsls	r1, r3, #5
 8001b28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b2c:	0150      	lsls	r0, r2, #5
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4621      	mov	r1, r4
 8001b34:	1a51      	subs	r1, r2, r1
 8001b36:	6139      	str	r1, [r7, #16]
 8001b38:	4629      	mov	r1, r5
 8001b3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b4c:	4659      	mov	r1, fp
 8001b4e:	018b      	lsls	r3, r1, #6
 8001b50:	4651      	mov	r1, sl
 8001b52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b56:	4651      	mov	r1, sl
 8001b58:	018a      	lsls	r2, r1, #6
 8001b5a:	46d4      	mov	ip, sl
 8001b5c:	ebb2 080c 	subs.w	r8, r2, ip
 8001b60:	4659      	mov	r1, fp
 8001b62:	eb63 0901 	sbc.w	r9, r3, r1
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b7a:	4690      	mov	r8, r2
 8001b7c:	4699      	mov	r9, r3
 8001b7e:	4623      	mov	r3, r4
 8001b80:	eb18 0303 	adds.w	r3, r8, r3
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	462b      	mov	r3, r5
 8001b88:	eb49 0303 	adc.w	r3, r9, r3
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	024b      	lsls	r3, r1, #9
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	4629      	mov	r1, r5
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001ba8:	4601      	mov	r1, r0
 8001baa:	024a      	lsls	r2, r1, #9
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bbc:	f7fe fade 	bl	800017c <__aeabi_uldivmod>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8001bc8:	e055      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bcc:	2200      	movs	r2, #0
 8001bce:	623b      	str	r3, [r7, #32]
 8001bd0:	627a      	str	r2, [r7, #36]	; 0x24
 8001bd2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bd6:	4642      	mov	r2, r8
 8001bd8:	464b      	mov	r3, r9
 8001bda:	f04f 0000 	mov.w	r0, #0
 8001bde:	f04f 0100 	mov.w	r1, #0
 8001be2:	0159      	lsls	r1, r3, #5
 8001be4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be8:	0150      	lsls	r0, r2, #5
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	46c4      	mov	ip, r8
 8001bf0:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001bf4:	4640      	mov	r0, r8
 8001bf6:	4649      	mov	r1, r9
 8001bf8:	468c      	mov	ip, r1
 8001bfa:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c0a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c0e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c12:	ebb2 040a 	subs.w	r4, r2, sl
 8001c16:	eb63 050b 	sbc.w	r5, r3, fp
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	00eb      	lsls	r3, r5, #3
 8001c24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c28:	00e2      	lsls	r2, r4, #3
 8001c2a:	4614      	mov	r4, r2
 8001c2c:	461d      	mov	r5, r3
 8001c2e:	4603      	mov	r3, r0
 8001c30:	18e3      	adds	r3, r4, r3
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	460b      	mov	r3, r1
 8001c36:	eb45 0303 	adc.w	r3, r5, r3
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	f04f 0300 	mov.w	r3, #0
 8001c44:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c48:	4629      	mov	r1, r5
 8001c4a:	028b      	lsls	r3, r1, #10
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	4604      	mov	r4, r0
 8001c52:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001c56:	4601      	mov	r1, r0
 8001c58:	028a      	lsls	r2, r1, #10
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c60:	2200      	movs	r2, #0
 8001c62:	61bb      	str	r3, [r7, #24]
 8001c64:	61fa      	str	r2, [r7, #28]
 8001c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c6a:	f7fe fa87 	bl	800017c <__aeabi_uldivmod>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4613      	mov	r3, r2
 8001c74:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c78:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001c7a:	e00d      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	0b5b      	lsrs	r3, r3, #13
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001c96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3748      	adds	r7, #72	; 0x48
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	00f42400 	.word	0x00f42400
 8001cac:	007a1200 	.word	0x007a1200
 8001cb0:	080040f4 	.word	0x080040f4

08001cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb8:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	20000000 	.word	0x20000000

08001cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ccc:	f7ff fff2 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	4903      	ldr	r1, [pc, #12]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	08004110 	.word	0x08004110

08001cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cf4:	f7ff ffde 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	0adb      	lsrs	r3, r3, #11
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4903      	ldr	r1, [pc, #12]	; (8001d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	08004110 	.word	0x08004110

08001d18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d24:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d12c      	bne.n	8001d8a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d30:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	e016      	b.n	8001d76 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d48:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d52:	6253      	str	r3, [r2, #36]	; 0x24
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001d68:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6a:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001d7c:	d105      	bne.n	8001d8a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001d84:	d101      	bne.n	8001d8a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001d86:	2301      	movs	r3, #1
 8001d88:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001d90:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0f      	ldr	r2, [pc, #60]	; (8001dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 0201 	bic.w	r2, r3, #1
 8001da4:	490b      	ldr	r1, [pc, #44]	; (8001dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d001      	beq.n	8001dbe <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	40023c00 	.word	0x40023c00

08001dd8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d106      	bne.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80ed 	beq.w	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfe:	4b78      	ldr	r3, [pc, #480]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10d      	bne.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	4b75      	ldr	r3, [pc, #468]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	4a74      	ldr	r2, [pc, #464]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6253      	str	r3, [r2, #36]	; 0x24
 8001e16:	4b72      	ldr	r3, [pc, #456]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e22:	2301      	movs	r3, #1
 8001e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e26:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d118      	bne.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e32:	4b6c      	ldr	r3, [pc, #432]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a6b      	ldr	r2, [pc, #428]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8001e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3e:	f7fe fee9 	bl	8000c14 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	e008      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e46:	f7fe fee5 	bl	8000c14 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b64      	cmp	r3, #100	; 0x64
 8001e52:	d901      	bls.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e0be      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	4b62      	ldr	r3, [pc, #392]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e64:	4b5e      	ldr	r3, [pc, #376]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001e6c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d00f      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e96:	d108      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e98:	4b51      	ldr	r3, [pc, #324]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e095      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001eaa:	4b4d      	ldr	r3, [pc, #308]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eb2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d041      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10c      	bne.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d02d      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d027      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001eee:	4b3c      	ldr	r3, [pc, #240]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ef6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef8:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001efe:	4b3a      	ldr	r3, [pc, #232]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001f04:	4a36      	ldr	r2, [pc, #216]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d014      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7fe fe7e 	bl	8000c14 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f1a:	e00a      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1c:	f7fe fe7a 	bl	8000c14 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e051      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f32:	4b2b      	ldr	r3, [pc, #172]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0ee      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01a      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001f56:	d10a      	bne.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001f68:	491d      	ldr	r1, [pc, #116]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f7a:	4919      	ldr	r1, [pc, #100]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d01a      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001f98:	d10a      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001faa:	490d      	ldr	r1, [pc, #52]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fbc:	4908      	ldr	r1, [pc, #32]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	424706dc 	.word	0x424706dc

08001fec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e073      	b.n	80020ea <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7f5b      	ldrb	r3, [r3, #29]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d105      	bne.n	8002018 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fc42 	bl	800089c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b10      	cmp	r3, #16
 800202a:	d055      	beq.n	80020d8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	22ca      	movs	r2, #202	; 0xca
 8002032:	625a      	str	r2, [r3, #36]	; 0x24
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2253      	movs	r2, #83	; 0x53
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fbd2 	bl	80027e6 <RTC_EnterInitMode>
 8002042:	4603      	mov	r3, r0
 8002044:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d12c      	bne.n	80020a6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800205a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800205e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6899      	ldr	r1, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68d2      	ldr	r2, [r2, #12]
 8002086:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6919      	ldr	r1, [r3, #16]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	041a      	lsls	r2, r3, #16
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fbd9 	bl	8002854 <RTC_ExitInitMode>
 80020a2:	4603      	mov	r3, r0
 80020a4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d110      	bne.n	80020ce <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	22ff      	movs	r2, #255	; 0xff
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
 80020d6:	e001      	b.n	80020dc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020f2:	b590      	push	{r4, r7, lr}
 80020f4:	b087      	sub	sp, #28
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	7f1b      	ldrb	r3, [r3, #28]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_RTC_SetTime+0x1c>
 800210a:	2302      	movs	r3, #2
 800210c:	e087      	b.n	800221e <HAL_RTC_SetTime+0x12c>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2202      	movs	r2, #2
 8002118:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d126      	bne.n	800216e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2200      	movs	r2, #0
 8002132:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f000 fbb0 	bl	800289e <RTC_ByteToBcd2>
 800213e:	4603      	mov	r3, r0
 8002140:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	785b      	ldrb	r3, [r3, #1]
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fba9 	bl	800289e <RTC_ByteToBcd2>
 800214c:	4603      	mov	r3, r0
 800214e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002150:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	789b      	ldrb	r3, [r3, #2]
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fba1 	bl	800289e <RTC_ByteToBcd2>
 800215c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800215e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	78db      	ldrb	r3, [r3, #3]
 8002166:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002168:	4313      	orrs	r3, r2
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	e018      	b.n	80021a0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2200      	movs	r2, #0
 8002180:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	785b      	ldrb	r3, [r3, #1]
 800218c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800218e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002194:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	78db      	ldrb	r3, [r3, #3]
 800219a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800219c:	4313      	orrs	r3, r2
 800219e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	22ca      	movs	r2, #202	; 0xca
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2253      	movs	r2, #83	; 0x53
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fb18 	bl	80027e6 <RTC_EnterInitMode>
 80021b6:	4603      	mov	r3, r0
 80021b8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80021ba:	7cfb      	ldrb	r3, [r7, #19]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d120      	bne.n	8002202 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80021ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80021ce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6899      	ldr	r1, [r3, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fb2b 	bl	8002854 <RTC_ExitInitMode>
 80021fe:	4603      	mov	r3, r0
 8002200:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002202:	7cfb      	ldrb	r3, [r7, #19]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	22ff      	movs	r2, #255	; 0xff
 8002214:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	771a      	strb	r2, [r3, #28]

  return status;
 800221c:	7cfb      	ldrb	r3, [r7, #19]
}
 800221e:	4618      	mov	r0, r3
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd90      	pop	{r4, r7, pc}

08002226 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(RTC_SUBSECOND_SUPPORT)
  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	609a      	str	r2, [r3, #8]
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002258:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800225c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	0c1b      	lsrs	r3, r3, #16
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002268:	b2da      	uxtb	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002278:	b2da      	uxtb	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002286:	b2da      	uxtb	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	0d9b      	lsrs	r3, r3, #22
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	b2da      	uxtb	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d11a      	bne.n	80022d8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fb16 	bl	80028d8 <RTC_Bcd2ToByte>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461a      	mov	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	785b      	ldrb	r3, [r3, #1]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fb0d 	bl	80028d8 <RTC_Bcd2ToByte>
 80022be:	4603      	mov	r3, r0
 80022c0:	461a      	mov	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	789b      	ldrb	r3, [r3, #2]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fb04 	bl	80028d8 <RTC_Bcd2ToByte>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461a      	mov	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022e2:	b590      	push	{r4, r7, lr}
 80022e4:	b087      	sub	sp, #28
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	7f1b      	ldrb	r3, [r3, #28]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_RTC_SetDate+0x1c>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e071      	b.n	80023e2 <HAL_RTC_SetDate+0x100>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2202      	movs	r2, #2
 8002308:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10e      	bne.n	800232e <HAL_RTC_SetDate+0x4c>
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	785b      	ldrb	r3, [r3, #1]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	785b      	ldrb	r3, [r3, #1]
 8002320:	f023 0310 	bic.w	r3, r3, #16
 8002324:	b2db      	uxtb	r3, r3
 8002326:	330a      	adds	r3, #10
 8002328:	b2da      	uxtb	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d11c      	bne.n	800236e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	78db      	ldrb	r3, [r3, #3]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fab0 	bl	800289e <RTC_ByteToBcd2>
 800233e:	4603      	mov	r3, r0
 8002340:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 faa9 	bl	800289e <RTC_ByteToBcd2>
 800234c:	4603      	mov	r3, r0
 800234e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002350:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	789b      	ldrb	r3, [r3, #2]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 faa1 	bl	800289e <RTC_ByteToBcd2>
 800235c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800235e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e00e      	b.n	800238c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	78db      	ldrb	r3, [r3, #3]
 8002372:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	785b      	ldrb	r3, [r3, #1]
 8002378:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800237a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002380:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	22ca      	movs	r2, #202	; 0xca
 8002392:	625a      	str	r2, [r3, #36]	; 0x24
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2253      	movs	r2, #83	; 0x53
 800239a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fa22 	bl	80027e6 <RTC_EnterInitMode>
 80023a2:	4603      	mov	r3, r0
 80023a4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80023a6:	7cfb      	ldrb	r3, [r7, #19]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10c      	bne.n	80023c6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023ba:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 fa49 	bl	8002854 <RTC_ExitInitMode>
 80023c2:	4603      	mov	r3, r0
 80023c4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80023c6:	7cfb      	ldrb	r3, [r7, #19]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	22ff      	movs	r2, #255	; 0xff
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]

  return status;
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd90      	pop	{r4, r7, pc}

080023ea <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002404:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002408:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	b2da      	uxtb	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	b2db      	uxtb	r3, r3
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	b2da      	uxtb	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800242c:	b2da      	uxtb	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	0b5b      	lsrs	r3, r3, #13
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	b2da      	uxtb	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d11a      	bne.n	800247e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	78db      	ldrb	r3, [r3, #3]
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fa43 	bl	80028d8 <RTC_Bcd2ToByte>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	785b      	ldrb	r3, [r3, #1]
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fa3a 	bl	80028d8 <RTC_Bcd2ToByte>
 8002464:	4603      	mov	r3, r0
 8002466:	461a      	mov	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	789b      	ldrb	r3, [r3, #2]
 8002470:	4618      	mov	r0, r3
 8002472:	f000 fa31 	bl	80028d8 <RTC_Bcd2ToByte>
 8002476:	4603      	mov	r3, r0
 8002478:	461a      	mov	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002494:	4b9b      	ldr	r3, [pc, #620]	; (8002704 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a9b      	ldr	r2, [pc, #620]	; (8002708 <HAL_RTC_SetAlarm_IT+0x280>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0adb      	lsrs	r3, r3, #11
 80024a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
#if defined(RTC_SUBSECOND_SUPPORT)
       uint32_t subsecondtmpreg = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	7f1b      	ldrb	r3, [r3, #28]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_RTC_SetAlarm_IT+0x36>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e11e      	b.n	80026fc <HAL_RTC_SetAlarm_IT+0x274>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2202      	movs	r2, #2
 80024c8:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d137      	bne.n	8002540 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d102      	bne.n	80024e4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2200      	movs	r2, #0
 80024e2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 f9d8 	bl	800289e <RTC_ByteToBcd2>
 80024ee:	4603      	mov	r3, r0
 80024f0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	785b      	ldrb	r3, [r3, #1]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f9d1 	bl	800289e <RTC_ByteToBcd2>
 80024fc:	4603      	mov	r3, r0
 80024fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002500:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	789b      	ldrb	r3, [r3, #2]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f9c9 	bl	800289e <RTC_ByteToBcd2>
 800250c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800250e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	78db      	ldrb	r3, [r3, #3]
 8002516:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002518:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f9bb 	bl	800289e <RTC_ByteToBcd2>
 8002528:	4603      	mov	r3, r0
 800252a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800252c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002534:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800253a:	4313      	orrs	r3, r2
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	e023      	b.n	8002588 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2200      	movs	r2, #0
 8002552:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	785b      	ldrb	r3, [r3, #1]
 800255e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002560:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002566:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	78db      	ldrb	r3, [r3, #3]
 800256c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800256e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002576:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002578:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800257e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002584:	4313      	orrs	r3, r2
 8002586:	61fb      	str	r3, [r7, #28]
  }

#if defined(RTC_SUBSECOND_SUPPORT)
  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	22ca      	movs	r2, #202	; 0xca
 800259a:	625a      	str	r2, [r3, #36]	; 0x24
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2253      	movs	r2, #83	; 0x53
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ac:	d142      	bne.n	8002634 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025bc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80025ce:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10b      	bne.n	80025f4 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	22ff      	movs	r2, #255	; 0xff
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2203      	movs	r2, #3
 80025e8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e083      	b.n	80026fc <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0e6      	beq.n	80025d0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	61da      	str	r2, [r3, #28]
#if defined(RTC_SUBSECOND_SUPPORT)
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* RTC_SUBSECOND_SUPPORT */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002620:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	e04c      	b.n	80026ce <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002642:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002654:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002656:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a2b      	ldr	r2, [pc, #172]	; (8002708 <HAL_RTC_SetAlarm_IT+0x280>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	0adb      	lsrs	r3, r3, #11
 8002662:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3b01      	subs	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10b      	bne.n	8002690 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	22ff      	movs	r2, #255	; 0xff
 800267e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2203      	movs	r2, #3
 8002684:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e035      	b.n	80026fc <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0e6      	beq.n	800266c <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	621a      	str	r2, [r3, #32]
#if defined(RTC_SUBSECOND_SUPPORT)
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RTC_SUBSECOND_SUPPORT */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026bc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026cc:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80026ce:	4b0f      	ldr	r3, [pc, #60]	; (800270c <HAL_RTC_SetAlarm_IT+0x284>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a0e      	ldr	r2, [pc, #56]	; (800270c <HAL_RTC_SetAlarm_IT+0x284>)
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d8:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <HAL_RTC_SetAlarm_IT+0x284>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	4a0b      	ldr	r2, [pc, #44]	; (800270c <HAL_RTC_SetAlarm_IT+0x284>)
 80026e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e4:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	22ff      	movs	r2, #255	; 0xff
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2201      	movs	r2, #1
 80026f2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3724      	adds	r7, #36	; 0x24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd90      	pop	{r4, r7, pc}
 8002704:	20000000 	.word	0x20000000
 8002708:	10624dd3 	.word	0x10624dd3
 800270c:	40010400 	.word	0x40010400

08002710 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002718:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <HAL_RTC_AlarmIRQHandler+0x88>)
 800271a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800271e:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d012      	beq.n	8002754 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00b      	beq.n	8002754 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	b2da      	uxtb	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800274c:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fd fe98 	bl	8000484 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d012      	beq.n	8002788 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00b      	beq.n	8002788 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002780:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fd fe8e 	bl	80004a4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	775a      	strb	r2, [r3, #29]
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40010400 	.word	0x40010400

0800279c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f64f 7257 	movw	r2, #65367	; 0xff57
 80027b0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027b2:	f7fe fa2f 	bl	8000c14 <HAL_GetTick>
 80027b6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80027b8:	e009      	b.n	80027ce <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027ba:	f7fe fa2b 	bl	8000c14 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c8:	d901      	bls.n	80027ce <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e007      	b.n	80027de <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0ee      	beq.n	80027ba <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002800:	2b00      	cmp	r3, #0
 8002802:	d122      	bne.n	800284a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002812:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002814:	f7fe f9fe 	bl	8000c14 <HAL_GetTick>
 8002818:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800281a:	e00c      	b.n	8002836 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800281c:	f7fe f9fa 	bl	8000c14 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800282a:	d904      	bls.n	8002836 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2204      	movs	r2, #4
 8002830:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002840:	2b00      	cmp	r3, #0
 8002842:	d102      	bne.n	800284a <RTC_EnterInitMode+0x64>
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d1e8      	bne.n	800281c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800284a:	7bfb      	ldrb	r3, [r7, #15]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800286e:	60da      	str	r2, [r3, #12]

#if defined(RTC_CR_BYPSHAD)
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0320 	and.w	r3, r3, #32
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ff8c 	bl	800279c <HAL_RTC_WaitForSynchro>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d004      	beq.n	8002894 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2204      	movs	r2, #4
 800288e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
    hrtc->State = HAL_RTC_STATE_ERROR;
    status = HAL_ERROR;
  }
#endif /* RTC_CR_BYPSHAD */

  return status;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800289e:	b480      	push	{r7}
 80028a0:	b085      	sub	sp, #20
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80028ac:	e005      	b.n	80028ba <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3301      	adds	r3, #1
 80028b2:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	3b0a      	subs	r3, #10
 80028b8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	2b09      	cmp	r3, #9
 80028be:	d8f6      	bhi.n	80028ae <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	b2db      	uxtb	r3, r3
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	b2db      	uxtb	r3, r3
 8002904:	4413      	add	r3, r2
 8002906:	b2db      	uxtb	r3, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e042      	b.n	80029aa <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d106      	bne.n	800293e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7fd ffcb 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2224      	movs	r2, #36	; 0x24
 8002942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002954:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f91c 	bl	8002b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800296a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800297a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800298a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b08a      	sub	sp, #40	; 0x28
 80029b6:	af02      	add	r7, sp, #8
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	4613      	mov	r3, r2
 80029c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d16d      	bne.n	8002aae <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_UART_Transmit+0x2c>
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e066      	b.n	8002ab0 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2221      	movs	r2, #33	; 0x21
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029f0:	f7fe f910 	bl	8000c14 <HAL_GetTick>
 80029f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	88fa      	ldrh	r2, [r7, #6]
 80029fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	88fa      	ldrh	r2, [r7, #6]
 8002a00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0a:	d108      	bne.n	8002a1e <HAL_UART_Transmit+0x6c>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d104      	bne.n	8002a1e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	e003      	b.n	8002a26 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a26:	e02a      	b.n	8002a7e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2180      	movs	r1, #128	; 0x80
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f840 	bl	8002ab8 <UART_WaitOnFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e036      	b.n	8002ab0 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10b      	bne.n	8002a60 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a56:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	e007      	b.n	8002a70 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	781a      	ldrb	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1cf      	bne.n	8002a28 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2140      	movs	r1, #64	; 0x40
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f810 	bl	8002ab8 <UART_WaitOnFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e006      	b.n	8002ab0 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
  }
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3720      	adds	r7, #32
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b090      	sub	sp, #64	; 0x40
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac8:	e050      	b.n	8002b6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ad0:	d04c      	beq.n	8002b6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ad8:	f7fe f89c 	bl	8000c14 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d241      	bcs.n	8002b6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	330c      	adds	r3, #12
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af2:	e853 3f00 	ldrex	r3, [r3]
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b08:	637a      	str	r2, [r7, #52]	; 0x34
 8002b0a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b10:	e841 2300 	strex	r3, r2, [r1]
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1e5      	bne.n	8002ae8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3314      	adds	r3, #20
 8002b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	e853 3f00 	ldrex	r3, [r3]
 8002b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f023 0301 	bic.w	r3, r3, #1
 8002b32:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3314      	adds	r3, #20
 8002b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b3c:	623a      	str	r2, [r7, #32]
 8002b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b40:	69f9      	ldr	r1, [r7, #28]
 8002b42:	6a3a      	ldr	r2, [r7, #32]
 8002b44:	e841 2300 	strex	r3, r2, [r1]
 8002b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e5      	bne.n	8002b1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e00f      	b.n	8002b8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4013      	ands	r3, r2
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d09f      	beq.n	8002aca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3740      	adds	r7, #64	; 0x40
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002bd4:	f023 030c 	bic.w	r3, r3, #12
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	430b      	orrs	r3, r1
 8002be0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699a      	ldr	r2, [r3, #24]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a55      	ldr	r2, [pc, #340]	; (8002d54 <UART_SetConfig+0x1c0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d103      	bne.n	8002c0a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c02:	f7ff f875 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	e002      	b.n	8002c10 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c0a:	f7ff f85d 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 8002c0e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c18:	d14c      	bne.n	8002cb4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	009a      	lsls	r2, r3, #2
 8002c24:	441a      	add	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c30:	4a49      	ldr	r2, [pc, #292]	; (8002d58 <UART_SetConfig+0x1c4>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	0119      	lsls	r1, r3, #4
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	009a      	lsls	r2, r3, #2
 8002c44:	441a      	add	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c50:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <UART_SetConfig+0x1c4>)
 8002c52:	fba3 0302 	umull	r0, r3, r3, r2
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	2064      	movs	r0, #100	; 0x64
 8002c5a:	fb00 f303 	mul.w	r3, r0, r3
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	3332      	adds	r3, #50	; 0x32
 8002c64:	4a3c      	ldr	r2, [pc, #240]	; (8002d58 <UART_SetConfig+0x1c4>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c72:	4419      	add	r1, r3
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009a      	lsls	r2, r3, #2
 8002c7e:	441a      	add	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c8a:	4b33      	ldr	r3, [pc, #204]	; (8002d58 <UART_SetConfig+0x1c4>)
 8002c8c:	fba3 0302 	umull	r0, r3, r3, r2
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	2064      	movs	r0, #100	; 0x64
 8002c94:	fb00 f303 	mul.w	r3, r0, r3
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	3332      	adds	r3, #50	; 0x32
 8002c9e:	4a2e      	ldr	r2, [pc, #184]	; (8002d58 <UART_SetConfig+0x1c4>)
 8002ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca4:	095b      	lsrs	r3, r3, #5
 8002ca6:	f003 0207 	and.w	r2, r3, #7
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	440a      	add	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cb2:	e04a      	b.n	8002d4a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	009a      	lsls	r2, r3, #2
 8002cbe:	441a      	add	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cca:	4a23      	ldr	r2, [pc, #140]	; (8002d58 <UART_SetConfig+0x1c4>)
 8002ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	0119      	lsls	r1, r3, #4
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	009a      	lsls	r2, r3, #2
 8002cde:	441a      	add	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cea:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <UART_SetConfig+0x1c4>)
 8002cec:	fba3 0302 	umull	r0, r3, r3, r2
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	2064      	movs	r0, #100	; 0x64
 8002cf4:	fb00 f303 	mul.w	r3, r0, r3
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	3332      	adds	r3, #50	; 0x32
 8002cfe:	4a16      	ldr	r2, [pc, #88]	; (8002d58 <UART_SetConfig+0x1c4>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d0a:	4419      	add	r1, r3
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	009a      	lsls	r2, r3, #2
 8002d16:	441a      	add	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d22:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <UART_SetConfig+0x1c4>)
 8002d24:	fba3 0302 	umull	r0, r3, r3, r2
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	2064      	movs	r0, #100	; 0x64
 8002d2c:	fb00 f303 	mul.w	r3, r0, r3
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	3332      	adds	r3, #50	; 0x32
 8002d36:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <UART_SetConfig+0x1c4>)
 8002d38:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	f003 020f 	and.w	r2, r3, #15
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	440a      	add	r2, r1
 8002d48:	609a      	str	r2, [r3, #8]
}
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40013800 	.word	0x40013800
 8002d58:	51eb851f 	.word	0x51eb851f

08002d5c <__errno>:
 8002d5c:	4b01      	ldr	r3, [pc, #4]	; (8002d64 <__errno+0x8>)
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	2000000c 	.word	0x2000000c

08002d68 <__libc_init_array>:
 8002d68:	b570      	push	{r4, r5, r6, lr}
 8002d6a:	2600      	movs	r6, #0
 8002d6c:	4d0c      	ldr	r5, [pc, #48]	; (8002da0 <__libc_init_array+0x38>)
 8002d6e:	4c0d      	ldr	r4, [pc, #52]	; (8002da4 <__libc_init_array+0x3c>)
 8002d70:	1b64      	subs	r4, r4, r5
 8002d72:	10a4      	asrs	r4, r4, #2
 8002d74:	42a6      	cmp	r6, r4
 8002d76:	d109      	bne.n	8002d8c <__libc_init_array+0x24>
 8002d78:	f001 f992 	bl	80040a0 <_init>
 8002d7c:	2600      	movs	r6, #0
 8002d7e:	4d0a      	ldr	r5, [pc, #40]	; (8002da8 <__libc_init_array+0x40>)
 8002d80:	4c0a      	ldr	r4, [pc, #40]	; (8002dac <__libc_init_array+0x44>)
 8002d82:	1b64      	subs	r4, r4, r5
 8002d84:	10a4      	asrs	r4, r4, #2
 8002d86:	42a6      	cmp	r6, r4
 8002d88:	d105      	bne.n	8002d96 <__libc_init_array+0x2e>
 8002d8a:	bd70      	pop	{r4, r5, r6, pc}
 8002d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d90:	4798      	blx	r3
 8002d92:	3601      	adds	r6, #1
 8002d94:	e7ee      	b.n	8002d74 <__libc_init_array+0xc>
 8002d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9a:	4798      	blx	r3
 8002d9c:	3601      	adds	r6, #1
 8002d9e:	e7f2      	b.n	8002d86 <__libc_init_array+0x1e>
 8002da0:	080041b8 	.word	0x080041b8
 8002da4:	080041b8 	.word	0x080041b8
 8002da8:	080041b8 	.word	0x080041b8
 8002dac:	080041bc 	.word	0x080041bc

08002db0 <memset>:
 8002db0:	4603      	mov	r3, r0
 8002db2:	4402      	add	r2, r0
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d100      	bne.n	8002dba <memset+0xa>
 8002db8:	4770      	bx	lr
 8002dba:	f803 1b01 	strb.w	r1, [r3], #1
 8002dbe:	e7f9      	b.n	8002db4 <memset+0x4>

08002dc0 <iprintf>:
 8002dc0:	b40f      	push	{r0, r1, r2, r3}
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <iprintf+0x2c>)
 8002dc4:	b513      	push	{r0, r1, r4, lr}
 8002dc6:	681c      	ldr	r4, [r3, #0]
 8002dc8:	b124      	cbz	r4, 8002dd4 <iprintf+0x14>
 8002dca:	69a3      	ldr	r3, [r4, #24]
 8002dcc:	b913      	cbnz	r3, 8002dd4 <iprintf+0x14>
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f000 f886 	bl	8002ee0 <__sinit>
 8002dd4:	ab05      	add	r3, sp, #20
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	9a04      	ldr	r2, [sp, #16]
 8002dda:	68a1      	ldr	r1, [r4, #8]
 8002ddc:	9301      	str	r3, [sp, #4]
 8002dde:	f000 fb37 	bl	8003450 <_vfiprintf_r>
 8002de2:	b002      	add	sp, #8
 8002de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002de8:	b004      	add	sp, #16
 8002dea:	4770      	bx	lr
 8002dec:	2000000c 	.word	0x2000000c

08002df0 <siprintf>:
 8002df0:	b40e      	push	{r1, r2, r3}
 8002df2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002df6:	b500      	push	{lr}
 8002df8:	b09c      	sub	sp, #112	; 0x70
 8002dfa:	ab1d      	add	r3, sp, #116	; 0x74
 8002dfc:	9002      	str	r0, [sp, #8]
 8002dfe:	9006      	str	r0, [sp, #24]
 8002e00:	9107      	str	r1, [sp, #28]
 8002e02:	9104      	str	r1, [sp, #16]
 8002e04:	4808      	ldr	r0, [pc, #32]	; (8002e28 <siprintf+0x38>)
 8002e06:	4909      	ldr	r1, [pc, #36]	; (8002e2c <siprintf+0x3c>)
 8002e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e0c:	9105      	str	r1, [sp, #20]
 8002e0e:	6800      	ldr	r0, [r0, #0]
 8002e10:	a902      	add	r1, sp, #8
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	f000 f9f4 	bl	8003200 <_svfiprintf_r>
 8002e18:	2200      	movs	r2, #0
 8002e1a:	9b02      	ldr	r3, [sp, #8]
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	b01c      	add	sp, #112	; 0x70
 8002e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e24:	b003      	add	sp, #12
 8002e26:	4770      	bx	lr
 8002e28:	2000000c 	.word	0x2000000c
 8002e2c:	ffff0208 	.word	0xffff0208

08002e30 <std>:
 8002e30:	2300      	movs	r3, #0
 8002e32:	b510      	push	{r4, lr}
 8002e34:	4604      	mov	r4, r0
 8002e36:	e9c0 3300 	strd	r3, r3, [r0]
 8002e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e3e:	6083      	str	r3, [r0, #8]
 8002e40:	8181      	strh	r1, [r0, #12]
 8002e42:	6643      	str	r3, [r0, #100]	; 0x64
 8002e44:	81c2      	strh	r2, [r0, #14]
 8002e46:	6183      	str	r3, [r0, #24]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	305c      	adds	r0, #92	; 0x5c
 8002e4e:	f7ff ffaf 	bl	8002db0 <memset>
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <std+0x38>)
 8002e54:	6224      	str	r4, [r4, #32]
 8002e56:	6263      	str	r3, [r4, #36]	; 0x24
 8002e58:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <std+0x3c>)
 8002e5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <std+0x40>)
 8002e5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <std+0x44>)
 8002e62:	6323      	str	r3, [r4, #48]	; 0x30
 8002e64:	bd10      	pop	{r4, pc}
 8002e66:	bf00      	nop
 8002e68:	080039fd 	.word	0x080039fd
 8002e6c:	08003a1f 	.word	0x08003a1f
 8002e70:	08003a57 	.word	0x08003a57
 8002e74:	08003a7b 	.word	0x08003a7b

08002e78 <_cleanup_r>:
 8002e78:	4901      	ldr	r1, [pc, #4]	; (8002e80 <_cleanup_r+0x8>)
 8002e7a:	f000 b8af 	b.w	8002fdc <_fwalk_reent>
 8002e7e:	bf00      	nop
 8002e80:	08003d4d 	.word	0x08003d4d

08002e84 <__sfmoreglue>:
 8002e84:	2268      	movs	r2, #104	; 0x68
 8002e86:	b570      	push	{r4, r5, r6, lr}
 8002e88:	1e4d      	subs	r5, r1, #1
 8002e8a:	4355      	muls	r5, r2
 8002e8c:	460e      	mov	r6, r1
 8002e8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e92:	f000 f8e5 	bl	8003060 <_malloc_r>
 8002e96:	4604      	mov	r4, r0
 8002e98:	b140      	cbz	r0, 8002eac <__sfmoreglue+0x28>
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	e9c0 1600 	strd	r1, r6, [r0]
 8002ea0:	300c      	adds	r0, #12
 8002ea2:	60a0      	str	r0, [r4, #8]
 8002ea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ea8:	f7ff ff82 	bl	8002db0 <memset>
 8002eac:	4620      	mov	r0, r4
 8002eae:	bd70      	pop	{r4, r5, r6, pc}

08002eb0 <__sfp_lock_acquire>:
 8002eb0:	4801      	ldr	r0, [pc, #4]	; (8002eb8 <__sfp_lock_acquire+0x8>)
 8002eb2:	f000 b8b3 	b.w	800301c <__retarget_lock_acquire_recursive>
 8002eb6:	bf00      	nop
 8002eb8:	20000131 	.word	0x20000131

08002ebc <__sfp_lock_release>:
 8002ebc:	4801      	ldr	r0, [pc, #4]	; (8002ec4 <__sfp_lock_release+0x8>)
 8002ebe:	f000 b8ae 	b.w	800301e <__retarget_lock_release_recursive>
 8002ec2:	bf00      	nop
 8002ec4:	20000131 	.word	0x20000131

08002ec8 <__sinit_lock_acquire>:
 8002ec8:	4801      	ldr	r0, [pc, #4]	; (8002ed0 <__sinit_lock_acquire+0x8>)
 8002eca:	f000 b8a7 	b.w	800301c <__retarget_lock_acquire_recursive>
 8002ece:	bf00      	nop
 8002ed0:	20000132 	.word	0x20000132

08002ed4 <__sinit_lock_release>:
 8002ed4:	4801      	ldr	r0, [pc, #4]	; (8002edc <__sinit_lock_release+0x8>)
 8002ed6:	f000 b8a2 	b.w	800301e <__retarget_lock_release_recursive>
 8002eda:	bf00      	nop
 8002edc:	20000132 	.word	0x20000132

08002ee0 <__sinit>:
 8002ee0:	b510      	push	{r4, lr}
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	f7ff fff0 	bl	8002ec8 <__sinit_lock_acquire>
 8002ee8:	69a3      	ldr	r3, [r4, #24]
 8002eea:	b11b      	cbz	r3, 8002ef4 <__sinit+0x14>
 8002eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ef0:	f7ff bff0 	b.w	8002ed4 <__sinit_lock_release>
 8002ef4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002ef8:	6523      	str	r3, [r4, #80]	; 0x50
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <__sinit+0x68>)
 8002efc:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <__sinit+0x6c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	62a2      	str	r2, [r4, #40]	; 0x28
 8002f02:	42a3      	cmp	r3, r4
 8002f04:	bf08      	it	eq
 8002f06:	2301      	moveq	r3, #1
 8002f08:	4620      	mov	r0, r4
 8002f0a:	bf08      	it	eq
 8002f0c:	61a3      	streq	r3, [r4, #24]
 8002f0e:	f000 f81f 	bl	8002f50 <__sfp>
 8002f12:	6060      	str	r0, [r4, #4]
 8002f14:	4620      	mov	r0, r4
 8002f16:	f000 f81b 	bl	8002f50 <__sfp>
 8002f1a:	60a0      	str	r0, [r4, #8]
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f000 f817 	bl	8002f50 <__sfp>
 8002f22:	2200      	movs	r2, #0
 8002f24:	2104      	movs	r1, #4
 8002f26:	60e0      	str	r0, [r4, #12]
 8002f28:	6860      	ldr	r0, [r4, #4]
 8002f2a:	f7ff ff81 	bl	8002e30 <std>
 8002f2e:	2201      	movs	r2, #1
 8002f30:	2109      	movs	r1, #9
 8002f32:	68a0      	ldr	r0, [r4, #8]
 8002f34:	f7ff ff7c 	bl	8002e30 <std>
 8002f38:	2202      	movs	r2, #2
 8002f3a:	2112      	movs	r1, #18
 8002f3c:	68e0      	ldr	r0, [r4, #12]
 8002f3e:	f7ff ff77 	bl	8002e30 <std>
 8002f42:	2301      	movs	r3, #1
 8002f44:	61a3      	str	r3, [r4, #24]
 8002f46:	e7d1      	b.n	8002eec <__sinit+0xc>
 8002f48:	08004118 	.word	0x08004118
 8002f4c:	08002e79 	.word	0x08002e79

08002f50 <__sfp>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	4607      	mov	r7, r0
 8002f54:	f7ff ffac 	bl	8002eb0 <__sfp_lock_acquire>
 8002f58:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <__sfp+0x84>)
 8002f5a:	681e      	ldr	r6, [r3, #0]
 8002f5c:	69b3      	ldr	r3, [r6, #24]
 8002f5e:	b913      	cbnz	r3, 8002f66 <__sfp+0x16>
 8002f60:	4630      	mov	r0, r6
 8002f62:	f7ff ffbd 	bl	8002ee0 <__sinit>
 8002f66:	3648      	adds	r6, #72	; 0x48
 8002f68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	d503      	bpl.n	8002f78 <__sfp+0x28>
 8002f70:	6833      	ldr	r3, [r6, #0]
 8002f72:	b30b      	cbz	r3, 8002fb8 <__sfp+0x68>
 8002f74:	6836      	ldr	r6, [r6, #0]
 8002f76:	e7f7      	b.n	8002f68 <__sfp+0x18>
 8002f78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f7c:	b9d5      	cbnz	r5, 8002fb4 <__sfp+0x64>
 8002f7e:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <__sfp+0x88>)
 8002f80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f84:	60e3      	str	r3, [r4, #12]
 8002f86:	6665      	str	r5, [r4, #100]	; 0x64
 8002f88:	f000 f847 	bl	800301a <__retarget_lock_init_recursive>
 8002f8c:	f7ff ff96 	bl	8002ebc <__sfp_lock_release>
 8002f90:	2208      	movs	r2, #8
 8002f92:	4629      	mov	r1, r5
 8002f94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002f98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002f9c:	6025      	str	r5, [r4, #0]
 8002f9e:	61a5      	str	r5, [r4, #24]
 8002fa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002fa4:	f7ff ff04 	bl	8002db0 <memset>
 8002fa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002fac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fb4:	3468      	adds	r4, #104	; 0x68
 8002fb6:	e7d9      	b.n	8002f6c <__sfp+0x1c>
 8002fb8:	2104      	movs	r1, #4
 8002fba:	4638      	mov	r0, r7
 8002fbc:	f7ff ff62 	bl	8002e84 <__sfmoreglue>
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	6030      	str	r0, [r6, #0]
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d1d5      	bne.n	8002f74 <__sfp+0x24>
 8002fc8:	f7ff ff78 	bl	8002ebc <__sfp_lock_release>
 8002fcc:	230c      	movs	r3, #12
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	e7ee      	b.n	8002fb0 <__sfp+0x60>
 8002fd2:	bf00      	nop
 8002fd4:	08004118 	.word	0x08004118
 8002fd8:	ffff0001 	.word	0xffff0001

08002fdc <_fwalk_reent>:
 8002fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fe0:	4606      	mov	r6, r0
 8002fe2:	4688      	mov	r8, r1
 8002fe4:	2700      	movs	r7, #0
 8002fe6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002fea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002fee:	f1b9 0901 	subs.w	r9, r9, #1
 8002ff2:	d505      	bpl.n	8003000 <_fwalk_reent+0x24>
 8002ff4:	6824      	ldr	r4, [r4, #0]
 8002ff6:	2c00      	cmp	r4, #0
 8002ff8:	d1f7      	bne.n	8002fea <_fwalk_reent+0xe>
 8002ffa:	4638      	mov	r0, r7
 8002ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003000:	89ab      	ldrh	r3, [r5, #12]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d907      	bls.n	8003016 <_fwalk_reent+0x3a>
 8003006:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800300a:	3301      	adds	r3, #1
 800300c:	d003      	beq.n	8003016 <_fwalk_reent+0x3a>
 800300e:	4629      	mov	r1, r5
 8003010:	4630      	mov	r0, r6
 8003012:	47c0      	blx	r8
 8003014:	4307      	orrs	r7, r0
 8003016:	3568      	adds	r5, #104	; 0x68
 8003018:	e7e9      	b.n	8002fee <_fwalk_reent+0x12>

0800301a <__retarget_lock_init_recursive>:
 800301a:	4770      	bx	lr

0800301c <__retarget_lock_acquire_recursive>:
 800301c:	4770      	bx	lr

0800301e <__retarget_lock_release_recursive>:
 800301e:	4770      	bx	lr

08003020 <sbrk_aligned>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	4e0e      	ldr	r6, [pc, #56]	; (800305c <sbrk_aligned+0x3c>)
 8003024:	460c      	mov	r4, r1
 8003026:	6831      	ldr	r1, [r6, #0]
 8003028:	4605      	mov	r5, r0
 800302a:	b911      	cbnz	r1, 8003032 <sbrk_aligned+0x12>
 800302c:	f000 fcd6 	bl	80039dc <_sbrk_r>
 8003030:	6030      	str	r0, [r6, #0]
 8003032:	4621      	mov	r1, r4
 8003034:	4628      	mov	r0, r5
 8003036:	f000 fcd1 	bl	80039dc <_sbrk_r>
 800303a:	1c43      	adds	r3, r0, #1
 800303c:	d00a      	beq.n	8003054 <sbrk_aligned+0x34>
 800303e:	1cc4      	adds	r4, r0, #3
 8003040:	f024 0403 	bic.w	r4, r4, #3
 8003044:	42a0      	cmp	r0, r4
 8003046:	d007      	beq.n	8003058 <sbrk_aligned+0x38>
 8003048:	1a21      	subs	r1, r4, r0
 800304a:	4628      	mov	r0, r5
 800304c:	f000 fcc6 	bl	80039dc <_sbrk_r>
 8003050:	3001      	adds	r0, #1
 8003052:	d101      	bne.n	8003058 <sbrk_aligned+0x38>
 8003054:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003058:	4620      	mov	r0, r4
 800305a:	bd70      	pop	{r4, r5, r6, pc}
 800305c:	20000138 	.word	0x20000138

08003060 <_malloc_r>:
 8003060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003064:	1ccd      	adds	r5, r1, #3
 8003066:	f025 0503 	bic.w	r5, r5, #3
 800306a:	3508      	adds	r5, #8
 800306c:	2d0c      	cmp	r5, #12
 800306e:	bf38      	it	cc
 8003070:	250c      	movcc	r5, #12
 8003072:	2d00      	cmp	r5, #0
 8003074:	4607      	mov	r7, r0
 8003076:	db01      	blt.n	800307c <_malloc_r+0x1c>
 8003078:	42a9      	cmp	r1, r5
 800307a:	d905      	bls.n	8003088 <_malloc_r+0x28>
 800307c:	230c      	movs	r3, #12
 800307e:	2600      	movs	r6, #0
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	4630      	mov	r0, r6
 8003084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003088:	4e2e      	ldr	r6, [pc, #184]	; (8003144 <_malloc_r+0xe4>)
 800308a:	f000 ff49 	bl	8003f20 <__malloc_lock>
 800308e:	6833      	ldr	r3, [r6, #0]
 8003090:	461c      	mov	r4, r3
 8003092:	bb34      	cbnz	r4, 80030e2 <_malloc_r+0x82>
 8003094:	4629      	mov	r1, r5
 8003096:	4638      	mov	r0, r7
 8003098:	f7ff ffc2 	bl	8003020 <sbrk_aligned>
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	4604      	mov	r4, r0
 80030a0:	d14d      	bne.n	800313e <_malloc_r+0xde>
 80030a2:	6834      	ldr	r4, [r6, #0]
 80030a4:	4626      	mov	r6, r4
 80030a6:	2e00      	cmp	r6, #0
 80030a8:	d140      	bne.n	800312c <_malloc_r+0xcc>
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	4631      	mov	r1, r6
 80030ae:	4638      	mov	r0, r7
 80030b0:	eb04 0803 	add.w	r8, r4, r3
 80030b4:	f000 fc92 	bl	80039dc <_sbrk_r>
 80030b8:	4580      	cmp	r8, r0
 80030ba:	d13a      	bne.n	8003132 <_malloc_r+0xd2>
 80030bc:	6821      	ldr	r1, [r4, #0]
 80030be:	3503      	adds	r5, #3
 80030c0:	1a6d      	subs	r5, r5, r1
 80030c2:	f025 0503 	bic.w	r5, r5, #3
 80030c6:	3508      	adds	r5, #8
 80030c8:	2d0c      	cmp	r5, #12
 80030ca:	bf38      	it	cc
 80030cc:	250c      	movcc	r5, #12
 80030ce:	4638      	mov	r0, r7
 80030d0:	4629      	mov	r1, r5
 80030d2:	f7ff ffa5 	bl	8003020 <sbrk_aligned>
 80030d6:	3001      	adds	r0, #1
 80030d8:	d02b      	beq.n	8003132 <_malloc_r+0xd2>
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	442b      	add	r3, r5
 80030de:	6023      	str	r3, [r4, #0]
 80030e0:	e00e      	b.n	8003100 <_malloc_r+0xa0>
 80030e2:	6822      	ldr	r2, [r4, #0]
 80030e4:	1b52      	subs	r2, r2, r5
 80030e6:	d41e      	bmi.n	8003126 <_malloc_r+0xc6>
 80030e8:	2a0b      	cmp	r2, #11
 80030ea:	d916      	bls.n	800311a <_malloc_r+0xba>
 80030ec:	1961      	adds	r1, r4, r5
 80030ee:	42a3      	cmp	r3, r4
 80030f0:	6025      	str	r5, [r4, #0]
 80030f2:	bf18      	it	ne
 80030f4:	6059      	strne	r1, [r3, #4]
 80030f6:	6863      	ldr	r3, [r4, #4]
 80030f8:	bf08      	it	eq
 80030fa:	6031      	streq	r1, [r6, #0]
 80030fc:	5162      	str	r2, [r4, r5]
 80030fe:	604b      	str	r3, [r1, #4]
 8003100:	4638      	mov	r0, r7
 8003102:	f104 060b 	add.w	r6, r4, #11
 8003106:	f000 ff11 	bl	8003f2c <__malloc_unlock>
 800310a:	f026 0607 	bic.w	r6, r6, #7
 800310e:	1d23      	adds	r3, r4, #4
 8003110:	1af2      	subs	r2, r6, r3
 8003112:	d0b6      	beq.n	8003082 <_malloc_r+0x22>
 8003114:	1b9b      	subs	r3, r3, r6
 8003116:	50a3      	str	r3, [r4, r2]
 8003118:	e7b3      	b.n	8003082 <_malloc_r+0x22>
 800311a:	6862      	ldr	r2, [r4, #4]
 800311c:	42a3      	cmp	r3, r4
 800311e:	bf0c      	ite	eq
 8003120:	6032      	streq	r2, [r6, #0]
 8003122:	605a      	strne	r2, [r3, #4]
 8003124:	e7ec      	b.n	8003100 <_malloc_r+0xa0>
 8003126:	4623      	mov	r3, r4
 8003128:	6864      	ldr	r4, [r4, #4]
 800312a:	e7b2      	b.n	8003092 <_malloc_r+0x32>
 800312c:	4634      	mov	r4, r6
 800312e:	6876      	ldr	r6, [r6, #4]
 8003130:	e7b9      	b.n	80030a6 <_malloc_r+0x46>
 8003132:	230c      	movs	r3, #12
 8003134:	4638      	mov	r0, r7
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	f000 fef8 	bl	8003f2c <__malloc_unlock>
 800313c:	e7a1      	b.n	8003082 <_malloc_r+0x22>
 800313e:	6025      	str	r5, [r4, #0]
 8003140:	e7de      	b.n	8003100 <_malloc_r+0xa0>
 8003142:	bf00      	nop
 8003144:	20000134 	.word	0x20000134

08003148 <__ssputs_r>:
 8003148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800314c:	688e      	ldr	r6, [r1, #8]
 800314e:	4682      	mov	sl, r0
 8003150:	429e      	cmp	r6, r3
 8003152:	460c      	mov	r4, r1
 8003154:	4690      	mov	r8, r2
 8003156:	461f      	mov	r7, r3
 8003158:	d838      	bhi.n	80031cc <__ssputs_r+0x84>
 800315a:	898a      	ldrh	r2, [r1, #12]
 800315c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003160:	d032      	beq.n	80031c8 <__ssputs_r+0x80>
 8003162:	6825      	ldr	r5, [r4, #0]
 8003164:	6909      	ldr	r1, [r1, #16]
 8003166:	3301      	adds	r3, #1
 8003168:	eba5 0901 	sub.w	r9, r5, r1
 800316c:	6965      	ldr	r5, [r4, #20]
 800316e:	444b      	add	r3, r9
 8003170:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003174:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003178:	106d      	asrs	r5, r5, #1
 800317a:	429d      	cmp	r5, r3
 800317c:	bf38      	it	cc
 800317e:	461d      	movcc	r5, r3
 8003180:	0553      	lsls	r3, r2, #21
 8003182:	d531      	bpl.n	80031e8 <__ssputs_r+0xa0>
 8003184:	4629      	mov	r1, r5
 8003186:	f7ff ff6b 	bl	8003060 <_malloc_r>
 800318a:	4606      	mov	r6, r0
 800318c:	b950      	cbnz	r0, 80031a4 <__ssputs_r+0x5c>
 800318e:	230c      	movs	r3, #12
 8003190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003194:	f8ca 3000 	str.w	r3, [sl]
 8003198:	89a3      	ldrh	r3, [r4, #12]
 800319a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800319e:	81a3      	strh	r3, [r4, #12]
 80031a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a4:	464a      	mov	r2, r9
 80031a6:	6921      	ldr	r1, [r4, #16]
 80031a8:	f000 fe92 	bl	8003ed0 <memcpy>
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b6:	81a3      	strh	r3, [r4, #12]
 80031b8:	6126      	str	r6, [r4, #16]
 80031ba:	444e      	add	r6, r9
 80031bc:	6026      	str	r6, [r4, #0]
 80031be:	463e      	mov	r6, r7
 80031c0:	6165      	str	r5, [r4, #20]
 80031c2:	eba5 0509 	sub.w	r5, r5, r9
 80031c6:	60a5      	str	r5, [r4, #8]
 80031c8:	42be      	cmp	r6, r7
 80031ca:	d900      	bls.n	80031ce <__ssputs_r+0x86>
 80031cc:	463e      	mov	r6, r7
 80031ce:	4632      	mov	r2, r6
 80031d0:	4641      	mov	r1, r8
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	f000 fe8a 	bl	8003eec <memmove>
 80031d8:	68a3      	ldr	r3, [r4, #8]
 80031da:	2000      	movs	r0, #0
 80031dc:	1b9b      	subs	r3, r3, r6
 80031de:	60a3      	str	r3, [r4, #8]
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	4433      	add	r3, r6
 80031e4:	6023      	str	r3, [r4, #0]
 80031e6:	e7db      	b.n	80031a0 <__ssputs_r+0x58>
 80031e8:	462a      	mov	r2, r5
 80031ea:	f000 feed 	bl	8003fc8 <_realloc_r>
 80031ee:	4606      	mov	r6, r0
 80031f0:	2800      	cmp	r0, #0
 80031f2:	d1e1      	bne.n	80031b8 <__ssputs_r+0x70>
 80031f4:	4650      	mov	r0, sl
 80031f6:	6921      	ldr	r1, [r4, #16]
 80031f8:	f000 fe9e 	bl	8003f38 <_free_r>
 80031fc:	e7c7      	b.n	800318e <__ssputs_r+0x46>
	...

08003200 <_svfiprintf_r>:
 8003200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003204:	4698      	mov	r8, r3
 8003206:	898b      	ldrh	r3, [r1, #12]
 8003208:	4607      	mov	r7, r0
 800320a:	061b      	lsls	r3, r3, #24
 800320c:	460d      	mov	r5, r1
 800320e:	4614      	mov	r4, r2
 8003210:	b09d      	sub	sp, #116	; 0x74
 8003212:	d50e      	bpl.n	8003232 <_svfiprintf_r+0x32>
 8003214:	690b      	ldr	r3, [r1, #16]
 8003216:	b963      	cbnz	r3, 8003232 <_svfiprintf_r+0x32>
 8003218:	2140      	movs	r1, #64	; 0x40
 800321a:	f7ff ff21 	bl	8003060 <_malloc_r>
 800321e:	6028      	str	r0, [r5, #0]
 8003220:	6128      	str	r0, [r5, #16]
 8003222:	b920      	cbnz	r0, 800322e <_svfiprintf_r+0x2e>
 8003224:	230c      	movs	r3, #12
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800322c:	e0d1      	b.n	80033d2 <_svfiprintf_r+0x1d2>
 800322e:	2340      	movs	r3, #64	; 0x40
 8003230:	616b      	str	r3, [r5, #20]
 8003232:	2300      	movs	r3, #0
 8003234:	9309      	str	r3, [sp, #36]	; 0x24
 8003236:	2320      	movs	r3, #32
 8003238:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800323c:	2330      	movs	r3, #48	; 0x30
 800323e:	f04f 0901 	mov.w	r9, #1
 8003242:	f8cd 800c 	str.w	r8, [sp, #12]
 8003246:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80033ec <_svfiprintf_r+0x1ec>
 800324a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800324e:	4623      	mov	r3, r4
 8003250:	469a      	mov	sl, r3
 8003252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003256:	b10a      	cbz	r2, 800325c <_svfiprintf_r+0x5c>
 8003258:	2a25      	cmp	r2, #37	; 0x25
 800325a:	d1f9      	bne.n	8003250 <_svfiprintf_r+0x50>
 800325c:	ebba 0b04 	subs.w	fp, sl, r4
 8003260:	d00b      	beq.n	800327a <_svfiprintf_r+0x7a>
 8003262:	465b      	mov	r3, fp
 8003264:	4622      	mov	r2, r4
 8003266:	4629      	mov	r1, r5
 8003268:	4638      	mov	r0, r7
 800326a:	f7ff ff6d 	bl	8003148 <__ssputs_r>
 800326e:	3001      	adds	r0, #1
 8003270:	f000 80aa 	beq.w	80033c8 <_svfiprintf_r+0x1c8>
 8003274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003276:	445a      	add	r2, fp
 8003278:	9209      	str	r2, [sp, #36]	; 0x24
 800327a:	f89a 3000 	ldrb.w	r3, [sl]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80a2 	beq.w	80033c8 <_svfiprintf_r+0x1c8>
 8003284:	2300      	movs	r3, #0
 8003286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800328a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800328e:	f10a 0a01 	add.w	sl, sl, #1
 8003292:	9304      	str	r3, [sp, #16]
 8003294:	9307      	str	r3, [sp, #28]
 8003296:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800329a:	931a      	str	r3, [sp, #104]	; 0x68
 800329c:	4654      	mov	r4, sl
 800329e:	2205      	movs	r2, #5
 80032a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032a4:	4851      	ldr	r0, [pc, #324]	; (80033ec <_svfiprintf_r+0x1ec>)
 80032a6:	f000 fe05 	bl	8003eb4 <memchr>
 80032aa:	9a04      	ldr	r2, [sp, #16]
 80032ac:	b9d8      	cbnz	r0, 80032e6 <_svfiprintf_r+0xe6>
 80032ae:	06d0      	lsls	r0, r2, #27
 80032b0:	bf44      	itt	mi
 80032b2:	2320      	movmi	r3, #32
 80032b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032b8:	0711      	lsls	r1, r2, #28
 80032ba:	bf44      	itt	mi
 80032bc:	232b      	movmi	r3, #43	; 0x2b
 80032be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032c2:	f89a 3000 	ldrb.w	r3, [sl]
 80032c6:	2b2a      	cmp	r3, #42	; 0x2a
 80032c8:	d015      	beq.n	80032f6 <_svfiprintf_r+0xf6>
 80032ca:	4654      	mov	r4, sl
 80032cc:	2000      	movs	r0, #0
 80032ce:	f04f 0c0a 	mov.w	ip, #10
 80032d2:	9a07      	ldr	r2, [sp, #28]
 80032d4:	4621      	mov	r1, r4
 80032d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032da:	3b30      	subs	r3, #48	; 0x30
 80032dc:	2b09      	cmp	r3, #9
 80032de:	d94e      	bls.n	800337e <_svfiprintf_r+0x17e>
 80032e0:	b1b0      	cbz	r0, 8003310 <_svfiprintf_r+0x110>
 80032e2:	9207      	str	r2, [sp, #28]
 80032e4:	e014      	b.n	8003310 <_svfiprintf_r+0x110>
 80032e6:	eba0 0308 	sub.w	r3, r0, r8
 80032ea:	fa09 f303 	lsl.w	r3, r9, r3
 80032ee:	4313      	orrs	r3, r2
 80032f0:	46a2      	mov	sl, r4
 80032f2:	9304      	str	r3, [sp, #16]
 80032f4:	e7d2      	b.n	800329c <_svfiprintf_r+0x9c>
 80032f6:	9b03      	ldr	r3, [sp, #12]
 80032f8:	1d19      	adds	r1, r3, #4
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	9103      	str	r1, [sp, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	bfbb      	ittet	lt
 8003302:	425b      	neglt	r3, r3
 8003304:	f042 0202 	orrlt.w	r2, r2, #2
 8003308:	9307      	strge	r3, [sp, #28]
 800330a:	9307      	strlt	r3, [sp, #28]
 800330c:	bfb8      	it	lt
 800330e:	9204      	strlt	r2, [sp, #16]
 8003310:	7823      	ldrb	r3, [r4, #0]
 8003312:	2b2e      	cmp	r3, #46	; 0x2e
 8003314:	d10c      	bne.n	8003330 <_svfiprintf_r+0x130>
 8003316:	7863      	ldrb	r3, [r4, #1]
 8003318:	2b2a      	cmp	r3, #42	; 0x2a
 800331a:	d135      	bne.n	8003388 <_svfiprintf_r+0x188>
 800331c:	9b03      	ldr	r3, [sp, #12]
 800331e:	3402      	adds	r4, #2
 8003320:	1d1a      	adds	r2, r3, #4
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	9203      	str	r2, [sp, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	bfb8      	it	lt
 800332a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800332e:	9305      	str	r3, [sp, #20]
 8003330:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80033f0 <_svfiprintf_r+0x1f0>
 8003334:	2203      	movs	r2, #3
 8003336:	4650      	mov	r0, sl
 8003338:	7821      	ldrb	r1, [r4, #0]
 800333a:	f000 fdbb 	bl	8003eb4 <memchr>
 800333e:	b140      	cbz	r0, 8003352 <_svfiprintf_r+0x152>
 8003340:	2340      	movs	r3, #64	; 0x40
 8003342:	eba0 000a 	sub.w	r0, r0, sl
 8003346:	fa03 f000 	lsl.w	r0, r3, r0
 800334a:	9b04      	ldr	r3, [sp, #16]
 800334c:	3401      	adds	r4, #1
 800334e:	4303      	orrs	r3, r0
 8003350:	9304      	str	r3, [sp, #16]
 8003352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003356:	2206      	movs	r2, #6
 8003358:	4826      	ldr	r0, [pc, #152]	; (80033f4 <_svfiprintf_r+0x1f4>)
 800335a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800335e:	f000 fda9 	bl	8003eb4 <memchr>
 8003362:	2800      	cmp	r0, #0
 8003364:	d038      	beq.n	80033d8 <_svfiprintf_r+0x1d8>
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <_svfiprintf_r+0x1f8>)
 8003368:	bb1b      	cbnz	r3, 80033b2 <_svfiprintf_r+0x1b2>
 800336a:	9b03      	ldr	r3, [sp, #12]
 800336c:	3307      	adds	r3, #7
 800336e:	f023 0307 	bic.w	r3, r3, #7
 8003372:	3308      	adds	r3, #8
 8003374:	9303      	str	r3, [sp, #12]
 8003376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003378:	4433      	add	r3, r6
 800337a:	9309      	str	r3, [sp, #36]	; 0x24
 800337c:	e767      	b.n	800324e <_svfiprintf_r+0x4e>
 800337e:	460c      	mov	r4, r1
 8003380:	2001      	movs	r0, #1
 8003382:	fb0c 3202 	mla	r2, ip, r2, r3
 8003386:	e7a5      	b.n	80032d4 <_svfiprintf_r+0xd4>
 8003388:	2300      	movs	r3, #0
 800338a:	f04f 0c0a 	mov.w	ip, #10
 800338e:	4619      	mov	r1, r3
 8003390:	3401      	adds	r4, #1
 8003392:	9305      	str	r3, [sp, #20]
 8003394:	4620      	mov	r0, r4
 8003396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800339a:	3a30      	subs	r2, #48	; 0x30
 800339c:	2a09      	cmp	r2, #9
 800339e:	d903      	bls.n	80033a8 <_svfiprintf_r+0x1a8>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0c5      	beq.n	8003330 <_svfiprintf_r+0x130>
 80033a4:	9105      	str	r1, [sp, #20]
 80033a6:	e7c3      	b.n	8003330 <_svfiprintf_r+0x130>
 80033a8:	4604      	mov	r4, r0
 80033aa:	2301      	movs	r3, #1
 80033ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80033b0:	e7f0      	b.n	8003394 <_svfiprintf_r+0x194>
 80033b2:	ab03      	add	r3, sp, #12
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	462a      	mov	r2, r5
 80033b8:	4638      	mov	r0, r7
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <_svfiprintf_r+0x1fc>)
 80033bc:	a904      	add	r1, sp, #16
 80033be:	f3af 8000 	nop.w
 80033c2:	1c42      	adds	r2, r0, #1
 80033c4:	4606      	mov	r6, r0
 80033c6:	d1d6      	bne.n	8003376 <_svfiprintf_r+0x176>
 80033c8:	89ab      	ldrh	r3, [r5, #12]
 80033ca:	065b      	lsls	r3, r3, #25
 80033cc:	f53f af2c 	bmi.w	8003228 <_svfiprintf_r+0x28>
 80033d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033d2:	b01d      	add	sp, #116	; 0x74
 80033d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033d8:	ab03      	add	r3, sp, #12
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	462a      	mov	r2, r5
 80033de:	4638      	mov	r0, r7
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <_svfiprintf_r+0x1fc>)
 80033e2:	a904      	add	r1, sp, #16
 80033e4:	f000 f9d4 	bl	8003790 <_printf_i>
 80033e8:	e7eb      	b.n	80033c2 <_svfiprintf_r+0x1c2>
 80033ea:	bf00      	nop
 80033ec:	0800417c 	.word	0x0800417c
 80033f0:	08004182 	.word	0x08004182
 80033f4:	08004186 	.word	0x08004186
 80033f8:	00000000 	.word	0x00000000
 80033fc:	08003149 	.word	0x08003149

08003400 <__sfputc_r>:
 8003400:	6893      	ldr	r3, [r2, #8]
 8003402:	b410      	push	{r4}
 8003404:	3b01      	subs	r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	6093      	str	r3, [r2, #8]
 800340a:	da07      	bge.n	800341c <__sfputc_r+0x1c>
 800340c:	6994      	ldr	r4, [r2, #24]
 800340e:	42a3      	cmp	r3, r4
 8003410:	db01      	blt.n	8003416 <__sfputc_r+0x16>
 8003412:	290a      	cmp	r1, #10
 8003414:	d102      	bne.n	800341c <__sfputc_r+0x1c>
 8003416:	bc10      	pop	{r4}
 8003418:	f000 bb34 	b.w	8003a84 <__swbuf_r>
 800341c:	6813      	ldr	r3, [r2, #0]
 800341e:	1c58      	adds	r0, r3, #1
 8003420:	6010      	str	r0, [r2, #0]
 8003422:	7019      	strb	r1, [r3, #0]
 8003424:	4608      	mov	r0, r1
 8003426:	bc10      	pop	{r4}
 8003428:	4770      	bx	lr

0800342a <__sfputs_r>:
 800342a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342c:	4606      	mov	r6, r0
 800342e:	460f      	mov	r7, r1
 8003430:	4614      	mov	r4, r2
 8003432:	18d5      	adds	r5, r2, r3
 8003434:	42ac      	cmp	r4, r5
 8003436:	d101      	bne.n	800343c <__sfputs_r+0x12>
 8003438:	2000      	movs	r0, #0
 800343a:	e007      	b.n	800344c <__sfputs_r+0x22>
 800343c:	463a      	mov	r2, r7
 800343e:	4630      	mov	r0, r6
 8003440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003444:	f7ff ffdc 	bl	8003400 <__sfputc_r>
 8003448:	1c43      	adds	r3, r0, #1
 800344a:	d1f3      	bne.n	8003434 <__sfputs_r+0xa>
 800344c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003450 <_vfiprintf_r>:
 8003450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003454:	460d      	mov	r5, r1
 8003456:	4614      	mov	r4, r2
 8003458:	4698      	mov	r8, r3
 800345a:	4606      	mov	r6, r0
 800345c:	b09d      	sub	sp, #116	; 0x74
 800345e:	b118      	cbz	r0, 8003468 <_vfiprintf_r+0x18>
 8003460:	6983      	ldr	r3, [r0, #24]
 8003462:	b90b      	cbnz	r3, 8003468 <_vfiprintf_r+0x18>
 8003464:	f7ff fd3c 	bl	8002ee0 <__sinit>
 8003468:	4b89      	ldr	r3, [pc, #548]	; (8003690 <_vfiprintf_r+0x240>)
 800346a:	429d      	cmp	r5, r3
 800346c:	d11b      	bne.n	80034a6 <_vfiprintf_r+0x56>
 800346e:	6875      	ldr	r5, [r6, #4]
 8003470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003472:	07d9      	lsls	r1, r3, #31
 8003474:	d405      	bmi.n	8003482 <_vfiprintf_r+0x32>
 8003476:	89ab      	ldrh	r3, [r5, #12]
 8003478:	059a      	lsls	r2, r3, #22
 800347a:	d402      	bmi.n	8003482 <_vfiprintf_r+0x32>
 800347c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800347e:	f7ff fdcd 	bl	800301c <__retarget_lock_acquire_recursive>
 8003482:	89ab      	ldrh	r3, [r5, #12]
 8003484:	071b      	lsls	r3, r3, #28
 8003486:	d501      	bpl.n	800348c <_vfiprintf_r+0x3c>
 8003488:	692b      	ldr	r3, [r5, #16]
 800348a:	b9eb      	cbnz	r3, 80034c8 <_vfiprintf_r+0x78>
 800348c:	4629      	mov	r1, r5
 800348e:	4630      	mov	r0, r6
 8003490:	f000 fb5c 	bl	8003b4c <__swsetup_r>
 8003494:	b1c0      	cbz	r0, 80034c8 <_vfiprintf_r+0x78>
 8003496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003498:	07dc      	lsls	r4, r3, #31
 800349a:	d50e      	bpl.n	80034ba <_vfiprintf_r+0x6a>
 800349c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034a0:	b01d      	add	sp, #116	; 0x74
 80034a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034a6:	4b7b      	ldr	r3, [pc, #492]	; (8003694 <_vfiprintf_r+0x244>)
 80034a8:	429d      	cmp	r5, r3
 80034aa:	d101      	bne.n	80034b0 <_vfiprintf_r+0x60>
 80034ac:	68b5      	ldr	r5, [r6, #8]
 80034ae:	e7df      	b.n	8003470 <_vfiprintf_r+0x20>
 80034b0:	4b79      	ldr	r3, [pc, #484]	; (8003698 <_vfiprintf_r+0x248>)
 80034b2:	429d      	cmp	r5, r3
 80034b4:	bf08      	it	eq
 80034b6:	68f5      	ldreq	r5, [r6, #12]
 80034b8:	e7da      	b.n	8003470 <_vfiprintf_r+0x20>
 80034ba:	89ab      	ldrh	r3, [r5, #12]
 80034bc:	0598      	lsls	r0, r3, #22
 80034be:	d4ed      	bmi.n	800349c <_vfiprintf_r+0x4c>
 80034c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034c2:	f7ff fdac 	bl	800301e <__retarget_lock_release_recursive>
 80034c6:	e7e9      	b.n	800349c <_vfiprintf_r+0x4c>
 80034c8:	2300      	movs	r3, #0
 80034ca:	9309      	str	r3, [sp, #36]	; 0x24
 80034cc:	2320      	movs	r3, #32
 80034ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034d2:	2330      	movs	r3, #48	; 0x30
 80034d4:	f04f 0901 	mov.w	r9, #1
 80034d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80034dc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800369c <_vfiprintf_r+0x24c>
 80034e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034e4:	4623      	mov	r3, r4
 80034e6:	469a      	mov	sl, r3
 80034e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034ec:	b10a      	cbz	r2, 80034f2 <_vfiprintf_r+0xa2>
 80034ee:	2a25      	cmp	r2, #37	; 0x25
 80034f0:	d1f9      	bne.n	80034e6 <_vfiprintf_r+0x96>
 80034f2:	ebba 0b04 	subs.w	fp, sl, r4
 80034f6:	d00b      	beq.n	8003510 <_vfiprintf_r+0xc0>
 80034f8:	465b      	mov	r3, fp
 80034fa:	4622      	mov	r2, r4
 80034fc:	4629      	mov	r1, r5
 80034fe:	4630      	mov	r0, r6
 8003500:	f7ff ff93 	bl	800342a <__sfputs_r>
 8003504:	3001      	adds	r0, #1
 8003506:	f000 80aa 	beq.w	800365e <_vfiprintf_r+0x20e>
 800350a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800350c:	445a      	add	r2, fp
 800350e:	9209      	str	r2, [sp, #36]	; 0x24
 8003510:	f89a 3000 	ldrb.w	r3, [sl]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80a2 	beq.w	800365e <_vfiprintf_r+0x20e>
 800351a:	2300      	movs	r3, #0
 800351c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003524:	f10a 0a01 	add.w	sl, sl, #1
 8003528:	9304      	str	r3, [sp, #16]
 800352a:	9307      	str	r3, [sp, #28]
 800352c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003530:	931a      	str	r3, [sp, #104]	; 0x68
 8003532:	4654      	mov	r4, sl
 8003534:	2205      	movs	r2, #5
 8003536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800353a:	4858      	ldr	r0, [pc, #352]	; (800369c <_vfiprintf_r+0x24c>)
 800353c:	f000 fcba 	bl	8003eb4 <memchr>
 8003540:	9a04      	ldr	r2, [sp, #16]
 8003542:	b9d8      	cbnz	r0, 800357c <_vfiprintf_r+0x12c>
 8003544:	06d1      	lsls	r1, r2, #27
 8003546:	bf44      	itt	mi
 8003548:	2320      	movmi	r3, #32
 800354a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800354e:	0713      	lsls	r3, r2, #28
 8003550:	bf44      	itt	mi
 8003552:	232b      	movmi	r3, #43	; 0x2b
 8003554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003558:	f89a 3000 	ldrb.w	r3, [sl]
 800355c:	2b2a      	cmp	r3, #42	; 0x2a
 800355e:	d015      	beq.n	800358c <_vfiprintf_r+0x13c>
 8003560:	4654      	mov	r4, sl
 8003562:	2000      	movs	r0, #0
 8003564:	f04f 0c0a 	mov.w	ip, #10
 8003568:	9a07      	ldr	r2, [sp, #28]
 800356a:	4621      	mov	r1, r4
 800356c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003570:	3b30      	subs	r3, #48	; 0x30
 8003572:	2b09      	cmp	r3, #9
 8003574:	d94e      	bls.n	8003614 <_vfiprintf_r+0x1c4>
 8003576:	b1b0      	cbz	r0, 80035a6 <_vfiprintf_r+0x156>
 8003578:	9207      	str	r2, [sp, #28]
 800357a:	e014      	b.n	80035a6 <_vfiprintf_r+0x156>
 800357c:	eba0 0308 	sub.w	r3, r0, r8
 8003580:	fa09 f303 	lsl.w	r3, r9, r3
 8003584:	4313      	orrs	r3, r2
 8003586:	46a2      	mov	sl, r4
 8003588:	9304      	str	r3, [sp, #16]
 800358a:	e7d2      	b.n	8003532 <_vfiprintf_r+0xe2>
 800358c:	9b03      	ldr	r3, [sp, #12]
 800358e:	1d19      	adds	r1, r3, #4
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	9103      	str	r1, [sp, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	bfbb      	ittet	lt
 8003598:	425b      	neglt	r3, r3
 800359a:	f042 0202 	orrlt.w	r2, r2, #2
 800359e:	9307      	strge	r3, [sp, #28]
 80035a0:	9307      	strlt	r3, [sp, #28]
 80035a2:	bfb8      	it	lt
 80035a4:	9204      	strlt	r2, [sp, #16]
 80035a6:	7823      	ldrb	r3, [r4, #0]
 80035a8:	2b2e      	cmp	r3, #46	; 0x2e
 80035aa:	d10c      	bne.n	80035c6 <_vfiprintf_r+0x176>
 80035ac:	7863      	ldrb	r3, [r4, #1]
 80035ae:	2b2a      	cmp	r3, #42	; 0x2a
 80035b0:	d135      	bne.n	800361e <_vfiprintf_r+0x1ce>
 80035b2:	9b03      	ldr	r3, [sp, #12]
 80035b4:	3402      	adds	r4, #2
 80035b6:	1d1a      	adds	r2, r3, #4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	9203      	str	r2, [sp, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bfb8      	it	lt
 80035c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80035c4:	9305      	str	r3, [sp, #20]
 80035c6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80036a0 <_vfiprintf_r+0x250>
 80035ca:	2203      	movs	r2, #3
 80035cc:	4650      	mov	r0, sl
 80035ce:	7821      	ldrb	r1, [r4, #0]
 80035d0:	f000 fc70 	bl	8003eb4 <memchr>
 80035d4:	b140      	cbz	r0, 80035e8 <_vfiprintf_r+0x198>
 80035d6:	2340      	movs	r3, #64	; 0x40
 80035d8:	eba0 000a 	sub.w	r0, r0, sl
 80035dc:	fa03 f000 	lsl.w	r0, r3, r0
 80035e0:	9b04      	ldr	r3, [sp, #16]
 80035e2:	3401      	adds	r4, #1
 80035e4:	4303      	orrs	r3, r0
 80035e6:	9304      	str	r3, [sp, #16]
 80035e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035ec:	2206      	movs	r2, #6
 80035ee:	482d      	ldr	r0, [pc, #180]	; (80036a4 <_vfiprintf_r+0x254>)
 80035f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035f4:	f000 fc5e 	bl	8003eb4 <memchr>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d03f      	beq.n	800367c <_vfiprintf_r+0x22c>
 80035fc:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <_vfiprintf_r+0x258>)
 80035fe:	bb1b      	cbnz	r3, 8003648 <_vfiprintf_r+0x1f8>
 8003600:	9b03      	ldr	r3, [sp, #12]
 8003602:	3307      	adds	r3, #7
 8003604:	f023 0307 	bic.w	r3, r3, #7
 8003608:	3308      	adds	r3, #8
 800360a:	9303      	str	r3, [sp, #12]
 800360c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800360e:	443b      	add	r3, r7
 8003610:	9309      	str	r3, [sp, #36]	; 0x24
 8003612:	e767      	b.n	80034e4 <_vfiprintf_r+0x94>
 8003614:	460c      	mov	r4, r1
 8003616:	2001      	movs	r0, #1
 8003618:	fb0c 3202 	mla	r2, ip, r2, r3
 800361c:	e7a5      	b.n	800356a <_vfiprintf_r+0x11a>
 800361e:	2300      	movs	r3, #0
 8003620:	f04f 0c0a 	mov.w	ip, #10
 8003624:	4619      	mov	r1, r3
 8003626:	3401      	adds	r4, #1
 8003628:	9305      	str	r3, [sp, #20]
 800362a:	4620      	mov	r0, r4
 800362c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003630:	3a30      	subs	r2, #48	; 0x30
 8003632:	2a09      	cmp	r2, #9
 8003634:	d903      	bls.n	800363e <_vfiprintf_r+0x1ee>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0c5      	beq.n	80035c6 <_vfiprintf_r+0x176>
 800363a:	9105      	str	r1, [sp, #20]
 800363c:	e7c3      	b.n	80035c6 <_vfiprintf_r+0x176>
 800363e:	4604      	mov	r4, r0
 8003640:	2301      	movs	r3, #1
 8003642:	fb0c 2101 	mla	r1, ip, r1, r2
 8003646:	e7f0      	b.n	800362a <_vfiprintf_r+0x1da>
 8003648:	ab03      	add	r3, sp, #12
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	462a      	mov	r2, r5
 800364e:	4630      	mov	r0, r6
 8003650:	4b16      	ldr	r3, [pc, #88]	; (80036ac <_vfiprintf_r+0x25c>)
 8003652:	a904      	add	r1, sp, #16
 8003654:	f3af 8000 	nop.w
 8003658:	4607      	mov	r7, r0
 800365a:	1c78      	adds	r0, r7, #1
 800365c:	d1d6      	bne.n	800360c <_vfiprintf_r+0x1bc>
 800365e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003660:	07d9      	lsls	r1, r3, #31
 8003662:	d405      	bmi.n	8003670 <_vfiprintf_r+0x220>
 8003664:	89ab      	ldrh	r3, [r5, #12]
 8003666:	059a      	lsls	r2, r3, #22
 8003668:	d402      	bmi.n	8003670 <_vfiprintf_r+0x220>
 800366a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800366c:	f7ff fcd7 	bl	800301e <__retarget_lock_release_recursive>
 8003670:	89ab      	ldrh	r3, [r5, #12]
 8003672:	065b      	lsls	r3, r3, #25
 8003674:	f53f af12 	bmi.w	800349c <_vfiprintf_r+0x4c>
 8003678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800367a:	e711      	b.n	80034a0 <_vfiprintf_r+0x50>
 800367c:	ab03      	add	r3, sp, #12
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	462a      	mov	r2, r5
 8003682:	4630      	mov	r0, r6
 8003684:	4b09      	ldr	r3, [pc, #36]	; (80036ac <_vfiprintf_r+0x25c>)
 8003686:	a904      	add	r1, sp, #16
 8003688:	f000 f882 	bl	8003790 <_printf_i>
 800368c:	e7e4      	b.n	8003658 <_vfiprintf_r+0x208>
 800368e:	bf00      	nop
 8003690:	0800413c 	.word	0x0800413c
 8003694:	0800415c 	.word	0x0800415c
 8003698:	0800411c 	.word	0x0800411c
 800369c:	0800417c 	.word	0x0800417c
 80036a0:	08004182 	.word	0x08004182
 80036a4:	08004186 	.word	0x08004186
 80036a8:	00000000 	.word	0x00000000
 80036ac:	0800342b 	.word	0x0800342b

080036b0 <_printf_common>:
 80036b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036b4:	4616      	mov	r6, r2
 80036b6:	4699      	mov	r9, r3
 80036b8:	688a      	ldr	r2, [r1, #8]
 80036ba:	690b      	ldr	r3, [r1, #16]
 80036bc:	4607      	mov	r7, r0
 80036be:	4293      	cmp	r3, r2
 80036c0:	bfb8      	it	lt
 80036c2:	4613      	movlt	r3, r2
 80036c4:	6033      	str	r3, [r6, #0]
 80036c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036ca:	460c      	mov	r4, r1
 80036cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036d0:	b10a      	cbz	r2, 80036d6 <_printf_common+0x26>
 80036d2:	3301      	adds	r3, #1
 80036d4:	6033      	str	r3, [r6, #0]
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	0699      	lsls	r1, r3, #26
 80036da:	bf42      	ittt	mi
 80036dc:	6833      	ldrmi	r3, [r6, #0]
 80036de:	3302      	addmi	r3, #2
 80036e0:	6033      	strmi	r3, [r6, #0]
 80036e2:	6825      	ldr	r5, [r4, #0]
 80036e4:	f015 0506 	ands.w	r5, r5, #6
 80036e8:	d106      	bne.n	80036f8 <_printf_common+0x48>
 80036ea:	f104 0a19 	add.w	sl, r4, #25
 80036ee:	68e3      	ldr	r3, [r4, #12]
 80036f0:	6832      	ldr	r2, [r6, #0]
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	42ab      	cmp	r3, r5
 80036f6:	dc28      	bgt.n	800374a <_printf_common+0x9a>
 80036f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036fc:	1e13      	subs	r3, r2, #0
 80036fe:	6822      	ldr	r2, [r4, #0]
 8003700:	bf18      	it	ne
 8003702:	2301      	movne	r3, #1
 8003704:	0692      	lsls	r2, r2, #26
 8003706:	d42d      	bmi.n	8003764 <_printf_common+0xb4>
 8003708:	4649      	mov	r1, r9
 800370a:	4638      	mov	r0, r7
 800370c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003710:	47c0      	blx	r8
 8003712:	3001      	adds	r0, #1
 8003714:	d020      	beq.n	8003758 <_printf_common+0xa8>
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	68e5      	ldr	r5, [r4, #12]
 800371a:	f003 0306 	and.w	r3, r3, #6
 800371e:	2b04      	cmp	r3, #4
 8003720:	bf18      	it	ne
 8003722:	2500      	movne	r5, #0
 8003724:	6832      	ldr	r2, [r6, #0]
 8003726:	f04f 0600 	mov.w	r6, #0
 800372a:	68a3      	ldr	r3, [r4, #8]
 800372c:	bf08      	it	eq
 800372e:	1aad      	subeq	r5, r5, r2
 8003730:	6922      	ldr	r2, [r4, #16]
 8003732:	bf08      	it	eq
 8003734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003738:	4293      	cmp	r3, r2
 800373a:	bfc4      	itt	gt
 800373c:	1a9b      	subgt	r3, r3, r2
 800373e:	18ed      	addgt	r5, r5, r3
 8003740:	341a      	adds	r4, #26
 8003742:	42b5      	cmp	r5, r6
 8003744:	d11a      	bne.n	800377c <_printf_common+0xcc>
 8003746:	2000      	movs	r0, #0
 8003748:	e008      	b.n	800375c <_printf_common+0xac>
 800374a:	2301      	movs	r3, #1
 800374c:	4652      	mov	r2, sl
 800374e:	4649      	mov	r1, r9
 8003750:	4638      	mov	r0, r7
 8003752:	47c0      	blx	r8
 8003754:	3001      	adds	r0, #1
 8003756:	d103      	bne.n	8003760 <_printf_common+0xb0>
 8003758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800375c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003760:	3501      	adds	r5, #1
 8003762:	e7c4      	b.n	80036ee <_printf_common+0x3e>
 8003764:	2030      	movs	r0, #48	; 0x30
 8003766:	18e1      	adds	r1, r4, r3
 8003768:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003772:	4422      	add	r2, r4
 8003774:	3302      	adds	r3, #2
 8003776:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800377a:	e7c5      	b.n	8003708 <_printf_common+0x58>
 800377c:	2301      	movs	r3, #1
 800377e:	4622      	mov	r2, r4
 8003780:	4649      	mov	r1, r9
 8003782:	4638      	mov	r0, r7
 8003784:	47c0      	blx	r8
 8003786:	3001      	adds	r0, #1
 8003788:	d0e6      	beq.n	8003758 <_printf_common+0xa8>
 800378a:	3601      	adds	r6, #1
 800378c:	e7d9      	b.n	8003742 <_printf_common+0x92>
	...

08003790 <_printf_i>:
 8003790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003794:	7e0f      	ldrb	r7, [r1, #24]
 8003796:	4691      	mov	r9, r2
 8003798:	2f78      	cmp	r7, #120	; 0x78
 800379a:	4680      	mov	r8, r0
 800379c:	460c      	mov	r4, r1
 800379e:	469a      	mov	sl, r3
 80037a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037a6:	d807      	bhi.n	80037b8 <_printf_i+0x28>
 80037a8:	2f62      	cmp	r7, #98	; 0x62
 80037aa:	d80a      	bhi.n	80037c2 <_printf_i+0x32>
 80037ac:	2f00      	cmp	r7, #0
 80037ae:	f000 80d9 	beq.w	8003964 <_printf_i+0x1d4>
 80037b2:	2f58      	cmp	r7, #88	; 0x58
 80037b4:	f000 80a4 	beq.w	8003900 <_printf_i+0x170>
 80037b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037c0:	e03a      	b.n	8003838 <_printf_i+0xa8>
 80037c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037c6:	2b15      	cmp	r3, #21
 80037c8:	d8f6      	bhi.n	80037b8 <_printf_i+0x28>
 80037ca:	a101      	add	r1, pc, #4	; (adr r1, 80037d0 <_printf_i+0x40>)
 80037cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037d0:	08003829 	.word	0x08003829
 80037d4:	0800383d 	.word	0x0800383d
 80037d8:	080037b9 	.word	0x080037b9
 80037dc:	080037b9 	.word	0x080037b9
 80037e0:	080037b9 	.word	0x080037b9
 80037e4:	080037b9 	.word	0x080037b9
 80037e8:	0800383d 	.word	0x0800383d
 80037ec:	080037b9 	.word	0x080037b9
 80037f0:	080037b9 	.word	0x080037b9
 80037f4:	080037b9 	.word	0x080037b9
 80037f8:	080037b9 	.word	0x080037b9
 80037fc:	0800394b 	.word	0x0800394b
 8003800:	0800386d 	.word	0x0800386d
 8003804:	0800392d 	.word	0x0800392d
 8003808:	080037b9 	.word	0x080037b9
 800380c:	080037b9 	.word	0x080037b9
 8003810:	0800396d 	.word	0x0800396d
 8003814:	080037b9 	.word	0x080037b9
 8003818:	0800386d 	.word	0x0800386d
 800381c:	080037b9 	.word	0x080037b9
 8003820:	080037b9 	.word	0x080037b9
 8003824:	08003935 	.word	0x08003935
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	1d1a      	adds	r2, r3, #4
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	602a      	str	r2, [r5, #0]
 8003830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003838:	2301      	movs	r3, #1
 800383a:	e0a4      	b.n	8003986 <_printf_i+0x1f6>
 800383c:	6820      	ldr	r0, [r4, #0]
 800383e:	6829      	ldr	r1, [r5, #0]
 8003840:	0606      	lsls	r6, r0, #24
 8003842:	f101 0304 	add.w	r3, r1, #4
 8003846:	d50a      	bpl.n	800385e <_printf_i+0xce>
 8003848:	680e      	ldr	r6, [r1, #0]
 800384a:	602b      	str	r3, [r5, #0]
 800384c:	2e00      	cmp	r6, #0
 800384e:	da03      	bge.n	8003858 <_printf_i+0xc8>
 8003850:	232d      	movs	r3, #45	; 0x2d
 8003852:	4276      	negs	r6, r6
 8003854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003858:	230a      	movs	r3, #10
 800385a:	485e      	ldr	r0, [pc, #376]	; (80039d4 <_printf_i+0x244>)
 800385c:	e019      	b.n	8003892 <_printf_i+0x102>
 800385e:	680e      	ldr	r6, [r1, #0]
 8003860:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003864:	602b      	str	r3, [r5, #0]
 8003866:	bf18      	it	ne
 8003868:	b236      	sxthne	r6, r6
 800386a:	e7ef      	b.n	800384c <_printf_i+0xbc>
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	6820      	ldr	r0, [r4, #0]
 8003870:	1d19      	adds	r1, r3, #4
 8003872:	6029      	str	r1, [r5, #0]
 8003874:	0601      	lsls	r1, r0, #24
 8003876:	d501      	bpl.n	800387c <_printf_i+0xec>
 8003878:	681e      	ldr	r6, [r3, #0]
 800387a:	e002      	b.n	8003882 <_printf_i+0xf2>
 800387c:	0646      	lsls	r6, r0, #25
 800387e:	d5fb      	bpl.n	8003878 <_printf_i+0xe8>
 8003880:	881e      	ldrh	r6, [r3, #0]
 8003882:	2f6f      	cmp	r7, #111	; 0x6f
 8003884:	bf0c      	ite	eq
 8003886:	2308      	moveq	r3, #8
 8003888:	230a      	movne	r3, #10
 800388a:	4852      	ldr	r0, [pc, #328]	; (80039d4 <_printf_i+0x244>)
 800388c:	2100      	movs	r1, #0
 800388e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003892:	6865      	ldr	r5, [r4, #4]
 8003894:	2d00      	cmp	r5, #0
 8003896:	bfa8      	it	ge
 8003898:	6821      	ldrge	r1, [r4, #0]
 800389a:	60a5      	str	r5, [r4, #8]
 800389c:	bfa4      	itt	ge
 800389e:	f021 0104 	bicge.w	r1, r1, #4
 80038a2:	6021      	strge	r1, [r4, #0]
 80038a4:	b90e      	cbnz	r6, 80038aa <_printf_i+0x11a>
 80038a6:	2d00      	cmp	r5, #0
 80038a8:	d04d      	beq.n	8003946 <_printf_i+0x1b6>
 80038aa:	4615      	mov	r5, r2
 80038ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80038b0:	fb03 6711 	mls	r7, r3, r1, r6
 80038b4:	5dc7      	ldrb	r7, [r0, r7]
 80038b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038ba:	4637      	mov	r7, r6
 80038bc:	42bb      	cmp	r3, r7
 80038be:	460e      	mov	r6, r1
 80038c0:	d9f4      	bls.n	80038ac <_printf_i+0x11c>
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d10b      	bne.n	80038de <_printf_i+0x14e>
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	07de      	lsls	r6, r3, #31
 80038ca:	d508      	bpl.n	80038de <_printf_i+0x14e>
 80038cc:	6923      	ldr	r3, [r4, #16]
 80038ce:	6861      	ldr	r1, [r4, #4]
 80038d0:	4299      	cmp	r1, r3
 80038d2:	bfde      	ittt	le
 80038d4:	2330      	movle	r3, #48	; 0x30
 80038d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038da:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80038de:	1b52      	subs	r2, r2, r5
 80038e0:	6122      	str	r2, [r4, #16]
 80038e2:	464b      	mov	r3, r9
 80038e4:	4621      	mov	r1, r4
 80038e6:	4640      	mov	r0, r8
 80038e8:	f8cd a000 	str.w	sl, [sp]
 80038ec:	aa03      	add	r2, sp, #12
 80038ee:	f7ff fedf 	bl	80036b0 <_printf_common>
 80038f2:	3001      	adds	r0, #1
 80038f4:	d14c      	bne.n	8003990 <_printf_i+0x200>
 80038f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038fa:	b004      	add	sp, #16
 80038fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003900:	4834      	ldr	r0, [pc, #208]	; (80039d4 <_printf_i+0x244>)
 8003902:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003906:	6829      	ldr	r1, [r5, #0]
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	f851 6b04 	ldr.w	r6, [r1], #4
 800390e:	6029      	str	r1, [r5, #0]
 8003910:	061d      	lsls	r5, r3, #24
 8003912:	d514      	bpl.n	800393e <_printf_i+0x1ae>
 8003914:	07df      	lsls	r7, r3, #31
 8003916:	bf44      	itt	mi
 8003918:	f043 0320 	orrmi.w	r3, r3, #32
 800391c:	6023      	strmi	r3, [r4, #0]
 800391e:	b91e      	cbnz	r6, 8003928 <_printf_i+0x198>
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	f023 0320 	bic.w	r3, r3, #32
 8003926:	6023      	str	r3, [r4, #0]
 8003928:	2310      	movs	r3, #16
 800392a:	e7af      	b.n	800388c <_printf_i+0xfc>
 800392c:	6823      	ldr	r3, [r4, #0]
 800392e:	f043 0320 	orr.w	r3, r3, #32
 8003932:	6023      	str	r3, [r4, #0]
 8003934:	2378      	movs	r3, #120	; 0x78
 8003936:	4828      	ldr	r0, [pc, #160]	; (80039d8 <_printf_i+0x248>)
 8003938:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800393c:	e7e3      	b.n	8003906 <_printf_i+0x176>
 800393e:	0659      	lsls	r1, r3, #25
 8003940:	bf48      	it	mi
 8003942:	b2b6      	uxthmi	r6, r6
 8003944:	e7e6      	b.n	8003914 <_printf_i+0x184>
 8003946:	4615      	mov	r5, r2
 8003948:	e7bb      	b.n	80038c2 <_printf_i+0x132>
 800394a:	682b      	ldr	r3, [r5, #0]
 800394c:	6826      	ldr	r6, [r4, #0]
 800394e:	1d18      	adds	r0, r3, #4
 8003950:	6961      	ldr	r1, [r4, #20]
 8003952:	6028      	str	r0, [r5, #0]
 8003954:	0635      	lsls	r5, r6, #24
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	d501      	bpl.n	800395e <_printf_i+0x1ce>
 800395a:	6019      	str	r1, [r3, #0]
 800395c:	e002      	b.n	8003964 <_printf_i+0x1d4>
 800395e:	0670      	lsls	r0, r6, #25
 8003960:	d5fb      	bpl.n	800395a <_printf_i+0x1ca>
 8003962:	8019      	strh	r1, [r3, #0]
 8003964:	2300      	movs	r3, #0
 8003966:	4615      	mov	r5, r2
 8003968:	6123      	str	r3, [r4, #16]
 800396a:	e7ba      	b.n	80038e2 <_printf_i+0x152>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	2100      	movs	r1, #0
 8003970:	1d1a      	adds	r2, r3, #4
 8003972:	602a      	str	r2, [r5, #0]
 8003974:	681d      	ldr	r5, [r3, #0]
 8003976:	6862      	ldr	r2, [r4, #4]
 8003978:	4628      	mov	r0, r5
 800397a:	f000 fa9b 	bl	8003eb4 <memchr>
 800397e:	b108      	cbz	r0, 8003984 <_printf_i+0x1f4>
 8003980:	1b40      	subs	r0, r0, r5
 8003982:	6060      	str	r0, [r4, #4]
 8003984:	6863      	ldr	r3, [r4, #4]
 8003986:	6123      	str	r3, [r4, #16]
 8003988:	2300      	movs	r3, #0
 800398a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800398e:	e7a8      	b.n	80038e2 <_printf_i+0x152>
 8003990:	462a      	mov	r2, r5
 8003992:	4649      	mov	r1, r9
 8003994:	4640      	mov	r0, r8
 8003996:	6923      	ldr	r3, [r4, #16]
 8003998:	47d0      	blx	sl
 800399a:	3001      	adds	r0, #1
 800399c:	d0ab      	beq.n	80038f6 <_printf_i+0x166>
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	079b      	lsls	r3, r3, #30
 80039a2:	d413      	bmi.n	80039cc <_printf_i+0x23c>
 80039a4:	68e0      	ldr	r0, [r4, #12]
 80039a6:	9b03      	ldr	r3, [sp, #12]
 80039a8:	4298      	cmp	r0, r3
 80039aa:	bfb8      	it	lt
 80039ac:	4618      	movlt	r0, r3
 80039ae:	e7a4      	b.n	80038fa <_printf_i+0x16a>
 80039b0:	2301      	movs	r3, #1
 80039b2:	4632      	mov	r2, r6
 80039b4:	4649      	mov	r1, r9
 80039b6:	4640      	mov	r0, r8
 80039b8:	47d0      	blx	sl
 80039ba:	3001      	adds	r0, #1
 80039bc:	d09b      	beq.n	80038f6 <_printf_i+0x166>
 80039be:	3501      	adds	r5, #1
 80039c0:	68e3      	ldr	r3, [r4, #12]
 80039c2:	9903      	ldr	r1, [sp, #12]
 80039c4:	1a5b      	subs	r3, r3, r1
 80039c6:	42ab      	cmp	r3, r5
 80039c8:	dcf2      	bgt.n	80039b0 <_printf_i+0x220>
 80039ca:	e7eb      	b.n	80039a4 <_printf_i+0x214>
 80039cc:	2500      	movs	r5, #0
 80039ce:	f104 0619 	add.w	r6, r4, #25
 80039d2:	e7f5      	b.n	80039c0 <_printf_i+0x230>
 80039d4:	0800418d 	.word	0x0800418d
 80039d8:	0800419e 	.word	0x0800419e

080039dc <_sbrk_r>:
 80039dc:	b538      	push	{r3, r4, r5, lr}
 80039de:	2300      	movs	r3, #0
 80039e0:	4d05      	ldr	r5, [pc, #20]	; (80039f8 <_sbrk_r+0x1c>)
 80039e2:	4604      	mov	r4, r0
 80039e4:	4608      	mov	r0, r1
 80039e6:	602b      	str	r3, [r5, #0]
 80039e8:	f7fd f84e 	bl	8000a88 <_sbrk>
 80039ec:	1c43      	adds	r3, r0, #1
 80039ee:	d102      	bne.n	80039f6 <_sbrk_r+0x1a>
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	b103      	cbz	r3, 80039f6 <_sbrk_r+0x1a>
 80039f4:	6023      	str	r3, [r4, #0]
 80039f6:	bd38      	pop	{r3, r4, r5, pc}
 80039f8:	2000013c 	.word	0x2000013c

080039fc <__sread>:
 80039fc:	b510      	push	{r4, lr}
 80039fe:	460c      	mov	r4, r1
 8003a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a04:	f000 fb10 	bl	8004028 <_read_r>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	bfab      	itete	ge
 8003a0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a0e:	89a3      	ldrhlt	r3, [r4, #12]
 8003a10:	181b      	addge	r3, r3, r0
 8003a12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a16:	bfac      	ite	ge
 8003a18:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a1a:	81a3      	strhlt	r3, [r4, #12]
 8003a1c:	bd10      	pop	{r4, pc}

08003a1e <__swrite>:
 8003a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a22:	461f      	mov	r7, r3
 8003a24:	898b      	ldrh	r3, [r1, #12]
 8003a26:	4605      	mov	r5, r0
 8003a28:	05db      	lsls	r3, r3, #23
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	4616      	mov	r6, r2
 8003a2e:	d505      	bpl.n	8003a3c <__swrite+0x1e>
 8003a30:	2302      	movs	r3, #2
 8003a32:	2200      	movs	r2, #0
 8003a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a38:	f000 f9c4 	bl	8003dc4 <_lseek_r>
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	4632      	mov	r2, r6
 8003a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a44:	81a3      	strh	r3, [r4, #12]
 8003a46:	4628      	mov	r0, r5
 8003a48:	463b      	mov	r3, r7
 8003a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a52:	f000 b869 	b.w	8003b28 <_write_r>

08003a56 <__sseek>:
 8003a56:	b510      	push	{r4, lr}
 8003a58:	460c      	mov	r4, r1
 8003a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a5e:	f000 f9b1 	bl	8003dc4 <_lseek_r>
 8003a62:	1c43      	adds	r3, r0, #1
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	bf15      	itete	ne
 8003a68:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a72:	81a3      	strheq	r3, [r4, #12]
 8003a74:	bf18      	it	ne
 8003a76:	81a3      	strhne	r3, [r4, #12]
 8003a78:	bd10      	pop	{r4, pc}

08003a7a <__sclose>:
 8003a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a7e:	f000 b8d3 	b.w	8003c28 <_close_r>
	...

08003a84 <__swbuf_r>:
 8003a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a86:	460e      	mov	r6, r1
 8003a88:	4614      	mov	r4, r2
 8003a8a:	4605      	mov	r5, r0
 8003a8c:	b118      	cbz	r0, 8003a96 <__swbuf_r+0x12>
 8003a8e:	6983      	ldr	r3, [r0, #24]
 8003a90:	b90b      	cbnz	r3, 8003a96 <__swbuf_r+0x12>
 8003a92:	f7ff fa25 	bl	8002ee0 <__sinit>
 8003a96:	4b21      	ldr	r3, [pc, #132]	; (8003b1c <__swbuf_r+0x98>)
 8003a98:	429c      	cmp	r4, r3
 8003a9a:	d12b      	bne.n	8003af4 <__swbuf_r+0x70>
 8003a9c:	686c      	ldr	r4, [r5, #4]
 8003a9e:	69a3      	ldr	r3, [r4, #24]
 8003aa0:	60a3      	str	r3, [r4, #8]
 8003aa2:	89a3      	ldrh	r3, [r4, #12]
 8003aa4:	071a      	lsls	r2, r3, #28
 8003aa6:	d52f      	bpl.n	8003b08 <__swbuf_r+0x84>
 8003aa8:	6923      	ldr	r3, [r4, #16]
 8003aaa:	b36b      	cbz	r3, 8003b08 <__swbuf_r+0x84>
 8003aac:	6923      	ldr	r3, [r4, #16]
 8003aae:	6820      	ldr	r0, [r4, #0]
 8003ab0:	b2f6      	uxtb	r6, r6
 8003ab2:	1ac0      	subs	r0, r0, r3
 8003ab4:	6963      	ldr	r3, [r4, #20]
 8003ab6:	4637      	mov	r7, r6
 8003ab8:	4283      	cmp	r3, r0
 8003aba:	dc04      	bgt.n	8003ac6 <__swbuf_r+0x42>
 8003abc:	4621      	mov	r1, r4
 8003abe:	4628      	mov	r0, r5
 8003ac0:	f000 f944 	bl	8003d4c <_fflush_r>
 8003ac4:	bb30      	cbnz	r0, 8003b14 <__swbuf_r+0x90>
 8003ac6:	68a3      	ldr	r3, [r4, #8]
 8003ac8:	3001      	adds	r0, #1
 8003aca:	3b01      	subs	r3, #1
 8003acc:	60a3      	str	r3, [r4, #8]
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	6022      	str	r2, [r4, #0]
 8003ad4:	701e      	strb	r6, [r3, #0]
 8003ad6:	6963      	ldr	r3, [r4, #20]
 8003ad8:	4283      	cmp	r3, r0
 8003ada:	d004      	beq.n	8003ae6 <__swbuf_r+0x62>
 8003adc:	89a3      	ldrh	r3, [r4, #12]
 8003ade:	07db      	lsls	r3, r3, #31
 8003ae0:	d506      	bpl.n	8003af0 <__swbuf_r+0x6c>
 8003ae2:	2e0a      	cmp	r6, #10
 8003ae4:	d104      	bne.n	8003af0 <__swbuf_r+0x6c>
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	4628      	mov	r0, r5
 8003aea:	f000 f92f 	bl	8003d4c <_fflush_r>
 8003aee:	b988      	cbnz	r0, 8003b14 <__swbuf_r+0x90>
 8003af0:	4638      	mov	r0, r7
 8003af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003af4:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <__swbuf_r+0x9c>)
 8003af6:	429c      	cmp	r4, r3
 8003af8:	d101      	bne.n	8003afe <__swbuf_r+0x7a>
 8003afa:	68ac      	ldr	r4, [r5, #8]
 8003afc:	e7cf      	b.n	8003a9e <__swbuf_r+0x1a>
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <__swbuf_r+0xa0>)
 8003b00:	429c      	cmp	r4, r3
 8003b02:	bf08      	it	eq
 8003b04:	68ec      	ldreq	r4, [r5, #12]
 8003b06:	e7ca      	b.n	8003a9e <__swbuf_r+0x1a>
 8003b08:	4621      	mov	r1, r4
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	f000 f81e 	bl	8003b4c <__swsetup_r>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d0cb      	beq.n	8003aac <__swbuf_r+0x28>
 8003b14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003b18:	e7ea      	b.n	8003af0 <__swbuf_r+0x6c>
 8003b1a:	bf00      	nop
 8003b1c:	0800413c 	.word	0x0800413c
 8003b20:	0800415c 	.word	0x0800415c
 8003b24:	0800411c 	.word	0x0800411c

08003b28 <_write_r>:
 8003b28:	b538      	push	{r3, r4, r5, lr}
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	4608      	mov	r0, r1
 8003b2e:	4611      	mov	r1, r2
 8003b30:	2200      	movs	r2, #0
 8003b32:	4d05      	ldr	r5, [pc, #20]	; (8003b48 <_write_r+0x20>)
 8003b34:	602a      	str	r2, [r5, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	f7fc ff60 	bl	80009fc <_write>
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	d102      	bne.n	8003b46 <_write_r+0x1e>
 8003b40:	682b      	ldr	r3, [r5, #0]
 8003b42:	b103      	cbz	r3, 8003b46 <_write_r+0x1e>
 8003b44:	6023      	str	r3, [r4, #0]
 8003b46:	bd38      	pop	{r3, r4, r5, pc}
 8003b48:	2000013c 	.word	0x2000013c

08003b4c <__swsetup_r>:
 8003b4c:	4b32      	ldr	r3, [pc, #200]	; (8003c18 <__swsetup_r+0xcc>)
 8003b4e:	b570      	push	{r4, r5, r6, lr}
 8003b50:	681d      	ldr	r5, [r3, #0]
 8003b52:	4606      	mov	r6, r0
 8003b54:	460c      	mov	r4, r1
 8003b56:	b125      	cbz	r5, 8003b62 <__swsetup_r+0x16>
 8003b58:	69ab      	ldr	r3, [r5, #24]
 8003b5a:	b913      	cbnz	r3, 8003b62 <__swsetup_r+0x16>
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f7ff f9bf 	bl	8002ee0 <__sinit>
 8003b62:	4b2e      	ldr	r3, [pc, #184]	; (8003c1c <__swsetup_r+0xd0>)
 8003b64:	429c      	cmp	r4, r3
 8003b66:	d10f      	bne.n	8003b88 <__swsetup_r+0x3c>
 8003b68:	686c      	ldr	r4, [r5, #4]
 8003b6a:	89a3      	ldrh	r3, [r4, #12]
 8003b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b70:	0719      	lsls	r1, r3, #28
 8003b72:	d42c      	bmi.n	8003bce <__swsetup_r+0x82>
 8003b74:	06dd      	lsls	r5, r3, #27
 8003b76:	d411      	bmi.n	8003b9c <__swsetup_r+0x50>
 8003b78:	2309      	movs	r3, #9
 8003b7a:	6033      	str	r3, [r6, #0]
 8003b7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b84:	81a3      	strh	r3, [r4, #12]
 8003b86:	e03e      	b.n	8003c06 <__swsetup_r+0xba>
 8003b88:	4b25      	ldr	r3, [pc, #148]	; (8003c20 <__swsetup_r+0xd4>)
 8003b8a:	429c      	cmp	r4, r3
 8003b8c:	d101      	bne.n	8003b92 <__swsetup_r+0x46>
 8003b8e:	68ac      	ldr	r4, [r5, #8]
 8003b90:	e7eb      	b.n	8003b6a <__swsetup_r+0x1e>
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <__swsetup_r+0xd8>)
 8003b94:	429c      	cmp	r4, r3
 8003b96:	bf08      	it	eq
 8003b98:	68ec      	ldreq	r4, [r5, #12]
 8003b9a:	e7e6      	b.n	8003b6a <__swsetup_r+0x1e>
 8003b9c:	0758      	lsls	r0, r3, #29
 8003b9e:	d512      	bpl.n	8003bc6 <__swsetup_r+0x7a>
 8003ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ba2:	b141      	cbz	r1, 8003bb6 <__swsetup_r+0x6a>
 8003ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ba8:	4299      	cmp	r1, r3
 8003baa:	d002      	beq.n	8003bb2 <__swsetup_r+0x66>
 8003bac:	4630      	mov	r0, r6
 8003bae:	f000 f9c3 	bl	8003f38 <_free_r>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	6363      	str	r3, [r4, #52]	; 0x34
 8003bb6:	89a3      	ldrh	r3, [r4, #12]
 8003bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003bbc:	81a3      	strh	r3, [r4, #12]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	6063      	str	r3, [r4, #4]
 8003bc2:	6923      	ldr	r3, [r4, #16]
 8003bc4:	6023      	str	r3, [r4, #0]
 8003bc6:	89a3      	ldrh	r3, [r4, #12]
 8003bc8:	f043 0308 	orr.w	r3, r3, #8
 8003bcc:	81a3      	strh	r3, [r4, #12]
 8003bce:	6923      	ldr	r3, [r4, #16]
 8003bd0:	b94b      	cbnz	r3, 8003be6 <__swsetup_r+0x9a>
 8003bd2:	89a3      	ldrh	r3, [r4, #12]
 8003bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bdc:	d003      	beq.n	8003be6 <__swsetup_r+0x9a>
 8003bde:	4621      	mov	r1, r4
 8003be0:	4630      	mov	r0, r6
 8003be2:	f000 f927 	bl	8003e34 <__smakebuf_r>
 8003be6:	89a0      	ldrh	r0, [r4, #12]
 8003be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003bec:	f010 0301 	ands.w	r3, r0, #1
 8003bf0:	d00a      	beq.n	8003c08 <__swsetup_r+0xbc>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60a3      	str	r3, [r4, #8]
 8003bf6:	6963      	ldr	r3, [r4, #20]
 8003bf8:	425b      	negs	r3, r3
 8003bfa:	61a3      	str	r3, [r4, #24]
 8003bfc:	6923      	ldr	r3, [r4, #16]
 8003bfe:	b943      	cbnz	r3, 8003c12 <__swsetup_r+0xc6>
 8003c00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003c04:	d1ba      	bne.n	8003b7c <__swsetup_r+0x30>
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
 8003c08:	0781      	lsls	r1, r0, #30
 8003c0a:	bf58      	it	pl
 8003c0c:	6963      	ldrpl	r3, [r4, #20]
 8003c0e:	60a3      	str	r3, [r4, #8]
 8003c10:	e7f4      	b.n	8003bfc <__swsetup_r+0xb0>
 8003c12:	2000      	movs	r0, #0
 8003c14:	e7f7      	b.n	8003c06 <__swsetup_r+0xba>
 8003c16:	bf00      	nop
 8003c18:	2000000c 	.word	0x2000000c
 8003c1c:	0800413c 	.word	0x0800413c
 8003c20:	0800415c 	.word	0x0800415c
 8003c24:	0800411c 	.word	0x0800411c

08003c28 <_close_r>:
 8003c28:	b538      	push	{r3, r4, r5, lr}
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	4d05      	ldr	r5, [pc, #20]	; (8003c44 <_close_r+0x1c>)
 8003c2e:	4604      	mov	r4, r0
 8003c30:	4608      	mov	r0, r1
 8003c32:	602b      	str	r3, [r5, #0]
 8003c34:	f7fc fef8 	bl	8000a28 <_close>
 8003c38:	1c43      	adds	r3, r0, #1
 8003c3a:	d102      	bne.n	8003c42 <_close_r+0x1a>
 8003c3c:	682b      	ldr	r3, [r5, #0]
 8003c3e:	b103      	cbz	r3, 8003c42 <_close_r+0x1a>
 8003c40:	6023      	str	r3, [r4, #0]
 8003c42:	bd38      	pop	{r3, r4, r5, pc}
 8003c44:	2000013c 	.word	0x2000013c

08003c48 <__sflush_r>:
 8003c48:	898a      	ldrh	r2, [r1, #12]
 8003c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4c:	4605      	mov	r5, r0
 8003c4e:	0710      	lsls	r0, r2, #28
 8003c50:	460c      	mov	r4, r1
 8003c52:	d457      	bmi.n	8003d04 <__sflush_r+0xbc>
 8003c54:	684b      	ldr	r3, [r1, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	dc04      	bgt.n	8003c64 <__sflush_r+0x1c>
 8003c5a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	dc01      	bgt.n	8003c64 <__sflush_r+0x1c>
 8003c60:	2000      	movs	r0, #0
 8003c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c66:	2e00      	cmp	r6, #0
 8003c68:	d0fa      	beq.n	8003c60 <__sflush_r+0x18>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c70:	682f      	ldr	r7, [r5, #0]
 8003c72:	602b      	str	r3, [r5, #0]
 8003c74:	d032      	beq.n	8003cdc <__sflush_r+0x94>
 8003c76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c78:	89a3      	ldrh	r3, [r4, #12]
 8003c7a:	075a      	lsls	r2, r3, #29
 8003c7c:	d505      	bpl.n	8003c8a <__sflush_r+0x42>
 8003c7e:	6863      	ldr	r3, [r4, #4]
 8003c80:	1ac0      	subs	r0, r0, r3
 8003c82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c84:	b10b      	cbz	r3, 8003c8a <__sflush_r+0x42>
 8003c86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c88:	1ac0      	subs	r0, r0, r3
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c90:	4628      	mov	r0, r5
 8003c92:	6a21      	ldr	r1, [r4, #32]
 8003c94:	47b0      	blx	r6
 8003c96:	1c43      	adds	r3, r0, #1
 8003c98:	89a3      	ldrh	r3, [r4, #12]
 8003c9a:	d106      	bne.n	8003caa <__sflush_r+0x62>
 8003c9c:	6829      	ldr	r1, [r5, #0]
 8003c9e:	291d      	cmp	r1, #29
 8003ca0:	d82c      	bhi.n	8003cfc <__sflush_r+0xb4>
 8003ca2:	4a29      	ldr	r2, [pc, #164]	; (8003d48 <__sflush_r+0x100>)
 8003ca4:	40ca      	lsrs	r2, r1
 8003ca6:	07d6      	lsls	r6, r2, #31
 8003ca8:	d528      	bpl.n	8003cfc <__sflush_r+0xb4>
 8003caa:	2200      	movs	r2, #0
 8003cac:	6062      	str	r2, [r4, #4]
 8003cae:	6922      	ldr	r2, [r4, #16]
 8003cb0:	04d9      	lsls	r1, r3, #19
 8003cb2:	6022      	str	r2, [r4, #0]
 8003cb4:	d504      	bpl.n	8003cc0 <__sflush_r+0x78>
 8003cb6:	1c42      	adds	r2, r0, #1
 8003cb8:	d101      	bne.n	8003cbe <__sflush_r+0x76>
 8003cba:	682b      	ldr	r3, [r5, #0]
 8003cbc:	b903      	cbnz	r3, 8003cc0 <__sflush_r+0x78>
 8003cbe:	6560      	str	r0, [r4, #84]	; 0x54
 8003cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cc2:	602f      	str	r7, [r5, #0]
 8003cc4:	2900      	cmp	r1, #0
 8003cc6:	d0cb      	beq.n	8003c60 <__sflush_r+0x18>
 8003cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ccc:	4299      	cmp	r1, r3
 8003cce:	d002      	beq.n	8003cd6 <__sflush_r+0x8e>
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	f000 f931 	bl	8003f38 <_free_r>
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	6360      	str	r0, [r4, #52]	; 0x34
 8003cda:	e7c2      	b.n	8003c62 <__sflush_r+0x1a>
 8003cdc:	6a21      	ldr	r1, [r4, #32]
 8003cde:	2301      	movs	r3, #1
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	47b0      	blx	r6
 8003ce4:	1c41      	adds	r1, r0, #1
 8003ce6:	d1c7      	bne.n	8003c78 <__sflush_r+0x30>
 8003ce8:	682b      	ldr	r3, [r5, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0c4      	beq.n	8003c78 <__sflush_r+0x30>
 8003cee:	2b1d      	cmp	r3, #29
 8003cf0:	d001      	beq.n	8003cf6 <__sflush_r+0xae>
 8003cf2:	2b16      	cmp	r3, #22
 8003cf4:	d101      	bne.n	8003cfa <__sflush_r+0xb2>
 8003cf6:	602f      	str	r7, [r5, #0]
 8003cf8:	e7b2      	b.n	8003c60 <__sflush_r+0x18>
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d00:	81a3      	strh	r3, [r4, #12]
 8003d02:	e7ae      	b.n	8003c62 <__sflush_r+0x1a>
 8003d04:	690f      	ldr	r7, [r1, #16]
 8003d06:	2f00      	cmp	r7, #0
 8003d08:	d0aa      	beq.n	8003c60 <__sflush_r+0x18>
 8003d0a:	0793      	lsls	r3, r2, #30
 8003d0c:	bf18      	it	ne
 8003d0e:	2300      	movne	r3, #0
 8003d10:	680e      	ldr	r6, [r1, #0]
 8003d12:	bf08      	it	eq
 8003d14:	694b      	ldreq	r3, [r1, #20]
 8003d16:	1bf6      	subs	r6, r6, r7
 8003d18:	600f      	str	r7, [r1, #0]
 8003d1a:	608b      	str	r3, [r1, #8]
 8003d1c:	2e00      	cmp	r6, #0
 8003d1e:	dd9f      	ble.n	8003c60 <__sflush_r+0x18>
 8003d20:	4633      	mov	r3, r6
 8003d22:	463a      	mov	r2, r7
 8003d24:	4628      	mov	r0, r5
 8003d26:	6a21      	ldr	r1, [r4, #32]
 8003d28:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003d2c:	47e0      	blx	ip
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	dc06      	bgt.n	8003d40 <__sflush_r+0xf8>
 8003d32:	89a3      	ldrh	r3, [r4, #12]
 8003d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d3c:	81a3      	strh	r3, [r4, #12]
 8003d3e:	e790      	b.n	8003c62 <__sflush_r+0x1a>
 8003d40:	4407      	add	r7, r0
 8003d42:	1a36      	subs	r6, r6, r0
 8003d44:	e7ea      	b.n	8003d1c <__sflush_r+0xd4>
 8003d46:	bf00      	nop
 8003d48:	20400001 	.word	0x20400001

08003d4c <_fflush_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	690b      	ldr	r3, [r1, #16]
 8003d50:	4605      	mov	r5, r0
 8003d52:	460c      	mov	r4, r1
 8003d54:	b913      	cbnz	r3, 8003d5c <_fflush_r+0x10>
 8003d56:	2500      	movs	r5, #0
 8003d58:	4628      	mov	r0, r5
 8003d5a:	bd38      	pop	{r3, r4, r5, pc}
 8003d5c:	b118      	cbz	r0, 8003d66 <_fflush_r+0x1a>
 8003d5e:	6983      	ldr	r3, [r0, #24]
 8003d60:	b90b      	cbnz	r3, 8003d66 <_fflush_r+0x1a>
 8003d62:	f7ff f8bd 	bl	8002ee0 <__sinit>
 8003d66:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <_fflush_r+0x6c>)
 8003d68:	429c      	cmp	r4, r3
 8003d6a:	d11b      	bne.n	8003da4 <_fflush_r+0x58>
 8003d6c:	686c      	ldr	r4, [r5, #4]
 8003d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0ef      	beq.n	8003d56 <_fflush_r+0xa>
 8003d76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d78:	07d0      	lsls	r0, r2, #31
 8003d7a:	d404      	bmi.n	8003d86 <_fflush_r+0x3a>
 8003d7c:	0599      	lsls	r1, r3, #22
 8003d7e:	d402      	bmi.n	8003d86 <_fflush_r+0x3a>
 8003d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d82:	f7ff f94b 	bl	800301c <__retarget_lock_acquire_recursive>
 8003d86:	4628      	mov	r0, r5
 8003d88:	4621      	mov	r1, r4
 8003d8a:	f7ff ff5d 	bl	8003c48 <__sflush_r>
 8003d8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d90:	4605      	mov	r5, r0
 8003d92:	07da      	lsls	r2, r3, #31
 8003d94:	d4e0      	bmi.n	8003d58 <_fflush_r+0xc>
 8003d96:	89a3      	ldrh	r3, [r4, #12]
 8003d98:	059b      	lsls	r3, r3, #22
 8003d9a:	d4dd      	bmi.n	8003d58 <_fflush_r+0xc>
 8003d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d9e:	f7ff f93e 	bl	800301e <__retarget_lock_release_recursive>
 8003da2:	e7d9      	b.n	8003d58 <_fflush_r+0xc>
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <_fflush_r+0x70>)
 8003da6:	429c      	cmp	r4, r3
 8003da8:	d101      	bne.n	8003dae <_fflush_r+0x62>
 8003daa:	68ac      	ldr	r4, [r5, #8]
 8003dac:	e7df      	b.n	8003d6e <_fflush_r+0x22>
 8003dae:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <_fflush_r+0x74>)
 8003db0:	429c      	cmp	r4, r3
 8003db2:	bf08      	it	eq
 8003db4:	68ec      	ldreq	r4, [r5, #12]
 8003db6:	e7da      	b.n	8003d6e <_fflush_r+0x22>
 8003db8:	0800413c 	.word	0x0800413c
 8003dbc:	0800415c 	.word	0x0800415c
 8003dc0:	0800411c 	.word	0x0800411c

08003dc4 <_lseek_r>:
 8003dc4:	b538      	push	{r3, r4, r5, lr}
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	4608      	mov	r0, r1
 8003dca:	4611      	mov	r1, r2
 8003dcc:	2200      	movs	r2, #0
 8003dce:	4d05      	ldr	r5, [pc, #20]	; (8003de4 <_lseek_r+0x20>)
 8003dd0:	602a      	str	r2, [r5, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f7fc fe4c 	bl	8000a70 <_lseek>
 8003dd8:	1c43      	adds	r3, r0, #1
 8003dda:	d102      	bne.n	8003de2 <_lseek_r+0x1e>
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	b103      	cbz	r3, 8003de2 <_lseek_r+0x1e>
 8003de0:	6023      	str	r3, [r4, #0]
 8003de2:	bd38      	pop	{r3, r4, r5, pc}
 8003de4:	2000013c 	.word	0x2000013c

08003de8 <__swhatbuf_r>:
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	460e      	mov	r6, r1
 8003dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df0:	4614      	mov	r4, r2
 8003df2:	2900      	cmp	r1, #0
 8003df4:	461d      	mov	r5, r3
 8003df6:	b096      	sub	sp, #88	; 0x58
 8003df8:	da08      	bge.n	8003e0c <__swhatbuf_r+0x24>
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003e00:	602a      	str	r2, [r5, #0]
 8003e02:	061a      	lsls	r2, r3, #24
 8003e04:	d410      	bmi.n	8003e28 <__swhatbuf_r+0x40>
 8003e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e0a:	e00e      	b.n	8003e2a <__swhatbuf_r+0x42>
 8003e0c:	466a      	mov	r2, sp
 8003e0e:	f000 f91d 	bl	800404c <_fstat_r>
 8003e12:	2800      	cmp	r0, #0
 8003e14:	dbf1      	blt.n	8003dfa <__swhatbuf_r+0x12>
 8003e16:	9a01      	ldr	r2, [sp, #4]
 8003e18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e20:	425a      	negs	r2, r3
 8003e22:	415a      	adcs	r2, r3
 8003e24:	602a      	str	r2, [r5, #0]
 8003e26:	e7ee      	b.n	8003e06 <__swhatbuf_r+0x1e>
 8003e28:	2340      	movs	r3, #64	; 0x40
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	b016      	add	sp, #88	; 0x58
 8003e30:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e34 <__smakebuf_r>:
 8003e34:	898b      	ldrh	r3, [r1, #12]
 8003e36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e38:	079d      	lsls	r5, r3, #30
 8003e3a:	4606      	mov	r6, r0
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	d507      	bpl.n	8003e50 <__smakebuf_r+0x1c>
 8003e40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	6123      	str	r3, [r4, #16]
 8003e48:	2301      	movs	r3, #1
 8003e4a:	6163      	str	r3, [r4, #20]
 8003e4c:	b002      	add	sp, #8
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
 8003e50:	466a      	mov	r2, sp
 8003e52:	ab01      	add	r3, sp, #4
 8003e54:	f7ff ffc8 	bl	8003de8 <__swhatbuf_r>
 8003e58:	9900      	ldr	r1, [sp, #0]
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	4630      	mov	r0, r6
 8003e5e:	f7ff f8ff 	bl	8003060 <_malloc_r>
 8003e62:	b948      	cbnz	r0, 8003e78 <__smakebuf_r+0x44>
 8003e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e68:	059a      	lsls	r2, r3, #22
 8003e6a:	d4ef      	bmi.n	8003e4c <__smakebuf_r+0x18>
 8003e6c:	f023 0303 	bic.w	r3, r3, #3
 8003e70:	f043 0302 	orr.w	r3, r3, #2
 8003e74:	81a3      	strh	r3, [r4, #12]
 8003e76:	e7e3      	b.n	8003e40 <__smakebuf_r+0xc>
 8003e78:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <__smakebuf_r+0x7c>)
 8003e7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	6020      	str	r0, [r4, #0]
 8003e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e84:	81a3      	strh	r3, [r4, #12]
 8003e86:	9b00      	ldr	r3, [sp, #0]
 8003e88:	6120      	str	r0, [r4, #16]
 8003e8a:	6163      	str	r3, [r4, #20]
 8003e8c:	9b01      	ldr	r3, [sp, #4]
 8003e8e:	b15b      	cbz	r3, 8003ea8 <__smakebuf_r+0x74>
 8003e90:	4630      	mov	r0, r6
 8003e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e96:	f000 f8eb 	bl	8004070 <_isatty_r>
 8003e9a:	b128      	cbz	r0, 8003ea8 <__smakebuf_r+0x74>
 8003e9c:	89a3      	ldrh	r3, [r4, #12]
 8003e9e:	f023 0303 	bic.w	r3, r3, #3
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	81a3      	strh	r3, [r4, #12]
 8003ea8:	89a0      	ldrh	r0, [r4, #12]
 8003eaa:	4305      	orrs	r5, r0
 8003eac:	81a5      	strh	r5, [r4, #12]
 8003eae:	e7cd      	b.n	8003e4c <__smakebuf_r+0x18>
 8003eb0:	08002e79 	.word	0x08002e79

08003eb4 <memchr>:
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	b510      	push	{r4, lr}
 8003eb8:	b2c9      	uxtb	r1, r1
 8003eba:	4402      	add	r2, r0
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	d101      	bne.n	8003ec6 <memchr+0x12>
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	e003      	b.n	8003ece <memchr+0x1a>
 8003ec6:	7804      	ldrb	r4, [r0, #0]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	428c      	cmp	r4, r1
 8003ecc:	d1f6      	bne.n	8003ebc <memchr+0x8>
 8003ece:	bd10      	pop	{r4, pc}

08003ed0 <memcpy>:
 8003ed0:	440a      	add	r2, r1
 8003ed2:	4291      	cmp	r1, r2
 8003ed4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003ed8:	d100      	bne.n	8003edc <memcpy+0xc>
 8003eda:	4770      	bx	lr
 8003edc:	b510      	push	{r4, lr}
 8003ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ee2:	4291      	cmp	r1, r2
 8003ee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ee8:	d1f9      	bne.n	8003ede <memcpy+0xe>
 8003eea:	bd10      	pop	{r4, pc}

08003eec <memmove>:
 8003eec:	4288      	cmp	r0, r1
 8003eee:	b510      	push	{r4, lr}
 8003ef0:	eb01 0402 	add.w	r4, r1, r2
 8003ef4:	d902      	bls.n	8003efc <memmove+0x10>
 8003ef6:	4284      	cmp	r4, r0
 8003ef8:	4623      	mov	r3, r4
 8003efa:	d807      	bhi.n	8003f0c <memmove+0x20>
 8003efc:	1e43      	subs	r3, r0, #1
 8003efe:	42a1      	cmp	r1, r4
 8003f00:	d008      	beq.n	8003f14 <memmove+0x28>
 8003f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f0a:	e7f8      	b.n	8003efe <memmove+0x12>
 8003f0c:	4601      	mov	r1, r0
 8003f0e:	4402      	add	r2, r0
 8003f10:	428a      	cmp	r2, r1
 8003f12:	d100      	bne.n	8003f16 <memmove+0x2a>
 8003f14:	bd10      	pop	{r4, pc}
 8003f16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f1e:	e7f7      	b.n	8003f10 <memmove+0x24>

08003f20 <__malloc_lock>:
 8003f20:	4801      	ldr	r0, [pc, #4]	; (8003f28 <__malloc_lock+0x8>)
 8003f22:	f7ff b87b 	b.w	800301c <__retarget_lock_acquire_recursive>
 8003f26:	bf00      	nop
 8003f28:	20000130 	.word	0x20000130

08003f2c <__malloc_unlock>:
 8003f2c:	4801      	ldr	r0, [pc, #4]	; (8003f34 <__malloc_unlock+0x8>)
 8003f2e:	f7ff b876 	b.w	800301e <__retarget_lock_release_recursive>
 8003f32:	bf00      	nop
 8003f34:	20000130 	.word	0x20000130

08003f38 <_free_r>:
 8003f38:	b538      	push	{r3, r4, r5, lr}
 8003f3a:	4605      	mov	r5, r0
 8003f3c:	2900      	cmp	r1, #0
 8003f3e:	d040      	beq.n	8003fc2 <_free_r+0x8a>
 8003f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f44:	1f0c      	subs	r4, r1, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bfb8      	it	lt
 8003f4a:	18e4      	addlt	r4, r4, r3
 8003f4c:	f7ff ffe8 	bl	8003f20 <__malloc_lock>
 8003f50:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <_free_r+0x8c>)
 8003f52:	6813      	ldr	r3, [r2, #0]
 8003f54:	b933      	cbnz	r3, 8003f64 <_free_r+0x2c>
 8003f56:	6063      	str	r3, [r4, #4]
 8003f58:	6014      	str	r4, [r2, #0]
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f60:	f7ff bfe4 	b.w	8003f2c <__malloc_unlock>
 8003f64:	42a3      	cmp	r3, r4
 8003f66:	d908      	bls.n	8003f7a <_free_r+0x42>
 8003f68:	6820      	ldr	r0, [r4, #0]
 8003f6a:	1821      	adds	r1, r4, r0
 8003f6c:	428b      	cmp	r3, r1
 8003f6e:	bf01      	itttt	eq
 8003f70:	6819      	ldreq	r1, [r3, #0]
 8003f72:	685b      	ldreq	r3, [r3, #4]
 8003f74:	1809      	addeq	r1, r1, r0
 8003f76:	6021      	streq	r1, [r4, #0]
 8003f78:	e7ed      	b.n	8003f56 <_free_r+0x1e>
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	b10b      	cbz	r3, 8003f84 <_free_r+0x4c>
 8003f80:	42a3      	cmp	r3, r4
 8003f82:	d9fa      	bls.n	8003f7a <_free_r+0x42>
 8003f84:	6811      	ldr	r1, [r2, #0]
 8003f86:	1850      	adds	r0, r2, r1
 8003f88:	42a0      	cmp	r0, r4
 8003f8a:	d10b      	bne.n	8003fa4 <_free_r+0x6c>
 8003f8c:	6820      	ldr	r0, [r4, #0]
 8003f8e:	4401      	add	r1, r0
 8003f90:	1850      	adds	r0, r2, r1
 8003f92:	4283      	cmp	r3, r0
 8003f94:	6011      	str	r1, [r2, #0]
 8003f96:	d1e0      	bne.n	8003f5a <_free_r+0x22>
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4401      	add	r1, r0
 8003f9e:	6011      	str	r1, [r2, #0]
 8003fa0:	6053      	str	r3, [r2, #4]
 8003fa2:	e7da      	b.n	8003f5a <_free_r+0x22>
 8003fa4:	d902      	bls.n	8003fac <_free_r+0x74>
 8003fa6:	230c      	movs	r3, #12
 8003fa8:	602b      	str	r3, [r5, #0]
 8003faa:	e7d6      	b.n	8003f5a <_free_r+0x22>
 8003fac:	6820      	ldr	r0, [r4, #0]
 8003fae:	1821      	adds	r1, r4, r0
 8003fb0:	428b      	cmp	r3, r1
 8003fb2:	bf01      	itttt	eq
 8003fb4:	6819      	ldreq	r1, [r3, #0]
 8003fb6:	685b      	ldreq	r3, [r3, #4]
 8003fb8:	1809      	addeq	r1, r1, r0
 8003fba:	6021      	streq	r1, [r4, #0]
 8003fbc:	6063      	str	r3, [r4, #4]
 8003fbe:	6054      	str	r4, [r2, #4]
 8003fc0:	e7cb      	b.n	8003f5a <_free_r+0x22>
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	20000134 	.word	0x20000134

08003fc8 <_realloc_r>:
 8003fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fcc:	4680      	mov	r8, r0
 8003fce:	4614      	mov	r4, r2
 8003fd0:	460e      	mov	r6, r1
 8003fd2:	b921      	cbnz	r1, 8003fde <_realloc_r+0x16>
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fda:	f7ff b841 	b.w	8003060 <_malloc_r>
 8003fde:	b92a      	cbnz	r2, 8003fec <_realloc_r+0x24>
 8003fe0:	f7ff ffaa 	bl	8003f38 <_free_r>
 8003fe4:	4625      	mov	r5, r4
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fec:	f000 f850 	bl	8004090 <_malloc_usable_size_r>
 8003ff0:	4284      	cmp	r4, r0
 8003ff2:	4607      	mov	r7, r0
 8003ff4:	d802      	bhi.n	8003ffc <_realloc_r+0x34>
 8003ff6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ffa:	d812      	bhi.n	8004022 <_realloc_r+0x5a>
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	4640      	mov	r0, r8
 8004000:	f7ff f82e 	bl	8003060 <_malloc_r>
 8004004:	4605      	mov	r5, r0
 8004006:	2800      	cmp	r0, #0
 8004008:	d0ed      	beq.n	8003fe6 <_realloc_r+0x1e>
 800400a:	42bc      	cmp	r4, r7
 800400c:	4622      	mov	r2, r4
 800400e:	4631      	mov	r1, r6
 8004010:	bf28      	it	cs
 8004012:	463a      	movcs	r2, r7
 8004014:	f7ff ff5c 	bl	8003ed0 <memcpy>
 8004018:	4631      	mov	r1, r6
 800401a:	4640      	mov	r0, r8
 800401c:	f7ff ff8c 	bl	8003f38 <_free_r>
 8004020:	e7e1      	b.n	8003fe6 <_realloc_r+0x1e>
 8004022:	4635      	mov	r5, r6
 8004024:	e7df      	b.n	8003fe6 <_realloc_r+0x1e>
	...

08004028 <_read_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	4604      	mov	r4, r0
 800402c:	4608      	mov	r0, r1
 800402e:	4611      	mov	r1, r2
 8004030:	2200      	movs	r2, #0
 8004032:	4d05      	ldr	r5, [pc, #20]	; (8004048 <_read_r+0x20>)
 8004034:	602a      	str	r2, [r5, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	f7fc fcc2 	bl	80009c0 <_read>
 800403c:	1c43      	adds	r3, r0, #1
 800403e:	d102      	bne.n	8004046 <_read_r+0x1e>
 8004040:	682b      	ldr	r3, [r5, #0]
 8004042:	b103      	cbz	r3, 8004046 <_read_r+0x1e>
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	bd38      	pop	{r3, r4, r5, pc}
 8004048:	2000013c 	.word	0x2000013c

0800404c <_fstat_r>:
 800404c:	b538      	push	{r3, r4, r5, lr}
 800404e:	2300      	movs	r3, #0
 8004050:	4d06      	ldr	r5, [pc, #24]	; (800406c <_fstat_r+0x20>)
 8004052:	4604      	mov	r4, r0
 8004054:	4608      	mov	r0, r1
 8004056:	4611      	mov	r1, r2
 8004058:	602b      	str	r3, [r5, #0]
 800405a:	f7fc fcf0 	bl	8000a3e <_fstat>
 800405e:	1c43      	adds	r3, r0, #1
 8004060:	d102      	bne.n	8004068 <_fstat_r+0x1c>
 8004062:	682b      	ldr	r3, [r5, #0]
 8004064:	b103      	cbz	r3, 8004068 <_fstat_r+0x1c>
 8004066:	6023      	str	r3, [r4, #0]
 8004068:	bd38      	pop	{r3, r4, r5, pc}
 800406a:	bf00      	nop
 800406c:	2000013c 	.word	0x2000013c

08004070 <_isatty_r>:
 8004070:	b538      	push	{r3, r4, r5, lr}
 8004072:	2300      	movs	r3, #0
 8004074:	4d05      	ldr	r5, [pc, #20]	; (800408c <_isatty_r+0x1c>)
 8004076:	4604      	mov	r4, r0
 8004078:	4608      	mov	r0, r1
 800407a:	602b      	str	r3, [r5, #0]
 800407c:	f7fc fcee 	bl	8000a5c <_isatty>
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	d102      	bne.n	800408a <_isatty_r+0x1a>
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	b103      	cbz	r3, 800408a <_isatty_r+0x1a>
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	bd38      	pop	{r3, r4, r5, pc}
 800408c:	2000013c 	.word	0x2000013c

08004090 <_malloc_usable_size_r>:
 8004090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004094:	1f18      	subs	r0, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	bfbc      	itt	lt
 800409a:	580b      	ldrlt	r3, [r1, r0]
 800409c:	18c0      	addlt	r0, r0, r3
 800409e:	4770      	bx	lr

080040a0 <_init>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	bf00      	nop
 80040a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a6:	bc08      	pop	{r3}
 80040a8:	469e      	mov	lr, r3
 80040aa:	4770      	bx	lr

080040ac <_fini>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	bf00      	nop
 80040b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b2:	bc08      	pop	{r3}
 80040b4:	469e      	mov	lr, r3
 80040b6:	4770      	bx	lr
