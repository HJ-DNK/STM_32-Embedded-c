
USB_cdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072d0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800748c  0800748c  0001748c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007514  08007514  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  08007514  08007514  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007514  08007514  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007514  08007514  00017514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007518  08007518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800751c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c20  200001a0  080076bc  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dc0  080076bc  00021dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103f9  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e4f  00000000  00000000  000305c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00033418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00034238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bbd1  00000000  00000000  00034f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011467  00000000  00000000  00060ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc516  00000000  00000000  00071f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e44e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003810  00000000  00000000  0016e4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	200001a0 	.word	0x200001a0
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08007474 	.word	0x08007474

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	200001a4 	.word	0x200001a4
 80001f8:	08007474 	.word	0x08007474

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 f931 	bl	8000466 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f810 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f862 	bl	80002d0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800020c:	f006 fab6 	bl	800677c <MX_USB_DEVICE_Init>

	//  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	 // HAL_Delay(1000);


	  CDC_Transmit_FS(data, sizeof(data)-1);
 8000210:	210e      	movs	r1, #14
 8000212:	4804      	ldr	r0, [pc, #16]	; (8000224 <main+0x28>)
 8000214:	f006 fb76 	bl	8006904 <CDC_Transmit_FS>
	  	 	  HAL_Delay (1000);
 8000218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800021c:	f000 f998 	bl	8000550 <HAL_Delay>
	  CDC_Transmit_FS(data, sizeof(data)-1);
 8000220:	e7f6      	b.n	8000210 <main+0x14>
 8000222:	bf00      	nop
 8000224:	20000000 	.word	0x20000000

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b096      	sub	sp, #88	; 0x58
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0314 	add.w	r3, r7, #20
 8000232:	2244      	movs	r2, #68	; 0x44
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f007 f914 	bl	8007464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	463b      	mov	r3, r7
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800024a:	2000      	movs	r0, #0
 800024c:	f001 fe28 	bl	8001ea0 <HAL_PWREx_ControlVoltageScaling>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000256:	f000 f86e 	bl	8000336 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800025a:	2322      	movs	r3, #34	; 0x22
 800025c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000268:	2340      	movs	r3, #64	; 0x40
 800026a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026c:	2302      	movs	r3, #2
 800026e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000270:	2302      	movs	r3, #2
 8000272:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000274:	2302      	movs	r3, #2
 8000276:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000278:	231e      	movs	r3, #30
 800027a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800027c:	2302      	movs	r3, #2
 800027e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000280:	2302      	movs	r3, #2
 8000282:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000284:	2302      	movs	r3, #2
 8000286:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0314 	add.w	r3, r7, #20
 800028c:	4618      	mov	r0, r3
 800028e:	f001 febb 	bl	8002008 <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000298:	f000 f84d 	bl	8000336 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2303      	movs	r3, #3
 80002a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002b2:	463b      	mov	r3, r7
 80002b4:	2105      	movs	r1, #5
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fac0 	bl	800283c <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80002c2:	f000 f838 	bl	8000336 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3758      	adds	r7, #88	; 0x58
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <MX_GPIO_Init+0x44>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002da:	4a0e      	ldr	r2, [pc, #56]	; (8000314 <MX_GPIO_Init+0x44>)
 80002dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e2:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <MX_GPIO_Init+0x44>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_GPIO_Init+0x44>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f2:	4a08      	ldr	r2, [pc, #32]	; (8000314 <MX_GPIO_Init+0x44>)
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <MX_GPIO_Init+0x44>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	603b      	str	r3, [r7, #0]
 8000304:	683b      	ldr	r3, [r7, #0]

}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000

08000318 <CDC_ReceiveCallBack>:

/* USER CODE BEGIN 4 */
void CDC_ReceiveCallBack(uint8_t* Buf, uint32_t Len)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS(Buf, Len);
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	b29b      	uxth	r3, r3
 8000326:	4619      	mov	r1, r3
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f006 faeb 	bl	8006904 <CDC_Transmit_FS>

}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800033a:	b672      	cpsid	i
}
 800033c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800033e:	e7fe      	b.n	800033e <Error_Handler+0x8>

08000340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <HAL_MspInit+0x44>)
 8000348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800034a:	4a0e      	ldr	r2, [pc, #56]	; (8000384 <HAL_MspInit+0x44>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6613      	str	r3, [r2, #96]	; 0x60
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <HAL_MspInit+0x44>)
 8000354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <HAL_MspInit+0x44>)
 8000360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000362:	4a08      	ldr	r2, [pc, #32]	; (8000384 <HAL_MspInit+0x44>)
 8000364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000368:	6593      	str	r3, [r2, #88]	; 0x58
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <HAL_MspInit+0x44>)
 800036c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800036e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000

08000388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800038c:	e7fe      	b.n	800038c <NMI_Handler+0x4>

0800038e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000392:	e7fe      	b.n	8000392 <HardFault_Handler+0x4>

08000394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000398:	e7fe      	b.n	8000398 <MemManage_Handler+0x4>

0800039a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800039e:	e7fe      	b.n	800039e <BusFault_Handler+0x4>

080003a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <UsageFault_Handler+0x4>

080003a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr

080003c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003d4:	f000 f89c 	bl	8000510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}

080003dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80003e0:	4802      	ldr	r0, [pc, #8]	; (80003ec <OTG_FS_IRQHandler+0x10>)
 80003e2:	f000 fcd0 	bl	8000d86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20001694 	.word	0x20001694

080003f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <SystemInit+0x20>)
 80003f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003fa:	4a05      	ldr	r2, [pc, #20]	; (8000410 <SystemInit+0x20>)
 80003fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	e000ed00 	.word	0xe000ed00

08000414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800044c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000418:	f7ff ffea 	bl	80003f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800041c:	480c      	ldr	r0, [pc, #48]	; (8000450 <LoopForever+0x6>)
  ldr r1, =_edata
 800041e:	490d      	ldr	r1, [pc, #52]	; (8000454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000420:	4a0d      	ldr	r2, [pc, #52]	; (8000458 <LoopForever+0xe>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000424:	e002      	b.n	800042c <LoopCopyDataInit>

08000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042a:	3304      	adds	r3, #4

0800042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000430:	d3f9      	bcc.n	8000426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000432:	4a0a      	ldr	r2, [pc, #40]	; (800045c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000434:	4c0a      	ldr	r4, [pc, #40]	; (8000460 <LoopForever+0x16>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000438:	e001      	b.n	800043e <LoopFillZerobss>

0800043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800043c:	3204      	adds	r2, #4

0800043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000440:	d3fb      	bcc.n	800043a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000442:	f006 ffeb 	bl	800741c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000446:	f7ff fed9 	bl	80001fc <main>

0800044a <LoopForever>:

LoopForever:
    b LoopForever
 800044a:	e7fe      	b.n	800044a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800044c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8000458:	0800751c 	.word	0x0800751c
  ldr r2, =_sbss
 800045c:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8000460:	20001dc0 	.word	0x20001dc0

08000464 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC1_IRQHandler>

08000466 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	b082      	sub	sp, #8
 800046a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800046c:	2300      	movs	r3, #0
 800046e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000470:	2003      	movs	r0, #3
 8000472:	f000 f961 	bl	8000738 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000476:	2000      	movs	r0, #0
 8000478:	f000 f80e 	bl	8000498 <HAL_InitTick>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d002      	beq.n	8000488 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000482:	2301      	movs	r3, #1
 8000484:	71fb      	strb	r3, [r7, #7]
 8000486:	e001      	b.n	800048c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000488:	f7ff ff5a 	bl	8000340 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800048c:	79fb      	ldrb	r3, [r7, #7]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004a0:	2300      	movs	r3, #0
 80004a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <HAL_InitTick+0x6c>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d023      	beq.n	80004f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80004ac:	4b16      	ldr	r3, [pc, #88]	; (8000508 <HAL_InitTick+0x70>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <HAL_InitTick+0x6c>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4619      	mov	r1, r3
 80004b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80004be:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 f96d 	bl	80007a2 <HAL_SYSTICK_Config>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d10f      	bne.n	80004ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2b0f      	cmp	r3, #15
 80004d2:	d809      	bhi.n	80004e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004d4:	2200      	movs	r2, #0
 80004d6:	6879      	ldr	r1, [r7, #4]
 80004d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004dc:	f000 f937 	bl	800074e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004e0:	4a0a      	ldr	r2, [pc, #40]	; (800050c <HAL_InitTick+0x74>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6013      	str	r3, [r2, #0]
 80004e6:	e007      	b.n	80004f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80004e8:	2301      	movs	r3, #1
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	e004      	b.n	80004f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004ee:	2301      	movs	r3, #1
 80004f0:	73fb      	strb	r3, [r7, #15]
 80004f2:	e001      	b.n	80004f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004f4:	2301      	movs	r3, #1
 80004f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000018 	.word	0x20000018
 8000508:	20000010 	.word	0x20000010
 800050c:	20000014 	.word	0x20000014

08000510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <HAL_IncTick+0x20>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	461a      	mov	r2, r3
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_IncTick+0x24>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4413      	add	r3, r2
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <HAL_IncTick+0x24>)
 8000522:	6013      	str	r3, [r2, #0]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000018 	.word	0x20000018
 8000534:	200001bc 	.word	0x200001bc

08000538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return uwTick;
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <HAL_GetTick+0x14>)
 800053e:	681b      	ldr	r3, [r3, #0]
}
 8000540:	4618      	mov	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	200001bc 	.word	0x200001bc

08000550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000558:	f7ff ffee 	bl	8000538 <HAL_GetTick>
 800055c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000568:	d005      	beq.n	8000576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <HAL_Delay+0x44>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	461a      	mov	r2, r3
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	4413      	add	r3, r2
 8000574:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000576:	bf00      	nop
 8000578:	f7ff ffde 	bl	8000538 <HAL_GetTick>
 800057c:	4602      	mov	r2, r0
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	429a      	cmp	r2, r3
 8000586:	d8f7      	bhi.n	8000578 <HAL_Delay+0x28>
  {
  }
}
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000018 	.word	0x20000018

08000598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005b4:	4013      	ands	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ca:	4a04      	ldr	r2, [pc, #16]	; (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	60d3      	str	r3, [r2, #12]
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <__NVIC_GetPriorityGrouping+0x18>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	f003 0307 	and.w	r3, r3, #7
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	db0b      	blt.n	8000626 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f003 021f 	and.w	r2, r3, #31
 8000614:	4907      	ldr	r1, [pc, #28]	; (8000634 <__NVIC_EnableIRQ+0x38>)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	095b      	lsrs	r3, r3, #5
 800061c:	2001      	movs	r0, #1
 800061e:	fa00 f202 	lsl.w	r2, r0, r2
 8000622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000e100 	.word	0xe000e100

08000638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000648:	2b00      	cmp	r3, #0
 800064a:	db0a      	blt.n	8000662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	b2da      	uxtb	r2, r3
 8000650:	490c      	ldr	r1, [pc, #48]	; (8000684 <__NVIC_SetPriority+0x4c>)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	0112      	lsls	r2, r2, #4
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	440b      	add	r3, r1
 800065c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000660:	e00a      	b.n	8000678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4908      	ldr	r1, [pc, #32]	; (8000688 <__NVIC_SetPriority+0x50>)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 030f 	and.w	r3, r3, #15
 800066e:	3b04      	subs	r3, #4
 8000670:	0112      	lsls	r2, r2, #4
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	440b      	add	r3, r1
 8000676:	761a      	strb	r2, [r3, #24]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000e100 	.word	0xe000e100
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800068c:	b480      	push	{r7}
 800068e:	b089      	sub	sp, #36	; 0x24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	f1c3 0307 	rsb	r3, r3, #7
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	bf28      	it	cs
 80006aa:	2304      	movcs	r3, #4
 80006ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3304      	adds	r3, #4
 80006b2:	2b06      	cmp	r3, #6
 80006b4:	d902      	bls.n	80006bc <NVIC_EncodePriority+0x30>
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3b03      	subs	r3, #3
 80006ba:	e000      	b.n	80006be <NVIC_EncodePriority+0x32>
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	43da      	mvns	r2, r3
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	401a      	ands	r2, r3
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	43d9      	mvns	r1, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	4313      	orrs	r3, r2
         );
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3724      	adds	r7, #36	; 0x24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
	...

080006f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3b01      	subs	r3, #1
 8000700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000704:	d301      	bcc.n	800070a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000706:	2301      	movs	r3, #1
 8000708:	e00f      	b.n	800072a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <SysTick_Config+0x40>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3b01      	subs	r3, #1
 8000710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000712:	210f      	movs	r1, #15
 8000714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000718:	f7ff ff8e 	bl	8000638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <SysTick_Config+0x40>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <SysTick_Config+0x40>)
 8000724:	2207      	movs	r2, #7
 8000726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	e000e010 	.word	0xe000e010

08000738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ff29 	bl	8000598 <__NVIC_SetPriorityGrouping>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b086      	sub	sp, #24
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	607a      	str	r2, [r7, #4]
 800075a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000760:	f7ff ff3e 	bl	80005e0 <__NVIC_GetPriorityGrouping>
 8000764:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	68b9      	ldr	r1, [r7, #8]
 800076a:	6978      	ldr	r0, [r7, #20]
 800076c:	f7ff ff8e 	bl	800068c <NVIC_EncodePriority>
 8000770:	4602      	mov	r2, r0
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff5d 	bl	8000638 <__NVIC_SetPriority>
}
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff31 	bl	80005fc <__NVIC_EnableIRQ>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ffa2 	bl	80006f4 <SysTick_Config>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007bc:	b480      	push	{r7}
 80007be:	b087      	sub	sp, #28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ca:	e166      	b.n	8000a9a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	2101      	movs	r1, #1
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	fa01 f303 	lsl.w	r3, r1, r3
 80007d8:	4013      	ands	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	f000 8158 	beq.w	8000a94 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	f003 0303 	and.w	r3, r3, #3
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d005      	beq.n	80007fc <HAL_GPIO_Init+0x40>
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	f003 0303 	and.w	r3, r3, #3
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d130      	bne.n	800085e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	2203      	movs	r2, #3
 8000808:	fa02 f303 	lsl.w	r3, r2, r3
 800080c:	43db      	mvns	r3, r3
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	4013      	ands	r3, r2
 8000812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	68da      	ldr	r2, [r3, #12]
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	4313      	orrs	r3, r2
 8000824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000832:	2201      	movs	r2, #1
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43db      	mvns	r3, r3
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	4013      	ands	r3, r2
 8000840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	091b      	lsrs	r3, r3, #4
 8000848:	f003 0201 	and.w	r2, r3, #1
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	4313      	orrs	r3, r2
 8000856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f003 0303 	and.w	r3, r3, #3
 8000866:	2b03      	cmp	r3, #3
 8000868:	d017      	beq.n	800089a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	2203      	movs	r2, #3
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43db      	mvns	r3, r3
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4013      	ands	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	4313      	orrs	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	f003 0303 	and.w	r3, r3, #3
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d123      	bne.n	80008ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	08da      	lsrs	r2, r3, #3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3208      	adds	r2, #8
 80008ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	220f      	movs	r2, #15
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43db      	mvns	r3, r3
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	4013      	ands	r3, r2
 80008c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	691a      	ldr	r2, [r3, #16]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	f003 0307 	and.w	r3, r3, #7
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	08da      	lsrs	r2, r3, #3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3208      	adds	r2, #8
 80008e8:	6939      	ldr	r1, [r7, #16]
 80008ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	2203      	movs	r2, #3
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	4013      	ands	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f003 0203 	and.w	r2, r3, #3
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4313      	orrs	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800092a:	2b00      	cmp	r3, #0
 800092c:	f000 80b2 	beq.w	8000a94 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000930:	4b61      	ldr	r3, [pc, #388]	; (8000ab8 <HAL_GPIO_Init+0x2fc>)
 8000932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000934:	4a60      	ldr	r2, [pc, #384]	; (8000ab8 <HAL_GPIO_Init+0x2fc>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6613      	str	r3, [r2, #96]	; 0x60
 800093c:	4b5e      	ldr	r3, [pc, #376]	; (8000ab8 <HAL_GPIO_Init+0x2fc>)
 800093e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000948:	4a5c      	ldr	r2, [pc, #368]	; (8000abc <HAL_GPIO_Init+0x300>)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	089b      	lsrs	r3, r3, #2
 800094e:	3302      	adds	r3, #2
 8000950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000954:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	220f      	movs	r2, #15
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000972:	d02b      	beq.n	80009cc <HAL_GPIO_Init+0x210>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a52      	ldr	r2, [pc, #328]	; (8000ac0 <HAL_GPIO_Init+0x304>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d025      	beq.n	80009c8 <HAL_GPIO_Init+0x20c>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a51      	ldr	r2, [pc, #324]	; (8000ac4 <HAL_GPIO_Init+0x308>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d01f      	beq.n	80009c4 <HAL_GPIO_Init+0x208>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a50      	ldr	r2, [pc, #320]	; (8000ac8 <HAL_GPIO_Init+0x30c>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d019      	beq.n	80009c0 <HAL_GPIO_Init+0x204>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a4f      	ldr	r2, [pc, #316]	; (8000acc <HAL_GPIO_Init+0x310>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d013      	beq.n	80009bc <HAL_GPIO_Init+0x200>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a4e      	ldr	r2, [pc, #312]	; (8000ad0 <HAL_GPIO_Init+0x314>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d00d      	beq.n	80009b8 <HAL_GPIO_Init+0x1fc>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a4d      	ldr	r2, [pc, #308]	; (8000ad4 <HAL_GPIO_Init+0x318>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d007      	beq.n	80009b4 <HAL_GPIO_Init+0x1f8>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a4c      	ldr	r2, [pc, #304]	; (8000ad8 <HAL_GPIO_Init+0x31c>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d101      	bne.n	80009b0 <HAL_GPIO_Init+0x1f4>
 80009ac:	2307      	movs	r3, #7
 80009ae:	e00e      	b.n	80009ce <HAL_GPIO_Init+0x212>
 80009b0:	2308      	movs	r3, #8
 80009b2:	e00c      	b.n	80009ce <HAL_GPIO_Init+0x212>
 80009b4:	2306      	movs	r3, #6
 80009b6:	e00a      	b.n	80009ce <HAL_GPIO_Init+0x212>
 80009b8:	2305      	movs	r3, #5
 80009ba:	e008      	b.n	80009ce <HAL_GPIO_Init+0x212>
 80009bc:	2304      	movs	r3, #4
 80009be:	e006      	b.n	80009ce <HAL_GPIO_Init+0x212>
 80009c0:	2303      	movs	r3, #3
 80009c2:	e004      	b.n	80009ce <HAL_GPIO_Init+0x212>
 80009c4:	2302      	movs	r3, #2
 80009c6:	e002      	b.n	80009ce <HAL_GPIO_Init+0x212>
 80009c8:	2301      	movs	r3, #1
 80009ca:	e000      	b.n	80009ce <HAL_GPIO_Init+0x212>
 80009cc:	2300      	movs	r3, #0
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	f002 0203 	and.w	r2, r2, #3
 80009d4:	0092      	lsls	r2, r2, #2
 80009d6:	4093      	lsls	r3, r2
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4313      	orrs	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009de:	4937      	ldr	r1, [pc, #220]	; (8000abc <HAL_GPIO_Init+0x300>)
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	3302      	adds	r3, #2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009ec:	4b3b      	ldr	r3, [pc, #236]	; (8000adc <HAL_GPIO_Init+0x320>)
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	43db      	mvns	r3, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4013      	ands	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d003      	beq.n	8000a10 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a10:	4a32      	ldr	r2, [pc, #200]	; (8000adc <HAL_GPIO_Init+0x320>)
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a16:	4b31      	ldr	r3, [pc, #196]	; (8000adc <HAL_GPIO_Init+0x320>)
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d003      	beq.n	8000a3a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a3a:	4a28      	ldr	r2, [pc, #160]	; (8000adc <HAL_GPIO_Init+0x320>)
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <HAL_GPIO_Init+0x320>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <HAL_GPIO_Init+0x320>)
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <HAL_GPIO_Init+0x320>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a8e:	4a13      	ldr	r2, [pc, #76]	; (8000adc <HAL_GPIO_Init+0x320>)
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	3301      	adds	r3, #1
 8000a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f47f ae91 	bne.w	80007cc <HAL_GPIO_Init+0x10>
  }
}
 8000aaa:	bf00      	nop
 8000aac:	bf00      	nop
 8000aae:	371c      	adds	r7, #28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010000 	.word	0x40010000
 8000ac0:	48000400 	.word	0x48000400
 8000ac4:	48000800 	.word	0x48000800
 8000ac8:	48000c00 	.word	0x48000c00
 8000acc:	48001000 	.word	0x48001000
 8000ad0:	48001400 	.word	0x48001400
 8000ad4:	48001800 	.word	0x48001800
 8000ad8:	48001c00 	.word	0x48001c00
 8000adc:	40010400 	.word	0x40010400

08000ae0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae2:	b08f      	sub	sp, #60	; 0x3c
 8000ae4:	af0a      	add	r7, sp, #40	; 0x28
 8000ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e116      	b.n	8000d20 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d106      	bne.n	8000b12 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2200      	movs	r2, #0
 8000b08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f006 f853 	bl	8006bb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2203      	movs	r2, #3
 8000b16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f002 ff06 	bl	8003942 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	687e      	ldr	r6, [r7, #4]
 8000b3e:	466d      	mov	r5, sp
 8000b40:	f106 0410 	add.w	r4, r6, #16
 8000b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b50:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b54:	1d33      	adds	r3, r6, #4
 8000b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b58:	6838      	ldr	r0, [r7, #0]
 8000b5a:	f002 fe19 	bl	8003790 <USB_CoreInit>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d005      	beq.n	8000b70 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2202      	movs	r2, #2
 8000b68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e0d7      	b.n	8000d20 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 fef4 	bl	8003964 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73fb      	strb	r3, [r7, #15]
 8000b80:	e04a      	b.n	8000c18 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b82:	7bfa      	ldrb	r2, [r7, #15]
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	4613      	mov	r3, r2
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	440b      	add	r3, r1
 8000b90:	333d      	adds	r3, #61	; 0x3d
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b96:	7bfa      	ldrb	r2, [r7, #15]
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	4413      	add	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	333c      	adds	r3, #60	; 0x3c
 8000ba6:	7bfa      	ldrb	r2, [r7, #15]
 8000ba8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000baa:	7bfa      	ldrb	r2, [r7, #15]
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	b298      	uxth	r0, r3
 8000bb0:	6879      	ldr	r1, [r7, #4]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	4413      	add	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	440b      	add	r3, r1
 8000bbc:	3344      	adds	r3, #68	; 0x44
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bc2:	7bfa      	ldrb	r2, [r7, #15]
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	4413      	add	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	440b      	add	r3, r1
 8000bd0:	3340      	adds	r3, #64	; 0x40
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000bd6:	7bfa      	ldrb	r2, [r7, #15]
 8000bd8:	6879      	ldr	r1, [r7, #4]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	440b      	add	r3, r1
 8000be4:	3348      	adds	r3, #72	; 0x48
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bea:	7bfa      	ldrb	r2, [r7, #15]
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	4413      	add	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	334c      	adds	r3, #76	; 0x4c
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bfe:	7bfa      	ldrb	r2, [r7, #15]
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	4613      	mov	r3, r2
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	4413      	add	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	3354      	adds	r3, #84	; 0x54
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	3301      	adds	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
 8000c18:	7bfa      	ldrb	r2, [r7, #15]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d3af      	bcc.n	8000b82 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	e044      	b.n	8000cb2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c28:	7bfa      	ldrb	r2, [r7, #15]
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	4413      	add	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	440b      	add	r3, r1
 8000c36:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c3e:	7bfa      	ldrb	r2, [r7, #15]
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	4613      	mov	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	4413      	add	r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000c50:	7bfa      	ldrb	r2, [r7, #15]
 8000c52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c54:	7bfa      	ldrb	r2, [r7, #15]
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	4413      	add	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	440b      	add	r3, r1
 8000c62:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c6a:	7bfa      	ldrb	r2, [r7, #15]
 8000c6c:	6879      	ldr	r1, [r7, #4]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	4413      	add	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	440b      	add	r3, r1
 8000c78:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c80:	7bfa      	ldrb	r2, [r7, #15]
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	4413      	add	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	4413      	add	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	73fb      	strb	r3, [r7, #15]
 8000cb2:	7bfa      	ldrb	r2, [r7, #15]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d3b5      	bcc.n	8000c28 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	687e      	ldr	r6, [r7, #4]
 8000cc4:	466d      	mov	r5, sp
 8000cc6:	f106 0410 	add.w	r4, r6, #16
 8000cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cda:	1d33      	adds	r3, r6, #4
 8000cdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cde:	6838      	ldr	r0, [r7, #0]
 8000ce0:	f002 fe8c 	bl	80039fc <USB_DevInit>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d005      	beq.n	8000cf6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2202      	movs	r2, #2
 8000cee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e014      	b.n	8000d20 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d102      	bne.n	8000d14 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f001 f882 	bl	8001e18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f003 ff14 	bl	8004b46 <USB_DevDisconnect>

  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d28 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d101      	bne.n	8000d44 <HAL_PCD_Start+0x1c>
 8000d40:	2302      	movs	r3, #2
 8000d42:	e01c      	b.n	8000d7e <HAL_PCD_Start+0x56>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d105      	bne.n	8000d60 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 fddb 	bl	8003920 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f003 fec8 	bl	8004b04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d86:	b590      	push	{r4, r7, lr}
 8000d88:	b08d      	sub	sp, #52	; 0x34
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d94:	6a3b      	ldr	r3, [r7, #32]
 8000d96:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 ff86 	bl	8004cae <USB_GetMode>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f040 847e 	bne.w	80016a6 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f003 feea 	bl	8004b88 <USB_ReadInterrupts>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 8474 	beq.w	80016a4 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 fed7 	bl	8004b88 <USB_ReadInterrupts>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d107      	bne.n	8000df4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	695a      	ldr	r2, [r3, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f002 0202 	and.w	r2, r2, #2
 8000df2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 fec5 	bl	8004b88 <USB_ReadInterrupts>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	2b10      	cmp	r3, #16
 8000e06:	d161      	bne.n	8000ecc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	699a      	ldr	r2, [r3, #24]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 0210 	bic.w	r2, r2, #16
 8000e16:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000e18:	6a3b      	ldr	r3, [r7, #32]
 8000e1a:	6a1b      	ldr	r3, [r3, #32]
 8000e1c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	f003 020f 	and.w	r2, r3, #15
 8000e24:	4613      	mov	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	4413      	add	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	4413      	add	r3, r2
 8000e34:	3304      	adds	r3, #4
 8000e36:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	0c5b      	lsrs	r3, r3, #17
 8000e3c:	f003 030f 	and.w	r3, r3, #15
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d124      	bne.n	8000e8e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d035      	beq.n	8000ebc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	091b      	lsrs	r3, r3, #4
 8000e58:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	461a      	mov	r2, r3
 8000e62:	6a38      	ldr	r0, [r7, #32]
 8000e64:	f003 fcfc 	bl	8004860 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e74:	441a      	add	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	6a1a      	ldr	r2, [r3, #32]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	091b      	lsrs	r3, r3, #4
 8000e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e86:	441a      	add	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	621a      	str	r2, [r3, #32]
 8000e8c:	e016      	b.n	8000ebc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	0c5b      	lsrs	r3, r3, #17
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d110      	bne.n	8000ebc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8000ea0:	2208      	movs	r2, #8
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	6a38      	ldr	r0, [r7, #32]
 8000ea6:	f003 fcdb 	bl	8004860 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	6a1a      	ldr	r2, [r3, #32]
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000eb6:	441a      	add	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	699a      	ldr	r2, [r3, #24]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0210 	orr.w	r2, r2, #16
 8000eca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f003 fe59 	bl	8004b88 <USB_ReadInterrupts>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000edc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000ee0:	f040 80a7 	bne.w	8001032 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 fe5e 	bl	8004bae <USB_ReadDevAllOutEpInterrupt>
 8000ef2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000ef4:	e099      	b.n	800102a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 808e 	beq.w	800101e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f003 fe82 	bl	8004c16 <USB_ReadDevOutEPInterrupt>
 8000f12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00c      	beq.n	8000f38 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	015a      	lsls	r2, r3, #5
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	4413      	add	r3, r2
 8000f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 fe96 	bl	8001c64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00c      	beq.n	8000f5c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	015a      	lsls	r2, r3, #5
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	4413      	add	r3, r2
 8000f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f4e:	461a      	mov	r2, r3
 8000f50:	2308      	movs	r3, #8
 8000f52:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000f54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 fed2 	bl	8001d00 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d008      	beq.n	8000f78 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	015a      	lsls	r2, r3, #5
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f72:	461a      	mov	r2, r3
 8000f74:	2310      	movs	r3, #16
 8000f76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d030      	beq.n	8000fe4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8a:	2b80      	cmp	r3, #128	; 0x80
 8000f8c:	d109      	bne.n	8000fa2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000f9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8000fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	78db      	ldrb	r3, [r3, #3]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d108      	bne.n	8000fd2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4619      	mov	r1, r3
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f005 ff37 	bl	8006e40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	015a      	lsls	r2, r3, #5
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	4413      	add	r3, r2
 8000fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	f003 0320 	and.w	r3, r3, #32
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d008      	beq.n	8001000 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	015a      	lsls	r2, r3, #5
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	2320      	movs	r3, #32
 8000ffe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d009      	beq.n	800101e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	015a      	lsls	r2, r3, #5
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	4413      	add	r3, r2
 8001012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001016:	461a      	mov	r2, r3
 8001018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	3301      	adds	r3, #1
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001026:	085b      	lsrs	r3, r3, #1
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800102a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102c:	2b00      	cmp	r3, #0
 800102e:	f47f af62 	bne.w	8000ef6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f003 fda6 	bl	8004b88 <USB_ReadInterrupts>
 800103c:	4603      	mov	r3, r0
 800103e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001042:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001046:	f040 80a4 	bne.w	8001192 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f003 fdc7 	bl	8004be2 <USB_ReadDevAllInEpInterrupt>
 8001054:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800105a:	e096      	b.n	800118a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 808b 	beq.w	800117e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f003 fded 	bl	8004c52 <USB_ReadDevInEPInterrupt>
 8001078:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b00      	cmp	r3, #0
 8001082:	d020      	beq.n	80010c6 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	2201      	movs	r2, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	43db      	mvns	r3, r3
 800109e:	69f9      	ldr	r1, [r7, #28]
 80010a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80010a4:	4013      	ands	r3, r2
 80010a6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	015a      	lsls	r2, r3, #5
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	4413      	add	r3, r2
 80010b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010b4:	461a      	mov	r2, r3
 80010b6:	2301      	movs	r3, #1
 80010b8:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	4619      	mov	r1, r3
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f005 fe28 	bl	8006d16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d008      	beq.n	80010e2 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	015a      	lsls	r2, r3, #5
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	4413      	add	r3, r2
 80010d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010dc:	461a      	mov	r2, r3
 80010de:	2308      	movs	r3, #8
 80010e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	f003 0310 	and.w	r3, r3, #16
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	015a      	lsls	r2, r3, #5
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	4413      	add	r3, r2
 80010f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010f8:	461a      	mov	r2, r3
 80010fa:	2310      	movs	r3, #16
 80010fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	015a      	lsls	r2, r3, #5
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	4413      	add	r3, r2
 8001110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001114:	461a      	mov	r2, r3
 8001116:	2340      	movs	r3, #64	; 0x40
 8001118:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d023      	beq.n	800116c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001126:	6a38      	ldr	r0, [r7, #32]
 8001128:	f002 fdb4 	bl	8003c94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800112c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112e:	4613      	mov	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	3338      	adds	r3, #56	; 0x38
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	3304      	adds	r3, #4
 800113e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	78db      	ldrb	r3, [r3, #3]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d108      	bne.n	800115a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2200      	movs	r2, #0
 800114c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4619      	mov	r1, r3
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f005 fe85 	bl	8006e64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	015a      	lsls	r2, r3, #5
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	4413      	add	r3, r2
 8001162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001166:	461a      	mov	r2, r3
 8001168:	2302      	movs	r3, #2
 800116a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 fcea 	bl	8001b52 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	3301      	adds	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001186:	085b      	lsrs	r3, r3, #1
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118c:	2b00      	cmp	r3, #0
 800118e:	f47f af65 	bne.w	800105c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f003 fcf6 	bl	8004b88 <USB_ReadInterrupts>
 800119c:	4603      	mov	r3, r0
 800119e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011a6:	d122      	bne.n	80011ee <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	69fa      	ldr	r2, [r7, #28]
 80011b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80011b6:	f023 0301 	bic.w	r3, r3, #1
 80011ba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d108      	bne.n	80011d8 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011ce:	2100      	movs	r1, #0
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f006 f8b7 	bl	8007344 <HAL_PCDEx_LPM_Callback>
 80011d6:	e002      	b.n	80011de <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f005 fe09 	bl	8006df0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	695a      	ldr	r2, [r3, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80011ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 fcc8 	bl	8004b88 <USB_ReadInterrupts>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001202:	d112      	bne.n	800122a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b01      	cmp	r3, #1
 8001212:	d102      	bne.n	800121a <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f005 fdc5 	bl	8006da4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	695a      	ldr	r2, [r3, #20]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001228:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fcaa 	bl	8004b88 <USB_ReadInterrupts>
 8001234:	4603      	mov	r3, r0
 8001236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800123a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800123e:	d121      	bne.n	8001284 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	695a      	ldr	r2, [r3, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800124e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001256:	2b00      	cmp	r3, #0
 8001258:	d111      	bne.n	800127e <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	f003 020f 	and.w	r2, r3, #15
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001274:	2101      	movs	r1, #1
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f006 f864 	bl	8007344 <HAL_PCDEx_LPM_Callback>
 800127c:	e002      	b.n	8001284 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f005 fd90 	bl	8006da4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f003 fc7d 	bl	8004b88 <USB_ReadInterrupts>
 800128e:	4603      	mov	r3, r0
 8001290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001298:	f040 80b5 	bne.w	8001406 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012aa:	f023 0301 	bic.w	r3, r3, #1
 80012ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2110      	movs	r1, #16
 80012b6:	4618      	mov	r0, r3
 80012b8:	f002 fcec 	bl	8003c94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c0:	e046      	b.n	8001350 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	015a      	lsls	r2, r3, #5
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	4413      	add	r3, r2
 80012ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012ce:	461a      	mov	r2, r3
 80012d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80012d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d8:	015a      	lsls	r2, r3, #5
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	4413      	add	r3, r2
 80012de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e6:	0151      	lsls	r1, r2, #5
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	440a      	add	r2, r1
 80012ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80012f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80012f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f8:	015a      	lsls	r2, r3, #5
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	4413      	add	r3, r2
 80012fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001302:	461a      	mov	r2, r3
 8001304:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001308:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800130a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130c:	015a      	lsls	r2, r3, #5
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	4413      	add	r3, r2
 8001312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800131a:	0151      	lsls	r1, r2, #5
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	440a      	add	r2, r1
 8001320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001324:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001328:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132c:	015a      	lsls	r2, r3, #5
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	4413      	add	r3, r2
 8001332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800133a:	0151      	lsls	r1, r2, #5
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	440a      	add	r2, r1
 8001340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001344:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001348:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800134a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134c:	3301      	adds	r3, #1
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001356:	429a      	cmp	r2, r3
 8001358:	d3b3      	bcc.n	80012c2 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001368:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800136c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	2b00      	cmp	r3, #0
 8001374:	d016      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800137c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001386:	f043 030b 	orr.w	r3, r3, #11
 800138a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800139c:	f043 030b 	orr.w	r3, r3, #11
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	e015      	b.n	80013d0 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013b6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80013ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013ca:	f043 030b 	orr.w	r3, r3, #11
 80013ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4610      	mov	r0, r2
 80013f2:	f003 fc8d 	bl	8004d10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	695a      	ldr	r2, [r3, #20]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001404:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f003 fbbc 	bl	8004b88 <USB_ReadInterrupts>
 8001410:	4603      	mov	r3, r0
 8001412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800141a:	d124      	bne.n	8001466 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f003 fc52 	bl	8004cca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f002 fcaf 	bl	8003d8e <USB_GetDevSpeed>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681c      	ldr	r4, [r3, #0]
 800143c:	f001 fbc4 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 8001440:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001446:	b2db      	uxtb	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	4620      	mov	r0, r4
 800144c:	f002 f9cc 	bl	80037e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f005 fc88 	bl	8006d66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001464:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f003 fb8c 	bl	8004b88 <USB_ReadInterrupts>
 8001470:	4603      	mov	r3, r0
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b08      	cmp	r3, #8
 8001478:	d10a      	bne.n	8001490 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f005 fc65 	bl	8006d4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	695a      	ldr	r2, [r3, #20]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f002 0208 	and.w	r2, r2, #8
 800148e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f003 fb77 	bl	8004b88 <USB_ReadInterrupts>
 800149a:	4603      	mov	r3, r0
 800149c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a0:	2b80      	cmp	r3, #128	; 0x80
 80014a2:	d122      	bne.n	80014ea <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014b0:	2301      	movs	r3, #1
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
 80014b4:	e014      	b.n	80014e0 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ba:	4613      	mov	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d105      	bne.n	80014da <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	4619      	mov	r1, r3
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 fb0b 	bl	8001af0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	3301      	adds	r3, #1
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d3e5      	bcc.n	80014b6 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 fb4a 	bl	8004b88 <USB_ReadInterrupts>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014fe:	d13b      	bne.n	8001578 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001500:	2301      	movs	r3, #1
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
 8001504:	e02b      	b.n	800155e <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	015a      	lsls	r2, r3, #5
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	4413      	add	r3, r2
 800150e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151a:	4613      	mov	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4413      	add	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	3340      	adds	r3, #64	; 0x40
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d115      	bne.n	8001558 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800152c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800152e:	2b00      	cmp	r3, #0
 8001530:	da12      	bge.n	8001558 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	333f      	adds	r3, #63	; 0x3f
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4619      	mov	r1, r3
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 facc 	bl	8001af0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	3301      	adds	r3, #1
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001564:	429a      	cmp	r2, r3
 8001566:	d3ce      	bcc.n	8001506 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	695a      	ldr	r2, [r3, #20]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001576:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f003 fb03 	bl	8004b88 <USB_ReadInterrupts>
 8001582:	4603      	mov	r3, r0
 8001584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001588:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800158c:	d155      	bne.n	800163a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800158e:	2301      	movs	r3, #1
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
 8001592:	e045      	b.n	8001620 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	015a      	lsls	r2, r3, #5
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	4413      	add	r3, r2
 800159c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d12e      	bne.n	800161a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80015bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80015be:	2b00      	cmp	r3, #0
 80015c0:	da2b      	bge.n	800161a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80015ce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d121      	bne.n	800161a <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015da:	4613      	mov	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10a      	bne.n	800161a <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001616:	6053      	str	r3, [r2, #4]
            break;
 8001618:	e007      	b.n	800162a <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	3301      	adds	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001626:	429a      	cmp	r2, r3
 8001628:	d3b4      	bcc.n	8001594 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001638:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f003 faa2 	bl	8004b88 <USB_ReadInterrupts>
 8001644:	4603      	mov	r3, r0
 8001646:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800164a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800164e:	d10a      	bne.n	8001666 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f005 fc19 	bl	8006e88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695a      	ldr	r2, [r3, #20]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001664:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fa8c 	bl	8004b88 <USB_ReadInterrupts>
 8001670:	4603      	mov	r3, r0
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b04      	cmp	r3, #4
 8001678:	d115      	bne.n	80016a6 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f005 fc09 	bl	8006ea4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	430a      	orrs	r2, r1
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	e000      	b.n	80016a6 <HAL_PCD_IRQHandler+0x920>
      return;
 80016a4:	bf00      	nop
    }
  }
}
 80016a6:	3734      	adds	r7, #52	; 0x34
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd90      	pop	{r4, r7, pc}

080016ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_PCD_SetAddress+0x1a>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e013      	b.n	80016ee <HAL_PCD_SetAddress+0x42>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	78fa      	ldrb	r2, [r7, #3]
 80016d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	78fa      	ldrb	r2, [r7, #3]
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f003 f9ea 	bl	8004ab8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	4608      	mov	r0, r1
 8001700:	4611      	mov	r1, r2
 8001702:	461a      	mov	r2, r3
 8001704:	4603      	mov	r3, r0
 8001706:	70fb      	strb	r3, [r7, #3]
 8001708:	460b      	mov	r3, r1
 800170a:	803b      	strh	r3, [r7, #0]
 800170c:	4613      	mov	r3, r2
 800170e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001718:	2b00      	cmp	r3, #0
 800171a:	da0f      	bge.n	800173c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	f003 020f 	and.w	r2, r3, #15
 8001722:	4613      	mov	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4413      	add	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	3338      	adds	r3, #56	; 0x38
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	4413      	add	r3, r2
 8001730:	3304      	adds	r3, #4
 8001732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2201      	movs	r2, #1
 8001738:	705a      	strb	r2, [r3, #1]
 800173a:	e00f      	b.n	800175c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	f003 020f 	and.w	r2, r3, #15
 8001742:	4613      	mov	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4413      	add	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	3304      	adds	r3, #4
 8001754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	b2da      	uxtb	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001768:	883a      	ldrh	r2, [r7, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	78ba      	ldrb	r2, [r7, #2]
 8001772:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	785b      	ldrb	r3, [r3, #1]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d004      	beq.n	8001786 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b29a      	uxth	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001786:	78bb      	ldrb	r3, [r7, #2]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d102      	bne.n	8001792 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001798:	2b01      	cmp	r3, #1
 800179a:	d101      	bne.n	80017a0 <HAL_PCD_EP_Open+0xaa>
 800179c:	2302      	movs	r3, #2
 800179e:	e00e      	b.n	80017be <HAL_PCD_EP_Open+0xc8>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68f9      	ldr	r1, [r7, #12]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fb0c 	bl	8003dcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80017bc:	7afb      	ldrb	r3, [r7, #11]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	da0f      	bge.n	80017fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	f003 020f 	and.w	r2, r3, #15
 80017e0:	4613      	mov	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	3338      	adds	r3, #56	; 0x38
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	3304      	adds	r3, #4
 80017f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2201      	movs	r2, #1
 80017f6:	705a      	strb	r2, [r3, #1]
 80017f8:	e00f      	b.n	800181a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	f003 020f 	and.w	r2, r3, #15
 8001800:	4613      	mov	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4413      	add	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	4413      	add	r3, r2
 8001810:	3304      	adds	r3, #4
 8001812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	f003 030f 	and.w	r3, r3, #15
 8001820:	b2da      	uxtb	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_PCD_EP_Close+0x6e>
 8001830:	2302      	movs	r3, #2
 8001832:	e00e      	b.n	8001852 <HAL_PCD_EP_Close+0x8c>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68f9      	ldr	r1, [r7, #12]
 8001842:	4618      	mov	r0, r3
 8001844:	f002 fb4a 	bl	8003edc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	460b      	mov	r3, r1
 8001868:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800186a:	7afb      	ldrb	r3, [r7, #11]
 800186c:	f003 020f 	and.w	r2, r3, #15
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	3304      	adds	r3, #4
 8001882:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2200      	movs	r2, #0
 8001894:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2200      	movs	r2, #0
 800189a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800189c:	7afb      	ldrb	r3, [r7, #11]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018a8:	7afb      	ldrb	r3, [r7, #11]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6979      	ldr	r1, [r7, #20]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f002 fdcb 	bl	8004454 <USB_EP0StartXfer>
 80018be:	e005      	b.n	80018cc <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6979      	ldr	r1, [r7, #20]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fbe4 	bl	8004094 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	f003 020f 	and.w	r2, r3, #15
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80018f8:	681b      	ldr	r3, [r3, #0]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	460b      	mov	r3, r1
 8001914:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	f003 020f 	and.w	r2, r3, #15
 800191c:	4613      	mov	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4413      	add	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	3338      	adds	r3, #56	; 0x38
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	3304      	adds	r3, #4
 800192c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2201      	movs	r2, #1
 8001944:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001946:	7afb      	ldrb	r3, [r7, #11]
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	b2da      	uxtb	r2, r3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001952:	7afb      	ldrb	r3, [r7, #11]
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	2b00      	cmp	r3, #0
 800195a:	d106      	bne.n	800196a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6979      	ldr	r1, [r7, #20]
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fd76 	bl	8004454 <USB_EP0StartXfer>
 8001968:	e005      	b.n	8001976 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6979      	ldr	r1, [r7, #20]
 8001970:	4618      	mov	r0, r3
 8001972:	f002 fb8f 	bl	8004094 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	f003 020f 	and.w	r2, r3, #15
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	429a      	cmp	r2, r3
 8001998:	d901      	bls.n	800199e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e04e      	b.n	8001a3c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800199e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	da0f      	bge.n	80019c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	f003 020f 	and.w	r2, r3, #15
 80019ac:	4613      	mov	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	3338      	adds	r3, #56	; 0x38
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	3304      	adds	r3, #4
 80019bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2201      	movs	r2, #1
 80019c2:	705a      	strb	r2, [r3, #1]
 80019c4:	e00d      	b.n	80019e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019c6:	78fa      	ldrb	r2, [r7, #3]
 80019c8:	4613      	mov	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	4413      	add	r3, r2
 80019d8:	3304      	adds	r3, #4
 80019da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2201      	movs	r2, #1
 80019e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_PCD_EP_SetStall+0x82>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e01c      	b.n	8001a3c <HAL_PCD_EP_SetStall+0xbc>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68f9      	ldr	r1, [r7, #12]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 ff7d 	bl	8004910 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d108      	bne.n	8001a32 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	f003 f96f 	bl	8004d10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	f003 020f 	and.w	r2, r3, #15
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d901      	bls.n	8001a62 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e042      	b.n	8001ae8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da0f      	bge.n	8001a8a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	f003 020f 	and.w	r2, r3, #15
 8001a70:	4613      	mov	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4413      	add	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	3338      	adds	r3, #56	; 0x38
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3304      	adds	r3, #4
 8001a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2201      	movs	r2, #1
 8001a86:	705a      	strb	r2, [r3, #1]
 8001a88:	e00f      	b.n	8001aaa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	f003 020f 	and.w	r2, r3, #15
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_PCD_EP_ClrStall+0x86>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e00e      	b.n	8001ae8 <HAL_PCD_EP_ClrStall+0xa4>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68f9      	ldr	r1, [r7, #12]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 ff87 	bl	80049ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	da0c      	bge.n	8001b1e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	f003 020f 	and.w	r2, r3, #15
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	3338      	adds	r3, #56	; 0x38
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	3304      	adds	r3, #4
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	e00c      	b.n	8001b38 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f003 020f 	and.w	r2, r3, #15
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	4413      	add	r3, r2
 8001b34:	3304      	adds	r3, #4
 8001b36:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68f9      	ldr	r1, [r7, #12]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f002 fdaa 	bl	8004698 <USB_EPStopXfer>
 8001b44:	4603      	mov	r3, r0
 8001b46:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001b48:	7afb      	ldrb	r3, [r7, #11]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b088      	sub	sp, #32
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	3338      	adds	r3, #56	; 0x38
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	3304      	adds	r3, #4
 8001b78:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a1a      	ldr	r2, [r3, #32]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d901      	bls.n	8001b8a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e067      	b.n	8001c5a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d902      	bls.n	8001ba6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3303      	adds	r3, #3
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001bae:	e026      	b.n	8001bfe <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	699a      	ldr	r2, [r3, #24]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d902      	bls.n	8001bcc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	3303      	adds	r3, #3
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6919      	ldr	r1, [r3, #16]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	6978      	ldr	r0, [r7, #20]
 8001be2:	f002 fe03 	bl	80047ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	441a      	add	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a1a      	ldr	r2, [r3, #32]
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	441a      	add	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d809      	bhi.n	8001c28 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a1a      	ldr	r2, [r3, #32]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d203      	bcs.n	8001c28 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1c3      	bne.n	8001bb0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	699a      	ldr	r2, [r3, #24]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d811      	bhi.n	8001c58 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	6939      	ldr	r1, [r7, #16]
 8001c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c54:	4013      	ands	r3, r2
 8001c56:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3720      	adds	r7, #32
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	333c      	adds	r3, #60	; 0x3c
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	015a      	lsls	r2, r3, #5
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <PCD_EP_OutXfrComplete_int+0x98>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d124      	bne.n	8001ce4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00a      	beq.n	8001cba <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	015a      	lsls	r2, r3, #5
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4413      	add	r3, r2
 8001cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cb6:	6093      	str	r3, [r2, #8]
 8001cb8:	e01a      	b.n	8001cf0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	015a      	lsls	r2, r3, #5
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4413      	add	r3, r2
 8001ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	2320      	movs	r3, #32
 8001cd4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f004 ffff 	bl	8006ce0 <HAL_PCD_DataOutStageCallback>
 8001ce2:	e005      	b.n	8001cf0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f004 fff8 	bl	8006ce0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	4f54310a 	.word	0x4f54310a

08001d00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	333c      	adds	r3, #60	; 0x3c
 8001d18:	3304      	adds	r3, #4
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	015a      	lsls	r2, r3, #5
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <PCD_EP_OutSetupPacket_int+0x64>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d90e      	bls.n	8001d54 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d009      	beq.n	8001d54 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d52:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f004 ffb1 	bl	8006cbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	4f54300a 	.word	0x4f54300a

08001d68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	70fb      	strb	r3, [r7, #3]
 8001d74:	4613      	mov	r3, r2
 8001d76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d107      	bne.n	8001d96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001d86:	883b      	ldrh	r3, [r7, #0]
 8001d88:	0419      	lsls	r1, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	629a      	str	r2, [r3, #40]	; 0x28
 8001d94:	e028      	b.n	8001de8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	0c1b      	lsrs	r3, r3, #16
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	4413      	add	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e00d      	b.n	8001dc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	3340      	adds	r3, #64	; 0x40
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	0c1b      	lsrs	r3, r3, #16
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d3ec      	bcc.n	8001daa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001dd0:	883b      	ldrh	r3, [r7, #0]
 8001dd2:	0418      	lsls	r0, r3, #16
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6819      	ldr	r1, [r3, #0]
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	4302      	orrs	r2, r0
 8001de0:	3340      	adds	r3, #64	; 0x40
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	f043 0303 	orr.w	r3, r3, #3
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e64:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e70:	d102      	bne.n	8001e78 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e76:	e00b      	b.n	8001e90 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e86:	d102      	bne.n	8001e8e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e8c:	e000      	b.n	8001e90 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001e8e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40007000 	.word	0x40007000

08001ea0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d141      	bne.n	8001f32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eae:	4b4b      	ldr	r3, [pc, #300]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eba:	d131      	bne.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ebc:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ec2:	4a46      	ldr	r2, [pc, #280]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ec8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ecc:	4b43      	ldr	r3, [pc, #268]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ed4:	4a41      	ldr	r2, [pc, #260]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001edc:	4b40      	ldr	r3, [pc, #256]	; (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2232      	movs	r2, #50	; 0x32
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	4a3f      	ldr	r2, [pc, #252]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	0c9b      	lsrs	r3, r3, #18
 8001eee:	3301      	adds	r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ef2:	e002      	b.n	8001efa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001efa:	4b38      	ldr	r3, [pc, #224]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f06:	d102      	bne.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f2      	bne.n	8001ef4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f0e:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1a:	d158      	bne.n	8001fce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e057      	b.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f20:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f26:	4a2d      	ldr	r2, [pc, #180]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f30:	e04d      	b.n	8001fce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f38:	d141      	bne.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f3a:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f46:	d131      	bne.n	8001fac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f48:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f4e:	4a23      	ldr	r2, [pc, #140]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f58:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f60:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2232      	movs	r2, #50	; 0x32
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	4a1c      	ldr	r2, [pc, #112]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f74:	fba2 2303 	umull	r2, r3, r2, r3
 8001f78:	0c9b      	lsrs	r3, r3, #18
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f7e:	e002      	b.n	8001f86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f92:	d102      	bne.n	8001f9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f2      	bne.n	8001f80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa6:	d112      	bne.n	8001fce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e011      	b.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fbc:	e007      	b.n	8001fce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fc6:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fcc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40007000 	.word	0x40007000
 8001fe0:	20000010 	.word	0x20000010
 8001fe4:	431bde83 	.word	0x431bde83

08001fe8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ff6:	6053      	str	r3, [r2, #4]
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40007000 	.word	0x40007000

08002008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	f000 bc08 	b.w	800282c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201c:	4b96      	ldr	r3, [pc, #600]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002026:	4b94      	ldr	r3, [pc, #592]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80e4 	beq.w	8002206 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d007      	beq.n	8002054 <HAL_RCC_OscConfig+0x4c>
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2b0c      	cmp	r3, #12
 8002048:	f040 808b 	bne.w	8002162 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b01      	cmp	r3, #1
 8002050:	f040 8087 	bne.w	8002162 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002054:	4b88      	ldr	r3, [pc, #544]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_OscConfig+0x64>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e3df      	b.n	800282c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1a      	ldr	r2, [r3, #32]
 8002070:	4b81      	ldr	r3, [pc, #516]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <HAL_RCC_OscConfig+0x7e>
 800207c:	4b7e      	ldr	r3, [pc, #504]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002084:	e005      	b.n	8002092 <HAL_RCC_OscConfig+0x8a>
 8002086:	4b7c      	ldr	r3, [pc, #496]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 8002088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002092:	4293      	cmp	r3, r2
 8002094:	d223      	bcs.n	80020de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fda0 	bl	8002be0 <RCC_SetFlashLatencyFromMSIRange>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e3c0      	b.n	800282c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020aa:	4b73      	ldr	r3, [pc, #460]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a72      	ldr	r2, [pc, #456]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80020b0:	f043 0308 	orr.w	r3, r3, #8
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b70      	ldr	r3, [pc, #448]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	496d      	ldr	r1, [pc, #436]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020c8:	4b6b      	ldr	r3, [pc, #428]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	4968      	ldr	r1, [pc, #416]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
 80020dc:	e025      	b.n	800212a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020de:	4b66      	ldr	r3, [pc, #408]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a65      	ldr	r2, [pc, #404]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b63      	ldr	r3, [pc, #396]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	4960      	ldr	r1, [pc, #384]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020fc:	4b5e      	ldr	r3, [pc, #376]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	495b      	ldr	r1, [pc, #364]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d109      	bne.n	800212a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fd60 	bl	8002be0 <RCC_SetFlashLatencyFromMSIRange>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e380      	b.n	800282c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800212a:	f000 fcc1 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 800212e:	4602      	mov	r2, r0
 8002130:	4b51      	ldr	r3, [pc, #324]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	4950      	ldr	r1, [pc, #320]	; (800227c <HAL_RCC_OscConfig+0x274>)
 800213c:	5ccb      	ldrb	r3, [r1, r3]
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	fa22 f303 	lsr.w	r3, r2, r3
 8002146:	4a4e      	ldr	r2, [pc, #312]	; (8002280 <HAL_RCC_OscConfig+0x278>)
 8002148:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800214a:	4b4e      	ldr	r3, [pc, #312]	; (8002284 <HAL_RCC_OscConfig+0x27c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe f9a2 	bl	8000498 <HAL_InitTick>
 8002154:	4603      	mov	r3, r0
 8002156:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d052      	beq.n	8002204 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	e364      	b.n	800282c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d032      	beq.n	80021d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800216a:	4b43      	ldr	r3, [pc, #268]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a42      	ldr	r2, [pc, #264]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002176:	f7fe f9df 	bl	8000538 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800217e:	f7fe f9db 	bl	8000538 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e34d      	b.n	800282c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002190:	4b39      	ldr	r3, [pc, #228]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800219c:	4b36      	ldr	r3, [pc, #216]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a35      	ldr	r2, [pc, #212]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80021a2:	f043 0308 	orr.w	r3, r3, #8
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b33      	ldr	r3, [pc, #204]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4930      	ldr	r1, [pc, #192]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ba:	4b2f      	ldr	r3, [pc, #188]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	492b      	ldr	r1, [pc, #172]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
 80021ce:	e01a      	b.n	8002206 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021d0:	4b29      	ldr	r3, [pc, #164]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a28      	ldr	r2, [pc, #160]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021dc:	f7fe f9ac 	bl	8000538 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021e4:	f7fe f9a8 	bl	8000538 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e31a      	b.n	800282c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x1dc>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002204:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d073      	beq.n	80022fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	2b08      	cmp	r3, #8
 8002216:	d005      	beq.n	8002224 <HAL_RCC_OscConfig+0x21c>
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d10e      	bne.n	800223c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d10b      	bne.n	800223c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d063      	beq.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d15f      	bne.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e2f7      	b.n	800282c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002244:	d106      	bne.n	8002254 <HAL_RCC_OscConfig+0x24c>
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e025      	b.n	80022a0 <HAL_RCC_OscConfig+0x298>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225c:	d114      	bne.n	8002288 <HAL_RCC_OscConfig+0x280>
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a05      	ldr	r2, [pc, #20]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b03      	ldr	r3, [pc, #12]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a02      	ldr	r2, [pc, #8]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e013      	b.n	80022a0 <HAL_RCC_OscConfig+0x298>
 8002278:	40021000 	.word	0x40021000
 800227c:	080074d4 	.word	0x080074d4
 8002280:	20000010 	.word	0x20000010
 8002284:	20000014 	.word	0x20000014
 8002288:	4ba0      	ldr	r3, [pc, #640]	; (800250c <HAL_RCC_OscConfig+0x504>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a9f      	ldr	r2, [pc, #636]	; (800250c <HAL_RCC_OscConfig+0x504>)
 800228e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b9d      	ldr	r3, [pc, #628]	; (800250c <HAL_RCC_OscConfig+0x504>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a9c      	ldr	r2, [pc, #624]	; (800250c <HAL_RCC_OscConfig+0x504>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe f946 	bl	8000538 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7fe f942 	bl	8000538 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e2b4      	b.n	800282c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022c2:	4b92      	ldr	r3, [pc, #584]	; (800250c <HAL_RCC_OscConfig+0x504>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x2a8>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe f932 	bl	8000538 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d8:	f7fe f92e 	bl	8000538 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e2a0      	b.n	800282c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ea:	4b88      	ldr	r3, [pc, #544]	; (800250c <HAL_RCC_OscConfig+0x504>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x2d0>
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d060      	beq.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b04      	cmp	r3, #4
 800230a:	d005      	beq.n	8002318 <HAL_RCC_OscConfig+0x310>
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2b0c      	cmp	r3, #12
 8002310:	d119      	bne.n	8002346 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d116      	bne.n	8002346 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002318:	4b7c      	ldr	r3, [pc, #496]	; (800250c <HAL_RCC_OscConfig+0x504>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_RCC_OscConfig+0x328>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e27d      	b.n	800282c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002330:	4b76      	ldr	r3, [pc, #472]	; (800250c <HAL_RCC_OscConfig+0x504>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	061b      	lsls	r3, r3, #24
 800233e:	4973      	ldr	r1, [pc, #460]	; (800250c <HAL_RCC_OscConfig+0x504>)
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002344:	e040      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d023      	beq.n	8002396 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234e:	4b6f      	ldr	r3, [pc, #444]	; (800250c <HAL_RCC_OscConfig+0x504>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a6e      	ldr	r2, [pc, #440]	; (800250c <HAL_RCC_OscConfig+0x504>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7fe f8ed 	bl	8000538 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002362:	f7fe f8e9 	bl	8000538 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e25b      	b.n	800282c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002374:	4b65      	ldr	r3, [pc, #404]	; (800250c <HAL_RCC_OscConfig+0x504>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002380:	4b62      	ldr	r3, [pc, #392]	; (800250c <HAL_RCC_OscConfig+0x504>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	061b      	lsls	r3, r3, #24
 800238e:	495f      	ldr	r1, [pc, #380]	; (800250c <HAL_RCC_OscConfig+0x504>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
 8002394:	e018      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002396:	4b5d      	ldr	r3, [pc, #372]	; (800250c <HAL_RCC_OscConfig+0x504>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a5c      	ldr	r2, [pc, #368]	; (800250c <HAL_RCC_OscConfig+0x504>)
 800239c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a2:	f7fe f8c9 	bl	8000538 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023aa:	f7fe f8c5 	bl	8000538 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e237      	b.n	800282c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023bc:	4b53      	ldr	r3, [pc, #332]	; (800250c <HAL_RCC_OscConfig+0x504>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f0      	bne.n	80023aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d03c      	beq.n	800244e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d01c      	beq.n	8002416 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023dc:	4b4b      	ldr	r3, [pc, #300]	; (800250c <HAL_RCC_OscConfig+0x504>)
 80023de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023e2:	4a4a      	ldr	r2, [pc, #296]	; (800250c <HAL_RCC_OscConfig+0x504>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ec:	f7fe f8a4 	bl	8000538 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f4:	f7fe f8a0 	bl	8000538 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e212      	b.n	800282c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002406:	4b41      	ldr	r3, [pc, #260]	; (800250c <HAL_RCC_OscConfig+0x504>)
 8002408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ef      	beq.n	80023f4 <HAL_RCC_OscConfig+0x3ec>
 8002414:	e01b      	b.n	800244e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002416:	4b3d      	ldr	r3, [pc, #244]	; (800250c <HAL_RCC_OscConfig+0x504>)
 8002418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241c:	4a3b      	ldr	r2, [pc, #236]	; (800250c <HAL_RCC_OscConfig+0x504>)
 800241e:	f023 0301 	bic.w	r3, r3, #1
 8002422:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002426:	f7fe f887 	bl	8000538 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242e:	f7fe f883 	bl	8000538 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e1f5      	b.n	800282c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002440:	4b32      	ldr	r3, [pc, #200]	; (800250c <HAL_RCC_OscConfig+0x504>)
 8002442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1ef      	bne.n	800242e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80a6 	beq.w	80025a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245c:	2300      	movs	r3, #0
 800245e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <HAL_RCC_OscConfig+0x504>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10d      	bne.n	8002488 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246c:	4b27      	ldr	r3, [pc, #156]	; (800250c <HAL_RCC_OscConfig+0x504>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	4a26      	ldr	r2, [pc, #152]	; (800250c <HAL_RCC_OscConfig+0x504>)
 8002472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002476:	6593      	str	r3, [r2, #88]	; 0x58
 8002478:	4b24      	ldr	r3, [pc, #144]	; (800250c <HAL_RCC_OscConfig+0x504>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002484:	2301      	movs	r3, #1
 8002486:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002488:	4b21      	ldr	r3, [pc, #132]	; (8002510 <HAL_RCC_OscConfig+0x508>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d118      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002494:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <HAL_RCC_OscConfig+0x508>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <HAL_RCC_OscConfig+0x508>)
 800249a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a0:	f7fe f84a 	bl	8000538 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a8:	f7fe f846 	bl	8000538 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1b8      	b.n	800282c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_RCC_OscConfig+0x508>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d108      	bne.n	80024e0 <HAL_RCC_OscConfig+0x4d8>
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_RCC_OscConfig+0x504>)
 80024d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d4:	4a0d      	ldr	r2, [pc, #52]	; (800250c <HAL_RCC_OscConfig+0x504>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024de:	e029      	b.n	8002534 <HAL_RCC_OscConfig+0x52c>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d115      	bne.n	8002514 <HAL_RCC_OscConfig+0x50c>
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_RCC_OscConfig+0x504>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <HAL_RCC_OscConfig+0x504>)
 80024f0:	f043 0304 	orr.w	r3, r3, #4
 80024f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <HAL_RCC_OscConfig+0x504>)
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fe:	4a03      	ldr	r2, [pc, #12]	; (800250c <HAL_RCC_OscConfig+0x504>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002508:	e014      	b.n	8002534 <HAL_RCC_OscConfig+0x52c>
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	40007000 	.word	0x40007000
 8002514:	4b9d      	ldr	r3, [pc, #628]	; (800278c <HAL_RCC_OscConfig+0x784>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	4a9c      	ldr	r2, [pc, #624]	; (800278c <HAL_RCC_OscConfig+0x784>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002524:	4b99      	ldr	r3, [pc, #612]	; (800278c <HAL_RCC_OscConfig+0x784>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	4a98      	ldr	r2, [pc, #608]	; (800278c <HAL_RCC_OscConfig+0x784>)
 800252c:	f023 0304 	bic.w	r3, r3, #4
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d016      	beq.n	800256a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253c:	f7fd fffc 	bl	8000538 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002542:	e00a      	b.n	800255a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002544:	f7fd fff8 	bl	8000538 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e168      	b.n	800282c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255a:	4b8c      	ldr	r3, [pc, #560]	; (800278c <HAL_RCC_OscConfig+0x784>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0ed      	beq.n	8002544 <HAL_RCC_OscConfig+0x53c>
 8002568:	e015      	b.n	8002596 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256a:	f7fd ffe5 	bl	8000538 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002570:	e00a      	b.n	8002588 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7fd ffe1 	bl	8000538 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002580:	4293      	cmp	r3, r2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e151      	b.n	800282c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002588:	4b80      	ldr	r3, [pc, #512]	; (800278c <HAL_RCC_OscConfig+0x784>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ed      	bne.n	8002572 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002596:	7ffb      	ldrb	r3, [r7, #31]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d105      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259c:	4b7b      	ldr	r3, [pc, #492]	; (800278c <HAL_RCC_OscConfig+0x784>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a0:	4a7a      	ldr	r2, [pc, #488]	; (800278c <HAL_RCC_OscConfig+0x784>)
 80025a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d03c      	beq.n	800262e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01c      	beq.n	80025f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025bc:	4b73      	ldr	r3, [pc, #460]	; (800278c <HAL_RCC_OscConfig+0x784>)
 80025be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025c2:	4a72      	ldr	r2, [pc, #456]	; (800278c <HAL_RCC_OscConfig+0x784>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025cc:	f7fd ffb4 	bl	8000538 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025d4:	f7fd ffb0 	bl	8000538 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e122      	b.n	800282c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025e6:	4b69      	ldr	r3, [pc, #420]	; (800278c <HAL_RCC_OscConfig+0x784>)
 80025e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0ef      	beq.n	80025d4 <HAL_RCC_OscConfig+0x5cc>
 80025f4:	e01b      	b.n	800262e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025f6:	4b65      	ldr	r3, [pc, #404]	; (800278c <HAL_RCC_OscConfig+0x784>)
 80025f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025fc:	4a63      	ldr	r2, [pc, #396]	; (800278c <HAL_RCC_OscConfig+0x784>)
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002606:	f7fd ff97 	bl	8000538 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800260e:	f7fd ff93 	bl	8000538 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e105      	b.n	800282c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002620:	4b5a      	ldr	r3, [pc, #360]	; (800278c <HAL_RCC_OscConfig+0x784>)
 8002622:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ef      	bne.n	800260e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80f9 	beq.w	800282a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	2b02      	cmp	r3, #2
 800263e:	f040 80cf 	bne.w	80027e0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002642:	4b52      	ldr	r3, [pc, #328]	; (800278c <HAL_RCC_OscConfig+0x784>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f003 0203 	and.w	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002652:	429a      	cmp	r2, r3
 8002654:	d12c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	3b01      	subs	r3, #1
 8002662:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d123      	bne.n	80026b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002672:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d11b      	bne.n	80026b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d113      	bne.n	80026b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002692:	085b      	lsrs	r3, r3, #1
 8002694:	3b01      	subs	r3, #1
 8002696:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d109      	bne.n	80026b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	3b01      	subs	r3, #1
 80026aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d071      	beq.n	8002794 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	d068      	beq.n	8002788 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026b6:	4b35      	ldr	r3, [pc, #212]	; (800278c <HAL_RCC_OscConfig+0x784>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d105      	bne.n	80026ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026c2:	4b32      	ldr	r3, [pc, #200]	; (800278c <HAL_RCC_OscConfig+0x784>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0ac      	b.n	800282c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026d2:	4b2e      	ldr	r3, [pc, #184]	; (800278c <HAL_RCC_OscConfig+0x784>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a2d      	ldr	r2, [pc, #180]	; (800278c <HAL_RCC_OscConfig+0x784>)
 80026d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026de:	f7fd ff2b 	bl	8000538 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fd ff27 	bl	8000538 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e099      	b.n	800282c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_RCC_OscConfig+0x784>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f0      	bne.n	80026e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002704:	4b21      	ldr	r3, [pc, #132]	; (800278c <HAL_RCC_OscConfig+0x784>)
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	4b21      	ldr	r3, [pc, #132]	; (8002790 <HAL_RCC_OscConfig+0x788>)
 800270a:	4013      	ands	r3, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002714:	3a01      	subs	r2, #1
 8002716:	0112      	lsls	r2, r2, #4
 8002718:	4311      	orrs	r1, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800271e:	0212      	lsls	r2, r2, #8
 8002720:	4311      	orrs	r1, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002726:	0852      	lsrs	r2, r2, #1
 8002728:	3a01      	subs	r2, #1
 800272a:	0552      	lsls	r2, r2, #21
 800272c:	4311      	orrs	r1, r2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002732:	0852      	lsrs	r2, r2, #1
 8002734:	3a01      	subs	r2, #1
 8002736:	0652      	lsls	r2, r2, #25
 8002738:	4311      	orrs	r1, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800273e:	06d2      	lsls	r2, r2, #27
 8002740:	430a      	orrs	r2, r1
 8002742:	4912      	ldr	r1, [pc, #72]	; (800278c <HAL_RCC_OscConfig+0x784>)
 8002744:	4313      	orrs	r3, r2
 8002746:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002748:	4b10      	ldr	r3, [pc, #64]	; (800278c <HAL_RCC_OscConfig+0x784>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0f      	ldr	r2, [pc, #60]	; (800278c <HAL_RCC_OscConfig+0x784>)
 800274e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002752:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <HAL_RCC_OscConfig+0x784>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4a0c      	ldr	r2, [pc, #48]	; (800278c <HAL_RCC_OscConfig+0x784>)
 800275a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800275e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002760:	f7fd feea 	bl	8000538 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002768:	f7fd fee6 	bl	8000538 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e058      	b.n	800282c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277a:	4b04      	ldr	r3, [pc, #16]	; (800278c <HAL_RCC_OscConfig+0x784>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002786:	e050      	b.n	800282a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e04f      	b.n	800282c <HAL_RCC_OscConfig+0x824>
 800278c:	40021000 	.word	0x40021000
 8002790:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002794:	4b27      	ldr	r3, [pc, #156]	; (8002834 <HAL_RCC_OscConfig+0x82c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d144      	bne.n	800282a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCC_OscConfig+0x82c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a23      	ldr	r2, [pc, #140]	; (8002834 <HAL_RCC_OscConfig+0x82c>)
 80027a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <HAL_RCC_OscConfig+0x82c>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a20      	ldr	r2, [pc, #128]	; (8002834 <HAL_RCC_OscConfig+0x82c>)
 80027b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027b8:	f7fd febe 	bl	8000538 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fd feba 	bl	8000538 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e02c      	b.n	800282c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d2:	4b18      	ldr	r3, [pc, #96]	; (8002834 <HAL_RCC_OscConfig+0x82c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x7b8>
 80027de:	e024      	b.n	800282a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d01f      	beq.n	8002826 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <HAL_RCC_OscConfig+0x82c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a12      	ldr	r2, [pc, #72]	; (8002834 <HAL_RCC_OscConfig+0x82c>)
 80027ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f2:	f7fd fea1 	bl	8000538 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fd fe9d 	bl	8000538 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e00f      	b.n	800282c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_RCC_OscConfig+0x82c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_RCC_OscConfig+0x82c>)
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	4905      	ldr	r1, [pc, #20]	; (8002834 <HAL_RCC_OscConfig+0x82c>)
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCC_OscConfig+0x830>)
 8002820:	4013      	ands	r3, r2
 8002822:	60cb      	str	r3, [r1, #12]
 8002824:	e001      	b.n	800282a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	feeefffc 	.word	0xfeeefffc

0800283c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e11d      	b.n	8002a90 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002854:	4b90      	ldr	r3, [pc, #576]	; (8002a98 <HAL_RCC_ClockConfig+0x25c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d910      	bls.n	8002884 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b8d      	ldr	r3, [pc, #564]	; (8002a98 <HAL_RCC_ClockConfig+0x25c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 020f 	bic.w	r2, r3, #15
 800286a:	498b      	ldr	r1, [pc, #556]	; (8002a98 <HAL_RCC_ClockConfig+0x25c>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b89      	ldr	r3, [pc, #548]	; (8002a98 <HAL_RCC_ClockConfig+0x25c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e105      	b.n	8002a90 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d010      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	4b81      	ldr	r3, [pc, #516]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800289c:	429a      	cmp	r2, r3
 800289e:	d908      	bls.n	80028b2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b7e      	ldr	r3, [pc, #504]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	497b      	ldr	r1, [pc, #492]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d079      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d11e      	bne.n	8002904 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c6:	4b75      	ldr	r3, [pc, #468]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e0dc      	b.n	8002a90 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80028d6:	f000 f9dd 	bl	8002c94 <RCC_GetSysClockFreqFromPLLSource>
 80028da:	4603      	mov	r3, r0
 80028dc:	4a70      	ldr	r2, [pc, #448]	; (8002aa0 <HAL_RCC_ClockConfig+0x264>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d946      	bls.n	8002970 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028e2:	4b6e      	ldr	r3, [pc, #440]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d140      	bne.n	8002970 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028ee:	4b6b      	ldr	r3, [pc, #428]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028f6:	4a69      	ldr	r2, [pc, #420]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 80028f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	e035      	b.n	8002970 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d107      	bne.n	800291c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800290c:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d115      	bne.n	8002944 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0b9      	b.n	8002a90 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d107      	bne.n	8002934 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002924:	4b5d      	ldr	r3, [pc, #372]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d109      	bne.n	8002944 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0ad      	b.n	8002a90 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002934:	4b59      	ldr	r3, [pc, #356]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0a5      	b.n	8002a90 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002944:	f000 f8b4 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 8002948:	4603      	mov	r3, r0
 800294a:	4a55      	ldr	r2, [pc, #340]	; (8002aa0 <HAL_RCC_ClockConfig+0x264>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d90f      	bls.n	8002970 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002950:	4b52      	ldr	r3, [pc, #328]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d109      	bne.n	8002970 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800295c:	4b4f      	ldr	r3, [pc, #316]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002964:	4a4d      	ldr	r2, [pc, #308]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800296a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002970:	4b4a      	ldr	r3, [pc, #296]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 0203 	bic.w	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4947      	ldr	r1, [pc, #284]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002982:	f7fd fdd9 	bl	8000538 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298a:	f7fd fdd5 	bl	8000538 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	; 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e077      	b.n	8002a90 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a0:	4b3e      	ldr	r3, [pc, #248]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 020c 	and.w	r2, r3, #12
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d1eb      	bne.n	800298a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b80      	cmp	r3, #128	; 0x80
 80029b6:	d105      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029b8:	4b38      	ldr	r3, [pc, #224]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4a37      	ldr	r2, [pc, #220]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 80029be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029c2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d010      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029dc:	429a      	cmp	r2, r3
 80029de:	d208      	bcs.n	80029f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e0:	4b2e      	ldr	r3, [pc, #184]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	492b      	ldr	r1, [pc, #172]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f2:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <HAL_RCC_ClockConfig+0x25c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d210      	bcs.n	8002a22 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a00:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <HAL_RCC_ClockConfig+0x25c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f023 020f 	bic.w	r2, r3, #15
 8002a08:	4923      	ldr	r1, [pc, #140]	; (8002a98 <HAL_RCC_ClockConfig+0x25c>)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a10:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <HAL_RCC_ClockConfig+0x25c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d001      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e036      	b.n	8002a90 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4918      	ldr	r1, [pc, #96]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d009      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4c:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4910      	ldr	r1, [pc, #64]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a60:	f000 f826 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <HAL_RCC_ClockConfig+0x260>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	091b      	lsrs	r3, r3, #4
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	490c      	ldr	r1, [pc, #48]	; (8002aa4 <HAL_RCC_ClockConfig+0x268>)
 8002a72:	5ccb      	ldrb	r3, [r1, r3]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <HAL_RCC_ClockConfig+0x26c>)
 8002a7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_RCC_ClockConfig+0x270>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fd07 	bl	8000498 <HAL_InitTick>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	04c4b400 	.word	0x04c4b400
 8002aa4:	080074d4 	.word	0x080074d4
 8002aa8:	20000010 	.word	0x20000010
 8002aac:	20000014 	.word	0x20000014

08002ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b089      	sub	sp, #36	; 0x24
 8002ab4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002abe:	4b3e      	ldr	r3, [pc, #248]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac8:	4b3b      	ldr	r3, [pc, #236]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	2b0c      	cmp	r3, #12
 8002adc:	d121      	bne.n	8002b22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d11e      	bne.n	8002b22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ae4:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d107      	bne.n	8002b00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002af0:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af6:	0a1b      	lsrs	r3, r3, #8
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	e005      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b00:	4b2d      	ldr	r3, [pc, #180]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b0c:	4a2b      	ldr	r2, [pc, #172]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10d      	bne.n	8002b38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d102      	bne.n	8002b2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b28:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b2a:	61bb      	str	r3, [r7, #24]
 8002b2c:	e004      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b34:	4b23      	ldr	r3, [pc, #140]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	2b0c      	cmp	r3, #12
 8002b3c:	d134      	bne.n	8002ba8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b3e:	4b1e      	ldr	r3, [pc, #120]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d003      	beq.n	8002b56 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d003      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0xac>
 8002b54:	e005      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b56:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b58:	617b      	str	r3, [r7, #20]
      break;
 8002b5a:	e005      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b5c:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b5e:	617b      	str	r3, [r7, #20]
      break;
 8002b60:	e002      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	617b      	str	r3, [r7, #20]
      break;
 8002b66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b68:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	3301      	adds	r3, #1
 8002b74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	fb03 f202 	mul.w	r2, r3, r2
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	0e5b      	lsrs	r3, r3, #25
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ba8:	69bb      	ldr	r3, [r7, #24]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3724      	adds	r7, #36	; 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	080074e4 	.word	0x080074e4
 8002bc0:	00f42400 	.word	0x00f42400
 8002bc4:	007a1200 	.word	0x007a1200

08002bc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bcc:	4b03      	ldr	r3, [pc, #12]	; (8002bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bce:	681b      	ldr	r3, [r3, #0]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	20000010 	.word	0x20000010

08002be0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002be8:	2300      	movs	r3, #0
 8002bea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bec:	4b27      	ldr	r3, [pc, #156]	; (8002c8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bf8:	f7ff f932 	bl	8001e60 <HAL_PWREx_GetVoltageRange>
 8002bfc:	6178      	str	r0, [r7, #20]
 8002bfe:	e014      	b.n	8002c2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0c:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c18:	f7ff f922 	bl	8001e60 <HAL_PWREx_GetVoltageRange>
 8002c1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c22:	4a1a      	ldr	r2, [pc, #104]	; (8002c8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c30:	d10b      	bne.n	8002c4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d913      	bls.n	8002c60 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c3c:	d902      	bls.n	8002c44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c3e:	2302      	movs	r3, #2
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	e00d      	b.n	8002c60 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c44:	2301      	movs	r3, #1
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	e00a      	b.n	8002c60 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b7f      	cmp	r3, #127	; 0x7f
 8002c4e:	d902      	bls.n	8002c56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002c50:	2302      	movs	r3, #2
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	e004      	b.n	8002c60 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b70      	cmp	r3, #112	; 0x70
 8002c5a:	d101      	bne.n	8002c60 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f023 020f 	bic.w	r2, r3, #15
 8002c68:	4909      	ldr	r1, [pc, #36]	; (8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c70:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d001      	beq.n	8002c82 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40022000 	.word	0x40022000

08002c94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c9a:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d00b      	beq.n	8002cc2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d825      	bhi.n	8002cfc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d008      	beq.n	8002cc8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d11f      	bne.n	8002cfc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002cbc:	4b25      	ldr	r3, [pc, #148]	; (8002d54 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002cbe:	613b      	str	r3, [r7, #16]
    break;
 8002cc0:	e01f      	b.n	8002d02 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002cc2:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002cc4:	613b      	str	r3, [r7, #16]
    break;
 8002cc6:	e01c      	b.n	8002d02 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cc8:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cd4:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	e005      	b.n	8002cf0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002cf0:	4a1a      	ldr	r2, [pc, #104]	; (8002d5c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf8:	613b      	str	r3, [r7, #16]
    break;
 8002cfa:	e002      	b.n	8002d02 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]
    break;
 8002d00:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d02:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	fb03 f202 	mul.w	r2, r3, r2
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	0e5b      	lsrs	r3, r3, #25
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	3301      	adds	r3, #1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002d42:	683b      	ldr	r3, [r7, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40021000 	.word	0x40021000
 8002d54:	00f42400 	.word	0x00f42400
 8002d58:	007a1200 	.word	0x007a1200
 8002d5c:	080074e4 	.word	0x080074e4

08002d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d68:	2300      	movs	r3, #0
 8002d6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d040      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d80:	2b80      	cmp	r3, #128	; 0x80
 8002d82:	d02a      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d84:	2b80      	cmp	r3, #128	; 0x80
 8002d86:	d825      	bhi.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d88:	2b60      	cmp	r3, #96	; 0x60
 8002d8a:	d026      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d8c:	2b60      	cmp	r3, #96	; 0x60
 8002d8e:	d821      	bhi.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d90:	2b40      	cmp	r3, #64	; 0x40
 8002d92:	d006      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d81d      	bhi.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d010      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002da0:	e018      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002da2:	4b89      	ldr	r3, [pc, #548]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	4a88      	ldr	r2, [pc, #544]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dac:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dae:	e015      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3304      	adds	r3, #4
 8002db4:	2100      	movs	r1, #0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fb02 	bl	80033c0 <RCCEx_PLLSAI1_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dc0:	e00c      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3320      	adds	r3, #32
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fbed 	bl	80035a8 <RCCEx_PLLSAI2_Config>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dd2:	e003      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	74fb      	strb	r3, [r7, #19]
      break;
 8002dd8:	e000      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10b      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002de2:	4b79      	ldr	r3, [pc, #484]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002de4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002de8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002df0:	4975      	ldr	r1, [pc, #468]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002df8:	e001      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d047      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e12:	d030      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e18:	d82a      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e1e:	d02a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e24:	d824      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e30:	d81e      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e3a:	d010      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e3c:	e018      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e3e:	4b62      	ldr	r3, [pc, #392]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	4a61      	ldr	r2, [pc, #388]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e48:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e4a:	e015      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	2100      	movs	r1, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fab4 	bl	80033c0 <RCCEx_PLLSAI1_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e5c:	e00c      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3320      	adds	r3, #32
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fb9f 	bl	80035a8 <RCCEx_PLLSAI2_Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e6e:	e003      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	74fb      	strb	r3, [r7, #19]
      break;
 8002e74:	e000      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002e76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e78:	7cfb      	ldrb	r3, [r7, #19]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e7e:	4b52      	ldr	r3, [pc, #328]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	494e      	ldr	r1, [pc, #312]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002e94:	e001      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 809f 	beq.w	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002eac:	4b46      	ldr	r3, [pc, #280]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00d      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	4b41      	ldr	r3, [pc, #260]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	4a40      	ldr	r2, [pc, #256]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8002ece:	4b3e      	ldr	r3, [pc, #248]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eda:	2301      	movs	r3, #1
 8002edc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ede:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a3a      	ldr	r2, [pc, #232]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eea:	f7fd fb25 	bl	8000538 <HAL_GetTick>
 8002eee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ef0:	e009      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef2:	f7fd fb21 	bl	8000538 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d902      	bls.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	74fb      	strb	r3, [r7, #19]
        break;
 8002f04:	e005      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f06:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0ef      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002f12:	7cfb      	ldrb	r3, [r7, #19]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d15b      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f18:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f22:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d01f      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d019      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f42:	4b21      	ldr	r3, [pc, #132]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f48:	4a1f      	ldr	r2, [pc, #124]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f52:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f58:	4a1b      	ldr	r2, [pc, #108]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f62:	4a19      	ldr	r2, [pc, #100]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d016      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fd fae0 	bl	8000538 <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f7fd fadc 	bl	8000538 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d902      	bls.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	74fb      	strb	r3, [r7, #19]
            break;
 8002f92:	e006      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0ec      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002fa2:	7cfb      	ldrb	r3, [r7, #19]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10c      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fa8:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb8:	4903      	ldr	r1, [pc, #12]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
 8002fc4:	74bb      	strb	r3, [r7, #18]
 8002fc6:	e005      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fd4:	7c7b      	ldrb	r3, [r7, #17]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d105      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fda:	4ba0      	ldr	r3, [pc, #640]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	4a9f      	ldr	r2, [pc, #636]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ff2:	4b9a      	ldr	r3, [pc, #616]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff8:	f023 0203 	bic.w	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003000:	4996      	ldr	r1, [pc, #600]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003014:	4b91      	ldr	r3, [pc, #580]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	f023 020c 	bic.w	r2, r3, #12
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	498e      	ldr	r1, [pc, #568]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003036:	4b89      	ldr	r3, [pc, #548]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003044:	4985      	ldr	r1, [pc, #532]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003058:	4b80      	ldr	r3, [pc, #512]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003066:	497d      	ldr	r1, [pc, #500]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800307a:	4b78      	ldr	r3, [pc, #480]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003088:	4974      	ldr	r1, [pc, #464]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800309c:	4b6f      	ldr	r3, [pc, #444]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030aa:	496c      	ldr	r1, [pc, #432]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030be:	4b67      	ldr	r3, [pc, #412]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030cc:	4963      	ldr	r1, [pc, #396]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030e0:	4b5e      	ldr	r3, [pc, #376]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ee:	495b      	ldr	r1, [pc, #364]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003102:	4b56      	ldr	r3, [pc, #344]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003108:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003110:	4952      	ldr	r1, [pc, #328]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003124:	4b4d      	ldr	r3, [pc, #308]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003132:	494a      	ldr	r1, [pc, #296]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003146:	4b45      	ldr	r3, [pc, #276]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003154:	4941      	ldr	r1, [pc, #260]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003168:	4b3c      	ldr	r3, [pc, #240]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800316a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800316e:	f023 0203 	bic.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003176:	4939      	ldr	r1, [pc, #228]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d028      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800318a:	4b34      	ldr	r3, [pc, #208]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003190:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003198:	4930      	ldr	r1, [pc, #192]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031a8:	d106      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031aa:	4b2c      	ldr	r3, [pc, #176]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	4a2b      	ldr	r2, [pc, #172]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031b4:	60d3      	str	r3, [r2, #12]
 80031b6:	e011      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031c0:	d10c      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3304      	adds	r3, #4
 80031c6:	2101      	movs	r1, #1
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 f8f9 	bl	80033c0 <RCCEx_PLLSAI1_Config>
 80031ce:	4603      	mov	r3, r0
 80031d0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031d2:	7cfb      	ldrb	r3, [r7, #19]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80031d8:	7cfb      	ldrb	r3, [r7, #19]
 80031da:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d04d      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031f0:	d108      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80031f2:	4b1a      	ldr	r3, [pc, #104]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031f8:	4a18      	ldr	r2, [pc, #96]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003202:	e012      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003204:	4b15      	ldr	r3, [pc, #84]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003206:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800320a:	4a14      	ldr	r2, [pc, #80]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800320c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003210:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003222:	490e      	ldr	r1, [pc, #56]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800322e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003232:	d106      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003234:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4a08      	ldr	r2, [pc, #32]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800323a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800323e:	60d3      	str	r3, [r2, #12]
 8003240:	e020      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800324a:	d109      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4a02      	ldr	r2, [pc, #8]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003256:	60d3      	str	r3, [r2, #12]
 8003258:	e014      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003264:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003268:	d10c      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	2101      	movs	r1, #1
 8003270:	4618      	mov	r0, r3
 8003272:	f000 f8a5 	bl	80033c0 <RCCEx_PLLSAI1_Config>
 8003276:	4603      	mov	r3, r0
 8003278:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800327a:	7cfb      	ldrb	r3, [r7, #19]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003280:	7cfb      	ldrb	r3, [r7, #19]
 8003282:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d028      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003290:	4b4a      	ldr	r3, [pc, #296]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003296:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800329e:	4947      	ldr	r1, [pc, #284]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ae:	d106      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b0:	4b42      	ldr	r3, [pc, #264]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4a41      	ldr	r2, [pc, #260]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ba:	60d3      	str	r3, [r2, #12]
 80032bc:	e011      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032c6:	d10c      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	2101      	movs	r1, #1
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f876 	bl	80033c0 <RCCEx_PLLSAI1_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80032de:	7cfb      	ldrb	r3, [r7, #19]
 80032e0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01e      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032ee:	4b33      	ldr	r3, [pc, #204]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032fe:	492f      	ldr	r1, [pc, #188]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800330c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003310:	d10c      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3304      	adds	r3, #4
 8003316:	2102      	movs	r1, #2
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f851 	bl	80033c0 <RCCEx_PLLSAI1_Config>
 800331e:	4603      	mov	r3, r0
 8003320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003322:	7cfb      	ldrb	r3, [r7, #19]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00b      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003338:	4b20      	ldr	r3, [pc, #128]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800333a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800333e:	f023 0204 	bic.w	r2, r3, #4
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003348:	491c      	ldr	r1, [pc, #112]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00b      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800335c:	4b17      	ldr	r3, [pc, #92]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800335e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003362:	f023 0218 	bic.w	r2, r3, #24
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336c:	4913      	ldr	r1, [pc, #76]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d017      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003386:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003390:	490a      	ldr	r1, [pc, #40]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800339e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033a2:	d105      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a04      	ldr	r2, [pc, #16]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000

080033c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033ce:	4b72      	ldr	r3, [pc, #456]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00e      	beq.n	80033f8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033da:	4b6f      	ldr	r3, [pc, #444]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0203 	and.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d103      	bne.n	80033f2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
       ||
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d142      	bne.n	8003478 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
 80033f6:	e03f      	b.n	8003478 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d018      	beq.n	8003432 <RCCEx_PLLSAI1_Config+0x72>
 8003400:	2b03      	cmp	r3, #3
 8003402:	d825      	bhi.n	8003450 <RCCEx_PLLSAI1_Config+0x90>
 8003404:	2b01      	cmp	r3, #1
 8003406:	d002      	beq.n	800340e <RCCEx_PLLSAI1_Config+0x4e>
 8003408:	2b02      	cmp	r3, #2
 800340a:	d009      	beq.n	8003420 <RCCEx_PLLSAI1_Config+0x60>
 800340c:	e020      	b.n	8003450 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800340e:	4b62      	ldr	r3, [pc, #392]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d11d      	bne.n	8003456 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800341e:	e01a      	b.n	8003456 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003420:	4b5d      	ldr	r3, [pc, #372]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003428:	2b00      	cmp	r3, #0
 800342a:	d116      	bne.n	800345a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003430:	e013      	b.n	800345a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003432:	4b59      	ldr	r3, [pc, #356]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800343e:	4b56      	ldr	r3, [pc, #344]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800344e:	e006      	b.n	800345e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
      break;
 8003454:	e004      	b.n	8003460 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003456:	bf00      	nop
 8003458:	e002      	b.n	8003460 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800345a:	bf00      	nop
 800345c:	e000      	b.n	8003460 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800345e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d108      	bne.n	8003478 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003466:	4b4c      	ldr	r3, [pc, #304]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f023 0203 	bic.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4949      	ldr	r1, [pc, #292]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003474:	4313      	orrs	r3, r2
 8003476:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f040 8086 	bne.w	800358c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003480:	4b45      	ldr	r3, [pc, #276]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a44      	ldr	r2, [pc, #272]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003486:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800348a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800348c:	f7fd f854 	bl	8000538 <HAL_GetTick>
 8003490:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003492:	e009      	b.n	80034a8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003494:	f7fd f850 	bl	8000538 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d902      	bls.n	80034a8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	73fb      	strb	r3, [r7, #15]
        break;
 80034a6:	e005      	b.n	80034b4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034a8:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ef      	bne.n	8003494 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d168      	bne.n	800358c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d113      	bne.n	80034e8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034c0:	4b35      	ldr	r3, [pc, #212]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	4b35      	ldr	r3, [pc, #212]	; (800359c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6892      	ldr	r2, [r2, #8]
 80034cc:	0211      	lsls	r1, r2, #8
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68d2      	ldr	r2, [r2, #12]
 80034d2:	06d2      	lsls	r2, r2, #27
 80034d4:	4311      	orrs	r1, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6852      	ldr	r2, [r2, #4]
 80034da:	3a01      	subs	r2, #1
 80034dc:	0112      	lsls	r2, r2, #4
 80034de:	430a      	orrs	r2, r1
 80034e0:	492d      	ldr	r1, [pc, #180]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	610b      	str	r3, [r1, #16]
 80034e6:	e02d      	b.n	8003544 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d115      	bne.n	800351a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034ee:	4b2a      	ldr	r3, [pc, #168]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	4b2b      	ldr	r3, [pc, #172]	; (80035a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6892      	ldr	r2, [r2, #8]
 80034fa:	0211      	lsls	r1, r2, #8
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6912      	ldr	r2, [r2, #16]
 8003500:	0852      	lsrs	r2, r2, #1
 8003502:	3a01      	subs	r2, #1
 8003504:	0552      	lsls	r2, r2, #21
 8003506:	4311      	orrs	r1, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6852      	ldr	r2, [r2, #4]
 800350c:	3a01      	subs	r2, #1
 800350e:	0112      	lsls	r2, r2, #4
 8003510:	430a      	orrs	r2, r1
 8003512:	4921      	ldr	r1, [pc, #132]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003514:	4313      	orrs	r3, r2
 8003516:	610b      	str	r3, [r1, #16]
 8003518:	e014      	b.n	8003544 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800351a:	4b1f      	ldr	r3, [pc, #124]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	4b21      	ldr	r3, [pc, #132]	; (80035a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003520:	4013      	ands	r3, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6892      	ldr	r2, [r2, #8]
 8003526:	0211      	lsls	r1, r2, #8
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6952      	ldr	r2, [r2, #20]
 800352c:	0852      	lsrs	r2, r2, #1
 800352e:	3a01      	subs	r2, #1
 8003530:	0652      	lsls	r2, r2, #25
 8003532:	4311      	orrs	r1, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6852      	ldr	r2, [r2, #4]
 8003538:	3a01      	subs	r2, #1
 800353a:	0112      	lsls	r2, r2, #4
 800353c:	430a      	orrs	r2, r1
 800353e:	4916      	ldr	r1, [pc, #88]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003540:	4313      	orrs	r3, r2
 8003542:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003544:	4b14      	ldr	r3, [pc, #80]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a13      	ldr	r2, [pc, #76]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 800354a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800354e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fc fff2 	bl	8000538 <HAL_GetTick>
 8003554:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003556:	e009      	b.n	800356c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003558:	f7fc ffee 	bl	8000538 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d902      	bls.n	800356c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	73fb      	strb	r3, [r7, #15]
          break;
 800356a:	e005      	b.n	8003578 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800356c:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0ef      	beq.n	8003558 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	4904      	ldr	r1, [pc, #16]	; (8003598 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003588:	4313      	orrs	r3, r2
 800358a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800358c:	7bfb      	ldrb	r3, [r7, #15]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000
 800359c:	07ff800f 	.word	0x07ff800f
 80035a0:	ff9f800f 	.word	0xff9f800f
 80035a4:	f9ff800f 	.word	0xf9ff800f

080035a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035b6:	4b72      	ldr	r3, [pc, #456]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00e      	beq.n	80035e0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035c2:	4b6f      	ldr	r3, [pc, #444]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0203 	and.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d103      	bne.n	80035da <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
       ||
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d142      	bne.n	8003660 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
 80035de:	e03f      	b.n	8003660 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d018      	beq.n	800361a <RCCEx_PLLSAI2_Config+0x72>
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d825      	bhi.n	8003638 <RCCEx_PLLSAI2_Config+0x90>
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d002      	beq.n	80035f6 <RCCEx_PLLSAI2_Config+0x4e>
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d009      	beq.n	8003608 <RCCEx_PLLSAI2_Config+0x60>
 80035f4:	e020      	b.n	8003638 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035f6:	4b62      	ldr	r3, [pc, #392]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11d      	bne.n	800363e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003606:	e01a      	b.n	800363e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003608:	4b5d      	ldr	r3, [pc, #372]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003610:	2b00      	cmp	r3, #0
 8003612:	d116      	bne.n	8003642 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003618:	e013      	b.n	8003642 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800361a:	4b59      	ldr	r3, [pc, #356]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10f      	bne.n	8003646 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003626:	4b56      	ldr	r3, [pc, #344]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003636:	e006      	b.n	8003646 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      break;
 800363c:	e004      	b.n	8003648 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800363e:	bf00      	nop
 8003640:	e002      	b.n	8003648 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003642:	bf00      	nop
 8003644:	e000      	b.n	8003648 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003646:	bf00      	nop
    }

    if(status == HAL_OK)
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d108      	bne.n	8003660 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800364e:	4b4c      	ldr	r3, [pc, #304]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f023 0203 	bic.w	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4949      	ldr	r1, [pc, #292]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 800365c:	4313      	orrs	r3, r2
 800365e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 8086 	bne.w	8003774 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003668:	4b45      	ldr	r3, [pc, #276]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a44      	ldr	r2, [pc, #272]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 800366e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003674:	f7fc ff60 	bl	8000538 <HAL_GetTick>
 8003678:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800367a:	e009      	b.n	8003690 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800367c:	f7fc ff5c 	bl	8000538 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d902      	bls.n	8003690 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	73fb      	strb	r3, [r7, #15]
        break;
 800368e:	e005      	b.n	800369c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003690:	4b3b      	ldr	r3, [pc, #236]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ef      	bne.n	800367c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d168      	bne.n	8003774 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d113      	bne.n	80036d0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036a8:	4b35      	ldr	r3, [pc, #212]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	4b35      	ldr	r3, [pc, #212]	; (8003784 <RCCEx_PLLSAI2_Config+0x1dc>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6892      	ldr	r2, [r2, #8]
 80036b4:	0211      	lsls	r1, r2, #8
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68d2      	ldr	r2, [r2, #12]
 80036ba:	06d2      	lsls	r2, r2, #27
 80036bc:	4311      	orrs	r1, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6852      	ldr	r2, [r2, #4]
 80036c2:	3a01      	subs	r2, #1
 80036c4:	0112      	lsls	r2, r2, #4
 80036c6:	430a      	orrs	r2, r1
 80036c8:	492d      	ldr	r1, [pc, #180]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	614b      	str	r3, [r1, #20]
 80036ce:	e02d      	b.n	800372c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d115      	bne.n	8003702 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036d6:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	4b2b      	ldr	r3, [pc, #172]	; (8003788 <RCCEx_PLLSAI2_Config+0x1e0>)
 80036dc:	4013      	ands	r3, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6892      	ldr	r2, [r2, #8]
 80036e2:	0211      	lsls	r1, r2, #8
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6912      	ldr	r2, [r2, #16]
 80036e8:	0852      	lsrs	r2, r2, #1
 80036ea:	3a01      	subs	r2, #1
 80036ec:	0552      	lsls	r2, r2, #21
 80036ee:	4311      	orrs	r1, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6852      	ldr	r2, [r2, #4]
 80036f4:	3a01      	subs	r2, #1
 80036f6:	0112      	lsls	r2, r2, #4
 80036f8:	430a      	orrs	r2, r1
 80036fa:	4921      	ldr	r1, [pc, #132]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	614b      	str	r3, [r1, #20]
 8003700:	e014      	b.n	800372c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003702:	4b1f      	ldr	r3, [pc, #124]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	4b21      	ldr	r3, [pc, #132]	; (800378c <RCCEx_PLLSAI2_Config+0x1e4>)
 8003708:	4013      	ands	r3, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6892      	ldr	r2, [r2, #8]
 800370e:	0211      	lsls	r1, r2, #8
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6952      	ldr	r2, [r2, #20]
 8003714:	0852      	lsrs	r2, r2, #1
 8003716:	3a01      	subs	r2, #1
 8003718:	0652      	lsls	r2, r2, #25
 800371a:	4311      	orrs	r1, r2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6852      	ldr	r2, [r2, #4]
 8003720:	3a01      	subs	r2, #1
 8003722:	0112      	lsls	r2, r2, #4
 8003724:	430a      	orrs	r2, r1
 8003726:	4916      	ldr	r1, [pc, #88]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003728:	4313      	orrs	r3, r2
 800372a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a13      	ldr	r2, [pc, #76]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003736:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003738:	f7fc fefe 	bl	8000538 <HAL_GetTick>
 800373c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800373e:	e009      	b.n	8003754 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003740:	f7fc fefa 	bl	8000538 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d902      	bls.n	8003754 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	73fb      	strb	r3, [r7, #15]
          break;
 8003752:	e005      	b.n	8003760 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ef      	beq.n	8003740 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	4904      	ldr	r1, [pc, #16]	; (8003780 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003770:	4313      	orrs	r3, r2
 8003772:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	07ff800f 	.word	0x07ff800f
 8003788:	ff9f800f 	.word	0xff9f800f
 800378c:	f9ff800f 	.word	0xf9ff800f

08003790 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003790:	b084      	sub	sp, #16
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	f107 001c 	add.w	r0, r7, #28
 800379e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f001 faf6 	bl	8004da0 <USB_CoreReset>
 80037b4:	4603      	mov	r3, r0
 80037b6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80037b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38
 80037ca:	e005      	b.n	80037d8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037e4:	b004      	add	sp, #16
 80037e6:	4770      	bx	lr

080037e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	4613      	mov	r3, r2
 80037f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d165      	bne.n	80038c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4a3e      	ldr	r2, [pc, #248]	; (80038f8 <USB_SetTurnaroundTime+0x110>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d906      	bls.n	8003812 <USB_SetTurnaroundTime+0x2a>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4a3d      	ldr	r2, [pc, #244]	; (80038fc <USB_SetTurnaroundTime+0x114>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d202      	bcs.n	8003812 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800380c:	230f      	movs	r3, #15
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	e05c      	b.n	80038cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4a39      	ldr	r2, [pc, #228]	; (80038fc <USB_SetTurnaroundTime+0x114>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d306      	bcc.n	8003828 <USB_SetTurnaroundTime+0x40>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4a38      	ldr	r2, [pc, #224]	; (8003900 <USB_SetTurnaroundTime+0x118>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d202      	bcs.n	8003828 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003822:	230e      	movs	r3, #14
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	e051      	b.n	80038cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4a35      	ldr	r2, [pc, #212]	; (8003900 <USB_SetTurnaroundTime+0x118>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d306      	bcc.n	800383e <USB_SetTurnaroundTime+0x56>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4a34      	ldr	r2, [pc, #208]	; (8003904 <USB_SetTurnaroundTime+0x11c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d202      	bcs.n	800383e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003838:	230d      	movs	r3, #13
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e046      	b.n	80038cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4a30      	ldr	r2, [pc, #192]	; (8003904 <USB_SetTurnaroundTime+0x11c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d306      	bcc.n	8003854 <USB_SetTurnaroundTime+0x6c>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4a2f      	ldr	r2, [pc, #188]	; (8003908 <USB_SetTurnaroundTime+0x120>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d802      	bhi.n	8003854 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800384e:	230c      	movs	r3, #12
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	e03b      	b.n	80038cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4a2c      	ldr	r2, [pc, #176]	; (8003908 <USB_SetTurnaroundTime+0x120>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d906      	bls.n	800386a <USB_SetTurnaroundTime+0x82>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4a2b      	ldr	r2, [pc, #172]	; (800390c <USB_SetTurnaroundTime+0x124>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d802      	bhi.n	800386a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003864:	230b      	movs	r3, #11
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	e030      	b.n	80038cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4a27      	ldr	r2, [pc, #156]	; (800390c <USB_SetTurnaroundTime+0x124>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d906      	bls.n	8003880 <USB_SetTurnaroundTime+0x98>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4a26      	ldr	r2, [pc, #152]	; (8003910 <USB_SetTurnaroundTime+0x128>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d802      	bhi.n	8003880 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800387a:	230a      	movs	r3, #10
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	e025      	b.n	80038cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4a23      	ldr	r2, [pc, #140]	; (8003910 <USB_SetTurnaroundTime+0x128>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d906      	bls.n	8003896 <USB_SetTurnaroundTime+0xae>
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4a22      	ldr	r2, [pc, #136]	; (8003914 <USB_SetTurnaroundTime+0x12c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d202      	bcs.n	8003896 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003890:	2309      	movs	r3, #9
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	e01a      	b.n	80038cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	4a1e      	ldr	r2, [pc, #120]	; (8003914 <USB_SetTurnaroundTime+0x12c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d306      	bcc.n	80038ac <USB_SetTurnaroundTime+0xc4>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	4a1d      	ldr	r2, [pc, #116]	; (8003918 <USB_SetTurnaroundTime+0x130>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d802      	bhi.n	80038ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80038a6:	2308      	movs	r3, #8
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	e00f      	b.n	80038cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4a1a      	ldr	r2, [pc, #104]	; (8003918 <USB_SetTurnaroundTime+0x130>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d906      	bls.n	80038c2 <USB_SetTurnaroundTime+0xda>
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4a19      	ldr	r2, [pc, #100]	; (800391c <USB_SetTurnaroundTime+0x134>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d202      	bcs.n	80038c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80038bc:	2307      	movs	r3, #7
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	e004      	b.n	80038cc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80038c2:	2306      	movs	r3, #6
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	e001      	b.n	80038cc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80038c8:	2309      	movs	r3, #9
 80038ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	029b      	lsls	r3, r3, #10
 80038e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80038e4:	431a      	orrs	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	00d8acbf 	.word	0x00d8acbf
 80038fc:	00e4e1c0 	.word	0x00e4e1c0
 8003900:	00f42400 	.word	0x00f42400
 8003904:	01067380 	.word	0x01067380
 8003908:	011a499f 	.word	0x011a499f
 800390c:	01312cff 	.word	0x01312cff
 8003910:	014ca43f 	.word	0x014ca43f
 8003914:	016e3600 	.word	0x016e3600
 8003918:	01a6ab1f 	.word	0x01a6ab1f
 800391c:	01e84800 	.word	0x01e84800

08003920 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f023 0201 	bic.w	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d115      	bne.n	80039b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003992:	2001      	movs	r0, #1
 8003994:	f7fc fddc 	bl	8000550 <HAL_Delay>
      ms++;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3301      	adds	r3, #1
 800399c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f001 f985 	bl	8004cae <USB_GetMode>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d01e      	beq.n	80039e8 <USB_SetCurrentMode+0x84>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b31      	cmp	r3, #49	; 0x31
 80039ae:	d9f0      	bls.n	8003992 <USB_SetCurrentMode+0x2e>
 80039b0:	e01a      	b.n	80039e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d115      	bne.n	80039e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039c4:	2001      	movs	r0, #1
 80039c6:	f7fc fdc3 	bl	8000550 <HAL_Delay>
      ms++;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3301      	adds	r3, #1
 80039ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f001 f96c 	bl	8004cae <USB_GetMode>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <USB_SetCurrentMode+0x84>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b31      	cmp	r3, #49	; 0x31
 80039e0:	d9f0      	bls.n	80039c4 <USB_SetCurrentMode+0x60>
 80039e2:	e001      	b.n	80039e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e005      	b.n	80039f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b32      	cmp	r3, #50	; 0x32
 80039ec:	d101      	bne.n	80039f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039fc:	b084      	sub	sp, #16
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b086      	sub	sp, #24
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	e009      	b.n	8003a30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	3340      	adds	r3, #64	; 0x40
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	2200      	movs	r2, #0
 8003a28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	2b0e      	cmp	r3, #14
 8003a34:	d9f2      	bls.n	8003a1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d11c      	bne.n	8003a76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a4a:	f043 0302 	orr.w	r3, r3, #2
 8003a4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	e005      	b.n	8003a82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a94:	4619      	mov	r1, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	680b      	ldr	r3, [r1, #0]
 8003aa0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003aa2:	2103      	movs	r1, #3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f959 	bl	8003d5c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003aaa:	2110      	movs	r1, #16
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f8f1 	bl	8003c94 <USB_FlushTxFifo>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f91d 	bl	8003cfc <USB_FlushRxFifo>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aea:	461a      	mov	r2, r3
 8003aec:	2300      	movs	r3, #0
 8003aee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003af0:	2300      	movs	r3, #0
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	e043      	b.n	8003b7e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b0c:	d118      	bne.n	8003b40 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b20:	461a      	mov	r2, r3
 8003b22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	e013      	b.n	8003b52 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b36:	461a      	mov	r2, r3
 8003b38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e008      	b.n	8003b52 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2300      	movs	r3, #0
 8003b50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5e:	461a      	mov	r2, r3
 8003b60:	2300      	movs	r3, #0
 8003b62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b70:	461a      	mov	r2, r3
 8003b72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d3b7      	bcc.n	8003af6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	e043      	b.n	8003c14 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ba2:	d118      	bne.n	8003bd6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e013      	b.n	8003be8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	e008      	b.n	8003be8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be2:	461a      	mov	r2, r3
 8003be4:	2300      	movs	r3, #0
 8003be6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c06:	461a      	mov	r2, r3
 8003c08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	3301      	adds	r3, #1
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d3b7      	bcc.n	8003b8c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f043 0210 	orr.w	r2, r3, #16
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <USB_DevInit+0x294>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	f043 0208 	orr.w	r2, r3, #8
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d107      	bne.n	8003c7e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c76:	f043 0304 	orr.w	r3, r3, #4
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c8a:	b004      	add	sp, #16
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	803c3800 	.word	0x803c3800

08003c94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <USB_FlushTxFifo+0x64>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d901      	bls.n	8003cb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e01b      	b.n	8003cec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	daf2      	bge.n	8003ca2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	019b      	lsls	r3, r3, #6
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4a08      	ldr	r2, [pc, #32]	; (8003cf8 <USB_FlushTxFifo+0x64>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e006      	b.n	8003cec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d0f0      	beq.n	8003ccc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	00030d40 	.word	0x00030d40

08003cfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4a11      	ldr	r2, [pc, #68]	; (8003d58 <USB_FlushRxFifo+0x5c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e018      	b.n	8003d4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	daf2      	bge.n	8003d08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2210      	movs	r2, #16
 8003d2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4a08      	ldr	r2, [pc, #32]	; (8003d58 <USB_FlushRxFifo+0x5c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e006      	b.n	8003d4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d0f0      	beq.n	8003d2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	00030d40 	.word	0x00030d40

08003d5c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	78fb      	ldrb	r3, [r7, #3]
 8003d76:	68f9      	ldr	r1, [r7, #12]
 8003d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b087      	sub	sp, #28
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 0306 	and.w	r3, r3, #6
 8003da6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d002      	beq.n	8003db4 <USB_GetDevSpeed+0x26>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b06      	cmp	r3, #6
 8003db2:	d102      	bne.n	8003dba <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003db4:	2302      	movs	r3, #2
 8003db6:	75fb      	strb	r3, [r7, #23]
 8003db8:	e001      	b.n	8003dbe <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003dba:	230f      	movs	r3, #15
 8003dbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d13a      	bne.n	8003e5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	2101      	movs	r1, #1
 8003dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	68f9      	ldr	r1, [r7, #12]
 8003e02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d155      	bne.n	8003ecc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	791b      	ldrb	r3, [r3, #4]
 8003e3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	059b      	lsls	r3, r3, #22
 8003e42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e44:	4313      	orrs	r3, r2
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	0151      	lsls	r1, r2, #5
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	440a      	add	r2, r1
 8003e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	e036      	b.n	8003ecc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e64:	69da      	ldr	r2, [r3, #28]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	2101      	movs	r1, #1
 8003e70:	fa01 f303 	lsl.w	r3, r1, r3
 8003e74:	041b      	lsls	r3, r3, #16
 8003e76:	68f9      	ldr	r1, [r7, #12]
 8003e78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d11a      	bne.n	8003ecc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	791b      	ldrb	r3, [r3, #4]
 8003eb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003eb2:	430b      	orrs	r3, r1
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	0151      	lsls	r1, r2, #5
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	440a      	add	r2, r1
 8003ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	785b      	ldrb	r3, [r3, #1]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d161      	bne.n	8003fbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f0e:	d11f      	bne.n	8003f50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	0151      	lsls	r1, r2, #5
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	440a      	add	r2, r1
 8003f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	2101      	movs	r1, #1
 8003f62:	fa01 f303 	lsl.w	r3, r1, r3
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	68f9      	ldr	r1, [r7, #12]
 8003f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f70:	4013      	ands	r3, r2
 8003f72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	2101      	movs	r1, #1
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	68f9      	ldr	r1, [r7, #12]
 8003f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f94:	4013      	ands	r3, r2
 8003f96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	0159      	lsls	r1, r3, #5
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	440b      	add	r3, r1
 8003fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4b35      	ldr	r3, [pc, #212]	; (800408c <USB_DeactivateEndpoint+0x1b0>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]
 8003fba:	e060      	b.n	800407e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fd2:	d11f      	bne.n	8004014 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	0151      	lsls	r1, r2, #5
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	440a      	add	r2, r1
 8003fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ff2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	0151      	lsls	r1, r2, #5
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	440a      	add	r2, r1
 800400a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800400e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004012:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	2101      	movs	r1, #1
 8004026:	fa01 f303 	lsl.w	r3, r1, r3
 800402a:	041b      	lsls	r3, r3, #16
 800402c:	43db      	mvns	r3, r3
 800402e:	68f9      	ldr	r1, [r7, #12]
 8004030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004034:	4013      	ands	r3, r2
 8004036:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	2101      	movs	r1, #1
 800404a:	fa01 f303 	lsl.w	r3, r1, r3
 800404e:	041b      	lsls	r3, r3, #16
 8004050:	43db      	mvns	r3, r3
 8004052:	68f9      	ldr	r1, [r7, #12]
 8004054:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004058:	4013      	ands	r3, r2
 800405a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	0159      	lsls	r1, r3, #5
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	440b      	add	r3, r1
 8004072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004076:	4619      	mov	r1, r3
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <USB_DeactivateEndpoint+0x1b4>)
 800407a:	4013      	ands	r3, r2
 800407c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	ec337800 	.word	0xec337800
 8004090:	eff37800 	.word	0xeff37800

08004094 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	785b      	ldrb	r3, [r3, #1]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	f040 810a 	bne.w	80042c6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d132      	bne.n	8004120 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	0151      	lsls	r1, r2, #5
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	440a      	add	r2, r1
 80040d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	0151      	lsls	r1, r2, #5
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	440a      	add	r2, r1
 80040f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	0151      	lsls	r1, r2, #5
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	440a      	add	r2, r1
 8004114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004118:	0cdb      	lsrs	r3, r3, #19
 800411a:	04db      	lsls	r3, r3, #19
 800411c:	6113      	str	r3, [r2, #16]
 800411e:	e074      	b.n	800420a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	0151      	lsls	r1, r2, #5
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	440a      	add	r2, r1
 8004136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800413a:	0cdb      	lsrs	r3, r3, #19
 800413c:	04db      	lsls	r3, r3, #19
 800413e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	0151      	lsls	r1, r2, #5
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	440a      	add	r2, r1
 8004156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800415e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004162:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004170:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6999      	ldr	r1, [r3, #24]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	440b      	add	r3, r1
 800417c:	1e59      	subs	r1, r3, #1
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	fbb1 f3f3 	udiv	r3, r1, r3
 8004186:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004188:	4b9e      	ldr	r3, [pc, #632]	; (8004404 <USB_EPStartXfer+0x370>)
 800418a:	400b      	ands	r3, r1
 800418c:	6939      	ldr	r1, [r7, #16]
 800418e:	0148      	lsls	r0, r1, #5
 8004190:	6979      	ldr	r1, [r7, #20]
 8004192:	4401      	add	r1, r0
 8004194:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004198:	4313      	orrs	r3, r2
 800419a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b2:	6939      	ldr	r1, [r7, #16]
 80041b4:	0148      	lsls	r0, r1, #5
 80041b6:	6979      	ldr	r1, [r7, #20]
 80041b8:	4401      	add	r1, r0
 80041ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041be:	4313      	orrs	r3, r2
 80041c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	791b      	ldrb	r3, [r3, #4]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d11f      	bne.n	800420a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	0151      	lsls	r1, r2, #5
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	440a      	add	r2, r1
 80041e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80041e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004204:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004208:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	0151      	lsls	r1, r2, #5
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	440a      	add	r2, r1
 8004220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004224:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004228:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	791b      	ldrb	r3, [r3, #4]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d015      	beq.n	800425e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 8106 	beq.w	8004448 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	2101      	movs	r1, #1
 800424e:	fa01 f303 	lsl.w	r3, r1, r3
 8004252:	6979      	ldr	r1, [r7, #20]
 8004254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004258:	4313      	orrs	r3, r2
 800425a:	634b      	str	r3, [r1, #52]	; 0x34
 800425c:	e0f4      	b.n	8004448 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d110      	bne.n	8004290 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	0151      	lsls	r1, r2, #5
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	440a      	add	r2, r1
 8004284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004288:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	e00f      	b.n	80042b0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	0151      	lsls	r1, r2, #5
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	440a      	add	r2, r1
 80042a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ae:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	6919      	ldr	r1, [r3, #16]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	781a      	ldrb	r2, [r3, #0]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fa94 	bl	80047ec <USB_WritePacket>
 80042c4:	e0c0      	b.n	8004448 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	0151      	lsls	r1, r2, #5
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	440a      	add	r2, r1
 80042dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e0:	0cdb      	lsrs	r3, r3, #19
 80042e2:	04db      	lsls	r3, r3, #19
 80042e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	0151      	lsls	r1, r2, #5
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	440a      	add	r2, r1
 80042fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004300:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004304:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004308:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d123      	bne.n	800435a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004328:	6939      	ldr	r1, [r7, #16]
 800432a:	0148      	lsls	r0, r1, #5
 800432c:	6979      	ldr	r1, [r7, #20]
 800432e:	4401      	add	r1, r0
 8004330:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004334:	4313      	orrs	r3, r2
 8004336:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	0151      	lsls	r1, r2, #5
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	440a      	add	r2, r1
 800434e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004352:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004356:	6113      	str	r3, [r2, #16]
 8004358:	e037      	b.n	80043ca <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	4413      	add	r3, r2
 8004364:	1e5a      	subs	r2, r3, #1
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	fbb2 f3f3 	udiv	r3, r2, r3
 800436e:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	89fa      	ldrh	r2, [r7, #14]
 8004376:	fb03 f202 	mul.w	r2, r3, r2
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	89fb      	ldrh	r3, [r7, #14]
 800438e:	04d9      	lsls	r1, r3, #19
 8004390:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <USB_EPStartXfer+0x370>)
 8004392:	400b      	ands	r3, r1
 8004394:	6939      	ldr	r1, [r7, #16]
 8004396:	0148      	lsls	r0, r1, #5
 8004398:	6979      	ldr	r1, [r7, #20]
 800439a:	4401      	add	r1, r0
 800439c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043a0:	4313      	orrs	r3, r2
 80043a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ba:	6939      	ldr	r1, [r7, #16]
 80043bc:	0148      	lsls	r0, r1, #5
 80043be:	6979      	ldr	r1, [r7, #20]
 80043c0:	4401      	add	r1, r0
 80043c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043c6:	4313      	orrs	r3, r2
 80043c8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	791b      	ldrb	r3, [r3, #4]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d12a      	bne.n	8004428 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d112      	bne.n	8004408 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	0151      	lsls	r1, r2, #5
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	440a      	add	r2, r1
 80043f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e011      	b.n	8004428 <USB_EPStartXfer+0x394>
 8004404:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	0151      	lsls	r1, r2, #5
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	440a      	add	r2, r1
 800441e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004426:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	0151      	lsls	r1, r2, #5
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	440a      	add	r2, r1
 800443e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004442:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004446:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop

08004454 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	785b      	ldrb	r3, [r3, #1]
 800446c:	2b01      	cmp	r3, #1
 800446e:	f040 80ab 	bne.w	80045c8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d132      	bne.n	80044e0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	0151      	lsls	r1, r2, #5
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	440a      	add	r2, r1
 8004490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004494:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004498:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800449c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	0151      	lsls	r1, r2, #5
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	440a      	add	r2, r1
 80044b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	0151      	lsls	r1, r2, #5
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	440a      	add	r2, r1
 80044d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d8:	0cdb      	lsrs	r3, r3, #19
 80044da:	04db      	lsls	r3, r3, #19
 80044dc:	6113      	str	r3, [r2, #16]
 80044de:	e04e      	b.n	800457e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	0151      	lsls	r1, r2, #5
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	440a      	add	r2, r1
 80044f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044fa:	0cdb      	lsrs	r3, r3, #19
 80044fc:	04db      	lsls	r3, r3, #19
 80044fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	0151      	lsls	r1, r2, #5
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	440a      	add	r2, r1
 8004516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800451a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800451e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004522:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	699a      	ldr	r2, [r3, #24]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	429a      	cmp	r2, r3
 800452e:	d903      	bls.n	8004538 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	0151      	lsls	r1, r2, #5
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	440a      	add	r2, r1
 800454e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004552:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004556:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	0148      	lsls	r0, r1, #5
 8004572:	68f9      	ldr	r1, [r7, #12]
 8004574:	4401      	add	r1, r0
 8004576:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800457a:	4313      	orrs	r3, r2
 800457c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	0151      	lsls	r1, r2, #5
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	440a      	add	r2, r1
 8004594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004598:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800459c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d071      	beq.n	800468a <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	2101      	movs	r1, #1
 80045b8:	fa01 f303 	lsl.w	r3, r1, r3
 80045bc:	68f9      	ldr	r1, [r7, #12]
 80045be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045c2:	4313      	orrs	r3, r2
 80045c4:	634b      	str	r3, [r1, #52]	; 0x34
 80045c6:	e060      	b.n	800468a <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	0151      	lsls	r1, r2, #5
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	440a      	add	r2, r1
 80045de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e2:	0cdb      	lsrs	r3, r3, #19
 80045e4:	04db      	lsls	r3, r3, #19
 80045e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	0151      	lsls	r1, r2, #5
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	440a      	add	r2, r1
 80045fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004602:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004606:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800460a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800463e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004642:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	0148      	lsls	r0, r1, #5
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	4401      	add	r1, r0
 8004662:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004666:	4313      	orrs	r3, r2
 8004668:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	0151      	lsls	r1, r2, #5
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	440a      	add	r2, r1
 8004680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004684:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004688:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	785b      	ldrb	r3, [r3, #1]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d14a      	bne.n	800474c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ce:	f040 8086 	bne.w	80047de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	7812      	ldrb	r2, [r2, #0]
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	7812      	ldrb	r2, [r2, #0]
 800470a:	0151      	lsls	r1, r2, #5
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	440a      	add	r2, r1
 8004710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004714:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004718:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3301      	adds	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f242 7210 	movw	r2, #10000	; 0x2710
 8004726:	4293      	cmp	r3, r2
 8004728:	d902      	bls.n	8004730 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	75fb      	strb	r3, [r7, #23]
          break;
 800472e:	e056      	b.n	80047de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004748:	d0e7      	beq.n	800471a <USB_EPStopXfer+0x82>
 800474a:	e048      	b.n	80047de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004764:	d13b      	bne.n	80047de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	7812      	ldrb	r2, [r2, #0]
 800477a:	0151      	lsls	r1, r2, #5
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	440a      	add	r2, r1
 8004780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004784:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004788:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	7812      	ldrb	r2, [r2, #0]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3301      	adds	r3, #1
 80047b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d902      	bls.n	80047c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	75fb      	strb	r3, [r7, #23]
          break;
 80047c2:	e00c      	b.n	80047de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047dc:	d0e7      	beq.n	80047ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80047de:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b089      	sub	sp, #36	; 0x24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	4611      	mov	r1, r2
 80047f8:	461a      	mov	r2, r3
 80047fa:	460b      	mov	r3, r1
 80047fc:	71fb      	strb	r3, [r7, #7]
 80047fe:	4613      	mov	r3, r2
 8004800:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800480a:	88bb      	ldrh	r3, [r7, #4]
 800480c:	3303      	adds	r3, #3
 800480e:	089b      	lsrs	r3, r3, #2
 8004810:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004812:	2300      	movs	r3, #0
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	e018      	b.n	800484a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004818:	79fb      	ldrb	r3, [r7, #7]
 800481a:	031a      	lsls	r2, r3, #12
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	4413      	add	r3, r2
 8004820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004824:	461a      	mov	r2, r3
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	3301      	adds	r3, #1
 8004830:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	3301      	adds	r3, #1
 8004836:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	3301      	adds	r3, #1
 800483c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	3301      	adds	r3, #1
 8004842:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	3301      	adds	r3, #1
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	429a      	cmp	r2, r3
 8004850:	d3e2      	bcc.n	8004818 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3724      	adds	r7, #36	; 0x24
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004860:	b480      	push	{r7}
 8004862:	b08b      	sub	sp, #44	; 0x2c
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	4613      	mov	r3, r2
 800486c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	089b      	lsrs	r3, r3, #2
 800487a:	b29b      	uxth	r3, r3
 800487c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	f003 0303 	and.w	r3, r3, #3
 8004884:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004886:	2300      	movs	r3, #0
 8004888:	623b      	str	r3, [r7, #32]
 800488a:	e014      	b.n	80048b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	601a      	str	r2, [r3, #0]
    pDest++;
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	3301      	adds	r3, #1
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	3301      	adds	r3, #1
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	3301      	adds	r3, #1
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	3301      	adds	r3, #1
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	3301      	adds	r3, #1
 80048b4:	623b      	str	r3, [r7, #32]
 80048b6:	6a3a      	ldr	r2, [r7, #32]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d3e6      	bcc.n	800488c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048be:	8bfb      	ldrh	r3, [r7, #30]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d01e      	beq.n	8004902 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ce:	461a      	mov	r2, r3
 80048d0:	f107 0310 	add.w	r3, r7, #16
 80048d4:	6812      	ldr	r2, [r2, #0]
 80048d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	fa22 f303 	lsr.w	r3, r2, r3
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	701a      	strb	r2, [r3, #0]
      i++;
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	3301      	adds	r3, #1
 80048ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	3301      	adds	r3, #1
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80048f6:	8bfb      	ldrh	r3, [r7, #30]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048fc:	8bfb      	ldrh	r3, [r7, #30]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ea      	bne.n	80048d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004904:	4618      	mov	r0, r3
 8004906:	372c      	adds	r7, #44	; 0x2c
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	785b      	ldrb	r3, [r3, #1]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d12c      	bne.n	8004986 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	db12      	blt.n	8004964 <USB_EPSetStall+0x54>
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00f      	beq.n	8004964 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	0151      	lsls	r1, r2, #5
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	440a      	add	r2, r1
 800495a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800495e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004962:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	0151      	lsls	r1, r2, #5
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	440a      	add	r2, r1
 800497a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	e02b      	b.n	80049de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	db12      	blt.n	80049be <USB_EPSetStall+0xae>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00f      	beq.n	80049be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	0151      	lsls	r1, r2, #5
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	440a      	add	r2, r1
 80049b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	0151      	lsls	r1, r2, #5
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	440a      	add	r2, r1
 80049d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	785b      	ldrb	r3, [r3, #1]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d128      	bne.n	8004a5a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	0151      	lsls	r1, r2, #5
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	440a      	add	r2, r1
 8004a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	791b      	ldrb	r3, [r3, #4]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d003      	beq.n	8004a38 <USB_EPClearStall+0x4c>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	791b      	ldrb	r3, [r3, #4]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d138      	bne.n	8004aaa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	0151      	lsls	r1, r2, #5
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	440a      	add	r2, r1
 8004a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	e027      	b.n	8004aaa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	0151      	lsls	r1, r2, #5
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	440a      	add	r2, r1
 8004a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	791b      	ldrb	r3, [r3, #4]
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d003      	beq.n	8004a8a <USB_EPClearStall+0x9e>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	791b      	ldrb	r3, [r3, #4]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d10f      	bne.n	8004aaa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	0151      	lsls	r1, r2, #5
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	440a      	add	r2, r1
 8004aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ad6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ada:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004aec:	68f9      	ldr	r1, [r7, #12]
 8004aee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004af2:	4313      	orrs	r3, r2
 8004af4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b32:	f023 0302 	bic.w	r3, r3, #2
 8004b36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b085      	sub	sp, #20
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b60:	f023 0303 	bic.w	r3, r3, #3
 8004b64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b74:	f043 0302 	orr.w	r3, r3, #2
 8004b78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	0c1b      	lsrs	r3, r3, #16
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	4013      	ands	r3, r2
 8004c04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	b29b      	uxth	r3, r3
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b085      	sub	sp, #20
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	4013      	ands	r3, r2
 8004c42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c44:	68bb      	ldr	r3, [r7, #8]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b087      	sub	sp, #28
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c76:	78fb      	ldrb	r3, [r7, #3]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c82:	01db      	lsls	r3, r3, #7
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ca0:	68bb      	ldr	r3, [r7, #8]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f003 0301 	and.w	r3, r3, #1
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ce8:	f023 0307 	bic.w	r3, r3, #7
 8004cec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	333c      	adds	r3, #60	; 0x3c
 8004d22:	3304      	adds	r3, #4
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4a1c      	ldr	r2, [pc, #112]	; (8004d9c <USB_EP0_OutStart+0x8c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d90a      	bls.n	8004d46 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d40:	d101      	bne.n	8004d46 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e024      	b.n	8004d90 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	2300      	movs	r3, #0
 8004d50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d74:	f043 0318 	orr.w	r3, r3, #24
 8004d78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004d8c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	4f54300a 	.word	0x4f54300a

08004da0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3301      	adds	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4a13      	ldr	r2, [pc, #76]	; (8004e04 <USB_CoreReset+0x64>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e01b      	b.n	8004df6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	daf2      	bge.n	8004dac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f043 0201 	orr.w	r2, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4a09      	ldr	r2, [pc, #36]	; (8004e04 <USB_CoreReset+0x64>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e006      	b.n	8004df6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d0f0      	beq.n	8004dd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	00030d40 	.word	0x00030d40

08004e08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e14:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e18:	f002 fae2 	bl	80073e0 <USBD_static_malloc>
 8004e1c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d105      	bne.n	8004e30 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e066      	b.n	8004efe <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	7c1b      	ldrb	r3, [r3, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d119      	bne.n	8004e74 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e44:	2202      	movs	r2, #2
 8004e46:	2181      	movs	r1, #129	; 0x81
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f002 f8b5 	bl	8006fb8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e58:	2202      	movs	r2, #2
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f002 f8ab 	bl	8006fb8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2210      	movs	r2, #16
 8004e6e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004e72:	e016      	b.n	8004ea2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e74:	2340      	movs	r3, #64	; 0x40
 8004e76:	2202      	movs	r2, #2
 8004e78:	2181      	movs	r1, #129	; 0x81
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f002 f89c 	bl	8006fb8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e86:	2340      	movs	r3, #64	; 0x40
 8004e88:	2202      	movs	r2, #2
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f002 f893 	bl	8006fb8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2210      	movs	r2, #16
 8004e9e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	2203      	movs	r2, #3
 8004ea6:	2182      	movs	r1, #130	; 0x82
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f002 f885 	bl	8006fb8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	7c1b      	ldrb	r3, [r3, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d109      	bne.n	8004eec <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f002 f9e1 	bl	80072ac <USBD_LL_PrepareReceive>
 8004eea:	e007      	b.n	8004efc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ef2:	2340      	movs	r3, #64	; 0x40
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f002 f9d8 	bl	80072ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004f12:	2181      	movs	r1, #129	; 0x81
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f002 f88d 	bl	8007034 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004f20:	2101      	movs	r1, #1
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f002 f886 	bl	8007034 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004f30:	2182      	movs	r1, #130	; 0x82
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f002 f87e 	bl	8007034 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00e      	beq.n	8004f70 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f62:	4618      	mov	r0, r3
 8004f64:	f002 fa4a 	bl	80073fc <USBD_static_free>
    pdev->pClassData = NULL;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e0af      	b.n	8005104 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d03f      	beq.n	8005030 <USBD_CDC_Setup+0xb4>
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	f040 809f 	bne.w	80050f4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	88db      	ldrh	r3, [r3, #6]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d02e      	beq.n	800501c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	b25b      	sxtb	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	da16      	bge.n	8004ff6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004fd4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	88d2      	ldrh	r2, [r2, #6]
 8004fda:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	88db      	ldrh	r3, [r3, #6]
 8004fe0:	2b07      	cmp	r3, #7
 8004fe2:	bf28      	it	cs
 8004fe4:	2307      	movcs	r3, #7
 8004fe6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	89fa      	ldrh	r2, [r7, #14]
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f001 fb43 	bl	800667a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004ff4:	e085      	b.n	8005102 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	785a      	ldrb	r2, [r3, #1]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	88db      	ldrh	r3, [r3, #6]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800500c:	6939      	ldr	r1, [r7, #16]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	88db      	ldrh	r3, [r3, #6]
 8005012:	461a      	mov	r2, r3
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f001 fb5c 	bl	80066d2 <USBD_CtlPrepareRx>
      break;
 800501a:	e072      	b.n	8005102 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	7850      	ldrb	r0, [r2, #1]
 8005028:	2200      	movs	r2, #0
 800502a:	6839      	ldr	r1, [r7, #0]
 800502c:	4798      	blx	r3
      break;
 800502e:	e068      	b.n	8005102 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	785b      	ldrb	r3, [r3, #1]
 8005034:	2b0b      	cmp	r3, #11
 8005036:	d852      	bhi.n	80050de <USBD_CDC_Setup+0x162>
 8005038:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <USBD_CDC_Setup+0xc4>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005071 	.word	0x08005071
 8005044:	080050ed 	.word	0x080050ed
 8005048:	080050df 	.word	0x080050df
 800504c:	080050df 	.word	0x080050df
 8005050:	080050df 	.word	0x080050df
 8005054:	080050df 	.word	0x080050df
 8005058:	080050df 	.word	0x080050df
 800505c:	080050df 	.word	0x080050df
 8005060:	080050df 	.word	0x080050df
 8005064:	080050df 	.word	0x080050df
 8005068:	0800509b 	.word	0x0800509b
 800506c:	080050c5 	.word	0x080050c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b03      	cmp	r3, #3
 800507a:	d107      	bne.n	800508c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800507c:	f107 030a 	add.w	r3, r7, #10
 8005080:	2202      	movs	r2, #2
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f001 faf8 	bl	800667a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800508a:	e032      	b.n	80050f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800508c:	6839      	ldr	r1, [r7, #0]
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f001 fa82 	bl	8006598 <USBD_CtlError>
            ret = USBD_FAIL;
 8005094:	2303      	movs	r3, #3
 8005096:	75fb      	strb	r3, [r7, #23]
          break;
 8005098:	e02b      	b.n	80050f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d107      	bne.n	80050b6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80050a6:	f107 030d 	add.w	r3, r7, #13
 80050aa:	2201      	movs	r2, #1
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f001 fae3 	bl	800667a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050b4:	e01d      	b.n	80050f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80050b6:	6839      	ldr	r1, [r7, #0]
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f001 fa6d 	bl	8006598 <USBD_CtlError>
            ret = USBD_FAIL;
 80050be:	2303      	movs	r3, #3
 80050c0:	75fb      	strb	r3, [r7, #23]
          break;
 80050c2:	e016      	b.n	80050f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d00f      	beq.n	80050f0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80050d0:	6839      	ldr	r1, [r7, #0]
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f001 fa60 	bl	8006598 <USBD_CtlError>
            ret = USBD_FAIL;
 80050d8:	2303      	movs	r3, #3
 80050da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80050dc:	e008      	b.n	80050f0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80050de:	6839      	ldr	r1, [r7, #0]
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f001 fa59 	bl	8006598 <USBD_CtlError>
          ret = USBD_FAIL;
 80050e6:	2303      	movs	r3, #3
 80050e8:	75fb      	strb	r3, [r7, #23]
          break;
 80050ea:	e002      	b.n	80050f2 <USBD_CDC_Setup+0x176>
          break;
 80050ec:	bf00      	nop
 80050ee:	e008      	b.n	8005102 <USBD_CDC_Setup+0x186>
          break;
 80050f0:	bf00      	nop
      }
      break;
 80050f2:	e006      	b.n	8005102 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80050f4:	6839      	ldr	r1, [r7, #0]
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f001 fa4e 	bl	8006598 <USBD_CtlError>
      ret = USBD_FAIL;
 80050fc:	2303      	movs	r3, #3
 80050fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005100:	bf00      	nop
  }

  return (uint8_t)ret;
 8005102:	7dfb      	ldrb	r3, [r7, #23]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800511e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800512a:	2303      	movs	r3, #3
 800512c:	e04f      	b.n	80051ce <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005134:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005136:	78fa      	ldrb	r2, [r7, #3]
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	3318      	adds	r3, #24
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d029      	beq.n	80051a0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800514c:	78fa      	ldrb	r2, [r7, #3]
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	3318      	adds	r3, #24
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	78f9      	ldrb	r1, [r7, #3]
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	460b      	mov	r3, r1
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	440b      	add	r3, r1
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4403      	add	r3, r0
 800516c:	3348      	adds	r3, #72	; 0x48
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	fbb2 f1f3 	udiv	r1, r2, r3
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800517a:	2b00      	cmp	r3, #0
 800517c:	d110      	bne.n	80051a0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	3318      	adds	r3, #24
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005192:	78f9      	ldrb	r1, [r7, #3]
 8005194:	2300      	movs	r3, #0
 8005196:	2200      	movs	r2, #0
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f002 f84f 	bl	800723c <USBD_LL_Transmit>
 800519e:	e015      	b.n	80051cc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80051c8:	78fa      	ldrb	r2, [r7, #3]
 80051ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	460b      	mov	r3, r1
 80051e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e015      	b.n	8005224 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	4619      	mov	r1, r3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f002 f88d 	bl	800731c <USBD_LL_GetRxDataSize>
 8005202:	4602      	mov	r2, r0
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800521e:	4611      	mov	r1, r2
 8005220:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800523a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005242:	2303      	movs	r3, #3
 8005244:	e01b      	b.n	800527e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d015      	beq.n	800527c <USBD_CDC_EP0_RxReady+0x50>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005256:	2bff      	cmp	r3, #255	; 0xff
 8005258:	d010      	beq.n	800527c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005268:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005270:	b292      	uxth	r2, r2
 8005272:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	22ff      	movs	r2, #255	; 0xff
 8005278:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2243      	movs	r2, #67	; 0x43
 8005294:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005296:	4b03      	ldr	r3, [pc, #12]	; (80052a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	200000a4 	.word	0x200000a4

080052a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2243      	movs	r2, #67	; 0x43
 80052b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80052b6:	4b03      	ldr	r3, [pc, #12]	; (80052c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	20000060 	.word	0x20000060

080052c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2243      	movs	r2, #67	; 0x43
 80052d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80052d6:	4b03      	ldr	r3, [pc, #12]	; (80052e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	200000e8 	.word	0x200000e8

080052e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	220a      	movs	r2, #10
 80052f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80052f6:	4b03      	ldr	r3, [pc, #12]	; (8005304 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	2000001c 	.word	0x2000001c

08005308 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005318:	2303      	movs	r3, #3
 800531a:	e004      	b.n	8005326 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005332:	b480      	push	{r7}
 8005334:	b087      	sub	sp, #28
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005344:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800534c:	2303      	movs	r3, #3
 800534e:	e008      	b.n	8005362 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800537e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005386:	2303      	movs	r3, #3
 8005388:	e004      	b.n	8005394 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053ae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80053b0:	2301      	movs	r3, #1
 80053b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80053be:	2303      	movs	r3, #3
 80053c0:	e01a      	b.n	80053f8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d114      	bne.n	80053f6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80053ea:	2181      	movs	r1, #129	; 0x81
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f001 ff25 	bl	800723c <USBD_LL_Transmit>

    ret = USBD_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800540e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800541a:	2303      	movs	r3, #3
 800541c:	e016      	b.n	800544c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	7c1b      	ldrb	r3, [r3, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800542c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005430:	2101      	movs	r1, #1
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f001 ff3a 	bl	80072ac <USBD_LL_PrepareReceive>
 8005438:	e007      	b.n	800544a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005440:	2340      	movs	r3, #64	; 0x40
 8005442:	2101      	movs	r1, #1
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f001 ff31 	bl	80072ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	4613      	mov	r3, r2
 8005460:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005468:	2303      	movs	r3, #3
 800546a:	e01f      	b.n	80054ac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	79fa      	ldrb	r2, [r7, #7]
 800549e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f001 fd0d 	bl	8006ec0 <USBD_LL_Init>
 80054a6:	4603      	mov	r3, r0
 80054a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80054aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e016      	b.n	80054fa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00b      	beq.n	80054f8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	f107 020e 	add.w	r2, r7, #14
 80054ec:	4610      	mov	r0, r2
 80054ee:	4798      	blx	r3
 80054f0:	4602      	mov	r2, r0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b082      	sub	sp, #8
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f001 fd22 	bl	8006f54 <USBD_LL_Start>
 8005510:	4603      	mov	r3, r0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800553c:	2303      	movs	r3, #3
 800553e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	78fa      	ldrb	r2, [r7, #3]
 8005554:	4611      	mov	r1, r2
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
 800555a:	4603      	mov	r3, r0
 800555c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800555e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d007      	beq.n	800558e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	78fa      	ldrb	r2, [r7, #3]
 8005588:	4611      	mov	r1, r2
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	4798      	blx	r3
  }

  return USBD_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055a8:	6839      	ldr	r1, [r7, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 ffba 	bl	8006524 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80055be:	461a      	mov	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d01a      	beq.n	800560a <USBD_LL_SetupStage+0x72>
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d822      	bhi.n	800561e <USBD_LL_SetupStage+0x86>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <USBD_LL_SetupStage+0x4a>
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d00a      	beq.n	80055f6 <USBD_LL_SetupStage+0x5e>
 80055e0:	e01d      	b.n	800561e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055e8:	4619      	mov	r1, r3
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fa62 	bl	8005ab4 <USBD_StdDevReq>
 80055f0:	4603      	mov	r3, r0
 80055f2:	73fb      	strb	r3, [r7, #15]
      break;
 80055f4:	e020      	b.n	8005638 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055fc:	4619      	mov	r1, r3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fac6 	bl	8005b90 <USBD_StdItfReq>
 8005604:	4603      	mov	r3, r0
 8005606:	73fb      	strb	r3, [r7, #15]
      break;
 8005608:	e016      	b.n	8005638 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fb05 	bl	8005c22 <USBD_StdEPReq>
 8005618:	4603      	mov	r3, r0
 800561a:	73fb      	strb	r3, [r7, #15]
      break;
 800561c:	e00c      	b.n	8005638 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005624:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005628:	b2db      	uxtb	r3, r3
 800562a:	4619      	mov	r1, r3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f001 fd37 	bl	80070a0 <USBD_LL_StallEP>
 8005632:	4603      	mov	r3, r0
 8005634:	73fb      	strb	r3, [r7, #15]
      break;
 8005636:	bf00      	nop
  }

  return ret;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b086      	sub	sp, #24
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	460b      	mov	r3, r1
 800564c:	607a      	str	r2, [r7, #4]
 800564e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005650:	7afb      	ldrb	r3, [r7, #11]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d138      	bne.n	80056c8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800565c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005664:	2b03      	cmp	r3, #3
 8005666:	d14a      	bne.n	80056fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	429a      	cmp	r2, r3
 8005672:	d913      	bls.n	800569c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	1ad2      	subs	r2, r2, r3
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	4293      	cmp	r3, r2
 800568c:	bf28      	it	cs
 800568e:	4613      	movcs	r3, r2
 8005690:	461a      	mov	r2, r3
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f001 f839 	bl	800670c <USBD_CtlContinueRx>
 800569a:	e030      	b.n	80056fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d10b      	bne.n	80056c0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d005      	beq.n	80056c0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f001 f834 	bl	800672e <USBD_CtlSendStatus>
 80056c6:	e01a      	b.n	80056fe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d114      	bne.n	80056fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00e      	beq.n	80056fe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	7afa      	ldrb	r2, [r7, #11]
 80056ea:	4611      	mov	r1, r2
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	4798      	blx	r3
 80056f0:	4603      	mov	r3, r0
 80056f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80056f4:	7dfb      	ldrb	r3, [r7, #23]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
 80056fc:	e000      	b.n	8005700 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	460b      	mov	r3, r1
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005716:	7afb      	ldrb	r3, [r7, #11]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d16b      	bne.n	80057f4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3314      	adds	r3, #20
 8005720:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005728:	2b02      	cmp	r3, #2
 800572a:	d156      	bne.n	80057da <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	429a      	cmp	r2, r3
 8005736:	d914      	bls.n	8005762 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	1ad2      	subs	r2, r2, r3
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	461a      	mov	r2, r3
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 ffae 	bl	80066b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005754:	2300      	movs	r3, #0
 8005756:	2200      	movs	r2, #0
 8005758:	2100      	movs	r1, #0
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f001 fda6 	bl	80072ac <USBD_LL_PrepareReceive>
 8005760:	e03b      	b.n	80057da <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	429a      	cmp	r2, r3
 800576c:	d11c      	bne.n	80057a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005776:	429a      	cmp	r2, r3
 8005778:	d316      	bcc.n	80057a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005784:	429a      	cmp	r2, r3
 8005786:	d20f      	bcs.n	80057a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005788:	2200      	movs	r2, #0
 800578a:	2100      	movs	r1, #0
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 ff8f 	bl	80066b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800579a:	2300      	movs	r3, #0
 800579c:	2200      	movs	r2, #0
 800579e:	2100      	movs	r1, #0
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f001 fd83 	bl	80072ac <USBD_LL_PrepareReceive>
 80057a6:	e018      	b.n	80057da <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d10b      	bne.n	80057cc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80057cc:	2180      	movs	r1, #128	; 0x80
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f001 fc66 	bl	80070a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 ffbd 	bl	8006754 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d122      	bne.n	800582a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f7ff fe98 	bl	800551a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80057f2:	e01a      	b.n	800582a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d114      	bne.n	800582a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00e      	beq.n	800582a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	7afa      	ldrb	r2, [r7, #11]
 8005816:	4611      	mov	r1, r2
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	4798      	blx	r3
 800581c:	4603      	mov	r3, r0
 800581e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005820:	7dfb      	ldrb	r3, [r7, #23]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005826:	7dfb      	ldrb	r3, [r7, #23]
 8005828:	e000      	b.n	800582c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005864:	2303      	movs	r3, #3
 8005866:	e02f      	b.n	80058c8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00f      	beq.n	8005892 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6852      	ldr	r2, [r2, #4]
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	4611      	mov	r1, r2
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005892:	2340      	movs	r3, #64	; 0x40
 8005894:	2200      	movs	r2, #0
 8005896:	2100      	movs	r1, #0
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 fb8d 	bl	8006fb8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2240      	movs	r2, #64	; 0x40
 80058aa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058ae:	2340      	movs	r3, #64	; 0x40
 80058b0:	2200      	movs	r2, #0
 80058b2:	2180      	movs	r1, #128	; 0x80
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 fb7f 	bl	8006fb8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2240      	movs	r2, #64	; 0x40
 80058c4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	78fa      	ldrb	r2, [r7, #3]
 80058e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2204      	movs	r2, #4
 800590a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b04      	cmp	r3, #4
 800592e:	d106      	bne.n	800593e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005936:	b2da      	uxtb	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800595e:	2303      	movs	r3, #3
 8005960:	e012      	b.n	8005988 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b03      	cmp	r3, #3
 800596c:	d10b      	bne.n	8005986 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e014      	b.n	80059d4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d10d      	bne.n	80059d2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	78fa      	ldrb	r2, [r7, #3]
 80059cc:	4611      	mov	r1, r2
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e014      	b.n	8005a20 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d10d      	bne.n	8005a1e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	78fa      	ldrb	r2, [r7, #3]
 8005a18:	4611      	mov	r1, r2
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d009      	beq.n	8005a6c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6852      	ldr	r2, [r2, #4]
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	4611      	mov	r1, r2
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	4798      	blx	r3
  }

  return USBD_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b087      	sub	sp, #28
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005a94:	8a3b      	ldrh	r3, [r7, #16]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	b21a      	sxth	r2, r3
 8005a9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	b21b      	sxth	r3, r3
 8005aa2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005aa4:	89fb      	ldrh	r3, [r7, #14]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d005      	beq.n	8005ada <USBD_StdDevReq+0x26>
 8005ace:	2b40      	cmp	r3, #64	; 0x40
 8005ad0:	d853      	bhi.n	8005b7a <USBD_StdDevReq+0xc6>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00b      	beq.n	8005aee <USBD_StdDevReq+0x3a>
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	d14f      	bne.n	8005b7a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	4798      	blx	r3
 8005ae8:	4603      	mov	r3, r0
 8005aea:	73fb      	strb	r3, [r7, #15]
      break;
 8005aec:	e04a      	b.n	8005b84 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	785b      	ldrb	r3, [r3, #1]
 8005af2:	2b09      	cmp	r3, #9
 8005af4:	d83b      	bhi.n	8005b6e <USBD_StdDevReq+0xba>
 8005af6:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <USBD_StdDevReq+0x48>)
 8005af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afc:	08005b51 	.word	0x08005b51
 8005b00:	08005b65 	.word	0x08005b65
 8005b04:	08005b6f 	.word	0x08005b6f
 8005b08:	08005b5b 	.word	0x08005b5b
 8005b0c:	08005b6f 	.word	0x08005b6f
 8005b10:	08005b2f 	.word	0x08005b2f
 8005b14:	08005b25 	.word	0x08005b25
 8005b18:	08005b6f 	.word	0x08005b6f
 8005b1c:	08005b47 	.word	0x08005b47
 8005b20:	08005b39 	.word	0x08005b39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f9de 	bl	8005ee8 <USBD_GetDescriptor>
          break;
 8005b2c:	e024      	b.n	8005b78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005b2e:	6839      	ldr	r1, [r7, #0]
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fb6d 	bl	8006210 <USBD_SetAddress>
          break;
 8005b36:	e01f      	b.n	8005b78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fbac 	bl	8006298 <USBD_SetConfig>
 8005b40:	4603      	mov	r3, r0
 8005b42:	73fb      	strb	r3, [r7, #15]
          break;
 8005b44:	e018      	b.n	8005b78 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005b46:	6839      	ldr	r1, [r7, #0]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fc4b 	bl	80063e4 <USBD_GetConfig>
          break;
 8005b4e:	e013      	b.n	8005b78 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fc7c 	bl	8006450 <USBD_GetStatus>
          break;
 8005b58:	e00e      	b.n	8005b78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005b5a:	6839      	ldr	r1, [r7, #0]
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fcab 	bl	80064b8 <USBD_SetFeature>
          break;
 8005b62:	e009      	b.n	8005b78 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fcba 	bl	80064e0 <USBD_ClrFeature>
          break;
 8005b6c:	e004      	b.n	8005b78 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fd11 	bl	8006598 <USBD_CtlError>
          break;
 8005b76:	bf00      	nop
      }
      break;
 8005b78:	e004      	b.n	8005b84 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fd0b 	bl	8006598 <USBD_CtlError>
      break;
 8005b82:	bf00      	nop
  }

  return ret;
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop

08005b90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ba6:	2b40      	cmp	r3, #64	; 0x40
 8005ba8:	d005      	beq.n	8005bb6 <USBD_StdItfReq+0x26>
 8005baa:	2b40      	cmp	r3, #64	; 0x40
 8005bac:	d82f      	bhi.n	8005c0e <USBD_StdItfReq+0x7e>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <USBD_StdItfReq+0x26>
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d12b      	bne.n	8005c0e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d81d      	bhi.n	8005c00 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	889b      	ldrh	r3, [r3, #4]
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d813      	bhi.n	8005bf6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	4798      	blx	r3
 8005bdc:	4603      	mov	r3, r0
 8005bde:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	88db      	ldrh	r3, [r3, #6]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d110      	bne.n	8005c0a <USBD_StdItfReq+0x7a>
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10d      	bne.n	8005c0a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fd9d 	bl	800672e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005bf4:	e009      	b.n	8005c0a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005bf6:	6839      	ldr	r1, [r7, #0]
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fccd 	bl	8006598 <USBD_CtlError>
          break;
 8005bfe:	e004      	b.n	8005c0a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fcc8 	bl	8006598 <USBD_CtlError>
          break;
 8005c08:	e000      	b.n	8005c0c <USBD_StdItfReq+0x7c>
          break;
 8005c0a:	bf00      	nop
      }
      break;
 8005c0c:	e004      	b.n	8005c18 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005c0e:	6839      	ldr	r1, [r7, #0]
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fcc1 	bl	8006598 <USBD_CtlError>
      break;
 8005c16:	bf00      	nop
  }

  return ret;
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b084      	sub	sp, #16
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	889b      	ldrh	r3, [r3, #4]
 8005c34:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c3e:	2b40      	cmp	r3, #64	; 0x40
 8005c40:	d007      	beq.n	8005c52 <USBD_StdEPReq+0x30>
 8005c42:	2b40      	cmp	r3, #64	; 0x40
 8005c44:	f200 8145 	bhi.w	8005ed2 <USBD_StdEPReq+0x2b0>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00c      	beq.n	8005c66 <USBD_StdEPReq+0x44>
 8005c4c:	2b20      	cmp	r3, #32
 8005c4e:	f040 8140 	bne.w	8005ed2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	4798      	blx	r3
 8005c60:	4603      	mov	r3, r0
 8005c62:	73fb      	strb	r3, [r7, #15]
      break;
 8005c64:	e13a      	b.n	8005edc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	785b      	ldrb	r3, [r3, #1]
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d007      	beq.n	8005c7e <USBD_StdEPReq+0x5c>
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	f300 8129 	bgt.w	8005ec6 <USBD_StdEPReq+0x2a4>
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d07f      	beq.n	8005d78 <USBD_StdEPReq+0x156>
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d03c      	beq.n	8005cf6 <USBD_StdEPReq+0xd4>
 8005c7c:	e123      	b.n	8005ec6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d002      	beq.n	8005c90 <USBD_StdEPReq+0x6e>
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d016      	beq.n	8005cbc <USBD_StdEPReq+0x9a>
 8005c8e:	e02c      	b.n	8005cea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c90:	7bbb      	ldrb	r3, [r7, #14]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00d      	beq.n	8005cb2 <USBD_StdEPReq+0x90>
 8005c96:	7bbb      	ldrb	r3, [r7, #14]
 8005c98:	2b80      	cmp	r3, #128	; 0x80
 8005c9a:	d00a      	beq.n	8005cb2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c9c:	7bbb      	ldrb	r3, [r7, #14]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 f9fd 	bl	80070a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ca6:	2180      	movs	r1, #128	; 0x80
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f001 f9f9 	bl	80070a0 <USBD_LL_StallEP>
 8005cae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005cb0:	e020      	b.n	8005cf4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fc6f 	bl	8006598 <USBD_CtlError>
              break;
 8005cba:	e01b      	b.n	8005cf4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	885b      	ldrh	r3, [r3, #2]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10e      	bne.n	8005ce2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005cc4:	7bbb      	ldrb	r3, [r7, #14]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00b      	beq.n	8005ce2 <USBD_StdEPReq+0xc0>
 8005cca:	7bbb      	ldrb	r3, [r7, #14]
 8005ccc:	2b80      	cmp	r3, #128	; 0x80
 8005cce:	d008      	beq.n	8005ce2 <USBD_StdEPReq+0xc0>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	88db      	ldrh	r3, [r3, #6]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d104      	bne.n	8005ce2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005cd8:	7bbb      	ldrb	r3, [r7, #14]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f001 f9df 	bl	80070a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fd23 	bl	800672e <USBD_CtlSendStatus>

              break;
 8005ce8:	e004      	b.n	8005cf4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fc53 	bl	8006598 <USBD_CtlError>
              break;
 8005cf2:	bf00      	nop
          }
          break;
 8005cf4:	e0ec      	b.n	8005ed0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d002      	beq.n	8005d08 <USBD_StdEPReq+0xe6>
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d016      	beq.n	8005d34 <USBD_StdEPReq+0x112>
 8005d06:	e030      	b.n	8005d6a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d08:	7bbb      	ldrb	r3, [r7, #14]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00d      	beq.n	8005d2a <USBD_StdEPReq+0x108>
 8005d0e:	7bbb      	ldrb	r3, [r7, #14]
 8005d10:	2b80      	cmp	r3, #128	; 0x80
 8005d12:	d00a      	beq.n	8005d2a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d14:	7bbb      	ldrb	r3, [r7, #14]
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f001 f9c1 	bl	80070a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d1e:	2180      	movs	r1, #128	; 0x80
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f001 f9bd 	bl	80070a0 <USBD_LL_StallEP>
 8005d26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d28:	e025      	b.n	8005d76 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fc33 	bl	8006598 <USBD_CtlError>
              break;
 8005d32:	e020      	b.n	8005d76 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	885b      	ldrh	r3, [r3, #2]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d11b      	bne.n	8005d74 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005d3c:	7bbb      	ldrb	r3, [r7, #14]
 8005d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d004      	beq.n	8005d50 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005d46:	7bbb      	ldrb	r3, [r7, #14]
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f001 f9de 	bl	800710c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fcec 	bl	800672e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	4798      	blx	r3
 8005d64:	4603      	mov	r3, r0
 8005d66:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005d68:	e004      	b.n	8005d74 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fc13 	bl	8006598 <USBD_CtlError>
              break;
 8005d72:	e000      	b.n	8005d76 <USBD_StdEPReq+0x154>
              break;
 8005d74:	bf00      	nop
          }
          break;
 8005d76:	e0ab      	b.n	8005ed0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d002      	beq.n	8005d8a <USBD_StdEPReq+0x168>
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d032      	beq.n	8005dee <USBD_StdEPReq+0x1cc>
 8005d88:	e097      	b.n	8005eba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d8a:	7bbb      	ldrb	r3, [r7, #14]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d007      	beq.n	8005da0 <USBD_StdEPReq+0x17e>
 8005d90:	7bbb      	ldrb	r3, [r7, #14]
 8005d92:	2b80      	cmp	r3, #128	; 0x80
 8005d94:	d004      	beq.n	8005da0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fbfd 	bl	8006598 <USBD_CtlError>
                break;
 8005d9e:	e091      	b.n	8005ec4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005da0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	da0b      	bge.n	8005dc0 <USBD_StdEPReq+0x19e>
 8005da8:	7bbb      	ldrb	r3, [r7, #14]
 8005daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	3310      	adds	r3, #16
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	4413      	add	r3, r2
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	e00b      	b.n	8005dd8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005dc0:	7bbb      	ldrb	r3, [r7, #14]
 8005dc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2202      	movs	r2, #2
 8005de4:	4619      	mov	r1, r3
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fc47 	bl	800667a <USBD_CtlSendData>
              break;
 8005dec:	e06a      	b.n	8005ec4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005dee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	da11      	bge.n	8005e1a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
 8005df8:	f003 020f 	and.w	r2, r3, #15
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	440b      	add	r3, r1
 8005e08:	3324      	adds	r3, #36	; 0x24
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d117      	bne.n	8005e40 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fbc0 	bl	8006598 <USBD_CtlError>
                  break;
 8005e18:	e054      	b.n	8005ec4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005e1a:	7bbb      	ldrb	r3, [r7, #14]
 8005e1c:	f003 020f 	and.w	r2, r3, #15
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d104      	bne.n	8005e40 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fbad 	bl	8006598 <USBD_CtlError>
                  break;
 8005e3e:	e041      	b.n	8005ec4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	da0b      	bge.n	8005e60 <USBD_StdEPReq+0x23e>
 8005e48:	7bbb      	ldrb	r3, [r7, #14]
 8005e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	3310      	adds	r3, #16
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	e00b      	b.n	8005e78 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e60:	7bbb      	ldrb	r3, [r7, #14]
 8005e62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e66:	4613      	mov	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	3304      	adds	r3, #4
 8005e78:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e7a:	7bbb      	ldrb	r3, [r7, #14]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <USBD_StdEPReq+0x264>
 8005e80:	7bbb      	ldrb	r3, [r7, #14]
 8005e82:	2b80      	cmp	r3, #128	; 0x80
 8005e84:	d103      	bne.n	8005e8e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	e00e      	b.n	8005eac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005e8e:	7bbb      	ldrb	r3, [r7, #14]
 8005e90:	4619      	mov	r1, r3
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f001 f970 	bl	8007178 <USBD_LL_IsStallEP>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	e002      	b.n	8005eac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fbe1 	bl	800667a <USBD_CtlSendData>
              break;
 8005eb8:	e004      	b.n	8005ec4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fb6b 	bl	8006598 <USBD_CtlError>
              break;
 8005ec2:	bf00      	nop
          }
          break;
 8005ec4:	e004      	b.n	8005ed0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fb65 	bl	8006598 <USBD_CtlError>
          break;
 8005ece:	bf00      	nop
      }
      break;
 8005ed0:	e004      	b.n	8005edc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fb5f 	bl	8006598 <USBD_CtlError>
      break;
 8005eda:	bf00      	nop
  }

  return ret;
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	885b      	ldrh	r3, [r3, #2]
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3b01      	subs	r3, #1
 8005f08:	2b0e      	cmp	r3, #14
 8005f0a:	f200 8152 	bhi.w	80061b2 <USBD_GetDescriptor+0x2ca>
 8005f0e:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <USBD_GetDescriptor+0x2c>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005f85 	.word	0x08005f85
 8005f18:	08005f9d 	.word	0x08005f9d
 8005f1c:	08005fdd 	.word	0x08005fdd
 8005f20:	080061b3 	.word	0x080061b3
 8005f24:	080061b3 	.word	0x080061b3
 8005f28:	08006153 	.word	0x08006153
 8005f2c:	0800617f 	.word	0x0800617f
 8005f30:	080061b3 	.word	0x080061b3
 8005f34:	080061b3 	.word	0x080061b3
 8005f38:	080061b3 	.word	0x080061b3
 8005f3c:	080061b3 	.word	0x080061b3
 8005f40:	080061b3 	.word	0x080061b3
 8005f44:	080061b3 	.word	0x080061b3
 8005f48:	080061b3 	.word	0x080061b3
 8005f4c:	08005f51 	.word	0x08005f51
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00b      	beq.n	8005f74 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	7c12      	ldrb	r2, [r2, #16]
 8005f68:	f107 0108 	add.w	r1, r7, #8
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	4798      	blx	r3
 8005f70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f72:	e126      	b.n	80061c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005f74:	6839      	ldr	r1, [r7, #0]
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fb0e 	bl	8006598 <USBD_CtlError>
        err++;
 8005f7c:	7afb      	ldrb	r3, [r7, #11]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	72fb      	strb	r3, [r7, #11]
      break;
 8005f82:	e11e      	b.n	80061c2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	7c12      	ldrb	r2, [r2, #16]
 8005f90:	f107 0108 	add.w	r1, r7, #8
 8005f94:	4610      	mov	r0, r2
 8005f96:	4798      	blx	r3
 8005f98:	60f8      	str	r0, [r7, #12]
      break;
 8005f9a:	e112      	b.n	80061c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	7c1b      	ldrb	r3, [r3, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10d      	bne.n	8005fc0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	f107 0208 	add.w	r2, r7, #8
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4798      	blx	r3
 8005fb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	2202      	movs	r2, #2
 8005fbc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005fbe:	e100      	b.n	80061c2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	f107 0208 	add.w	r2, r7, #8
 8005fcc:	4610      	mov	r0, r2
 8005fce:	4798      	blx	r3
 8005fd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	701a      	strb	r2, [r3, #0]
      break;
 8005fda:	e0f2      	b.n	80061c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	885b      	ldrh	r3, [r3, #2]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b05      	cmp	r3, #5
 8005fe4:	f200 80ac 	bhi.w	8006140 <USBD_GetDescriptor+0x258>
 8005fe8:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <USBD_GetDescriptor+0x108>)
 8005fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fee:	bf00      	nop
 8005ff0:	08006009 	.word	0x08006009
 8005ff4:	0800603d 	.word	0x0800603d
 8005ff8:	08006071 	.word	0x08006071
 8005ffc:	080060a5 	.word	0x080060a5
 8006000:	080060d9 	.word	0x080060d9
 8006004:	0800610d 	.word	0x0800610d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00b      	beq.n	800602c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	7c12      	ldrb	r2, [r2, #16]
 8006020:	f107 0108 	add.w	r1, r7, #8
 8006024:	4610      	mov	r0, r2
 8006026:	4798      	blx	r3
 8006028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800602a:	e091      	b.n	8006150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800602c:	6839      	ldr	r1, [r7, #0]
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fab2 	bl	8006598 <USBD_CtlError>
            err++;
 8006034:	7afb      	ldrb	r3, [r7, #11]
 8006036:	3301      	adds	r3, #1
 8006038:	72fb      	strb	r3, [r7, #11]
          break;
 800603a:	e089      	b.n	8006150 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00b      	beq.n	8006060 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	7c12      	ldrb	r2, [r2, #16]
 8006054:	f107 0108 	add.w	r1, r7, #8
 8006058:	4610      	mov	r0, r2
 800605a:	4798      	blx	r3
 800605c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800605e:	e077      	b.n	8006150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fa98 	bl	8006598 <USBD_CtlError>
            err++;
 8006068:	7afb      	ldrb	r3, [r7, #11]
 800606a:	3301      	adds	r3, #1
 800606c:	72fb      	strb	r3, [r7, #11]
          break;
 800606e:	e06f      	b.n	8006150 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00b      	beq.n	8006094 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	7c12      	ldrb	r2, [r2, #16]
 8006088:	f107 0108 	add.w	r1, r7, #8
 800608c:	4610      	mov	r0, r2
 800608e:	4798      	blx	r3
 8006090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006092:	e05d      	b.n	8006150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006094:	6839      	ldr	r1, [r7, #0]
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fa7e 	bl	8006598 <USBD_CtlError>
            err++;
 800609c:	7afb      	ldrb	r3, [r7, #11]
 800609e:	3301      	adds	r3, #1
 80060a0:	72fb      	strb	r3, [r7, #11]
          break;
 80060a2:	e055      	b.n	8006150 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00b      	beq.n	80060c8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	7c12      	ldrb	r2, [r2, #16]
 80060bc:	f107 0108 	add.w	r1, r7, #8
 80060c0:	4610      	mov	r0, r2
 80060c2:	4798      	blx	r3
 80060c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060c6:	e043      	b.n	8006150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fa64 	bl	8006598 <USBD_CtlError>
            err++;
 80060d0:	7afb      	ldrb	r3, [r7, #11]
 80060d2:	3301      	adds	r3, #1
 80060d4:	72fb      	strb	r3, [r7, #11]
          break;
 80060d6:	e03b      	b.n	8006150 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00b      	beq.n	80060fc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	7c12      	ldrb	r2, [r2, #16]
 80060f0:	f107 0108 	add.w	r1, r7, #8
 80060f4:	4610      	mov	r0, r2
 80060f6:	4798      	blx	r3
 80060f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060fa:	e029      	b.n	8006150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fa4a 	bl	8006598 <USBD_CtlError>
            err++;
 8006104:	7afb      	ldrb	r3, [r7, #11]
 8006106:	3301      	adds	r3, #1
 8006108:	72fb      	strb	r3, [r7, #11]
          break;
 800610a:	e021      	b.n	8006150 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00b      	beq.n	8006130 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	7c12      	ldrb	r2, [r2, #16]
 8006124:	f107 0108 	add.w	r1, r7, #8
 8006128:	4610      	mov	r0, r2
 800612a:	4798      	blx	r3
 800612c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800612e:	e00f      	b.n	8006150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fa30 	bl	8006598 <USBD_CtlError>
            err++;
 8006138:	7afb      	ldrb	r3, [r7, #11]
 800613a:	3301      	adds	r3, #1
 800613c:	72fb      	strb	r3, [r7, #11]
          break;
 800613e:	e007      	b.n	8006150 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fa28 	bl	8006598 <USBD_CtlError>
          err++;
 8006148:	7afb      	ldrb	r3, [r7, #11]
 800614a:	3301      	adds	r3, #1
 800614c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800614e:	bf00      	nop
      }
      break;
 8006150:	e037      	b.n	80061c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	7c1b      	ldrb	r3, [r3, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d109      	bne.n	800616e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006162:	f107 0208 	add.w	r2, r7, #8
 8006166:	4610      	mov	r0, r2
 8006168:	4798      	blx	r3
 800616a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800616c:	e029      	b.n	80061c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fa11 	bl	8006598 <USBD_CtlError>
        err++;
 8006176:	7afb      	ldrb	r3, [r7, #11]
 8006178:	3301      	adds	r3, #1
 800617a:	72fb      	strb	r3, [r7, #11]
      break;
 800617c:	e021      	b.n	80061c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	7c1b      	ldrb	r3, [r3, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10d      	bne.n	80061a2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	f107 0208 	add.w	r2, r7, #8
 8006192:	4610      	mov	r0, r2
 8006194:	4798      	blx	r3
 8006196:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3301      	adds	r3, #1
 800619c:	2207      	movs	r2, #7
 800619e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061a0:	e00f      	b.n	80061c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80061a2:	6839      	ldr	r1, [r7, #0]
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f9f7 	bl	8006598 <USBD_CtlError>
        err++;
 80061aa:	7afb      	ldrb	r3, [r7, #11]
 80061ac:	3301      	adds	r3, #1
 80061ae:	72fb      	strb	r3, [r7, #11]
      break;
 80061b0:	e007      	b.n	80061c2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f9ef 	bl	8006598 <USBD_CtlError>
      err++;
 80061ba:	7afb      	ldrb	r3, [r7, #11]
 80061bc:	3301      	adds	r3, #1
 80061be:	72fb      	strb	r3, [r7, #11]
      break;
 80061c0:	bf00      	nop
  }

  if (err != 0U)
 80061c2:	7afb      	ldrb	r3, [r7, #11]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d11e      	bne.n	8006206 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	88db      	ldrh	r3, [r3, #6]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d016      	beq.n	80061fe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80061d0:	893b      	ldrh	r3, [r7, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00e      	beq.n	80061f4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	88da      	ldrh	r2, [r3, #6]
 80061da:	893b      	ldrh	r3, [r7, #8]
 80061dc:	4293      	cmp	r3, r2
 80061de:	bf28      	it	cs
 80061e0:	4613      	movcs	r3, r2
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80061e6:	893b      	ldrh	r3, [r7, #8]
 80061e8:	461a      	mov	r2, r3
 80061ea:	68f9      	ldr	r1, [r7, #12]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fa44 	bl	800667a <USBD_CtlSendData>
 80061f2:	e009      	b.n	8006208 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f9ce 	bl	8006598 <USBD_CtlError>
 80061fc:	e004      	b.n	8006208 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fa95 	bl	800672e <USBD_CtlSendStatus>
 8006204:	e000      	b.n	8006208 <USBD_GetDescriptor+0x320>
    return;
 8006206:	bf00      	nop
  }
}
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop

08006210 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	889b      	ldrh	r3, [r3, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d131      	bne.n	8006286 <USBD_SetAddress+0x76>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	88db      	ldrh	r3, [r3, #6]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d12d      	bne.n	8006286 <USBD_SetAddress+0x76>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	885b      	ldrh	r3, [r3, #2]
 800622e:	2b7f      	cmp	r3, #127	; 0x7f
 8006230:	d829      	bhi.n	8006286 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	885b      	ldrh	r3, [r3, #2]
 8006236:	b2db      	uxtb	r3, r3
 8006238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800623c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b03      	cmp	r3, #3
 8006248:	d104      	bne.n	8006254 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f9a3 	bl	8006598 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006252:	e01d      	b.n	8006290 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	7bfa      	ldrb	r2, [r7, #15]
 8006258:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 ffb5 	bl	80071d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fa61 	bl	800672e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800627a:	e009      	b.n	8006290 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006284:	e004      	b.n	8006290 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f985 	bl	8006598 <USBD_CtlError>
  }
}
 800628e:	bf00      	nop
 8006290:	bf00      	nop
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	885b      	ldrh	r3, [r3, #2]
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	4b4c      	ldr	r3, [pc, #304]	; (80063e0 <USBD_SetConfig+0x148>)
 80062ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80062b0:	4b4b      	ldr	r3, [pc, #300]	; (80063e0 <USBD_SetConfig+0x148>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d905      	bls.n	80062c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f96c 	bl	8006598 <USBD_CtlError>
    return USBD_FAIL;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e088      	b.n	80063d6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d002      	beq.n	80062d6 <USBD_SetConfig+0x3e>
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d025      	beq.n	8006320 <USBD_SetConfig+0x88>
 80062d4:	e071      	b.n	80063ba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80062d6:	4b42      	ldr	r3, [pc, #264]	; (80063e0 <USBD_SetConfig+0x148>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01c      	beq.n	8006318 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80062de:	4b40      	ldr	r3, [pc, #256]	; (80063e0 <USBD_SetConfig+0x148>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80062e8:	4b3d      	ldr	r3, [pc, #244]	; (80063e0 <USBD_SetConfig+0x148>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	4619      	mov	r1, r3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7ff f91e 	bl	8005530 <USBD_SetClassConfig>
 80062f4:	4603      	mov	r3, r0
 80062f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f949 	bl	8006598 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006306:	e065      	b.n	80063d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fa10 	bl	800672e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2203      	movs	r2, #3
 8006312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006316:	e05d      	b.n	80063d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fa08 	bl	800672e <USBD_CtlSendStatus>
      break;
 800631e:	e059      	b.n	80063d4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006320:	4b2f      	ldr	r3, [pc, #188]	; (80063e0 <USBD_SetConfig+0x148>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d112      	bne.n	800634e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006330:	4b2b      	ldr	r3, [pc, #172]	; (80063e0 <USBD_SetConfig+0x148>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800633a:	4b29      	ldr	r3, [pc, #164]	; (80063e0 <USBD_SetConfig+0x148>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7ff f911 	bl	8005568 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f9f1 	bl	800672e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800634c:	e042      	b.n	80063d4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800634e:	4b24      	ldr	r3, [pc, #144]	; (80063e0 <USBD_SetConfig+0x148>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	429a      	cmp	r2, r3
 800635a:	d02a      	beq.n	80063b2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	b2db      	uxtb	r3, r3
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff f8ff 	bl	8005568 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800636a:	4b1d      	ldr	r3, [pc, #116]	; (80063e0 <USBD_SetConfig+0x148>)
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006374:	4b1a      	ldr	r3, [pc, #104]	; (80063e0 <USBD_SetConfig+0x148>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7ff f8d8 	bl	8005530 <USBD_SetClassConfig>
 8006380:	4603      	mov	r3, r0
 8006382:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00f      	beq.n	80063aa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f903 	bl	8006598 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	b2db      	uxtb	r3, r3
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7ff f8e4 	bl	8005568 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80063a8:	e014      	b.n	80063d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f9bf 	bl	800672e <USBD_CtlSendStatus>
      break;
 80063b0:	e010      	b.n	80063d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f9bb 	bl	800672e <USBD_CtlSendStatus>
      break;
 80063b8:	e00c      	b.n	80063d4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f8eb 	bl	8006598 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80063c2:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <USBD_SetConfig+0x148>)
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff f8cd 	bl	8005568 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80063ce:	2303      	movs	r3, #3
 80063d0:	73fb      	strb	r3, [r7, #15]
      break;
 80063d2:	bf00      	nop
  }

  return ret;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	200001c0 	.word	0x200001c0

080063e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	88db      	ldrh	r3, [r3, #6]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d004      	beq.n	8006400 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f8cd 	bl	8006598 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80063fe:	e023      	b.n	8006448 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	dc02      	bgt.n	8006412 <USBD_GetConfig+0x2e>
 800640c:	2b00      	cmp	r3, #0
 800640e:	dc03      	bgt.n	8006418 <USBD_GetConfig+0x34>
 8006410:	e015      	b.n	800643e <USBD_GetConfig+0x5a>
 8006412:	2b03      	cmp	r3, #3
 8006414:	d00b      	beq.n	800642e <USBD_GetConfig+0x4a>
 8006416:	e012      	b.n	800643e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3308      	adds	r3, #8
 8006422:	2201      	movs	r2, #1
 8006424:	4619      	mov	r1, r3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f927 	bl	800667a <USBD_CtlSendData>
        break;
 800642c:	e00c      	b.n	8006448 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3304      	adds	r3, #4
 8006432:	2201      	movs	r2, #1
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f91f 	bl	800667a <USBD_CtlSendData>
        break;
 800643c:	e004      	b.n	8006448 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f8a9 	bl	8006598 <USBD_CtlError>
        break;
 8006446:	bf00      	nop
}
 8006448:	bf00      	nop
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006460:	b2db      	uxtb	r3, r3
 8006462:	3b01      	subs	r3, #1
 8006464:	2b02      	cmp	r3, #2
 8006466:	d81e      	bhi.n	80064a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	88db      	ldrh	r3, [r3, #6]
 800646c:	2b02      	cmp	r3, #2
 800646e:	d004      	beq.n	800647a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f890 	bl	8006598 <USBD_CtlError>
        break;
 8006478:	e01a      	b.n	80064b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006486:	2b00      	cmp	r3, #0
 8006488:	d005      	beq.n	8006496 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f043 0202 	orr.w	r2, r3, #2
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	330c      	adds	r3, #12
 800649a:	2202      	movs	r2, #2
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f8eb 	bl	800667a <USBD_CtlSendData>
      break;
 80064a4:	e004      	b.n	80064b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f875 	bl	8006598 <USBD_CtlError>
      break;
 80064ae:	bf00      	nop
  }
}
 80064b0:	bf00      	nop
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	885b      	ldrh	r3, [r3, #2]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d106      	bne.n	80064d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f92b 	bl	800672e <USBD_CtlSendStatus>
  }
}
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	3b01      	subs	r3, #1
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d80b      	bhi.n	8006510 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	885b      	ldrh	r3, [r3, #2]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d10c      	bne.n	800651a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f910 	bl	800672e <USBD_CtlSendStatus>
      }
      break;
 800650e:	e004      	b.n	800651a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f840 	bl	8006598 <USBD_CtlError>
      break;
 8006518:	e000      	b.n	800651c <USBD_ClrFeature+0x3c>
      break;
 800651a:	bf00      	nop
  }
}
 800651c:	bf00      	nop
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	781a      	ldrb	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3301      	adds	r3, #1
 800653e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	781a      	ldrb	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f7ff fa91 	bl	8005a76 <SWAPBYTE>
 8006554:	4603      	mov	r3, r0
 8006556:	461a      	mov	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3301      	adds	r3, #1
 8006566:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f7ff fa84 	bl	8005a76 <SWAPBYTE>
 800656e:	4603      	mov	r3, r0
 8006570:	461a      	mov	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	3301      	adds	r3, #1
 800657a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3301      	adds	r3, #1
 8006580:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f7ff fa77 	bl	8005a76 <SWAPBYTE>
 8006588:	4603      	mov	r3, r0
 800658a:	461a      	mov	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	80da      	strh	r2, [r3, #6]
}
 8006590:	bf00      	nop
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80065a2:	2180      	movs	r1, #128	; 0x80
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fd7b 	bl	80070a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80065aa:	2100      	movs	r1, #0
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fd77 	bl	80070a0 <USBD_LL_StallEP>
}
 80065b2:	bf00      	nop
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b086      	sub	sp, #24
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d036      	beq.n	800663e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80065d4:	6938      	ldr	r0, [r7, #16]
 80065d6:	f000 f836 	bl	8006646 <USBD_GetLen>
 80065da:	4603      	mov	r3, r0
 80065dc:	3301      	adds	r3, #1
 80065de:	b29b      	uxth	r3, r3
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80065e8:	7dfb      	ldrb	r3, [r7, #23]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	4413      	add	r3, r2
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	7812      	ldrb	r2, [r2, #0]
 80065f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	3301      	adds	r3, #1
 80065f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	4413      	add	r3, r2
 8006600:	2203      	movs	r2, #3
 8006602:	701a      	strb	r2, [r3, #0]
  idx++;
 8006604:	7dfb      	ldrb	r3, [r7, #23]
 8006606:	3301      	adds	r3, #1
 8006608:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800660a:	e013      	b.n	8006634 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	4413      	add	r3, r2
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	7812      	ldrb	r2, [r2, #0]
 8006616:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	3301      	adds	r3, #1
 800661c:	613b      	str	r3, [r7, #16]
    idx++;
 800661e:	7dfb      	ldrb	r3, [r7, #23]
 8006620:	3301      	adds	r3, #1
 8006622:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006624:	7dfb      	ldrb	r3, [r7, #23]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	4413      	add	r3, r2
 800662a:	2200      	movs	r2, #0
 800662c:	701a      	strb	r2, [r3, #0]
    idx++;
 800662e:	7dfb      	ldrb	r3, [r7, #23]
 8006630:	3301      	adds	r3, #1
 8006632:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e7      	bne.n	800660c <USBD_GetString+0x52>
 800663c:	e000      	b.n	8006640 <USBD_GetString+0x86>
    return;
 800663e:	bf00      	nop
  }
}
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006646:	b480      	push	{r7}
 8006648:	b085      	sub	sp, #20
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006656:	e005      	b.n	8006664 <USBD_GetLen+0x1e>
  {
    len++;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	3301      	adds	r3, #1
 800665c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	3301      	adds	r3, #1
 8006662:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1f5      	bne.n	8006658 <USBD_GetLen+0x12>
  }

  return len;
 800666c:	7bfb      	ldrb	r3, [r7, #15]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b084      	sub	sp, #16
 800667e:	af00      	add	r7, sp, #0
 8006680:	60f8      	str	r0, [r7, #12]
 8006682:	60b9      	str	r1, [r7, #8]
 8006684:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2202      	movs	r2, #2
 800668a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	2100      	movs	r1, #0
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 fdcb 	bl	800723c <USBD_LL_Transmit>

  return USBD_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	2100      	movs	r1, #0
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fdba 	bl	800723c <USBD_LL_Transmit>

  return USBD_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2203      	movs	r2, #3
 80066e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	2100      	movs	r1, #0
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 fdd5 	bl	80072ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	2100      	movs	r1, #0
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 fdc4 	bl	80072ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2204      	movs	r2, #4
 800673a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800673e:	2300      	movs	r3, #0
 8006740:	2200      	movs	r2, #0
 8006742:	2100      	movs	r1, #0
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fd79 	bl	800723c <USBD_LL_Transmit>

  return USBD_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2205      	movs	r2, #5
 8006760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006764:	2300      	movs	r3, #0
 8006766:	2200      	movs	r2, #0
 8006768:	2100      	movs	r1, #0
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fd9e 	bl	80072ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
	...

0800677c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006780:	2200      	movs	r2, #0
 8006782:	4912      	ldr	r1, [pc, #72]	; (80067cc <MX_USB_DEVICE_Init+0x50>)
 8006784:	4812      	ldr	r0, [pc, #72]	; (80067d0 <MX_USB_DEVICE_Init+0x54>)
 8006786:	f7fe fe65 	bl	8005454 <USBD_Init>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006790:	f7f9 fdd1 	bl	8000336 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006794:	490f      	ldr	r1, [pc, #60]	; (80067d4 <MX_USB_DEVICE_Init+0x58>)
 8006796:	480e      	ldr	r0, [pc, #56]	; (80067d0 <MX_USB_DEVICE_Init+0x54>)
 8006798:	f7fe fe8c 	bl	80054b4 <USBD_RegisterClass>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80067a2:	f7f9 fdc8 	bl	8000336 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80067a6:	490c      	ldr	r1, [pc, #48]	; (80067d8 <MX_USB_DEVICE_Init+0x5c>)
 80067a8:	4809      	ldr	r0, [pc, #36]	; (80067d0 <MX_USB_DEVICE_Init+0x54>)
 80067aa:	f7fe fdad 	bl	8005308 <USBD_CDC_RegisterInterface>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80067b4:	f7f9 fdbf 	bl	8000336 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80067b8:	4805      	ldr	r0, [pc, #20]	; (80067d0 <MX_USB_DEVICE_Init+0x54>)
 80067ba:	f7fe fea2 	bl	8005502 <USBD_Start>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80067c4:	f7f9 fdb7 	bl	8000336 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80067c8:	bf00      	nop
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20000140 	.word	0x20000140
 80067d0:	200001c4 	.word	0x200001c4
 80067d4:	20000028 	.word	0x20000028
 80067d8:	2000012c 	.word	0x2000012c

080067dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80067e0:	2200      	movs	r2, #0
 80067e2:	4905      	ldr	r1, [pc, #20]	; (80067f8 <CDC_Init_FS+0x1c>)
 80067e4:	4805      	ldr	r0, [pc, #20]	; (80067fc <CDC_Init_FS+0x20>)
 80067e6:	f7fe fda4 	bl	8005332 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80067ea:	4905      	ldr	r1, [pc, #20]	; (8006800 <CDC_Init_FS+0x24>)
 80067ec:	4803      	ldr	r0, [pc, #12]	; (80067fc <CDC_Init_FS+0x20>)
 80067ee:	f7fe fdbe 	bl	800536e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80067f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	20000c94 	.word	0x20000c94
 80067fc:	200001c4 	.word	0x200001c4
 8006800:	20000494 	.word	0x20000494

08006804 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006808:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800680a:	4618      	mov	r0, r3
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	6039      	str	r1, [r7, #0]
 800681e:	71fb      	strb	r3, [r7, #7]
 8006820:	4613      	mov	r3, r2
 8006822:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	2b23      	cmp	r3, #35	; 0x23
 8006828:	d84a      	bhi.n	80068c0 <CDC_Control_FS+0xac>
 800682a:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <CDC_Control_FS+0x1c>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	080068c1 	.word	0x080068c1
 8006834:	080068c1 	.word	0x080068c1
 8006838:	080068c1 	.word	0x080068c1
 800683c:	080068c1 	.word	0x080068c1
 8006840:	080068c1 	.word	0x080068c1
 8006844:	080068c1 	.word	0x080068c1
 8006848:	080068c1 	.word	0x080068c1
 800684c:	080068c1 	.word	0x080068c1
 8006850:	080068c1 	.word	0x080068c1
 8006854:	080068c1 	.word	0x080068c1
 8006858:	080068c1 	.word	0x080068c1
 800685c:	080068c1 	.word	0x080068c1
 8006860:	080068c1 	.word	0x080068c1
 8006864:	080068c1 	.word	0x080068c1
 8006868:	080068c1 	.word	0x080068c1
 800686c:	080068c1 	.word	0x080068c1
 8006870:	080068c1 	.word	0x080068c1
 8006874:	080068c1 	.word	0x080068c1
 8006878:	080068c1 	.word	0x080068c1
 800687c:	080068c1 	.word	0x080068c1
 8006880:	080068c1 	.word	0x080068c1
 8006884:	080068c1 	.word	0x080068c1
 8006888:	080068c1 	.word	0x080068c1
 800688c:	080068c1 	.word	0x080068c1
 8006890:	080068c1 	.word	0x080068c1
 8006894:	080068c1 	.word	0x080068c1
 8006898:	080068c1 	.word	0x080068c1
 800689c:	080068c1 	.word	0x080068c1
 80068a0:	080068c1 	.word	0x080068c1
 80068a4:	080068c1 	.word	0x080068c1
 80068a8:	080068c1 	.word	0x080068c1
 80068ac:	080068c1 	.word	0x080068c1
 80068b0:	080068c1 	.word	0x080068c1
 80068b4:	080068c1 	.word	0x080068c1
 80068b8:	080068c1 	.word	0x080068c1
 80068bc:	080068c1 	.word	0x080068c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80068c0:	bf00      	nop
  }

  return (USBD_OK);
 80068c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	4808      	ldr	r0, [pc, #32]	; (8006900 <CDC_Receive_FS+0x30>)
 80068de:	f7fe fd46 	bl	800536e <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80068e2:	4807      	ldr	r0, [pc, #28]	; (8006900 <CDC_Receive_FS+0x30>)
 80068e4:	f7fe fd8c 	bl	8005400 <USBD_CDC_ReceivePacket>
	  CDC_ReceiveCallBack(Buf,Len[0]);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7f9 fd12 	bl	8000318 <CDC_ReceiveCallBack>
	  return (USBD_OK);
 80068f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	200001c4 	.word	0x200001c4

08006904 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006914:	4b0d      	ldr	r3, [pc, #52]	; (800694c <CDC_Transmit_FS+0x48>)
 8006916:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800691a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006926:	2301      	movs	r3, #1
 8006928:	e00b      	b.n	8006942 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800692a:	887b      	ldrh	r3, [r7, #2]
 800692c:	461a      	mov	r2, r3
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	4806      	ldr	r0, [pc, #24]	; (800694c <CDC_Transmit_FS+0x48>)
 8006932:	f7fe fcfe 	bl	8005332 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006936:	4805      	ldr	r0, [pc, #20]	; (800694c <CDC_Transmit_FS+0x48>)
 8006938:	f7fe fd32 	bl	80053a0 <USBD_CDC_TransmitPacket>
 800693c:	4603      	mov	r3, r0
 800693e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006940:	7bfb      	ldrb	r3, [r7, #15]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	200001c4 	.word	0x200001c4

08006950 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	4613      	mov	r3, r2
 800695c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006962:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006966:	4618      	mov	r0, r3
 8006968:	371c      	adds	r7, #28
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
	...

08006974 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	6039      	str	r1, [r7, #0]
 800697e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2212      	movs	r2, #18
 8006984:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006986:	4b03      	ldr	r3, [pc, #12]	; (8006994 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006988:	4618      	mov	r0, r3
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	20000160 	.word	0x20000160

08006998 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	6039      	str	r1, [r7, #0]
 80069a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	2204      	movs	r2, #4
 80069a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80069aa:	4b03      	ldr	r3, [pc, #12]	; (80069b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	20000180 	.word	0x20000180

080069bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	6039      	str	r1, [r7, #0]
 80069c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80069c8:	79fb      	ldrb	r3, [r7, #7]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d105      	bne.n	80069da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	4907      	ldr	r1, [pc, #28]	; (80069f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80069d2:	4808      	ldr	r0, [pc, #32]	; (80069f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80069d4:	f7ff fdf1 	bl	80065ba <USBD_GetString>
 80069d8:	e004      	b.n	80069e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	4904      	ldr	r1, [pc, #16]	; (80069f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80069de:	4805      	ldr	r0, [pc, #20]	; (80069f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80069e0:	f7ff fdeb 	bl	80065ba <USBD_GetString>
  }
  return USBD_StrDesc;
 80069e4:	4b02      	ldr	r3, [pc, #8]	; (80069f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20001494 	.word	0x20001494
 80069f4:	0800748c 	.word	0x0800748c

080069f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	4603      	mov	r3, r0
 8006a00:	6039      	str	r1, [r7, #0]
 8006a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	4904      	ldr	r1, [pc, #16]	; (8006a18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006a08:	4804      	ldr	r0, [pc, #16]	; (8006a1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006a0a:	f7ff fdd6 	bl	80065ba <USBD_GetString>
  return USBD_StrDesc;
 8006a0e:	4b02      	ldr	r3, [pc, #8]	; (8006a18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	20001494 	.word	0x20001494
 8006a1c:	080074a4 	.word	0x080074a4

08006a20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	6039      	str	r1, [r7, #0]
 8006a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	221a      	movs	r2, #26
 8006a30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006a32:	f000 f855 	bl	8006ae0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006a36:	4b02      	ldr	r3, [pc, #8]	; (8006a40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	20000184 	.word	0x20000184

08006a44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	6039      	str	r1, [r7, #0]
 8006a4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006a50:	79fb      	ldrb	r3, [r7, #7]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d105      	bne.n	8006a62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	4907      	ldr	r1, [pc, #28]	; (8006a78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006a5a:	4808      	ldr	r0, [pc, #32]	; (8006a7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006a5c:	f7ff fdad 	bl	80065ba <USBD_GetString>
 8006a60:	e004      	b.n	8006a6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	4904      	ldr	r1, [pc, #16]	; (8006a78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006a66:	4805      	ldr	r0, [pc, #20]	; (8006a7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006a68:	f7ff fda7 	bl	80065ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a6c:	4b02      	ldr	r3, [pc, #8]	; (8006a78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20001494 	.word	0x20001494
 8006a7c:	080074b8 	.word	0x080074b8

08006a80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	4603      	mov	r3, r0
 8006a88:	6039      	str	r1, [r7, #0]
 8006a8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d105      	bne.n	8006a9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	4907      	ldr	r1, [pc, #28]	; (8006ab4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a96:	4808      	ldr	r0, [pc, #32]	; (8006ab8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a98:	f7ff fd8f 	bl	80065ba <USBD_GetString>
 8006a9c:	e004      	b.n	8006aa8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	4904      	ldr	r1, [pc, #16]	; (8006ab4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006aa2:	4805      	ldr	r0, [pc, #20]	; (8006ab8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006aa4:	f7ff fd89 	bl	80065ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8006aa8:	4b02      	ldr	r3, [pc, #8]	; (8006ab4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20001494 	.word	0x20001494
 8006ab8:	080074c4 	.word	0x080074c4

08006abc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	6039      	str	r1, [r7, #0]
 8006ac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	220c      	movs	r2, #12
 8006acc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006ace:	4b03      	ldr	r3, [pc, #12]	; (8006adc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	20000174 	.word	0x20000174

08006ae0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006ae6:	4b0f      	ldr	r3, [pc, #60]	; (8006b24 <Get_SerialNum+0x44>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006aec:	4b0e      	ldr	r3, [pc, #56]	; (8006b28 <Get_SerialNum+0x48>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006af2:	4b0e      	ldr	r3, [pc, #56]	; (8006b2c <Get_SerialNum+0x4c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4413      	add	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d009      	beq.n	8006b1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006b06:	2208      	movs	r2, #8
 8006b08:	4909      	ldr	r1, [pc, #36]	; (8006b30 <Get_SerialNum+0x50>)
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 f814 	bl	8006b38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006b10:	2204      	movs	r2, #4
 8006b12:	4908      	ldr	r1, [pc, #32]	; (8006b34 <Get_SerialNum+0x54>)
 8006b14:	68b8      	ldr	r0, [r7, #8]
 8006b16:	f000 f80f 	bl	8006b38 <IntToUnicode>
  }
}
 8006b1a:	bf00      	nop
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	1fff7590 	.word	0x1fff7590
 8006b28:	1fff7594 	.word	0x1fff7594
 8006b2c:	1fff7598 	.word	0x1fff7598
 8006b30:	20000186 	.word	0x20000186
 8006b34:	20000196 	.word	0x20000196

08006b38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	4613      	mov	r3, r2
 8006b44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	75fb      	strb	r3, [r7, #23]
 8006b4e:	e027      	b.n	8006ba0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	0f1b      	lsrs	r3, r3, #28
 8006b54:	2b09      	cmp	r3, #9
 8006b56:	d80b      	bhi.n	8006b70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	0f1b      	lsrs	r3, r3, #28
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	005b      	lsls	r3, r3, #1
 8006b62:	4619      	mov	r1, r3
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	440b      	add	r3, r1
 8006b68:	3230      	adds	r2, #48	; 0x30
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	e00a      	b.n	8006b86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	0f1b      	lsrs	r3, r3, #28
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	7dfb      	ldrb	r3, [r7, #23]
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	440b      	add	r3, r1
 8006b80:	3237      	adds	r2, #55	; 0x37
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	011b      	lsls	r3, r3, #4
 8006b8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	3301      	adds	r3, #1
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	4413      	add	r3, r2
 8006b96:	2200      	movs	r2, #0
 8006b98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	75fb      	strb	r3, [r7, #23]
 8006ba0:	7dfa      	ldrb	r2, [r7, #23]
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d3d3      	bcc.n	8006b50 <IntToUnicode+0x18>
  }
}
 8006ba8:	bf00      	nop
 8006baa:	bf00      	nop
 8006bac:	371c      	adds	r7, #28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
	...

08006bb8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b0b0      	sub	sp, #192	; 0xc0
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bc0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	605a      	str	r2, [r3, #4]
 8006bca:	609a      	str	r2, [r3, #8]
 8006bcc:	60da      	str	r2, [r3, #12]
 8006bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006bd0:	f107 0318 	add.w	r3, r7, #24
 8006bd4:	2294      	movs	r2, #148	; 0x94
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fc43 	bl	8007464 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006be6:	d163      	bne.n	8006cb0 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006bf4:	f107 0318 	add.w	r3, r7, #24
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fc f8b1 	bl	8002d60 <HAL_RCCEx_PeriphCLKConfig>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8006c04:	f7f9 fb97 	bl	8000336 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c08:	4b2b      	ldr	r3, [pc, #172]	; (8006cb8 <HAL_PCD_MspInit+0x100>)
 8006c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0c:	4a2a      	ldr	r2, [pc, #168]	; (8006cb8 <HAL_PCD_MspInit+0x100>)
 8006c0e:	f043 0301 	orr.w	r3, r3, #1
 8006c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c14:	4b28      	ldr	r3, [pc, #160]	; (8006cb8 <HAL_PCD_MspInit+0x100>)
 8006c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006c20:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006c24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c28:	2302      	movs	r3, #2
 8006c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c34:	2303      	movs	r3, #3
 8006c36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006c3a:	230a      	movs	r3, #10
 8006c3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c40:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006c44:	4619      	mov	r1, r3
 8006c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c4a:	f7f9 fdb7 	bl	80007bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006c4e:	4b1a      	ldr	r3, [pc, #104]	; (8006cb8 <HAL_PCD_MspInit+0x100>)
 8006c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c52:	4a19      	ldr	r2, [pc, #100]	; (8006cb8 <HAL_PCD_MspInit+0x100>)
 8006c54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c5a:	4b17      	ldr	r3, [pc, #92]	; (8006cb8 <HAL_PCD_MspInit+0x100>)
 8006c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c66:	4b14      	ldr	r3, [pc, #80]	; (8006cb8 <HAL_PCD_MspInit+0x100>)
 8006c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d114      	bne.n	8006c9c <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c72:	4b11      	ldr	r3, [pc, #68]	; (8006cb8 <HAL_PCD_MspInit+0x100>)
 8006c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c76:	4a10      	ldr	r2, [pc, #64]	; (8006cb8 <HAL_PCD_MspInit+0x100>)
 8006c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8006c7e:	4b0e      	ldr	r3, [pc, #56]	; (8006cb8 <HAL_PCD_MspInit+0x100>)
 8006c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8006c8a:	f7fb f9ad 	bl	8001fe8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c8e:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <HAL_PCD_MspInit+0x100>)
 8006c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c92:	4a09      	ldr	r2, [pc, #36]	; (8006cb8 <HAL_PCD_MspInit+0x100>)
 8006c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c98:	6593      	str	r3, [r2, #88]	; 0x58
 8006c9a:	e001      	b.n	8006ca0 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8006c9c:	f7fb f9a4 	bl	8001fe8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	2043      	movs	r0, #67	; 0x43
 8006ca6:	f7f9 fd52 	bl	800074e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006caa:	2043      	movs	r0, #67	; 0x43
 8006cac:	f7f9 fd6b 	bl	8000786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006cb0:	bf00      	nop
 8006cb2:	37c0      	adds	r7, #192	; 0xc0
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	40021000 	.word	0x40021000

08006cbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	f7fe fc60 	bl	8005598 <USBD_LL_SetupStage>
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006cf2:	78fa      	ldrb	r2, [r7, #3]
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	78fb      	ldrb	r3, [r7, #3]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	f7fe fc9a 	bl	8005642 <USBD_LL_DataOutStage>
}
 8006d0e:	bf00      	nop
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b082      	sub	sp, #8
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006d28:	78fa      	ldrb	r2, [r7, #3]
 8006d2a:	6879      	ldr	r1, [r7, #4]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	4413      	add	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	440b      	add	r3, r1
 8006d36:	334c      	adds	r3, #76	; 0x4c
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	f7fe fce3 	bl	8005708 <USBD_LL_DataInStage>
}
 8006d42:	bf00      	nop
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fe fdf7 	bl	800594c <USBD_LL_SOF>
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b084      	sub	sp, #16
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d001      	beq.n	8006d7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006d7a:	f7f9 fadc 	bl	8000336 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d84:	7bfa      	ldrb	r2, [r7, #15]
 8006d86:	4611      	mov	r1, r2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fe fda1 	bl	80058d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fe fd4d 	bl	8005834 <USBD_LL_Reset>
}
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	6812      	ldr	r2, [r2, #0]
 8006dba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006dbe:	f043 0301 	orr.w	r3, r3, #1
 8006dc2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fe fd90 	bl	80058f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d005      	beq.n	8006de4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006dd8:	4b04      	ldr	r3, [pc, #16]	; (8006dec <HAL_PCD_SuspendCallback+0x48>)
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	4a03      	ldr	r2, [pc, #12]	; (8006dec <HAL_PCD_SuspendCallback+0x48>)
 8006dde:	f043 0306 	orr.w	r3, r3, #6
 8006de2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006de4:	bf00      	nop
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	e000ed00 	.word	0xe000ed00

08006df0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	6812      	ldr	r2, [r2, #0]
 8006e06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e0a:	f023 0301 	bic.w	r3, r3, #1
 8006e0e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d007      	beq.n	8006e28 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e18:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <HAL_PCD_ResumeCallback+0x4c>)
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	4a07      	ldr	r2, [pc, #28]	; (8006e3c <HAL_PCD_ResumeCallback+0x4c>)
 8006e1e:	f023 0306 	bic.w	r3, r3, #6
 8006e22:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006e24:	f000 faf4 	bl	8007410 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe fd74 	bl	800591c <USBD_LL_Resume>
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	e000ed00 	.word	0xe000ed00

08006e40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e52:	78fa      	ldrb	r2, [r7, #3]
 8006e54:	4611      	mov	r1, r2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe fdc0 	bl	80059dc <USBD_LL_IsoOUTIncomplete>
}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e76:	78fa      	ldrb	r2, [r7, #3]
 8006e78:	4611      	mov	r1, r2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fd88 	bl	8005990 <USBD_LL_IsoINIncomplete>
}
 8006e80:	bf00      	nop
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fe fdc6 	bl	8005a28 <USBD_LL_DevConnected>
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe fdc3 	bl	8005a3e <USBD_LL_DevDisconnected>
}
 8006eb8:	bf00      	nop
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d139      	bne.n	8006f44 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006ed0:	4a1f      	ldr	r2, [pc, #124]	; (8006f50 <USBD_LL_Init+0x90>)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a1d      	ldr	r2, [pc, #116]	; (8006f50 <USBD_LL_Init+0x90>)
 8006edc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ee0:	4b1b      	ldr	r3, [pc, #108]	; (8006f50 <USBD_LL_Init+0x90>)
 8006ee2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006ee6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006ee8:	4b19      	ldr	r3, [pc, #100]	; (8006f50 <USBD_LL_Init+0x90>)
 8006eea:	2206      	movs	r2, #6
 8006eec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006eee:	4b18      	ldr	r3, [pc, #96]	; (8006f50 <USBD_LL_Init+0x90>)
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006ef4:	4b16      	ldr	r3, [pc, #88]	; (8006f50 <USBD_LL_Init+0x90>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006efa:	4b15      	ldr	r3, [pc, #84]	; (8006f50 <USBD_LL_Init+0x90>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006f00:	4b13      	ldr	r3, [pc, #76]	; (8006f50 <USBD_LL_Init+0x90>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006f06:	4b12      	ldr	r3, [pc, #72]	; (8006f50 <USBD_LL_Init+0x90>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006f0c:	4b10      	ldr	r3, [pc, #64]	; (8006f50 <USBD_LL_Init+0x90>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006f12:	4b0f      	ldr	r3, [pc, #60]	; (8006f50 <USBD_LL_Init+0x90>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006f18:	480d      	ldr	r0, [pc, #52]	; (8006f50 <USBD_LL_Init+0x90>)
 8006f1a:	f7f9 fde1 	bl	8000ae0 <HAL_PCD_Init>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8006f24:	f7f9 fa07 	bl	8000336 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006f28:	2180      	movs	r1, #128	; 0x80
 8006f2a:	4809      	ldr	r0, [pc, #36]	; (8006f50 <USBD_LL_Init+0x90>)
 8006f2c:	f7fa ff63 	bl	8001df6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006f30:	2240      	movs	r2, #64	; 0x40
 8006f32:	2100      	movs	r1, #0
 8006f34:	4806      	ldr	r0, [pc, #24]	; (8006f50 <USBD_LL_Init+0x90>)
 8006f36:	f7fa ff17 	bl	8001d68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006f3a:	2280      	movs	r2, #128	; 0x80
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	4804      	ldr	r0, [pc, #16]	; (8006f50 <USBD_LL_Init+0x90>)
 8006f40:	f7fa ff12 	bl	8001d68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20001694 	.word	0x20001694

08006f54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7f9 fedc 	bl	8000d28 <HAL_PCD_Start>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006f74:	7bbb      	ldrb	r3, [r7, #14]
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d816      	bhi.n	8006fa8 <USBD_LL_Start+0x54>
 8006f7a:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <USBD_LL_Start+0x2c>)
 8006f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f80:	08006f91 	.word	0x08006f91
 8006f84:	08006f97 	.word	0x08006f97
 8006f88:	08006f9d 	.word	0x08006f9d
 8006f8c:	08006fa3 	.word	0x08006fa3
    case HAL_OK :
      usb_status = USBD_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	73fb      	strb	r3, [r7, #15]
    break;
 8006f94:	e00b      	b.n	8006fae <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f96:	2303      	movs	r3, #3
 8006f98:	73fb      	strb	r3, [r7, #15]
    break;
 8006f9a:	e008      	b.n	8006fae <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8006fa0:	e005      	b.n	8006fae <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	73fb      	strb	r3, [r7, #15]
    break;
 8006fa6:	e002      	b.n	8006fae <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	73fb      	strb	r3, [r7, #15]
    break;
 8006fac:	bf00      	nop
  }
  return usb_status;
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	70fb      	strb	r3, [r7, #3]
 8006fca:	460b      	mov	r3, r1
 8006fcc:	70bb      	strb	r3, [r7, #2]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006fe0:	78bb      	ldrb	r3, [r7, #2]
 8006fe2:	883a      	ldrh	r2, [r7, #0]
 8006fe4:	78f9      	ldrb	r1, [r7, #3]
 8006fe6:	f7fa fb86 	bl	80016f6 <HAL_PCD_EP_Open>
 8006fea:	4603      	mov	r3, r0
 8006fec:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d817      	bhi.n	8007024 <USBD_LL_OpenEP+0x6c>
 8006ff4:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <USBD_LL_OpenEP+0x44>)
 8006ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffa:	bf00      	nop
 8006ffc:	0800700d 	.word	0x0800700d
 8007000:	08007013 	.word	0x08007013
 8007004:	08007019 	.word	0x08007019
 8007008:	0800701f 	.word	0x0800701f
    case HAL_OK :
      usb_status = USBD_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	73fb      	strb	r3, [r7, #15]
    break;
 8007010:	e00b      	b.n	800702a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007012:	2303      	movs	r3, #3
 8007014:	73fb      	strb	r3, [r7, #15]
    break;
 8007016:	e008      	b.n	800702a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007018:	2301      	movs	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
    break;
 800701c:	e005      	b.n	800702a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800701e:	2303      	movs	r3, #3
 8007020:	73fb      	strb	r3, [r7, #15]
    break;
 8007022:	e002      	b.n	800702a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007024:	2303      	movs	r3, #3
 8007026:	73fb      	strb	r3, [r7, #15]
    break;
 8007028:	bf00      	nop
  }
  return usb_status;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800704e:	78fa      	ldrb	r2, [r7, #3]
 8007050:	4611      	mov	r1, r2
 8007052:	4618      	mov	r0, r3
 8007054:	f7fa fbb7 	bl	80017c6 <HAL_PCD_EP_Close>
 8007058:	4603      	mov	r3, r0
 800705a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	2b03      	cmp	r3, #3
 8007060:	d816      	bhi.n	8007090 <USBD_LL_CloseEP+0x5c>
 8007062:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <USBD_LL_CloseEP+0x34>)
 8007064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007068:	08007079 	.word	0x08007079
 800706c:	0800707f 	.word	0x0800707f
 8007070:	08007085 	.word	0x08007085
 8007074:	0800708b 	.word	0x0800708b
    case HAL_OK :
      usb_status = USBD_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	73fb      	strb	r3, [r7, #15]
    break;
 800707c:	e00b      	b.n	8007096 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800707e:	2303      	movs	r3, #3
 8007080:	73fb      	strb	r3, [r7, #15]
    break;
 8007082:	e008      	b.n	8007096 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007084:	2301      	movs	r3, #1
 8007086:	73fb      	strb	r3, [r7, #15]
    break;
 8007088:	e005      	b.n	8007096 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800708a:	2303      	movs	r3, #3
 800708c:	73fb      	strb	r3, [r7, #15]
    break;
 800708e:	e002      	b.n	8007096 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007090:	2303      	movs	r3, #3
 8007092:	73fb      	strb	r3, [r7, #15]
    break;
 8007094:	bf00      	nop
  }
  return usb_status;
 8007096:	7bfb      	ldrb	r3, [r7, #15]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80070ba:	78fa      	ldrb	r2, [r7, #3]
 80070bc:	4611      	mov	r1, r2
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fa fc5e 	bl	8001980 <HAL_PCD_EP_SetStall>
 80070c4:	4603      	mov	r3, r0
 80070c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d816      	bhi.n	80070fc <USBD_LL_StallEP+0x5c>
 80070ce:	a201      	add	r2, pc, #4	; (adr r2, 80070d4 <USBD_LL_StallEP+0x34>)
 80070d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d4:	080070e5 	.word	0x080070e5
 80070d8:	080070eb 	.word	0x080070eb
 80070dc:	080070f1 	.word	0x080070f1
 80070e0:	080070f7 	.word	0x080070f7
    case HAL_OK :
      usb_status = USBD_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	73fb      	strb	r3, [r7, #15]
    break;
 80070e8:	e00b      	b.n	8007102 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070ea:	2303      	movs	r3, #3
 80070ec:	73fb      	strb	r3, [r7, #15]
    break;
 80070ee:	e008      	b.n	8007102 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070f0:	2301      	movs	r3, #1
 80070f2:	73fb      	strb	r3, [r7, #15]
    break;
 80070f4:	e005      	b.n	8007102 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070f6:	2303      	movs	r3, #3
 80070f8:	73fb      	strb	r3, [r7, #15]
    break;
 80070fa:	e002      	b.n	8007102 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80070fc:	2303      	movs	r3, #3
 80070fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007100:	bf00      	nop
  }
  return usb_status;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007126:	78fa      	ldrb	r2, [r7, #3]
 8007128:	4611      	mov	r1, r2
 800712a:	4618      	mov	r0, r3
 800712c:	f7fa fc8a 	bl	8001a44 <HAL_PCD_EP_ClrStall>
 8007130:	4603      	mov	r3, r0
 8007132:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007134:	7bbb      	ldrb	r3, [r7, #14]
 8007136:	2b03      	cmp	r3, #3
 8007138:	d816      	bhi.n	8007168 <USBD_LL_ClearStallEP+0x5c>
 800713a:	a201      	add	r2, pc, #4	; (adr r2, 8007140 <USBD_LL_ClearStallEP+0x34>)
 800713c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007140:	08007151 	.word	0x08007151
 8007144:	08007157 	.word	0x08007157
 8007148:	0800715d 	.word	0x0800715d
 800714c:	08007163 	.word	0x08007163
    case HAL_OK :
      usb_status = USBD_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	73fb      	strb	r3, [r7, #15]
    break;
 8007154:	e00b      	b.n	800716e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007156:	2303      	movs	r3, #3
 8007158:	73fb      	strb	r3, [r7, #15]
    break;
 800715a:	e008      	b.n	800716e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800715c:	2301      	movs	r3, #1
 800715e:	73fb      	strb	r3, [r7, #15]
    break;
 8007160:	e005      	b.n	800716e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007162:	2303      	movs	r3, #3
 8007164:	73fb      	strb	r3, [r7, #15]
    break;
 8007166:	e002      	b.n	800716e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007168:	2303      	movs	r3, #3
 800716a:	73fb      	strb	r3, [r7, #15]
    break;
 800716c:	bf00      	nop
  }
  return usb_status;
 800716e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800718a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800718c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007190:	2b00      	cmp	r3, #0
 8007192:	da0b      	bge.n	80071ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007194:	78fb      	ldrb	r3, [r7, #3]
 8007196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800719a:	68f9      	ldr	r1, [r7, #12]
 800719c:	4613      	mov	r3, r2
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	440b      	add	r3, r1
 80071a6:	333e      	adds	r3, #62	; 0x3e
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	e00b      	b.n	80071c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80071ac:	78fb      	ldrb	r3, [r7, #3]
 80071ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071b2:	68f9      	ldr	r1, [r7, #12]
 80071b4:	4613      	mov	r3, r2
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	4413      	add	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	440b      	add	r3, r1
 80071be:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80071c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071e0:	2300      	movs	r3, #0
 80071e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071ea:	78fa      	ldrb	r2, [r7, #3]
 80071ec:	4611      	mov	r1, r2
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fa fa5c 	bl	80016ac <HAL_PCD_SetAddress>
 80071f4:	4603      	mov	r3, r0
 80071f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d816      	bhi.n	800722c <USBD_LL_SetUSBAddress+0x5c>
 80071fe:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <USBD_LL_SetUSBAddress+0x34>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007215 	.word	0x08007215
 8007208:	0800721b 	.word	0x0800721b
 800720c:	08007221 	.word	0x08007221
 8007210:	08007227 	.word	0x08007227
    case HAL_OK :
      usb_status = USBD_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	73fb      	strb	r3, [r7, #15]
    break;
 8007218:	e00b      	b.n	8007232 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800721a:	2303      	movs	r3, #3
 800721c:	73fb      	strb	r3, [r7, #15]
    break;
 800721e:	e008      	b.n	8007232 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007220:	2301      	movs	r3, #1
 8007222:	73fb      	strb	r3, [r7, #15]
    break;
 8007224:	e005      	b.n	8007232 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007226:	2303      	movs	r3, #3
 8007228:	73fb      	strb	r3, [r7, #15]
    break;
 800722a:	e002      	b.n	8007232 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800722c:	2303      	movs	r3, #3
 800722e:	73fb      	strb	r3, [r7, #15]
    break;
 8007230:	bf00      	nop
  }
  return usb_status;
 8007232:	7bfb      	ldrb	r3, [r7, #15]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	607a      	str	r2, [r7, #4]
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	460b      	mov	r3, r1
 800724a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800725a:	7af9      	ldrb	r1, [r7, #11]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	f7fa fb51 	bl	8001906 <HAL_PCD_EP_Transmit>
 8007264:	4603      	mov	r3, r0
 8007266:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007268:	7dbb      	ldrb	r3, [r7, #22]
 800726a:	2b03      	cmp	r3, #3
 800726c:	d816      	bhi.n	800729c <USBD_LL_Transmit+0x60>
 800726e:	a201      	add	r2, pc, #4	; (adr r2, 8007274 <USBD_LL_Transmit+0x38>)
 8007270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007274:	08007285 	.word	0x08007285
 8007278:	0800728b 	.word	0x0800728b
 800727c:	08007291 	.word	0x08007291
 8007280:	08007297 	.word	0x08007297
    case HAL_OK :
      usb_status = USBD_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	75fb      	strb	r3, [r7, #23]
    break;
 8007288:	e00b      	b.n	80072a2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800728a:	2303      	movs	r3, #3
 800728c:	75fb      	strb	r3, [r7, #23]
    break;
 800728e:	e008      	b.n	80072a2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007290:	2301      	movs	r3, #1
 8007292:	75fb      	strb	r3, [r7, #23]
    break;
 8007294:	e005      	b.n	80072a2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007296:	2303      	movs	r3, #3
 8007298:	75fb      	strb	r3, [r7, #23]
    break;
 800729a:	e002      	b.n	80072a2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800729c:	2303      	movs	r3, #3
 800729e:	75fb      	strb	r3, [r7, #23]
    break;
 80072a0:	bf00      	nop
  }
  return usb_status;
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3718      	adds	r7, #24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	607a      	str	r2, [r7, #4]
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	460b      	mov	r3, r1
 80072ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072bc:	2300      	movs	r3, #0
 80072be:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80072ca:	7af9      	ldrb	r1, [r7, #11]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	f7fa fac3 	bl	800185a <HAL_PCD_EP_Receive>
 80072d4:	4603      	mov	r3, r0
 80072d6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80072d8:	7dbb      	ldrb	r3, [r7, #22]
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d816      	bhi.n	800730c <USBD_LL_PrepareReceive+0x60>
 80072de:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <USBD_LL_PrepareReceive+0x38>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	080072f5 	.word	0x080072f5
 80072e8:	080072fb 	.word	0x080072fb
 80072ec:	08007301 	.word	0x08007301
 80072f0:	08007307 	.word	0x08007307
    case HAL_OK :
      usb_status = USBD_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	75fb      	strb	r3, [r7, #23]
    break;
 80072f8:	e00b      	b.n	8007312 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072fa:	2303      	movs	r3, #3
 80072fc:	75fb      	strb	r3, [r7, #23]
    break;
 80072fe:	e008      	b.n	8007312 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007300:	2301      	movs	r3, #1
 8007302:	75fb      	strb	r3, [r7, #23]
    break;
 8007304:	e005      	b.n	8007312 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007306:	2303      	movs	r3, #3
 8007308:	75fb      	strb	r3, [r7, #23]
    break;
 800730a:	e002      	b.n	8007312 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800730c:	2303      	movs	r3, #3
 800730e:	75fb      	strb	r3, [r7, #23]
    break;
 8007310:	bf00      	nop
  }
  return usb_status;
 8007312:	7dfb      	ldrb	r3, [r7, #23]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800732e:	78fa      	ldrb	r2, [r7, #3]
 8007330:	4611      	mov	r1, r2
 8007332:	4618      	mov	r0, r3
 8007334:	f7fa facf 	bl	80018d6 <HAL_PCD_EP_GetRxCount>
 8007338:	4603      	mov	r3, r0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
	...

08007344 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007350:	78fb      	ldrb	r3, [r7, #3]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <HAL_PCDEx_LPM_Callback+0x18>
 8007356:	2b01      	cmp	r3, #1
 8007358:	d01f      	beq.n	800739a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800735a:	e03b      	b.n	80073d4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d007      	beq.n	8007374 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007364:	f000 f854 	bl	8007410 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007368:	4b1c      	ldr	r3, [pc, #112]	; (80073dc <HAL_PCDEx_LPM_Callback+0x98>)
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	4a1b      	ldr	r2, [pc, #108]	; (80073dc <HAL_PCDEx_LPM_Callback+0x98>)
 800736e:	f023 0306 	bic.w	r3, r3, #6
 8007372:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	6812      	ldr	r2, [r2, #0]
 8007382:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007386:	f023 0301 	bic.w	r3, r3, #1
 800738a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe fac2 	bl	800591c <USBD_LL_Resume>
    break;
 8007398:	e01c      	b.n	80073d4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	6812      	ldr	r2, [r2, #0]
 80073a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073ac:	f043 0301 	orr.w	r3, r3, #1
 80073b0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe fa99 	bl	80058f0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d005      	beq.n	80073d2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073c6:	4b05      	ldr	r3, [pc, #20]	; (80073dc <HAL_PCDEx_LPM_Callback+0x98>)
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	4a04      	ldr	r2, [pc, #16]	; (80073dc <HAL_PCDEx_LPM_Callback+0x98>)
 80073cc:	f043 0306 	orr.w	r3, r3, #6
 80073d0:	6113      	str	r3, [r2, #16]
    break;
 80073d2:	bf00      	nop
}
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	e000ed00 	.word	0xe000ed00

080073e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80073e8:	4b03      	ldr	r3, [pc, #12]	; (80073f8 <USBD_static_malloc+0x18>)
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	20001ba0 	.word	0x20001ba0

080073fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]

}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007414:	f7f8 ff08 	bl	8000228 <SystemClock_Config>
}
 8007418:	bf00      	nop
 800741a:	bd80      	pop	{r7, pc}

0800741c <__libc_init_array>:
 800741c:	b570      	push	{r4, r5, r6, lr}
 800741e:	4d0d      	ldr	r5, [pc, #52]	; (8007454 <__libc_init_array+0x38>)
 8007420:	4c0d      	ldr	r4, [pc, #52]	; (8007458 <__libc_init_array+0x3c>)
 8007422:	1b64      	subs	r4, r4, r5
 8007424:	10a4      	asrs	r4, r4, #2
 8007426:	2600      	movs	r6, #0
 8007428:	42a6      	cmp	r6, r4
 800742a:	d109      	bne.n	8007440 <__libc_init_array+0x24>
 800742c:	4d0b      	ldr	r5, [pc, #44]	; (800745c <__libc_init_array+0x40>)
 800742e:	4c0c      	ldr	r4, [pc, #48]	; (8007460 <__libc_init_array+0x44>)
 8007430:	f000 f820 	bl	8007474 <_init>
 8007434:	1b64      	subs	r4, r4, r5
 8007436:	10a4      	asrs	r4, r4, #2
 8007438:	2600      	movs	r6, #0
 800743a:	42a6      	cmp	r6, r4
 800743c:	d105      	bne.n	800744a <__libc_init_array+0x2e>
 800743e:	bd70      	pop	{r4, r5, r6, pc}
 8007440:	f855 3b04 	ldr.w	r3, [r5], #4
 8007444:	4798      	blx	r3
 8007446:	3601      	adds	r6, #1
 8007448:	e7ee      	b.n	8007428 <__libc_init_array+0xc>
 800744a:	f855 3b04 	ldr.w	r3, [r5], #4
 800744e:	4798      	blx	r3
 8007450:	3601      	adds	r6, #1
 8007452:	e7f2      	b.n	800743a <__libc_init_array+0x1e>
 8007454:	08007514 	.word	0x08007514
 8007458:	08007514 	.word	0x08007514
 800745c:	08007514 	.word	0x08007514
 8007460:	08007518 	.word	0x08007518

08007464 <memset>:
 8007464:	4402      	add	r2, r0
 8007466:	4603      	mov	r3, r0
 8007468:	4293      	cmp	r3, r2
 800746a:	d100      	bne.n	800746e <memset+0xa>
 800746c:	4770      	bx	lr
 800746e:	f803 1b01 	strb.w	r1, [r3], #1
 8007472:	e7f9      	b.n	8007468 <memset+0x4>

08007474 <_init>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	bf00      	nop
 8007478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747a:	bc08      	pop	{r3}
 800747c:	469e      	mov	lr, r3
 800747e:	4770      	bx	lr

08007480 <_fini>:
 8007480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007482:	bf00      	nop
 8007484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007486:	bc08      	pop	{r3}
 8007488:	469e      	mov	lr, r3
 800748a:	4770      	bx	lr
