
USB_HID_mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fcc  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08008188  08008188  00018188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008240  08008240  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  08008240  08008240  00018240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008248  08008248  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008248  08008248  00018248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800824c  0800824c  0001824c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08008250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa8  20000174  080083c4  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c1c  080083c4  00020c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016527  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000325a  00000000  00000000  000366cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00039928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  0003a9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c47f  00000000  00000000  0003b930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155d3  00000000  00000000  00067daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001028c1  00000000  00000000  0007d382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017fc43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000441c  00000000  00000000  0017fc94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000174 	.word	0x20000174
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08008170 	.word	0x08008170

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000178 	.word	0x20000178
 80001f8:	08008170 	.word	0x08008170

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fa23 	bl	800094e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f830 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8c2 	bl	8000694 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000510:	f000 f874 	bl	80005fc <MX_LPUART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000514:	f007 f89a 	bl	800764c <MX_USB_DEVICE_Init>
 /* USER CODE BEGIN 2 */

  buffer[0]=0x00;
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <main+0x5c>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
  buffer[1]=0x10;
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <main+0x5c>)
 8000520:	2210      	movs	r2, #16
 8000522:	705a      	strb	r2, [r3, #1]
  buffer[2]=0x00;
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <main+0x5c>)
 8000526:	2200      	movs	r2, #0
 8000528:	709a      	strb	r2, [r3, #2]
  buffer[3]=0x00;
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <main+0x5c>)
 800052c:	2200      	movs	r2, #0
 800052e:	70da      	strb	r2, [r3, #3]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // below code is push batton pres move the circle
    if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==GPIO_PIN_SET){
 8000530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000534:	480a      	ldr	r0, [pc, #40]	; (8000560 <main+0x60>)
 8000536:	f000 fd47 	bl	8000fc8 <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	2b01      	cmp	r3, #1
 800053e:	d1f7      	bne.n	8000530 <main+0x30>
    USBD_HID_SendReport(&hUsbDeviceFS,buffer,4);
 8000540:	2204      	movs	r2, #4
 8000542:	4906      	ldr	r1, [pc, #24]	; (800055c <main+0x5c>)
 8000544:	4807      	ldr	r0, [pc, #28]	; (8000564 <main+0x64>)
 8000546:	f005 fe91 	bl	800626c <USBD_HID_SendReport>

   // HAL_Delay(100);
    HAL_GPIO_TogglePin(bsp_led_GPIO_Port, bsp_led_Pin);
 800054a:	2180      	movs	r1, #128	; 0x80
 800054c:	4806      	ldr	r0, [pc, #24]	; (8000568 <main+0x68>)
 800054e:	f000 fd6b 	bl	8001028 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000552:	2064      	movs	r0, #100	; 0x64
 8000554:	f000 fa70 	bl	8000a38 <HAL_Delay>
    if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==GPIO_PIN_SET){
 8000558:	e7ea      	b.n	8000530 <main+0x30>
 800055a:	bf00      	nop
 800055c:	20000190 	.word	0x20000190
 8000560:	48000800 	.word	0x48000800
 8000564:	2000022c 	.word	0x2000022c
 8000568:	48000400 	.word	0x48000400

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b096      	sub	sp, #88	; 0x58
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2244      	movs	r2, #68	; 0x44
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f007 fdf0 	bl	8008160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000592:	f001 ff2b 	bl	80023ec <HAL_PWREx_ControlVoltageScaling>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800059c:	f000 f8e0 	bl	8000760 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80005a0:	2322      	movs	r3, #34	; 0x22
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005aa:	2301      	movs	r3, #1
 80005ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ae:	2340      	movs	r3, #64	; 0x40
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 ffca 	bl	8002554 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005c6:	f000 f8cb 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ce:	2301      	movs	r3, #1
 80005d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e0:	463b      	mov	r3, r7
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fbcf 	bl	8002d88 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005f0:	f000 f8b6 	bl	8000760 <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3758      	adds	r7, #88	; 0x58
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <MX_LPUART1_UART_Init+0x90>)
 8000602:	4a23      	ldr	r2, [pc, #140]	; (8000690 <MX_LPUART1_UART_Init+0x94>)
 8000604:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <MX_LPUART1_UART_Init+0x90>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b1f      	ldr	r3, [pc, #124]	; (800068c <MX_LPUART1_UART_Init+0x90>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_LPUART1_UART_Init+0x90>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800061a:	4b1c      	ldr	r3, [pc, #112]	; (800068c <MX_LPUART1_UART_Init+0x90>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_LPUART1_UART_Init+0x90>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <MX_LPUART1_UART_Init+0x90>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_LPUART1_UART_Init+0x90>)
 800062e:	2200      	movs	r2, #0
 8000630:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_LPUART1_UART_Init+0x90>)
 8000634:	2200      	movs	r2, #0
 8000636:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_LPUART1_UART_Init+0x90>)
 800063a:	2200      	movs	r2, #0
 800063c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_LPUART1_UART_Init+0x90>)
 8000640:	2200      	movs	r2, #0
 8000642:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000644:	4811      	ldr	r0, [pc, #68]	; (800068c <MX_LPUART1_UART_Init+0x90>)
 8000646:	f003 fb75 	bl	8003d34 <HAL_UART_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000650:	f000 f886 	bl	8000760 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000654:	2100      	movs	r1, #0
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <MX_LPUART1_UART_Init+0x90>)
 8000658:	f004 f8a6 	bl	80047a8 <HAL_UARTEx_SetTxFifoThreshold>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000662:	f000 f87d 	bl	8000760 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000666:	2100      	movs	r1, #0
 8000668:	4808      	ldr	r0, [pc, #32]	; (800068c <MX_LPUART1_UART_Init+0x90>)
 800066a:	f004 f8db 	bl	8004824 <HAL_UARTEx_SetRxFifoThreshold>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000674:	f000 f874 	bl	8000760 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_LPUART1_UART_Init+0x90>)
 800067a:	f004 f85c 	bl	8004736 <HAL_UARTEx_DisableFifoMode>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000684:	f000 f86c 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000194 	.word	0x20000194
 8000690:	40008000 	.word	0x40008000

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <MX_GPIO_Init+0xc0>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a29      	ldr	r2, [pc, #164]	; (8000754 <MX_GPIO_Init+0xc0>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <MX_GPIO_Init+0xc0>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	4b24      	ldr	r3, [pc, #144]	; (8000754 <MX_GPIO_Init+0xc0>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a23      	ldr	r2, [pc, #140]	; (8000754 <MX_GPIO_Init+0xc0>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b21      	ldr	r3, [pc, #132]	; (8000754 <MX_GPIO_Init+0xc0>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <MX_GPIO_Init+0xc0>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a1d      	ldr	r2, [pc, #116]	; (8000754 <MX_GPIO_Init+0xc0>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_GPIO_Init+0xc0>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_GPIO_Init+0xc0>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_GPIO_Init+0xc0>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_GPIO_Init+0xc0>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(bsp_led_GPIO_Port, bsp_led_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	4812      	ldr	r0, [pc, #72]	; (8000758 <MX_GPIO_Init+0xc4>)
 8000710:	f000 fc72 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_GPIO_Init+0xc8>)
 800072a:	f000 fabb 	bl	8000ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : bsp_led_Pin */
  GPIO_InitStruct.Pin = bsp_led_Pin;
 800072e:	2380      	movs	r3, #128	; 0x80
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(bsp_led_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_GPIO_Init+0xc4>)
 8000746:	f000 faad 	bl	8000ca4 <HAL_GPIO_Init>

}
 800074a:	bf00      	nop
 800074c:	3728      	adds	r7, #40	; 0x28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400
 800075c:	48000800 	.word	0x48000800

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_MspInit+0x44>)
 8000774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <HAL_MspInit+0x44>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6613      	str	r3, [r2, #96]	; 0x60
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_MspInit+0x44>)
 8000780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_MspInit+0x44>)
 800078c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_MspInit+0x44>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	6593      	str	r3, [r2, #88]	; 0x58
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_MspInit+0x44>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b0ae      	sub	sp, #184	; 0xb8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	2294      	movs	r2, #148	; 0x94
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f007 fcc3 	bl	8008160 <memset>
  if(huart->Instance==LPUART1)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a21      	ldr	r2, [pc, #132]	; (8000864 <HAL_UART_MspInit+0xb0>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d13a      	bne.n	800085a <HAL_UART_MspInit+0xa6>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80007e4:	2320      	movs	r3, #32
 80007e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fd87 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007fc:	f7ff ffb0 	bl	8000760 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <HAL_UART_MspInit+0xb4>)
 8000802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000804:	4a18      	ldr	r2, [pc, #96]	; (8000868 <HAL_UART_MspInit+0xb4>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <HAL_UART_MspInit+0xb4>)
 800080e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <HAL_UART_MspInit+0xb4>)
 800081a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081c:	4a12      	ldr	r2, [pc, #72]	; (8000868 <HAL_UART_MspInit+0xb4>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <HAL_UART_MspInit+0xb4>)
 8000826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000830:	2303      	movs	r3, #3
 8000832:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000848:	2308      	movs	r3, #8
 800084a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <HAL_UART_MspInit+0xb8>)
 8000856:	f000 fa25 	bl	8000ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800085a:	bf00      	nop
 800085c:	37b8      	adds	r7, #184	; 0xb8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40008000 	.word	0x40008000
 8000868:	40021000 	.word	0x40021000
 800086c:	48000800 	.word	0x48000800

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 f89c 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <OTG_FS_IRQHandler+0x10>)
 80008ca:	f000 fd1a 	bl	8001302 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200006fc 	.word	0x200006fc

080008d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <SystemInit+0x20>)
 80008de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <SystemInit+0x20>)
 80008e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000934 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000900:	f7ff ffea 	bl	80008d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <LoopForever+0x6>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	; (800093c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <LoopForever+0xe>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	; (8000948 <LoopForever+0x16>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f007 fbf5 	bl	8008118 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800092e:	f7ff fde7 	bl	8000500 <main>

08000932 <LoopForever>:

LoopForever:
    b LoopForever
 8000932:	e7fe      	b.n	8000932 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000934:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000940:	08008250 	.word	0x08008250
  ldr r2, =_sbss
 8000944:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000948:	20000c1c 	.word	0x20000c1c

0800094c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC1_IRQHandler>

0800094e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f961 	bl	8000c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800095e:	2000      	movs	r0, #0
 8000960:	f000 f80e 	bl	8000980 <HAL_InitTick>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d002      	beq.n	8000970 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	e001      	b.n	8000974 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000970:	f7ff fefc 	bl	800076c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000974:	79fb      	ldrb	r3, [r7, #7]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000988:	2300      	movs	r3, #0
 800098a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <HAL_InitTick+0x6c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d023      	beq.n	80009dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <HAL_InitTick+0x70>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_InitTick+0x6c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f96d 	bl	8000c8a <HAL_SYSTICK_Config>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10f      	bne.n	80009d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d809      	bhi.n	80009d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009bc:	2200      	movs	r2, #0
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009c4:	f000 f937 	bl	8000c36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c8:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_InitTick+0x74>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6013      	str	r3, [r2, #0]
 80009ce:	e007      	b.n	80009e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	73fb      	strb	r3, [r7, #15]
 80009d4:	e004      	b.n	80009e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	e001      	b.n	80009e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000004 	.word	0x20000004

080009f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_IncTick+0x20>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_IncTick+0x24>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <HAL_IncTick+0x24>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000224 	.word	0x20000224

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <HAL_GetTick+0x14>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000224 	.word	0x20000224

08000a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a40:	f7ff ffee 	bl	8000a20 <HAL_GetTick>
 8000a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a50:	d005      	beq.n	8000a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <HAL_Delay+0x44>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5e:	bf00      	nop
 8000a60:	f7ff ffde 	bl	8000a20 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d8f7      	bhi.n	8000a60 <HAL_Delay+0x28>
  {
  }
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	db0b      	blt.n	8000b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	f003 021f 	and.w	r2, r3, #31
 8000afc:	4907      	ldr	r1, [pc, #28]	; (8000b1c <__NVIC_EnableIRQ+0x38>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	095b      	lsrs	r3, r3, #5
 8000b04:	2001      	movs	r0, #1
 8000b06:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	; (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	; (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	; 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bec:	d301      	bcc.n	8000bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00f      	b.n	8000c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <SysTick_Config+0x40>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	f7ff ff8e 	bl	8000b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <SysTick_Config+0x40>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <SysTick_Config+0x40>)
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff29 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c48:	f7ff ff3e 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	6978      	ldr	r0, [r7, #20]
 8000c54:	f7ff ff8e 	bl	8000b74 <NVIC_EncodePriority>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff5d 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff31 	bl	8000ae4 <__NVIC_EnableIRQ>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ffa2 	bl	8000bdc <SysTick_Config>
 8000c98:	4603      	mov	r3, r0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b087      	sub	sp, #28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb2:	e166      	b.n	8000f82 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	2101      	movs	r1, #1
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 8158 	beq.w	8000f7c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d005      	beq.n	8000ce4 <HAL_GPIO_Init+0x40>
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d130      	bne.n	8000d46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	2203      	movs	r2, #3
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68da      	ldr	r2, [r3, #12]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	091b      	lsrs	r3, r3, #4
 8000d30:	f003 0201 	and.w	r2, r3, #1
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d017      	beq.n	8000d82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d123      	bne.n	8000dd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	08da      	lsrs	r2, r3, #3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3208      	adds	r2, #8
 8000d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	220f      	movs	r2, #15
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	691a      	ldr	r2, [r3, #16]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	08da      	lsrs	r2, r3, #3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3208      	adds	r2, #8
 8000dd0:	6939      	ldr	r1, [r7, #16]
 8000dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0203 	and.w	r2, r3, #3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 80b2 	beq.w	8000f7c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e18:	4b61      	ldr	r3, [pc, #388]	; (8000fa0 <HAL_GPIO_Init+0x2fc>)
 8000e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1c:	4a60      	ldr	r2, [pc, #384]	; (8000fa0 <HAL_GPIO_Init+0x2fc>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6613      	str	r3, [r2, #96]	; 0x60
 8000e24:	4b5e      	ldr	r3, [pc, #376]	; (8000fa0 <HAL_GPIO_Init+0x2fc>)
 8000e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e30:	4a5c      	ldr	r2, [pc, #368]	; (8000fa4 <HAL_GPIO_Init+0x300>)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	089b      	lsrs	r3, r3, #2
 8000e36:	3302      	adds	r3, #2
 8000e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	220f      	movs	r2, #15
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e5a:	d02b      	beq.n	8000eb4 <HAL_GPIO_Init+0x210>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a52      	ldr	r2, [pc, #328]	; (8000fa8 <HAL_GPIO_Init+0x304>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d025      	beq.n	8000eb0 <HAL_GPIO_Init+0x20c>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a51      	ldr	r2, [pc, #324]	; (8000fac <HAL_GPIO_Init+0x308>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d01f      	beq.n	8000eac <HAL_GPIO_Init+0x208>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a50      	ldr	r2, [pc, #320]	; (8000fb0 <HAL_GPIO_Init+0x30c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d019      	beq.n	8000ea8 <HAL_GPIO_Init+0x204>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a4f      	ldr	r2, [pc, #316]	; (8000fb4 <HAL_GPIO_Init+0x310>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d013      	beq.n	8000ea4 <HAL_GPIO_Init+0x200>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a4e      	ldr	r2, [pc, #312]	; (8000fb8 <HAL_GPIO_Init+0x314>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d00d      	beq.n	8000ea0 <HAL_GPIO_Init+0x1fc>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a4d      	ldr	r2, [pc, #308]	; (8000fbc <HAL_GPIO_Init+0x318>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d007      	beq.n	8000e9c <HAL_GPIO_Init+0x1f8>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a4c      	ldr	r2, [pc, #304]	; (8000fc0 <HAL_GPIO_Init+0x31c>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d101      	bne.n	8000e98 <HAL_GPIO_Init+0x1f4>
 8000e94:	2307      	movs	r3, #7
 8000e96:	e00e      	b.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000e98:	2308      	movs	r3, #8
 8000e9a:	e00c      	b.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000e9c:	2306      	movs	r3, #6
 8000e9e:	e00a      	b.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000ea0:	2305      	movs	r3, #5
 8000ea2:	e008      	b.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	e006      	b.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e004      	b.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000eac:	2302      	movs	r3, #2
 8000eae:	e002      	b.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e000      	b.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	f002 0203 	and.w	r2, r2, #3
 8000ebc:	0092      	lsls	r2, r2, #2
 8000ebe:	4093      	lsls	r3, r2
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ec6:	4937      	ldr	r1, [pc, #220]	; (8000fa4 <HAL_GPIO_Init+0x300>)
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ed4:	4b3b      	ldr	r3, [pc, #236]	; (8000fc4 <HAL_GPIO_Init+0x320>)
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ef8:	4a32      	ldr	r2, [pc, #200]	; (8000fc4 <HAL_GPIO_Init+0x320>)
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000efe:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <HAL_GPIO_Init+0x320>)
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f22:	4a28      	ldr	r2, [pc, #160]	; (8000fc4 <HAL_GPIO_Init+0x320>)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f28:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <HAL_GPIO_Init+0x320>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f4c:	4a1d      	ldr	r2, [pc, #116]	; (8000fc4 <HAL_GPIO_Init+0x320>)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_GPIO_Init+0x320>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f76:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <HAL_GPIO_Init+0x320>)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f47f ae91 	bne.w	8000cb4 <HAL_GPIO_Init+0x10>
  }
}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	371c      	adds	r7, #28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010000 	.word	0x40010000
 8000fa8:	48000400 	.word	0x48000400
 8000fac:	48000800 	.word	0x48000800
 8000fb0:	48000c00 	.word	0x48000c00
 8000fb4:	48001000 	.word	0x48001000
 8000fb8:	48001400 	.word	0x48001400
 8000fbc:	48001800 	.word	0x48001800
 8000fc0:	48001c00 	.word	0x48001c00
 8000fc4:	40010400 	.word	0x40010400

08000fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	887b      	ldrh	r3, [r7, #2]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e001      	b.n	8000fea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
 8001004:	4613      	mov	r3, r2
 8001006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001008:	787b      	ldrb	r3, [r7, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800100e:	887a      	ldrh	r2, [r7, #2]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001014:	e002      	b.n	800101c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800103a:	887a      	ldrh	r2, [r7, #2]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4013      	ands	r3, r2
 8001040:	041a      	lsls	r2, r3, #16
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43d9      	mvns	r1, r3
 8001046:	887b      	ldrh	r3, [r7, #2]
 8001048:	400b      	ands	r3, r1
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	619a      	str	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	b08f      	sub	sp, #60	; 0x3c
 8001060:	af0a      	add	r7, sp, #40	; 0x28
 8001062:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e116      	b.n	800129c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d106      	bne.n	800108e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f006 fc27 	bl	80078dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2203      	movs	r2, #3
 8001092:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800109a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 fd1e 	bl	8004aee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	687e      	ldr	r6, [r7, #4]
 80010ba:	466d      	mov	r5, sp
 80010bc:	f106 0410 	add.w	r4, r6, #16
 80010c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80010d0:	1d33      	adds	r3, r6, #4
 80010d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d4:	6838      	ldr	r0, [r7, #0]
 80010d6:	f003 fc31 	bl	800493c <USB_CoreInit>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2202      	movs	r2, #2
 80010e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0d7      	b.n	800129c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 fd0c 	bl	8004b10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e04a      	b.n	8001194 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	333d      	adds	r3, #61	; 0x3d
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	333c      	adds	r3, #60	; 0x3c
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	b298      	uxth	r0, r3
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	3344      	adds	r3, #68	; 0x44
 800113a:	4602      	mov	r2, r0
 800113c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	4413      	add	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	440b      	add	r3, r1
 800114c:	3340      	adds	r3, #64	; 0x40
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	3348      	adds	r3, #72	; 0x48
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	4413      	add	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	334c      	adds	r3, #76	; 0x4c
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	3354      	adds	r3, #84	; 0x54
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	3301      	adds	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	d3af      	bcc.n	80010fe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800119e:	2300      	movs	r3, #0
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e044      	b.n	800122e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4413      	add	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	3301      	adds	r3, #1
 800122c:	73fb      	strb	r3, [r7, #15]
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	429a      	cmp	r2, r3
 8001236:	d3b5      	bcc.n	80011a4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	687e      	ldr	r6, [r7, #4]
 8001240:	466d      	mov	r5, sp
 8001242:	f106 0410 	add.w	r4, r6, #16
 8001246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001252:	e885 0003 	stmia.w	r5, {r0, r1}
 8001256:	1d33      	adds	r3, r6, #4
 8001258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800125a:	6838      	ldr	r0, [r7, #0]
 800125c:	f003 fca4 	bl	8004ba8 <USB_DevInit>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2202      	movs	r2, #2
 800126a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e014      	b.n	800129c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	2b01      	cmp	r3, #1
 8001288:	d102      	bne.n	8001290 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f001 f86a 	bl	8002364 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f004 fd2c 	bl	8005cf2 <USB_DevDisconnect>

  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <HAL_PCD_Start+0x1c>
 80012bc:	2302      	movs	r3, #2
 80012be:	e01c      	b.n	80012fa <HAL_PCD_Start+0x56>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d105      	bne.n	80012dc <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 fbf3 	bl	8004acc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f004 fce0 	bl	8005cb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001302:	b590      	push	{r4, r7, lr}
 8001304:	b08d      	sub	sp, #52	; 0x34
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f004 fd9e 	bl	8005e5a <USB_GetMode>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	f040 847e 	bne.w	8001c22 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f004 fd02 	bl	8005d34 <USB_ReadInterrupts>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 8474 	beq.w	8001c20 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f004 fcef 	bl	8005d34 <USB_ReadInterrupts>
 8001356:	4603      	mov	r3, r0
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b02      	cmp	r3, #2
 800135e:	d107      	bne.n	8001370 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	695a      	ldr	r2, [r3, #20]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f002 0202 	and.w	r2, r2, #2
 800136e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f004 fcdd 	bl	8005d34 <USB_ReadInterrupts>
 800137a:	4603      	mov	r3, r0
 800137c:	f003 0310 	and.w	r3, r3, #16
 8001380:	2b10      	cmp	r3, #16
 8001382:	d161      	bne.n	8001448 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	699a      	ldr	r2, [r3, #24]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0210 	bic.w	r2, r2, #16
 8001392:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	f003 020f 	and.w	r2, r3, #15
 80013a0:	4613      	mov	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	4413      	add	r3, r2
 80013b0:	3304      	adds	r3, #4
 80013b2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	0c5b      	lsrs	r3, r3, #17
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d124      	bne.n	800140a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d035      	beq.n	8001438 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	091b      	lsrs	r3, r3, #4
 80013d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013da:	b29b      	uxth	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	6a38      	ldr	r0, [r7, #32]
 80013e0:	f004 fb14 	bl	8005a0c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	691a      	ldr	r2, [r3, #16]
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f0:	441a      	add	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	6a1a      	ldr	r2, [r3, #32]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001402:	441a      	add	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	621a      	str	r2, [r3, #32]
 8001408:	e016      	b.n	8001438 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	0c5b      	lsrs	r3, r3, #17
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	2b06      	cmp	r3, #6
 8001414:	d110      	bne.n	8001438 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800141c:	2208      	movs	r2, #8
 800141e:	4619      	mov	r1, r3
 8001420:	6a38      	ldr	r0, [r7, #32]
 8001422:	f004 faf3 	bl	8005a0c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	6a1a      	ldr	r2, [r3, #32]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001432:	441a      	add	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	699a      	ldr	r2, [r3, #24]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0210 	orr.w	r2, r2, #16
 8001446:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f004 fc71 	bl	8005d34 <USB_ReadInterrupts>
 8001452:	4603      	mov	r3, r0
 8001454:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001458:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800145c:	f040 80a7 	bne.w	80015ae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f004 fc76 	bl	8005d5a <USB_ReadDevAllOutEpInterrupt>
 800146e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001470:	e099      	b.n	80015a6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 808e 	beq.w	800159a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f004 fc9a 	bl	8005dc2 <USB_ReadDevOutEPInterrupt>
 800148e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00c      	beq.n	80014b4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	015a      	lsls	r2, r3, #5
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	4413      	add	r3, r2
 80014a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014a6:	461a      	mov	r2, r3
 80014a8:	2301      	movs	r3, #1
 80014aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 fe7e 	bl	80021b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00c      	beq.n	80014d8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	015a      	lsls	r2, r3, #5
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ca:	461a      	mov	r2, r3
 80014cc:	2308      	movs	r3, #8
 80014ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 feba 	bl	800224c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d008      	beq.n	80014f4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	015a      	lsls	r2, r3, #5
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	4413      	add	r3, r2
 80014ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ee:	461a      	mov	r2, r3
 80014f0:	2310      	movs	r3, #16
 80014f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d030      	beq.n	8001560 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001506:	2b80      	cmp	r3, #128	; 0x80
 8001508:	d109      	bne.n	800151e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001518:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800151c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800151e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001520:	4613      	mov	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	3304      	adds	r3, #4
 8001532:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	78db      	ldrb	r3, [r3, #3]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d108      	bne.n	800154e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2200      	movs	r2, #0
 8001540:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4619      	mov	r1, r3
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f006 fb0b 	bl	8007b64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	015a      	lsls	r2, r3, #5
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	4413      	add	r3, r2
 8001556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800155a:	461a      	mov	r2, r3
 800155c:	2302      	movs	r3, #2
 800155e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f003 0320 	and.w	r3, r3, #32
 8001566:	2b00      	cmp	r3, #0
 8001568:	d008      	beq.n	800157c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	015a      	lsls	r2, r3, #5
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	4413      	add	r3, r2
 8001572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001576:	461a      	mov	r2, r3
 8001578:	2320      	movs	r3, #32
 800157a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d009      	beq.n	800159a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	015a      	lsls	r2, r3, #5
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	4413      	add	r3, r2
 800158e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001592:	461a      	mov	r2, r3
 8001594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001598:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	3301      	adds	r3, #1
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	085b      	lsrs	r3, r3, #1
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f47f af62 	bne.w	8001472 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f004 fbbe 	bl	8005d34 <USB_ReadInterrupts>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015c2:	f040 80a4 	bne.w	800170e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f004 fbdf 	bl	8005d8e <USB_ReadDevAllInEpInterrupt>
 80015d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80015d6:	e096      	b.n	8001706 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 808b 	beq.w	80016fa <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 fc05 	bl	8005dfe <USB_ReadDevInEPInterrupt>
 80015f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d020      	beq.n	8001642 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	2201      	movs	r2, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	43db      	mvns	r3, r3
 800161a:	69f9      	ldr	r1, [r7, #28]
 800161c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001620:	4013      	ands	r3, r2
 8001622:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	015a      	lsls	r2, r3, #5
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	4413      	add	r3, r2
 800162c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001630:	461a      	mov	r2, r3
 8001632:	2301      	movs	r3, #1
 8001634:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	b2db      	uxtb	r3, r3
 800163a:	4619      	mov	r1, r3
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f006 f9fc 	bl	8007a3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	015a      	lsls	r2, r3, #5
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	4413      	add	r3, r2
 8001654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001658:	461a      	mov	r2, r3
 800165a:	2308      	movs	r3, #8
 800165c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b00      	cmp	r3, #0
 8001666:	d008      	beq.n	800167a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	015a      	lsls	r2, r3, #5
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	4413      	add	r3, r2
 8001670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001674:	461a      	mov	r2, r3
 8001676:	2310      	movs	r3, #16
 8001678:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	015a      	lsls	r2, r3, #5
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	4413      	add	r3, r2
 800168c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001690:	461a      	mov	r2, r3
 8001692:	2340      	movs	r3, #64	; 0x40
 8001694:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d023      	beq.n	80016e8 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016a2:	6a38      	ldr	r0, [r7, #32]
 80016a4:	f003 fbcc 	bl	8004e40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016aa:	4613      	mov	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4413      	add	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	3338      	adds	r3, #56	; 0x38
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	3304      	adds	r3, #4
 80016ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	78db      	ldrb	r3, [r3, #3]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d108      	bne.n	80016d6 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2200      	movs	r2, #0
 80016c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	4619      	mov	r1, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f006 fa59 	bl	8007b88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	015a      	lsls	r2, r3, #5
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	4413      	add	r3, r2
 80016de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e2:	461a      	mov	r2, r3
 80016e4:	2302      	movs	r3, #2
 80016e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 fcd2 	bl	800209e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	3301      	adds	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001702:	085b      	lsrs	r3, r3, #1
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001708:	2b00      	cmp	r3, #0
 800170a:	f47f af65 	bne.w	80015d8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f004 fb0e 	bl	8005d34 <USB_ReadInterrupts>
 8001718:	4603      	mov	r3, r0
 800171a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800171e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001722:	d122      	bne.n	800176a <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800173e:	2b01      	cmp	r3, #1
 8001740:	d108      	bne.n	8001754 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800174a:	2100      	movs	r1, #0
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f006 fc77 	bl	8008040 <HAL_PCDEx_LPM_Callback>
 8001752:	e002      	b.n	800175a <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f006 f9dd 	bl	8007b14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695a      	ldr	r2, [r3, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001768:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f004 fae0 	bl	8005d34 <USB_ReadInterrupts>
 8001774:	4603      	mov	r3, r0
 8001776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800177a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800177e:	d112      	bne.n	80017a6 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b01      	cmp	r3, #1
 800178e:	d102      	bne.n	8001796 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f006 f999 	bl	8007ac8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fac2 	bl	8005d34 <USB_ReadInterrupts>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017ba:	d121      	bne.n	8001800 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80017ca:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d111      	bne.n	80017fa <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	f003 020f 	and.w	r2, r3, #15
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80017f0:	2101      	movs	r1, #1
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f006 fc24 	bl	8008040 <HAL_PCDEx_LPM_Callback>
 80017f8:	e002      	b.n	8001800 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f006 f964 	bl	8007ac8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f004 fa95 	bl	8005d34 <USB_ReadInterrupts>
 800180a:	4603      	mov	r3, r0
 800180c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001814:	f040 80b5 	bne.w	8001982 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2110      	movs	r1, #16
 8001832:	4618      	mov	r0, r3
 8001834:	f003 fb04 	bl	8004e40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800183c:	e046      	b.n	80018cc <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	4413      	add	r3, r2
 8001846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800184a:	461a      	mov	r2, r3
 800184c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001850:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001862:	0151      	lsls	r1, r2, #5
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	440a      	add	r2, r1
 8001868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800186c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001870:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	015a      	lsls	r2, r3, #5
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	4413      	add	r3, r2
 800187a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800187e:	461a      	mov	r2, r3
 8001880:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001884:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001888:	015a      	lsls	r2, r3, #5
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	4413      	add	r3, r2
 800188e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001896:	0151      	lsls	r1, r2, #5
 8001898:	69fa      	ldr	r2, [r7, #28]
 800189a:	440a      	add	r2, r1
 800189c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a8:	015a      	lsls	r2, r3, #5
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b6:	0151      	lsls	r1, r2, #5
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	440a      	add	r2, r1
 80018bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c8:	3301      	adds	r3, #1
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d3b3      	bcc.n	800183e <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d016      	beq.n	8001920 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001902:	f043 030b 	orr.w	r3, r3, #11
 8001906:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001918:	f043 030b 	orr.w	r3, r3, #11
 800191c:	6453      	str	r3, [r2, #68]	; 0x44
 800191e:	e015      	b.n	800194c <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800192e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001932:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001936:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001946:	f043 030b 	orr.w	r3, r3, #11
 800194a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800195a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800195e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800196a:	4619      	mov	r1, r3
 800196c:	4610      	mov	r0, r2
 800196e:	f004 faa5 	bl	8005ebc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695a      	ldr	r2, [r3, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001980:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f004 f9d4 	bl	8005d34 <USB_ReadInterrupts>
 800198c:	4603      	mov	r3, r0
 800198e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001996:	d124      	bne.n	80019e2 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f004 fa6a 	bl	8005e76 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 fac7 	bl	8004f3a <USB_GetDevSpeed>
 80019ac:	4603      	mov	r3, r0
 80019ae:	461a      	mov	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681c      	ldr	r4, [r3, #0]
 80019b8:	f001 fbac 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 80019bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	4620      	mov	r0, r4
 80019c8:	f002 ffe4 	bl	8004994 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f006 f85c 	bl	8007a8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f004 f9a4 	bl	8005d34 <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d10a      	bne.n	8001a0c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f006 f839 	bl	8007a6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695a      	ldr	r2, [r3, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f002 0208 	and.w	r2, r2, #8
 8001a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f004 f98f 	bl	8005d34 <USB_ReadInterrupts>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1c:	2b80      	cmp	r3, #128	; 0x80
 8001a1e:	d122      	bne.n	8001a66 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a30:	e014      	b.n	8001a5c <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d105      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 faf3 	bl	800203c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	3301      	adds	r3, #1
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d3e5      	bcc.n	8001a32 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f004 f962 	bl	8005d34 <USB_ReadInterrupts>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a7a:	d13b      	bne.n	8001af4 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a80:	e02b      	b.n	8001ada <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	015a      	lsls	r2, r3, #5
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a96:	4613      	mov	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3340      	adds	r3, #64	; 0x40
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d115      	bne.n	8001ad4 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001aa8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	da12      	bge.n	8001ad4 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	440b      	add	r3, r1
 8001abc:	333f      	adds	r3, #63	; 0x3f
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	4619      	mov	r1, r3
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fab4 	bl	800203c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d3ce      	bcc.n	8001a82 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f004 f91b 	bl	8005d34 <USB_ReadInterrupts>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b08:	d155      	bne.n	8001bb6 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0e:	e045      	b.n	8001b9c <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	015a      	lsls	r2, r3, #5
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	4413      	add	r3, r2
 8001b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d12e      	bne.n	8001b96 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	da2b      	bge.n	8001b96 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001b4a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d121      	bne.n	8001b96 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10a      	bne.n	8001b96 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b92:	6053      	str	r3, [r2, #4]
            break;
 8001b94:	e007      	b.n	8001ba6 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	3301      	adds	r3, #1
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d3b4      	bcc.n	8001b10 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695a      	ldr	r2, [r3, #20]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f004 f8ba 	bl	8005d34 <USB_ReadInterrupts>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bca:	d10a      	bne.n	8001be2 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f005 ffed 	bl	8007bac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 f8a4 	bl	8005d34 <USB_ReadInterrupts>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d115      	bne.n	8001c22 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f005 ffdd 	bl	8007bc8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	e000      	b.n	8001c22 <HAL_PCD_IRQHandler+0x920>
      return;
 8001c20:	bf00      	nop
    }
  }
}
 8001c22:	3734      	adds	r7, #52	; 0x34
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd90      	pop	{r4, r7, pc}

08001c28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_PCD_SetAddress+0x1a>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e013      	b.n	8001c6a <HAL_PCD_SetAddress+0x42>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	78fa      	ldrb	r2, [r7, #3]
 8001c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	78fa      	ldrb	r2, [r7, #3]
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f004 f802 	bl	8005c64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	4608      	mov	r0, r1
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4603      	mov	r3, r0
 8001c82:	70fb      	strb	r3, [r7, #3]
 8001c84:	460b      	mov	r3, r1
 8001c86:	803b      	strh	r3, [r7, #0]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	da0f      	bge.n	8001cb8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	f003 020f 	and.w	r2, r3, #15
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	3338      	adds	r3, #56	; 0x38
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	3304      	adds	r3, #4
 8001cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	705a      	strb	r2, [r3, #1]
 8001cb6:	e00f      	b.n	8001cd8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	f003 020f 	and.w	r2, r3, #15
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	3304      	adds	r3, #4
 8001cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ce4:	883a      	ldrh	r2, [r7, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	78ba      	ldrb	r2, [r7, #2]
 8001cee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	785b      	ldrb	r3, [r3, #1]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d004      	beq.n	8001d02 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d02:	78bb      	ldrb	r3, [r7, #2]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d102      	bne.n	8001d0e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_PCD_EP_Open+0xaa>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e00e      	b.n	8001d3a <HAL_PCD_EP_Open+0xc8>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68f9      	ldr	r1, [r7, #12]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 f924 	bl	8004f78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001d38:	7afb      	ldrb	r3, [r7, #11]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	da0f      	bge.n	8001d76 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	f003 020f 	and.w	r2, r3, #15
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	3338      	adds	r3, #56	; 0x38
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	705a      	strb	r2, [r3, #1]
 8001d74:	e00f      	b.n	8001d96 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	f003 020f 	and.w	r2, r3, #15
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_PCD_EP_Close+0x6e>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e00e      	b.n	8001dce <HAL_PCD_EP_Close+0x8c>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68f9      	ldr	r1, [r7, #12]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 f962 	bl	8005088 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	460b      	mov	r3, r1
 8001de4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de6:	7afb      	ldrb	r3, [r7, #11]
 8001de8:	f003 020f 	and.w	r2, r3, #15
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2200      	movs	r2, #0
 8001e16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e18:	7afb      	ldrb	r3, [r7, #11]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e24:	7afb      	ldrb	r3, [r7, #11]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6979      	ldr	r1, [r7, #20]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 fbe3 	bl	8005600 <USB_EP0StartXfer>
 8001e3a:	e005      	b.n	8001e48 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6979      	ldr	r1, [r7, #20]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 f9fc 	bl	8005240 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e62:	7afb      	ldrb	r3, [r7, #11]
 8001e64:	f003 020f 	and.w	r2, r3, #15
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	3338      	adds	r3, #56	; 0x38
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4413      	add	r3, r2
 8001e76:	3304      	adds	r3, #4
 8001e78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e92:	7afb      	ldrb	r3, [r7, #11]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e9e:	7afb      	ldrb	r3, [r7, #11]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d106      	bne.n	8001eb6 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6979      	ldr	r1, [r7, #20]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 fba6 	bl	8005600 <USB_EP0StartXfer>
 8001eb4:	e005      	b.n	8001ec2 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6979      	ldr	r1, [r7, #20]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 f9bf 	bl	8005240 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 020f 	and.w	r2, r3, #15
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d901      	bls.n	8001eea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e04e      	b.n	8001f88 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da0f      	bge.n	8001f12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	3338      	adds	r3, #56	; 0x38
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	3304      	adds	r3, #4
 8001f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	705a      	strb	r2, [r3, #1]
 8001f10:	e00d      	b.n	8001f2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	3304      	adds	r3, #4
 8001f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_PCD_EP_SetStall+0x82>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e01c      	b.n	8001f88 <HAL_PCD_EP_SetStall+0xbc>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68f9      	ldr	r1, [r7, #12]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 fdad 	bl	8005abc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d108      	bne.n	8001f7e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f76:	4619      	mov	r1, r3
 8001f78:	4610      	mov	r0, r2
 8001f7a:	f003 ff9f 	bl	8005ebc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	f003 020f 	and.w	r2, r3, #15
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d901      	bls.n	8001fae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e042      	b.n	8002034 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	da0f      	bge.n	8001fd6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 020f 	and.w	r2, r3, #15
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	3338      	adds	r3, #56	; 0x38
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	705a      	strb	r2, [r3, #1]
 8001fd4:	e00f      	b.n	8001ff6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 020f 	and.w	r2, r3, #15
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	3304      	adds	r3, #4
 8001fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	b2da      	uxtb	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_PCD_EP_ClrStall+0x86>
 8002012:	2302      	movs	r3, #2
 8002014:	e00e      	b.n	8002034 <HAL_PCD_EP_ClrStall+0xa4>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68f9      	ldr	r1, [r7, #12]
 8002024:	4618      	mov	r0, r3
 8002026:	f003 fdb7 	bl	8005b98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002048:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800204c:	2b00      	cmp	r3, #0
 800204e:	da0c      	bge.n	800206a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	f003 020f 	and.w	r2, r3, #15
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	3338      	adds	r3, #56	; 0x38
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	3304      	adds	r3, #4
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	e00c      	b.n	8002084 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	f003 020f 	and.w	r2, r3, #15
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	3304      	adds	r3, #4
 8002082:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68f9      	ldr	r1, [r7, #12]
 800208a:	4618      	mov	r0, r3
 800208c:	f003 fbda 	bl	8005844 <USB_EPStopXfer>
 8002090:	4603      	mov	r3, r0
 8002092:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002094:	7afb      	ldrb	r3, [r7, #11]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b088      	sub	sp, #32
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	3338      	adds	r3, #56	; 0x38
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	3304      	adds	r3, #4
 80020c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d901      	bls.n	80020d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e067      	b.n	80021a6 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d902      	bls.n	80020f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3303      	adds	r3, #3
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020fa:	e026      	b.n	800214a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	429a      	cmp	r2, r3
 8002110:	d902      	bls.n	8002118 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	3303      	adds	r3, #3
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6919      	ldr	r1, [r3, #16]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	b29b      	uxth	r3, r3
 800212c:	6978      	ldr	r0, [r7, #20]
 800212e:	f003 fc33 	bl	8005998 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	441a      	add	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a1a      	ldr	r2, [r3, #32]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	441a      	add	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	b29b      	uxth	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	429a      	cmp	r2, r3
 800215e:	d809      	bhi.n	8002174 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a1a      	ldr	r2, [r3, #32]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002168:	429a      	cmp	r2, r3
 800216a:	d203      	bcs.n	8002174 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1c3      	bne.n	80020fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	699a      	ldr	r2, [r3, #24]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	429a      	cmp	r2, r3
 800217e:	d811      	bhi.n	80021a4 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	2201      	movs	r2, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	43db      	mvns	r3, r3
 800219a:	6939      	ldr	r1, [r7, #16]
 800219c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021a0:	4013      	ands	r3, r2
 80021a2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	333c      	adds	r3, #60	; 0x3c
 80021c8:	3304      	adds	r3, #4
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4a19      	ldr	r2, [pc, #100]	; (8002248 <PCD_EP_OutXfrComplete_int+0x98>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d124      	bne.n	8002230 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021fc:	461a      	mov	r2, r3
 80021fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002202:	6093      	str	r3, [r2, #8]
 8002204:	e01a      	b.n	800223c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221c:	461a      	mov	r2, r3
 800221e:	2320      	movs	r3, #32
 8002220:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	4619      	mov	r1, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f005 fbeb 	bl	8007a04 <HAL_PCD_DataOutStageCallback>
 800222e:	e005      	b.n	800223c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	4619      	mov	r1, r3
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f005 fbe4 	bl	8007a04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	4f54310a 	.word	0x4f54310a

0800224c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	333c      	adds	r3, #60	; 0x3c
 8002264:	3304      	adds	r3, #4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <PCD_EP_OutSetupPacket_int+0x64>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d90e      	bls.n	80022a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	d009      	beq.n	80022a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002298:	461a      	mov	r2, r3
 800229a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800229e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f005 fb9d 	bl	80079e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	4f54300a 	.word	0x4f54300a

080022b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	70fb      	strb	r3, [r7, #3]
 80022c0:	4613      	mov	r3, r2
 80022c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d107      	bne.n	80022e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022d2:	883b      	ldrh	r3, [r7, #0]
 80022d4:	0419      	lsls	r1, r3, #16
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	430a      	orrs	r2, r1
 80022de:	629a      	str	r2, [r3, #40]	; 0x28
 80022e0:	e028      	b.n	8002334 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	4413      	add	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	e00d      	b.n	8002312 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	3340      	adds	r3, #64	; 0x40
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	0c1b      	lsrs	r3, r3, #16
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	4413      	add	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	3301      	adds	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	3b01      	subs	r3, #1
 8002318:	429a      	cmp	r2, r3
 800231a:	d3ec      	bcc.n	80022f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800231c:	883b      	ldrh	r3, [r7, #0]
 800231e:	0418      	lsls	r0, r3, #16
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6819      	ldr	r1, [r3, #0]
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	3b01      	subs	r3, #1
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	4302      	orrs	r2, r0
 800232c:	3340      	adds	r3, #64	; 0x40
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002396:	f043 0303 	orr.w	r3, r3, #3
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023b0:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023bc:	d102      	bne.n	80023c4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80023be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023c2:	e00b      	b.n	80023dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80023c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d2:	d102      	bne.n	80023da <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80023d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d8:	e000      	b.n	80023dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80023da:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40007000 	.word	0x40007000

080023ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d141      	bne.n	800247e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023fa:	4b4b      	ldr	r3, [pc, #300]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002406:	d131      	bne.n	800246c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002408:	4b47      	ldr	r3, [pc, #284]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800240e:	4a46      	ldr	r2, [pc, #280]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002414:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002418:	4b43      	ldr	r3, [pc, #268]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002420:	4a41      	ldr	r2, [pc, #260]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002426:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002428:	4b40      	ldr	r3, [pc, #256]	; (800252c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2232      	movs	r2, #50	; 0x32
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	4a3f      	ldr	r2, [pc, #252]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	0c9b      	lsrs	r3, r3, #18
 800243a:	3301      	adds	r3, #1
 800243c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800243e:	e002      	b.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3b01      	subs	r3, #1
 8002444:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002446:	4b38      	ldr	r3, [pc, #224]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002452:	d102      	bne.n	800245a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f2      	bne.n	8002440 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800245a:	4b33      	ldr	r3, [pc, #204]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002466:	d158      	bne.n	800251a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e057      	b.n	800251c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800246c:	4b2e      	ldr	r3, [pc, #184]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002472:	4a2d      	ldr	r2, [pc, #180]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002478:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800247c:	e04d      	b.n	800251a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002484:	d141      	bne.n	800250a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002486:	4b28      	ldr	r3, [pc, #160]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800248e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002492:	d131      	bne.n	80024f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002494:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800249a:	4a23      	ldr	r2, [pc, #140]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024a4:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024ac:	4a1e      	ldr	r2, [pc, #120]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80024b4:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2232      	movs	r2, #50	; 0x32
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	0c9b      	lsrs	r3, r3, #18
 80024c6:	3301      	adds	r3, #1
 80024c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024ca:	e002      	b.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024de:	d102      	bne.n	80024e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f2      	bne.n	80024cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f2:	d112      	bne.n	800251a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e011      	b.n	800251c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024fe:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002504:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002508:	e007      	b.n	800251a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800250a:	4b07      	ldr	r3, [pc, #28]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002512:	4a05      	ldr	r2, [pc, #20]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002514:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002518:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	40007000 	.word	0x40007000
 800252c:	20000000 	.word	0x20000000
 8002530:	431bde83 	.word	0x431bde83

08002534 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_PWREx_EnableVddUSB+0x1c>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_PWREx_EnableVddUSB+0x1c>)
 800253e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002542:	6053      	str	r3, [r2, #4]
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40007000 	.word	0x40007000

08002554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	f000 bc08 	b.w	8002d78 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002568:	4b96      	ldr	r3, [pc, #600]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002572:	4b94      	ldr	r3, [pc, #592]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80e4 	beq.w	8002752 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <HAL_RCC_OscConfig+0x4c>
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b0c      	cmp	r3, #12
 8002594:	f040 808b 	bne.w	80026ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b01      	cmp	r3, #1
 800259c:	f040 8087 	bne.w	80026ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025a0:	4b88      	ldr	r3, [pc, #544]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_OscConfig+0x64>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e3df      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1a      	ldr	r2, [r3, #32]
 80025bc:	4b81      	ldr	r3, [pc, #516]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <HAL_RCC_OscConfig+0x7e>
 80025c8:	4b7e      	ldr	r3, [pc, #504]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d0:	e005      	b.n	80025de <HAL_RCC_OscConfig+0x8a>
 80025d2:	4b7c      	ldr	r3, [pc, #496]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025de:	4293      	cmp	r3, r2
 80025e0:	d223      	bcs.n	800262a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fdcc 	bl	8003184 <RCC_SetFlashLatencyFromMSIRange>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e3c0      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f6:	4b73      	ldr	r3, [pc, #460]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a72      	ldr	r2, [pc, #456]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025fc:	f043 0308 	orr.w	r3, r3, #8
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b70      	ldr	r3, [pc, #448]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	496d      	ldr	r1, [pc, #436]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002614:	4b6b      	ldr	r3, [pc, #428]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	4968      	ldr	r1, [pc, #416]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
 8002628:	e025      	b.n	8002676 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800262a:	4b66      	ldr	r3, [pc, #408]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	4960      	ldr	r1, [pc, #384]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002648:	4b5e      	ldr	r3, [pc, #376]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	495b      	ldr	r1, [pc, #364]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fd8c 	bl	8003184 <RCC_SetFlashLatencyFromMSIRange>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e380      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002676:	f000 fcc1 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 800267a:	4602      	mov	r2, r0
 800267c:	4b51      	ldr	r3, [pc, #324]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	4950      	ldr	r1, [pc, #320]	; (80027c8 <HAL_RCC_OscConfig+0x274>)
 8002688:	5ccb      	ldrb	r3, [r1, r3]
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	fa22 f303 	lsr.w	r3, r2, r3
 8002692:	4a4e      	ldr	r2, [pc, #312]	; (80027cc <HAL_RCC_OscConfig+0x278>)
 8002694:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002696:	4b4e      	ldr	r3, [pc, #312]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe f970 	bl	8000980 <HAL_InitTick>
 80026a0:	4603      	mov	r3, r0
 80026a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d052      	beq.n	8002750 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	e364      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d032      	beq.n	800271c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026b6:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a42      	ldr	r2, [pc, #264]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026c2:	f7fe f9ad 	bl	8000a20 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ca:	f7fe f9a9 	bl	8000a20 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e34d      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026dc:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e8:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a35      	ldr	r2, [pc, #212]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026ee:	f043 0308 	orr.w	r3, r3, #8
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4930      	ldr	r1, [pc, #192]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002706:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	492b      	ldr	r1, [pc, #172]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
 800271a:	e01a      	b.n	8002752 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800271c:	4b29      	ldr	r3, [pc, #164]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a28      	ldr	r2, [pc, #160]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002728:	f7fe f97a 	bl	8000a20 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002730:	f7fe f976 	bl	8000a20 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e31a      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002742:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x1dc>
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d073      	beq.n	8002846 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b08      	cmp	r3, #8
 8002762:	d005      	beq.n	8002770 <HAL_RCC_OscConfig+0x21c>
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2b0c      	cmp	r3, #12
 8002768:	d10e      	bne.n	8002788 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d10b      	bne.n	8002788 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d063      	beq.n	8002844 <HAL_RCC_OscConfig+0x2f0>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d15f      	bne.n	8002844 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e2f7      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d106      	bne.n	80027a0 <HAL_RCC_OscConfig+0x24c>
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e025      	b.n	80027ec <HAL_RCC_OscConfig+0x298>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a8:	d114      	bne.n	80027d4 <HAL_RCC_OscConfig+0x280>
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a05      	ldr	r2, [pc, #20]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80027b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a02      	ldr	r2, [pc, #8]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e013      	b.n	80027ec <HAL_RCC_OscConfig+0x298>
 80027c4:	40021000 	.word	0x40021000
 80027c8:	080081d0 	.word	0x080081d0
 80027cc:	20000000 	.word	0x20000000
 80027d0:	20000004 	.word	0x20000004
 80027d4:	4ba0      	ldr	r3, [pc, #640]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a9f      	ldr	r2, [pc, #636]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80027da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b9d      	ldr	r3, [pc, #628]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a9c      	ldr	r2, [pc, #624]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80027e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d013      	beq.n	800281c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe f914 	bl	8000a20 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fc:	f7fe f910 	bl	8000a20 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	; 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e2b4      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800280e:	4b92      	ldr	r3, [pc, #584]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x2a8>
 800281a:	e014      	b.n	8002846 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7fe f900 	bl	8000a20 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002824:	f7fe f8fc 	bl	8000a20 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e2a0      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002836:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x2d0>
 8002842:	e000      	b.n	8002846 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d060      	beq.n	8002914 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d005      	beq.n	8002864 <HAL_RCC_OscConfig+0x310>
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d119      	bne.n	8002892 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d116      	bne.n	8002892 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002864:	4b7c      	ldr	r3, [pc, #496]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_OscConfig+0x328>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e27d      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	4b76      	ldr	r3, [pc, #472]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	4973      	ldr	r1, [pc, #460]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002890:	e040      	b.n	8002914 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d023      	beq.n	80028e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800289a:	4b6f      	ldr	r3, [pc, #444]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a6e      	ldr	r2, [pc, #440]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7fe f8bb 	bl	8000a20 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ae:	f7fe f8b7 	bl	8000a20 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e25b      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c0:	4b65      	ldr	r3, [pc, #404]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b62      	ldr	r3, [pc, #392]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	495f      	ldr	r1, [pc, #380]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
 80028e0:	e018      	b.n	8002914 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e2:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a5c      	ldr	r2, [pc, #368]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7fe f897 	bl	8000a20 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f6:	f7fe f893 	bl	8000a20 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e237      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002908:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f0      	bne.n	80028f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d03c      	beq.n	800299a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01c      	beq.n	8002962 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002928:	4b4b      	ldr	r3, [pc, #300]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800292a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292e:	4a4a      	ldr	r2, [pc, #296]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe f872 	bl	8000a20 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe f86e 	bl	8000a20 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e212      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002952:	4b41      	ldr	r3, [pc, #260]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ef      	beq.n	8002940 <HAL_RCC_OscConfig+0x3ec>
 8002960:	e01b      	b.n	800299a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002962:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002968:	4a3b      	ldr	r2, [pc, #236]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002972:	f7fe f855 	bl	8000a20 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297a:	f7fe f851 	bl	8000a20 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e1f5      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800298c:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800298e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ef      	bne.n	800297a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 80a6 	beq.w	8002af4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a8:	2300      	movs	r3, #0
 80029aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029ac:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10d      	bne.n	80029d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b8:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80029be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c2:	6593      	str	r3, [r2, #88]	; 0x58
 80029c4:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d0:	2301      	movs	r3, #1
 80029d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d4:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <HAL_RCC_OscConfig+0x508>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d118      	bne.n	8002a12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_RCC_OscConfig+0x508>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <HAL_RCC_OscConfig+0x508>)
 80029e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ec:	f7fe f818 	bl	8000a20 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f4:	f7fe f814 	bl	8000a20 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e1b8      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_RCC_OscConfig+0x508>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d108      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4d8>
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a20:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a2a:	e029      	b.n	8002a80 <HAL_RCC_OscConfig+0x52c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d115      	bne.n	8002a60 <HAL_RCC_OscConfig+0x50c>
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a3c:	f043 0304 	orr.w	r3, r3, #4
 8002a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4a:	4a03      	ldr	r2, [pc, #12]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a54:	e014      	b.n	8002a80 <HAL_RCC_OscConfig+0x52c>
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	4b9d      	ldr	r3, [pc, #628]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	4a9c      	ldr	r2, [pc, #624]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a70:	4b99      	ldr	r3, [pc, #612]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a76:	4a98      	ldr	r2, [pc, #608]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d016      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fd ffca 	bl	8000a20 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fd ffc6 	bl	8000a20 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e168      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa6:	4b8c      	ldr	r3, [pc, #560]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ed      	beq.n	8002a90 <HAL_RCC_OscConfig+0x53c>
 8002ab4:	e015      	b.n	8002ae2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab6:	f7fd ffb3 	bl	8000a20 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002abc:	e00a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abe:	f7fd ffaf 	bl	8000a20 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e151      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ad4:	4b80      	ldr	r3, [pc, #512]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ed      	bne.n	8002abe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae2:	7ffb      	ldrb	r3, [r7, #31]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae8:	4b7b      	ldr	r3, [pc, #492]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	4a7a      	ldr	r2, [pc, #488]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d03c      	beq.n	8002b7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01c      	beq.n	8002b42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b08:	4b73      	ldr	r3, [pc, #460]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002b0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b0e:	4a72      	ldr	r2, [pc, #456]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7fd ff82 	bl	8000a20 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b20:	f7fd ff7e 	bl	8000a20 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e122      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b32:	4b69      	ldr	r3, [pc, #420]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0ef      	beq.n	8002b20 <HAL_RCC_OscConfig+0x5cc>
 8002b40:	e01b      	b.n	8002b7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b42:	4b65      	ldr	r3, [pc, #404]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b48:	4a63      	ldr	r2, [pc, #396]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7fd ff65 	bl	8000a20 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b5a:	f7fd ff61 	bl	8000a20 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e105      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b6c:	4b5a      	ldr	r3, [pc, #360]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ef      	bne.n	8002b5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 80f9 	beq.w	8002d76 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	f040 80cf 	bne.w	8002d2c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b8e:	4b52      	ldr	r3, [pc, #328]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f003 0203 	and.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d12c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	3b01      	subs	r3, #1
 8002bae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d123      	bne.n	8002bfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d11b      	bne.n	8002bfc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d113      	bne.n	8002bfc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	085b      	lsrs	r3, r3, #1
 8002be0:	3b01      	subs	r3, #1
 8002be2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d109      	bne.n	8002bfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d071      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	2b0c      	cmp	r3, #12
 8002c00:	d068      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c02:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c0e:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e0ac      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c1e:	4b2e      	ldr	r3, [pc, #184]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a2d      	ldr	r2, [pc, #180]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002c24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c2a:	f7fd fef9 	bl	8000a20 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c32:	f7fd fef5 	bl	8000a20 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e099      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c44:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c50:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <HAL_RCC_OscConfig+0x788>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c60:	3a01      	subs	r2, #1
 8002c62:	0112      	lsls	r2, r2, #4
 8002c64:	4311      	orrs	r1, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c6a:	0212      	lsls	r2, r2, #8
 8002c6c:	4311      	orrs	r1, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c72:	0852      	lsrs	r2, r2, #1
 8002c74:	3a01      	subs	r2, #1
 8002c76:	0552      	lsls	r2, r2, #21
 8002c78:	4311      	orrs	r1, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c7e:	0852      	lsrs	r2, r2, #1
 8002c80:	3a01      	subs	r2, #1
 8002c82:	0652      	lsls	r2, r2, #25
 8002c84:	4311      	orrs	r1, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c8a:	06d2      	lsls	r2, r2, #27
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	4912      	ldr	r1, [pc, #72]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c94:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4a0c      	ldr	r2, [pc, #48]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002caa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cac:	f7fd feb8 	bl	8000a20 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb4:	f7fd feb4 	bl	8000a20 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e058      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc6:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cd2:	e050      	b.n	8002d76 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e04f      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce0:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <HAL_RCC_OscConfig+0x82c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d144      	bne.n	8002d76 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cec:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <HAL_RCC_OscConfig+0x82c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a23      	ldr	r2, [pc, #140]	; (8002d80 <HAL_RCC_OscConfig+0x82c>)
 8002cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cf8:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <HAL_RCC_OscConfig+0x82c>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a20      	ldr	r2, [pc, #128]	; (8002d80 <HAL_RCC_OscConfig+0x82c>)
 8002cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d04:	f7fd fe8c 	bl	8000a20 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fd fe88 	bl	8000a20 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e02c      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1e:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_RCC_OscConfig+0x82c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x7b8>
 8002d2a:	e024      	b.n	8002d76 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d01f      	beq.n	8002d72 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d32:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <HAL_RCC_OscConfig+0x82c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <HAL_RCC_OscConfig+0x82c>)
 8002d38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fd fe6f 	bl	8000a20 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d46:	f7fd fe6b 	bl	8000a20 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e00f      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_RCC_OscConfig+0x82c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCC_OscConfig+0x82c>)
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	4905      	ldr	r1, [pc, #20]	; (8002d80 <HAL_RCC_OscConfig+0x82c>)
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_RCC_OscConfig+0x830>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60cb      	str	r3, [r1, #12]
 8002d70:	e001      	b.n	8002d76 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3720      	adds	r7, #32
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	feeefffc 	.word	0xfeeefffc

08002d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e11d      	b.n	8002fdc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da0:	4b90      	ldr	r3, [pc, #576]	; (8002fe4 <HAL_RCC_ClockConfig+0x25c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d910      	bls.n	8002dd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b8d      	ldr	r3, [pc, #564]	; (8002fe4 <HAL_RCC_ClockConfig+0x25c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 020f 	bic.w	r2, r3, #15
 8002db6:	498b      	ldr	r1, [pc, #556]	; (8002fe4 <HAL_RCC_ClockConfig+0x25c>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b89      	ldr	r3, [pc, #548]	; (8002fe4 <HAL_RCC_ClockConfig+0x25c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e105      	b.n	8002fdc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d010      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	4b81      	ldr	r3, [pc, #516]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d908      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dec:	4b7e      	ldr	r3, [pc, #504]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	497b      	ldr	r1, [pc, #492]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d079      	beq.n	8002efe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d11e      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e12:	4b75      	ldr	r3, [pc, #468]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e0dc      	b.n	8002fdc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002e22:	f000 fa09 	bl	8003238 <RCC_GetSysClockFreqFromPLLSource>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4a70      	ldr	r2, [pc, #448]	; (8002fec <HAL_RCC_ClockConfig+0x264>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d946      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e2e:	4b6e      	ldr	r3, [pc, #440]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d140      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e3a:	4b6b      	ldr	r3, [pc, #428]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e42:	4a69      	ldr	r2, [pc, #420]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e035      	b.n	8002ebc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e58:	4b63      	ldr	r3, [pc, #396]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d115      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0b9      	b.n	8002fdc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e70:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0ad      	b.n	8002fdc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e80:	4b59      	ldr	r3, [pc, #356]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0a5      	b.n	8002fdc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e90:	f000 f8b4 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4a55      	ldr	r2, [pc, #340]	; (8002fec <HAL_RCC_ClockConfig+0x264>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d90f      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e9c:	4b52      	ldr	r3, [pc, #328]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ea8:	4b4f      	ldr	r3, [pc, #316]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb0:	4a4d      	ldr	r2, [pc, #308]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ebc:	4b4a      	ldr	r3, [pc, #296]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f023 0203 	bic.w	r2, r3, #3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4947      	ldr	r1, [pc, #284]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ece:	f7fd fda7 	bl	8000a20 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed6:	f7fd fda3 	bl	8000a20 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e077      	b.n	8002fdc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eec:	4b3e      	ldr	r3, [pc, #248]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 020c 	and.w	r2, r3, #12
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d1eb      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2b80      	cmp	r3, #128	; 0x80
 8002f02:	d105      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f04:	4b38      	ldr	r3, [pc, #224]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a37      	ldr	r2, [pc, #220]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f0e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d010      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	4b31      	ldr	r3, [pc, #196]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d208      	bcs.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2c:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	492b      	ldr	r1, [pc, #172]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f3e:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <HAL_RCC_ClockConfig+0x25c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d210      	bcs.n	8002f6e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4c:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <HAL_RCC_ClockConfig+0x25c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f023 020f 	bic.w	r2, r3, #15
 8002f54:	4923      	ldr	r1, [pc, #140]	; (8002fe4 <HAL_RCC_ClockConfig+0x25c>)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5c:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <HAL_RCC_ClockConfig+0x25c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e036      	b.n	8002fdc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	4918      	ldr	r1, [pc, #96]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4910      	ldr	r1, [pc, #64]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fac:	f000 f826 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	490c      	ldr	r1, [pc, #48]	; (8002ff0 <HAL_RCC_ClockConfig+0x268>)
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc8:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <HAL_RCC_ClockConfig+0x26c>)
 8002fca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_RCC_ClockConfig+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fcd5 	bl	8000980 <HAL_InitTick>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	73fb      	strb	r3, [r7, #15]

  return status;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40022000 	.word	0x40022000
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	04c4b400 	.word	0x04c4b400
 8002ff0:	080081d0 	.word	0x080081d0
 8002ff4:	20000000 	.word	0x20000000
 8002ff8:	20000004 	.word	0x20000004

08002ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	; 0x24
 8003000:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800300a:	4b3e      	ldr	r3, [pc, #248]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003014:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x34>
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	2b0c      	cmp	r3, #12
 8003028:	d121      	bne.n	800306e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d11e      	bne.n	800306e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003030:	4b34      	ldr	r3, [pc, #208]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d107      	bne.n	800304c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800303c:	4b31      	ldr	r3, [pc, #196]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 800303e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	e005      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800304c:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003058:	4a2b      	ldr	r2, [pc, #172]	; (8003108 <HAL_RCC_GetSysClockFreq+0x10c>)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003060:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10d      	bne.n	8003084 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800306c:	e00a      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	2b04      	cmp	r3, #4
 8003072:	d102      	bne.n	800307a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003074:	4b25      	ldr	r3, [pc, #148]	; (800310c <HAL_RCC_GetSysClockFreq+0x110>)
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	e004      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d101      	bne.n	8003084 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003080:	4b23      	ldr	r3, [pc, #140]	; (8003110 <HAL_RCC_GetSysClockFreq+0x114>)
 8003082:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d134      	bne.n	80030f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800308a:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d003      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0xac>
 80030a0:	e005      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030a2:	4b1a      	ldr	r3, [pc, #104]	; (800310c <HAL_RCC_GetSysClockFreq+0x110>)
 80030a4:	617b      	str	r3, [r7, #20]
      break;
 80030a6:	e005      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030a8:	4b19      	ldr	r3, [pc, #100]	; (8003110 <HAL_RCC_GetSysClockFreq+0x114>)
 80030aa:	617b      	str	r3, [r7, #20]
      break;
 80030ac:	e002      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	617b      	str	r3, [r7, #20]
      break;
 80030b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030b4:	4b13      	ldr	r3, [pc, #76]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3301      	adds	r3, #1
 80030c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	0a1b      	lsrs	r3, r3, #8
 80030c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	fb03 f202 	mul.w	r2, r3, r2
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	0e5b      	lsrs	r3, r3, #25
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	3301      	adds	r3, #1
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030f4:	69bb      	ldr	r3, [r7, #24]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3724      	adds	r7, #36	; 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
 8003108:	080081e8 	.word	0x080081e8
 800310c:	00f42400 	.word	0x00f42400
 8003110:	007a1200 	.word	0x007a1200

08003114 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <HAL_RCC_GetHCLKFreq+0x14>)
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000000 	.word	0x20000000

0800312c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003130:	f7ff fff0 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4904      	ldr	r1, [pc, #16]	; (8003154 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800314c:	4618      	mov	r0, r3
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	080081e0 	.word	0x080081e0

08003158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800315c:	f7ff ffda 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	0adb      	lsrs	r3, r3, #11
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	4904      	ldr	r1, [pc, #16]	; (8003180 <HAL_RCC_GetPCLK2Freq+0x28>)
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000
 8003180:	080081e0 	.word	0x080081e0

08003184 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003190:	4b27      	ldr	r3, [pc, #156]	; (8003230 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800319c:	f7ff f906 	bl	80023ac <HAL_PWREx_GetVoltageRange>
 80031a0:	6178      	str	r0, [r7, #20]
 80031a2:	e014      	b.n	80031ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031a4:	4b22      	ldr	r3, [pc, #136]	; (8003230 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a8:	4a21      	ldr	r2, [pc, #132]	; (8003230 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ae:	6593      	str	r3, [r2, #88]	; 0x58
 80031b0:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031bc:	f7ff f8f6 	bl	80023ac <HAL_PWREx_GetVoltageRange>
 80031c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031c2:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	4a1a      	ldr	r2, [pc, #104]	; (8003230 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d4:	d10b      	bne.n	80031ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b80      	cmp	r3, #128	; 0x80
 80031da:	d913      	bls.n	8003204 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2ba0      	cmp	r3, #160	; 0xa0
 80031e0:	d902      	bls.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031e2:	2302      	movs	r3, #2
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	e00d      	b.n	8003204 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031e8:	2301      	movs	r3, #1
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	e00a      	b.n	8003204 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b7f      	cmp	r3, #127	; 0x7f
 80031f2:	d902      	bls.n	80031fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80031f4:	2302      	movs	r3, #2
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	e004      	b.n	8003204 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b70      	cmp	r3, #112	; 0x70
 80031fe:	d101      	bne.n	8003204 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003200:	2301      	movs	r3, #1
 8003202:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 020f 	bic.w	r2, r3, #15
 800320c:	4909      	ldr	r1, [pc, #36]	; (8003234 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003214:	4b07      	ldr	r3, [pc, #28]	; (8003234 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	429a      	cmp	r2, r3
 8003220:	d001      	beq.n	8003226 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40021000 	.word	0x40021000
 8003234:	40022000 	.word	0x40022000

08003238 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800323e:	4b2d      	ldr	r3, [pc, #180]	; (80032f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d00b      	beq.n	8003266 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b03      	cmp	r3, #3
 8003252:	d825      	bhi.n	80032a0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d008      	beq.n	800326c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d11f      	bne.n	80032a0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003260:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003262:	613b      	str	r3, [r7, #16]
    break;
 8003264:	e01f      	b.n	80032a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003266:	4b25      	ldr	r3, [pc, #148]	; (80032fc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003268:	613b      	str	r3, [r7, #16]
    break;
 800326a:	e01c      	b.n	80032a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800326c:	4b21      	ldr	r3, [pc, #132]	; (80032f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d107      	bne.n	8003288 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003278:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800327a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e005      	b.n	8003294 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003288:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003294:	4a1a      	ldr	r2, [pc, #104]	; (8003300 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329c:	613b      	str	r3, [r7, #16]
    break;
 800329e:	e002      	b.n	80032a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]
    break;
 80032a4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032a6:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	3301      	adds	r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	0a1b      	lsrs	r3, r3, #8
 80032ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	fb03 f202 	mul.w	r2, r3, r2
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032cc:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	0e5b      	lsrs	r3, r3, #25
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	3301      	adds	r3, #1
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80032e6:	683b      	ldr	r3, [r7, #0]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40021000 	.word	0x40021000
 80032f8:	00f42400 	.word	0x00f42400
 80032fc:	007a1200 	.word	0x007a1200
 8003300:	080081e8 	.word	0x080081e8

08003304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800330c:	2300      	movs	r3, #0
 800330e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003310:	2300      	movs	r3, #0
 8003312:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331c:	2b00      	cmp	r3, #0
 800331e:	d040      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003324:	2b80      	cmp	r3, #128	; 0x80
 8003326:	d02a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003328:	2b80      	cmp	r3, #128	; 0x80
 800332a:	d825      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800332c:	2b60      	cmp	r3, #96	; 0x60
 800332e:	d026      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003330:	2b60      	cmp	r3, #96	; 0x60
 8003332:	d821      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d006      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d81d      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d009      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003340:	2b20      	cmp	r3, #32
 8003342:	d010      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003344:	e018      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003346:	4b89      	ldr	r3, [pc, #548]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	4a88      	ldr	r2, [pc, #544]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003352:	e015      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fb02 	bl	8003964 <RCCEx_PLLSAI1_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003364:	e00c      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3320      	adds	r3, #32
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fbed 	bl	8003b4c <RCCEx_PLLSAI2_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003376:	e003      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	74fb      	strb	r3, [r7, #19]
      break;
 800337c:	e000      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800337e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003386:	4b79      	ldr	r3, [pc, #484]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003388:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800338c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003394:	4975      	ldr	r1, [pc, #468]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800339c:	e001      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339e:	7cfb      	ldrb	r3, [r7, #19]
 80033a0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d047      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b6:	d030      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033bc:	d82a      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033c2:	d02a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033c8:	d824      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ce:	d008      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80033d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d4:	d81e      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80033da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033de:	d010      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80033e0:	e018      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033e2:	4b62      	ldr	r3, [pc, #392]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	4a61      	ldr	r2, [pc, #388]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ec:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ee:	e015      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fab4 	bl	8003964 <RCCEx_PLLSAI1_Config>
 80033fc:	4603      	mov	r3, r0
 80033fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003400:	e00c      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3320      	adds	r3, #32
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fb9f 	bl	8003b4c <RCCEx_PLLSAI2_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003412:	e003      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	74fb      	strb	r3, [r7, #19]
      break;
 8003418:	e000      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800341a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10b      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003422:	4b52      	ldr	r3, [pc, #328]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003424:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	494e      	ldr	r1, [pc, #312]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003438:	e001      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 809f 	beq.w	800358a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344c:	2300      	movs	r3, #0
 800344e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003450:	4b46      	ldr	r3, [pc, #280]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003460:	2300      	movs	r3, #0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00d      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003466:	4b41      	ldr	r3, [pc, #260]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	4a40      	ldr	r2, [pc, #256]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800346c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003470:	6593      	str	r3, [r2, #88]	; 0x58
 8003472:	4b3e      	ldr	r3, [pc, #248]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347e:	2301      	movs	r3, #1
 8003480:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003482:	4b3b      	ldr	r3, [pc, #236]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a3a      	ldr	r2, [pc, #232]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800348e:	f7fd fac7 	bl	8000a20 <HAL_GetTick>
 8003492:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003494:	e009      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003496:	f7fd fac3 	bl	8000a20 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d902      	bls.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	74fb      	strb	r3, [r7, #19]
        break;
 80034a8:	e005      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034aa:	4b31      	ldr	r3, [pc, #196]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0ef      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80034b6:	7cfb      	ldrb	r3, [r7, #19]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d15b      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034bc:	4b2b      	ldr	r3, [pc, #172]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d01f      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d019      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034da:	4b24      	ldr	r3, [pc, #144]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034e6:	4b21      	ldr	r3, [pc, #132]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ec:	4a1f      	ldr	r2, [pc, #124]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034f6:	4b1d      	ldr	r3, [pc, #116]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fc:	4a1b      	ldr	r2, [pc, #108]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003506:	4a19      	ldr	r2, [pc, #100]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d016      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fd fa82 	bl	8000a20 <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800351e:	e00b      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003520:	f7fd fa7e 	bl	8000a20 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d902      	bls.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	74fb      	strb	r3, [r7, #19]
            break;
 8003536:	e006      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0ec      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003546:	7cfb      	ldrb	r3, [r7, #19]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10c      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800354c:	4b07      	ldr	r3, [pc, #28]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355c:	4903      	ldr	r1, [pc, #12]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003564:	e008      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003566:	7cfb      	ldrb	r3, [r7, #19]
 8003568:	74bb      	strb	r3, [r7, #18]
 800356a:	e005      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800356c:	40021000 	.word	0x40021000
 8003570:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003578:	7c7b      	ldrb	r3, [r7, #17]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d105      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357e:	4ba0      	ldr	r3, [pc, #640]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003582:	4a9f      	ldr	r2, [pc, #636]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003588:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003596:	4b9a      	ldr	r3, [pc, #616]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f023 0203 	bic.w	r2, r3, #3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a4:	4996      	ldr	r1, [pc, #600]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035b8:	4b91      	ldr	r3, [pc, #580]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f023 020c 	bic.w	r2, r3, #12
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	498e      	ldr	r1, [pc, #568]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035da:	4b89      	ldr	r3, [pc, #548]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e8:	4985      	ldr	r1, [pc, #532]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035fc:	4b80      	ldr	r3, [pc, #512]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360a:	497d      	ldr	r1, [pc, #500]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800361e:	4b78      	ldr	r3, [pc, #480]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003624:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362c:	4974      	ldr	r1, [pc, #464]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003640:	4b6f      	ldr	r3, [pc, #444]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003646:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364e:	496c      	ldr	r1, [pc, #432]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003662:	4b67      	ldr	r3, [pc, #412]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003670:	4963      	ldr	r1, [pc, #396]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003684:	4b5e      	ldr	r3, [pc, #376]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003692:	495b      	ldr	r1, [pc, #364]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036a6:	4b56      	ldr	r3, [pc, #344]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b4:	4952      	ldr	r1, [pc, #328]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036c8:	4b4d      	ldr	r3, [pc, #308]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d6:	494a      	ldr	r1, [pc, #296]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ea:	4b45      	ldr	r3, [pc, #276]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f8:	4941      	ldr	r1, [pc, #260]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800370c:	4b3c      	ldr	r3, [pc, #240]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800370e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371a:	4939      	ldr	r1, [pc, #228]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d028      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800372e:	4b34      	ldr	r3, [pc, #208]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003734:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373c:	4930      	ldr	r1, [pc, #192]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800374c:	d106      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800374e:	4b2c      	ldr	r3, [pc, #176]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	4a2b      	ldr	r2, [pc, #172]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003758:	60d3      	str	r3, [r2, #12]
 800375a:	e011      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003764:	d10c      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	2101      	movs	r1, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f000 f8f9 	bl	8003964 <RCCEx_PLLSAI1_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d04d      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003794:	d108      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003796:	4b1a      	ldr	r3, [pc, #104]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003798:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800379c:	4a18      	ldr	r2, [pc, #96]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800379e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80037a6:	e012      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80037a8:	4b15      	ldr	r3, [pc, #84]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037ae:	4a14      	ldr	r2, [pc, #80]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037b4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037c6:	490e      	ldr	r1, [pc, #56]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037d6:	d106      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a08      	ldr	r2, [pc, #32]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037e2:	60d3      	str	r3, [r2, #12]
 80037e4:	e020      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037ee:	d109      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4a02      	ldr	r2, [pc, #8]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fa:	60d3      	str	r3, [r2, #12]
 80037fc:	e014      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800380c:	d10c      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3304      	adds	r3, #4
 8003812:	2101      	movs	r1, #1
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f8a5 	bl	8003964 <RCCEx_PLLSAI1_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381e:	7cfb      	ldrb	r3, [r7, #19]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d028      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003834:	4b4a      	ldr	r3, [pc, #296]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003842:	4947      	ldr	r1, [pc, #284]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800384e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003852:	d106      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003854:	4b42      	ldr	r3, [pc, #264]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a41      	ldr	r2, [pc, #260]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800385a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800385e:	60d3      	str	r3, [r2, #12]
 8003860:	e011      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003866:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800386a:	d10c      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3304      	adds	r3, #4
 8003870:	2101      	movs	r1, #1
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f876 	bl	8003964 <RCCEx_PLLSAI1_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003882:	7cfb      	ldrb	r3, [r7, #19]
 8003884:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01e      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003892:	4b33      	ldr	r3, [pc, #204]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a2:	492f      	ldr	r1, [pc, #188]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3304      	adds	r3, #4
 80038ba:	2102      	movs	r1, #2
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 f851 	bl	8003964 <RCCEx_PLLSAI1_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038c6:	7cfb      	ldrb	r3, [r7, #19]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00b      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038dc:	4b20      	ldr	r3, [pc, #128]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038e2:	f023 0204 	bic.w	r2, r3, #4
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ec:	491c      	ldr	r1, [pc, #112]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00b      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003900:	4b17      	ldr	r3, [pc, #92]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003902:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003906:	f023 0218 	bic.w	r2, r3, #24
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003910:	4913      	ldr	r1, [pc, #76]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d017      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003924:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003926:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800392a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003934:	490a      	ldr	r1, [pc, #40]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003946:	d105      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4a04      	ldr	r2, [pc, #16]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800394e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003952:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003954:	7cbb      	ldrb	r3, [r7, #18]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40021000 	.word	0x40021000

08003964 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003972:	4b72      	ldr	r3, [pc, #456]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00e      	beq.n	800399c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800397e:	4b6f      	ldr	r3, [pc, #444]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0203 	and.w	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d103      	bne.n	8003996 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
       ||
 8003992:	2b00      	cmp	r3, #0
 8003994:	d142      	bne.n	8003a1c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
 800399a:	e03f      	b.n	8003a1c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d018      	beq.n	80039d6 <RCCEx_PLLSAI1_Config+0x72>
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d825      	bhi.n	80039f4 <RCCEx_PLLSAI1_Config+0x90>
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d002      	beq.n	80039b2 <RCCEx_PLLSAI1_Config+0x4e>
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d009      	beq.n	80039c4 <RCCEx_PLLSAI1_Config+0x60>
 80039b0:	e020      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039b2:	4b62      	ldr	r3, [pc, #392]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d11d      	bne.n	80039fa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c2:	e01a      	b.n	80039fa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039c4:	4b5d      	ldr	r3, [pc, #372]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d116      	bne.n	80039fe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d4:	e013      	b.n	80039fe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039d6:	4b59      	ldr	r3, [pc, #356]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10f      	bne.n	8003a02 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039e2:	4b56      	ldr	r3, [pc, #344]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039f2:	e006      	b.n	8003a02 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
      break;
 80039f8:	e004      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80039fa:	bf00      	nop
 80039fc:	e002      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80039fe:	bf00      	nop
 8003a00:	e000      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003a02:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d108      	bne.n	8003a1c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003a0a:	4b4c      	ldr	r3, [pc, #304]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f023 0203 	bic.w	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4949      	ldr	r1, [pc, #292]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f040 8086 	bne.w	8003b30 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a24:	4b45      	ldr	r3, [pc, #276]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a44      	ldr	r2, [pc, #272]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a30:	f7fc fff6 	bl	8000a20 <HAL_GetTick>
 8003a34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a36:	e009      	b.n	8003a4c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a38:	f7fc fff2 	bl	8000a20 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d902      	bls.n	8003a4c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	73fb      	strb	r3, [r7, #15]
        break;
 8003a4a:	e005      	b.n	8003a58 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a4c:	4b3b      	ldr	r3, [pc, #236]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ef      	bne.n	8003a38 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d168      	bne.n	8003b30 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d113      	bne.n	8003a8c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a64:	4b35      	ldr	r3, [pc, #212]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	4b35      	ldr	r3, [pc, #212]	; (8003b40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6892      	ldr	r2, [r2, #8]
 8003a70:	0211      	lsls	r1, r2, #8
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68d2      	ldr	r2, [r2, #12]
 8003a76:	06d2      	lsls	r2, r2, #27
 8003a78:	4311      	orrs	r1, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6852      	ldr	r2, [r2, #4]
 8003a7e:	3a01      	subs	r2, #1
 8003a80:	0112      	lsls	r2, r2, #4
 8003a82:	430a      	orrs	r2, r1
 8003a84:	492d      	ldr	r1, [pc, #180]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	610b      	str	r3, [r1, #16]
 8003a8a:	e02d      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d115      	bne.n	8003abe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a92:	4b2a      	ldr	r3, [pc, #168]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6892      	ldr	r2, [r2, #8]
 8003a9e:	0211      	lsls	r1, r2, #8
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6912      	ldr	r2, [r2, #16]
 8003aa4:	0852      	lsrs	r2, r2, #1
 8003aa6:	3a01      	subs	r2, #1
 8003aa8:	0552      	lsls	r2, r2, #21
 8003aaa:	4311      	orrs	r1, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6852      	ldr	r2, [r2, #4]
 8003ab0:	3a01      	subs	r2, #1
 8003ab2:	0112      	lsls	r2, r2, #4
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	4921      	ldr	r1, [pc, #132]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	610b      	str	r3, [r1, #16]
 8003abc:	e014      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003abe:	4b1f      	ldr	r3, [pc, #124]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6892      	ldr	r2, [r2, #8]
 8003aca:	0211      	lsls	r1, r2, #8
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6952      	ldr	r2, [r2, #20]
 8003ad0:	0852      	lsrs	r2, r2, #1
 8003ad2:	3a01      	subs	r2, #1
 8003ad4:	0652      	lsls	r2, r2, #25
 8003ad6:	4311      	orrs	r1, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6852      	ldr	r2, [r2, #4]
 8003adc:	3a01      	subs	r2, #1
 8003ade:	0112      	lsls	r2, r2, #4
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	4916      	ldr	r1, [pc, #88]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ae8:	4b14      	ldr	r3, [pc, #80]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a13      	ldr	r2, [pc, #76]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003af2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7fc ff94 	bl	8000a20 <HAL_GetTick>
 8003af8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003afa:	e009      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003afc:	f7fc ff90 	bl	8000a20 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d902      	bls.n	8003b10 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b0e:	e005      	b.n	8003b1c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b10:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ef      	beq.n	8003afc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	4904      	ldr	r1, [pc, #16]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	07ff800f 	.word	0x07ff800f
 8003b44:	ff9f800f 	.word	0xff9f800f
 8003b48:	f9ff800f 	.word	0xf9ff800f

08003b4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b5a:	4b72      	ldr	r3, [pc, #456]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00e      	beq.n	8003b84 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b66:	4b6f      	ldr	r3, [pc, #444]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f003 0203 	and.w	r2, r3, #3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d103      	bne.n	8003b7e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
       ||
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d142      	bne.n	8003c04 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
 8003b82:	e03f      	b.n	8003c04 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d018      	beq.n	8003bbe <RCCEx_PLLSAI2_Config+0x72>
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d825      	bhi.n	8003bdc <RCCEx_PLLSAI2_Config+0x90>
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d002      	beq.n	8003b9a <RCCEx_PLLSAI2_Config+0x4e>
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d009      	beq.n	8003bac <RCCEx_PLLSAI2_Config+0x60>
 8003b98:	e020      	b.n	8003bdc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b9a:	4b62      	ldr	r3, [pc, #392]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d11d      	bne.n	8003be2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003baa:	e01a      	b.n	8003be2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bac:	4b5d      	ldr	r3, [pc, #372]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d116      	bne.n	8003be6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bbc:	e013      	b.n	8003be6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bbe:	4b59      	ldr	r3, [pc, #356]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10f      	bne.n	8003bea <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bca:	4b56      	ldr	r3, [pc, #344]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bda:	e006      	b.n	8003bea <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      break;
 8003be0:	e004      	b.n	8003bec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003be2:	bf00      	nop
 8003be4:	e002      	b.n	8003bec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003be6:	bf00      	nop
 8003be8:	e000      	b.n	8003bec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003bea:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d108      	bne.n	8003c04 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003bf2:	4b4c      	ldr	r3, [pc, #304]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f023 0203 	bic.w	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4949      	ldr	r1, [pc, #292]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f040 8086 	bne.w	8003d18 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c0c:	4b45      	ldr	r3, [pc, #276]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a44      	ldr	r2, [pc, #272]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c18:	f7fc ff02 	bl	8000a20 <HAL_GetTick>
 8003c1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c1e:	e009      	b.n	8003c34 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c20:	f7fc fefe 	bl	8000a20 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d902      	bls.n	8003c34 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	73fb      	strb	r3, [r7, #15]
        break;
 8003c32:	e005      	b.n	8003c40 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c34:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1ef      	bne.n	8003c20 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d168      	bne.n	8003d18 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d113      	bne.n	8003c74 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c4c:	4b35      	ldr	r3, [pc, #212]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	4b35      	ldr	r3, [pc, #212]	; (8003d28 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6892      	ldr	r2, [r2, #8]
 8003c58:	0211      	lsls	r1, r2, #8
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68d2      	ldr	r2, [r2, #12]
 8003c5e:	06d2      	lsls	r2, r2, #27
 8003c60:	4311      	orrs	r1, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6852      	ldr	r2, [r2, #4]
 8003c66:	3a01      	subs	r2, #1
 8003c68:	0112      	lsls	r2, r2, #4
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	492d      	ldr	r1, [pc, #180]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	614b      	str	r3, [r1, #20]
 8003c72:	e02d      	b.n	8003cd0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d115      	bne.n	8003ca6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c7a:	4b2a      	ldr	r3, [pc, #168]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	4b2b      	ldr	r3, [pc, #172]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1e0>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6892      	ldr	r2, [r2, #8]
 8003c86:	0211      	lsls	r1, r2, #8
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6912      	ldr	r2, [r2, #16]
 8003c8c:	0852      	lsrs	r2, r2, #1
 8003c8e:	3a01      	subs	r2, #1
 8003c90:	0552      	lsls	r2, r2, #21
 8003c92:	4311      	orrs	r1, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6852      	ldr	r2, [r2, #4]
 8003c98:	3a01      	subs	r2, #1
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	4921      	ldr	r1, [pc, #132]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	614b      	str	r3, [r1, #20]
 8003ca4:	e014      	b.n	8003cd0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6892      	ldr	r2, [r2, #8]
 8003cb2:	0211      	lsls	r1, r2, #8
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6952      	ldr	r2, [r2, #20]
 8003cb8:	0852      	lsrs	r2, r2, #1
 8003cba:	3a01      	subs	r2, #1
 8003cbc:	0652      	lsls	r2, r2, #25
 8003cbe:	4311      	orrs	r1, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6852      	ldr	r2, [r2, #4]
 8003cc4:	3a01      	subs	r2, #1
 8003cc6:	0112      	lsls	r2, r2, #4
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	4916      	ldr	r1, [pc, #88]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cd0:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a13      	ldr	r2, [pc, #76]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fc fea0 	bl	8000a20 <HAL_GetTick>
 8003ce0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ce2:	e009      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ce4:	f7fc fe9c 	bl	8000a20 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d902      	bls.n	8003cf8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	73fb      	strb	r3, [r7, #15]
          break;
 8003cf6:	e005      	b.n	8003d04 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0ef      	beq.n	8003ce4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	4904      	ldr	r1, [pc, #16]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	07ff800f 	.word	0x07ff800f
 8003d2c:	ff9f800f 	.word	0xff9f800f
 8003d30:	f9ff800f 	.word	0xf9ff800f

08003d34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e042      	b.n	8003dcc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d106      	bne.n	8003d5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7fc fd2b 	bl	80007b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2224      	movs	r2, #36	; 0x24
 8003d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0201 	bic.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f82c 	bl	8003dd4 <UART_SetConfig>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e022      	b.n	8003dcc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fb1c 	bl	80043cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003da2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003db2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fba3 	bl	8004510 <UART_CheckIdleState>
 8003dca:	4603      	mov	r3, r0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd8:	b08c      	sub	sp, #48	; 0x30
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4baa      	ldr	r3, [pc, #680]	; (80040ac <UART_SetConfig+0x2d8>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	6812      	ldr	r2, [r2, #0]
 8003e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a9f      	ldr	r2, [pc, #636]	; (80040b0 <UART_SetConfig+0x2dc>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d004      	beq.n	8003e40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003e4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e54:	430b      	orrs	r3, r1
 8003e56:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	f023 010f 	bic.w	r1, r3, #15
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a90      	ldr	r2, [pc, #576]	; (80040b4 <UART_SetConfig+0x2e0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d125      	bne.n	8003ec4 <UART_SetConfig+0xf0>
 8003e78:	4b8f      	ldr	r3, [pc, #572]	; (80040b8 <UART_SetConfig+0x2e4>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d81a      	bhi.n	8003ebc <UART_SetConfig+0xe8>
 8003e86:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <UART_SetConfig+0xb8>)
 8003e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8c:	08003e9d 	.word	0x08003e9d
 8003e90:	08003ead 	.word	0x08003ead
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003eb5 	.word	0x08003eb5
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ea2:	e116      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eaa:	e112      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003eac:	2304      	movs	r3, #4
 8003eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb2:	e10e      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eba:	e10a      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ec2:	e106      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a7c      	ldr	r2, [pc, #496]	; (80040bc <UART_SetConfig+0x2e8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d138      	bne.n	8003f40 <UART_SetConfig+0x16c>
 8003ece:	4b7a      	ldr	r3, [pc, #488]	; (80040b8 <UART_SetConfig+0x2e4>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	d82d      	bhi.n	8003f38 <UART_SetConfig+0x164>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <UART_SetConfig+0x110>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003f19 	.word	0x08003f19
 8003ee8:	08003f39 	.word	0x08003f39
 8003eec:	08003f39 	.word	0x08003f39
 8003ef0:	08003f39 	.word	0x08003f39
 8003ef4:	08003f29 	.word	0x08003f29
 8003ef8:	08003f39 	.word	0x08003f39
 8003efc:	08003f39 	.word	0x08003f39
 8003f00:	08003f39 	.word	0x08003f39
 8003f04:	08003f21 	.word	0x08003f21
 8003f08:	08003f39 	.word	0x08003f39
 8003f0c:	08003f39 	.word	0x08003f39
 8003f10:	08003f39 	.word	0x08003f39
 8003f14:	08003f31 	.word	0x08003f31
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f1e:	e0d8      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003f20:	2302      	movs	r3, #2
 8003f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f26:	e0d4      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f2e:	e0d0      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003f30:	2308      	movs	r3, #8
 8003f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f36:	e0cc      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f3e:	e0c8      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a5e      	ldr	r2, [pc, #376]	; (80040c0 <UART_SetConfig+0x2ec>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d125      	bne.n	8003f96 <UART_SetConfig+0x1c2>
 8003f4a:	4b5b      	ldr	r3, [pc, #364]	; (80040b8 <UART_SetConfig+0x2e4>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f54:	2b30      	cmp	r3, #48	; 0x30
 8003f56:	d016      	beq.n	8003f86 <UART_SetConfig+0x1b2>
 8003f58:	2b30      	cmp	r3, #48	; 0x30
 8003f5a:	d818      	bhi.n	8003f8e <UART_SetConfig+0x1ba>
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d00a      	beq.n	8003f76 <UART_SetConfig+0x1a2>
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d814      	bhi.n	8003f8e <UART_SetConfig+0x1ba>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <UART_SetConfig+0x19a>
 8003f68:	2b10      	cmp	r3, #16
 8003f6a:	d008      	beq.n	8003f7e <UART_SetConfig+0x1aa>
 8003f6c:	e00f      	b.n	8003f8e <UART_SetConfig+0x1ba>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f74:	e0ad      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003f76:	2302      	movs	r3, #2
 8003f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f7c:	e0a9      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003f7e:	2304      	movs	r3, #4
 8003f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f84:	e0a5      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003f86:	2308      	movs	r3, #8
 8003f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f8c:	e0a1      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003f8e:	2310      	movs	r3, #16
 8003f90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f94:	e09d      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a4a      	ldr	r2, [pc, #296]	; (80040c4 <UART_SetConfig+0x2f0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d125      	bne.n	8003fec <UART_SetConfig+0x218>
 8003fa0:	4b45      	ldr	r3, [pc, #276]	; (80040b8 <UART_SetConfig+0x2e4>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003faa:	2bc0      	cmp	r3, #192	; 0xc0
 8003fac:	d016      	beq.n	8003fdc <UART_SetConfig+0x208>
 8003fae:	2bc0      	cmp	r3, #192	; 0xc0
 8003fb0:	d818      	bhi.n	8003fe4 <UART_SetConfig+0x210>
 8003fb2:	2b80      	cmp	r3, #128	; 0x80
 8003fb4:	d00a      	beq.n	8003fcc <UART_SetConfig+0x1f8>
 8003fb6:	2b80      	cmp	r3, #128	; 0x80
 8003fb8:	d814      	bhi.n	8003fe4 <UART_SetConfig+0x210>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <UART_SetConfig+0x1f0>
 8003fbe:	2b40      	cmp	r3, #64	; 0x40
 8003fc0:	d008      	beq.n	8003fd4 <UART_SetConfig+0x200>
 8003fc2:	e00f      	b.n	8003fe4 <UART_SetConfig+0x210>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fca:	e082      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fd2:	e07e      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fda:	e07a      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003fdc:	2308      	movs	r3, #8
 8003fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fe2:	e076      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fea:	e072      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a35      	ldr	r2, [pc, #212]	; (80040c8 <UART_SetConfig+0x2f4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d12a      	bne.n	800404c <UART_SetConfig+0x278>
 8003ff6:	4b30      	ldr	r3, [pc, #192]	; (80040b8 <UART_SetConfig+0x2e4>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004004:	d01a      	beq.n	800403c <UART_SetConfig+0x268>
 8004006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800400a:	d81b      	bhi.n	8004044 <UART_SetConfig+0x270>
 800400c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004010:	d00c      	beq.n	800402c <UART_SetConfig+0x258>
 8004012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004016:	d815      	bhi.n	8004044 <UART_SetConfig+0x270>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <UART_SetConfig+0x250>
 800401c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004020:	d008      	beq.n	8004034 <UART_SetConfig+0x260>
 8004022:	e00f      	b.n	8004044 <UART_SetConfig+0x270>
 8004024:	2300      	movs	r3, #0
 8004026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800402a:	e052      	b.n	80040d2 <UART_SetConfig+0x2fe>
 800402c:	2302      	movs	r3, #2
 800402e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004032:	e04e      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8004034:	2304      	movs	r3, #4
 8004036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800403a:	e04a      	b.n	80040d2 <UART_SetConfig+0x2fe>
 800403c:	2308      	movs	r3, #8
 800403e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004042:	e046      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8004044:	2310      	movs	r3, #16
 8004046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800404a:	e042      	b.n	80040d2 <UART_SetConfig+0x2fe>
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a17      	ldr	r2, [pc, #92]	; (80040b0 <UART_SetConfig+0x2dc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d13a      	bne.n	80040cc <UART_SetConfig+0x2f8>
 8004056:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <UART_SetConfig+0x2e4>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004060:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004064:	d01a      	beq.n	800409c <UART_SetConfig+0x2c8>
 8004066:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800406a:	d81b      	bhi.n	80040a4 <UART_SetConfig+0x2d0>
 800406c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004070:	d00c      	beq.n	800408c <UART_SetConfig+0x2b8>
 8004072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004076:	d815      	bhi.n	80040a4 <UART_SetConfig+0x2d0>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <UART_SetConfig+0x2b0>
 800407c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004080:	d008      	beq.n	8004094 <UART_SetConfig+0x2c0>
 8004082:	e00f      	b.n	80040a4 <UART_SetConfig+0x2d0>
 8004084:	2300      	movs	r3, #0
 8004086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800408a:	e022      	b.n	80040d2 <UART_SetConfig+0x2fe>
 800408c:	2302      	movs	r3, #2
 800408e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004092:	e01e      	b.n	80040d2 <UART_SetConfig+0x2fe>
 8004094:	2304      	movs	r3, #4
 8004096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800409a:	e01a      	b.n	80040d2 <UART_SetConfig+0x2fe>
 800409c:	2308      	movs	r3, #8
 800409e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040a2:	e016      	b.n	80040d2 <UART_SetConfig+0x2fe>
 80040a4:	2310      	movs	r3, #16
 80040a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040aa:	e012      	b.n	80040d2 <UART_SetConfig+0x2fe>
 80040ac:	cfff69f3 	.word	0xcfff69f3
 80040b0:	40008000 	.word	0x40008000
 80040b4:	40013800 	.word	0x40013800
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40004400 	.word	0x40004400
 80040c0:	40004800 	.word	0x40004800
 80040c4:	40004c00 	.word	0x40004c00
 80040c8:	40005000 	.word	0x40005000
 80040cc:	2310      	movs	r3, #16
 80040ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4aae      	ldr	r2, [pc, #696]	; (8004390 <UART_SetConfig+0x5bc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	f040 8097 	bne.w	800420c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d823      	bhi.n	800412e <UART_SetConfig+0x35a>
 80040e6:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <UART_SetConfig+0x318>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	08004111 	.word	0x08004111
 80040f0:	0800412f 	.word	0x0800412f
 80040f4:	08004119 	.word	0x08004119
 80040f8:	0800412f 	.word	0x0800412f
 80040fc:	0800411f 	.word	0x0800411f
 8004100:	0800412f 	.word	0x0800412f
 8004104:	0800412f 	.word	0x0800412f
 8004108:	0800412f 	.word	0x0800412f
 800410c:	08004127 	.word	0x08004127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7ff f80c 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 8004114:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004116:	e010      	b.n	800413a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004118:	4b9e      	ldr	r3, [pc, #632]	; (8004394 <UART_SetConfig+0x5c0>)
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800411c:	e00d      	b.n	800413a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800411e:	f7fe ff6d 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8004122:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004124:	e009      	b.n	800413a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800412c:	e005      	b.n	800413a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004138:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8130 	beq.w	80043a2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	4a94      	ldr	r2, [pc, #592]	; (8004398 <UART_SetConfig+0x5c4>)
 8004148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800414c:	461a      	mov	r2, r3
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	fbb3 f3f2 	udiv	r3, r3, r2
 8004154:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	4413      	add	r3, r2
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	429a      	cmp	r2, r3
 8004164:	d305      	bcc.n	8004172 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	429a      	cmp	r2, r3
 8004170:	d903      	bls.n	800417a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004178:	e113      	b.n	80043a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	2200      	movs	r2, #0
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	60fa      	str	r2, [r7, #12]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	4a84      	ldr	r2, [pc, #528]	; (8004398 <UART_SetConfig+0x5c4>)
 8004188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800418c:	b29b      	uxth	r3, r3
 800418e:	2200      	movs	r2, #0
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004198:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800419c:	f7fc f82e 	bl	80001fc <__aeabi_uldivmod>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	020b      	lsls	r3, r1, #8
 80041b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80041b6:	0202      	lsls	r2, r0, #8
 80041b8:	6979      	ldr	r1, [r7, #20]
 80041ba:	6849      	ldr	r1, [r1, #4]
 80041bc:	0849      	lsrs	r1, r1, #1
 80041be:	2000      	movs	r0, #0
 80041c0:	460c      	mov	r4, r1
 80041c2:	4605      	mov	r5, r0
 80041c4:	eb12 0804 	adds.w	r8, r2, r4
 80041c8:	eb43 0905 	adc.w	r9, r3, r5
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	469a      	mov	sl, r3
 80041d4:	4693      	mov	fp, r2
 80041d6:	4652      	mov	r2, sl
 80041d8:	465b      	mov	r3, fp
 80041da:	4640      	mov	r0, r8
 80041dc:	4649      	mov	r1, r9
 80041de:	f7fc f80d 	bl	80001fc <__aeabi_uldivmod>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4613      	mov	r3, r2
 80041e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041f0:	d308      	bcc.n	8004204 <UART_SetConfig+0x430>
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f8:	d204      	bcs.n	8004204 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6a3a      	ldr	r2, [r7, #32]
 8004200:	60da      	str	r2, [r3, #12]
 8004202:	e0ce      	b.n	80043a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800420a:	e0ca      	b.n	80043a2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004214:	d166      	bne.n	80042e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004216:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800421a:	2b08      	cmp	r3, #8
 800421c:	d827      	bhi.n	800426e <UART_SetConfig+0x49a>
 800421e:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <UART_SetConfig+0x450>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	08004249 	.word	0x08004249
 8004228:	08004251 	.word	0x08004251
 800422c:	08004259 	.word	0x08004259
 8004230:	0800426f 	.word	0x0800426f
 8004234:	0800425f 	.word	0x0800425f
 8004238:	0800426f 	.word	0x0800426f
 800423c:	0800426f 	.word	0x0800426f
 8004240:	0800426f 	.word	0x0800426f
 8004244:	08004267 	.word	0x08004267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004248:	f7fe ff70 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 800424c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800424e:	e014      	b.n	800427a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004250:	f7fe ff82 	bl	8003158 <HAL_RCC_GetPCLK2Freq>
 8004254:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004256:	e010      	b.n	800427a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004258:	4b4e      	ldr	r3, [pc, #312]	; (8004394 <UART_SetConfig+0x5c0>)
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800425c:	e00d      	b.n	800427a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800425e:	f7fe fecd 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8004262:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004264:	e009      	b.n	800427a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800426c:	e005      	b.n	800427a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004278:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8090 	beq.w	80043a2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	4a44      	ldr	r2, [pc, #272]	; (8004398 <UART_SetConfig+0x5c4>)
 8004288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800428c:	461a      	mov	r2, r3
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	fbb3 f3f2 	udiv	r3, r3, r2
 8004294:	005a      	lsls	r2, r3, #1
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	441a      	add	r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	2b0f      	cmp	r3, #15
 80042ac:	d916      	bls.n	80042dc <UART_SetConfig+0x508>
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b4:	d212      	bcs.n	80042dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	f023 030f 	bic.w	r3, r3, #15
 80042be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	8bfb      	ldrh	r3, [r7, #30]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	8bfa      	ldrh	r2, [r7, #30]
 80042d8:	60da      	str	r2, [r3, #12]
 80042da:	e062      	b.n	80043a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80042e2:	e05e      	b.n	80043a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d828      	bhi.n	800433e <UART_SetConfig+0x56a>
 80042ec:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <UART_SetConfig+0x520>)
 80042ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f2:	bf00      	nop
 80042f4:	08004319 	.word	0x08004319
 80042f8:	08004321 	.word	0x08004321
 80042fc:	08004329 	.word	0x08004329
 8004300:	0800433f 	.word	0x0800433f
 8004304:	0800432f 	.word	0x0800432f
 8004308:	0800433f 	.word	0x0800433f
 800430c:	0800433f 	.word	0x0800433f
 8004310:	0800433f 	.word	0x0800433f
 8004314:	08004337 	.word	0x08004337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004318:	f7fe ff08 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 800431c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800431e:	e014      	b.n	800434a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004320:	f7fe ff1a 	bl	8003158 <HAL_RCC_GetPCLK2Freq>
 8004324:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004326:	e010      	b.n	800434a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004328:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <UART_SetConfig+0x5c0>)
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800432c:	e00d      	b.n	800434a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800432e:	f7fe fe65 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8004332:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004334:	e009      	b.n	800434a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800433c:	e005      	b.n	800434a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004348:	bf00      	nop
    }

    if (pclk != 0U)
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	2b00      	cmp	r3, #0
 800434e:	d028      	beq.n	80043a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	4a10      	ldr	r2, [pc, #64]	; (8004398 <UART_SetConfig+0x5c4>)
 8004356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800435a:	461a      	mov	r2, r3
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	085b      	lsrs	r3, r3, #1
 8004368:	441a      	add	r2, r3
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004372:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	2b0f      	cmp	r3, #15
 8004378:	d910      	bls.n	800439c <UART_SetConfig+0x5c8>
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004380:	d20c      	bcs.n	800439c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	b29a      	uxth	r2, r3
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60da      	str	r2, [r3, #12]
 800438c:	e009      	b.n	80043a2 <UART_SetConfig+0x5ce>
 800438e:	bf00      	nop
 8004390:	40008000 	.word	0x40008000
 8004394:	00f42400 	.word	0x00f42400
 8004398:	08008218 	.word	0x08008218
      }
      else
      {
        ret = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2200      	movs	r2, #0
 80043b6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2200      	movs	r2, #0
 80043bc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80043be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3730      	adds	r7, #48	; 0x30
 80043c6:	46bd      	mov	sp, r7
 80043c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080043cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01a      	beq.n	80044e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ca:	d10a      	bne.n	80044e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
  }
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af02      	add	r7, sp, #8
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004520:	f7fc fa7e 	bl	8000a20 <HAL_GetTick>
 8004524:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b08      	cmp	r3, #8
 8004532:	d10e      	bne.n	8004552 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f82f 	bl	80045a6 <UART_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e025      	b.n	800459e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b04      	cmp	r3, #4
 800455e:	d10e      	bne.n	800457e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004560:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f819 	bl	80045a6 <UART_WaitOnFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e00f      	b.n	800459e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b09c      	sub	sp, #112	; 0x70
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	603b      	str	r3, [r7, #0]
 80045b2:	4613      	mov	r3, r2
 80045b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b6:	e0a9      	b.n	800470c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045be:	f000 80a5 	beq.w	800470c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c2:	f7fc fa2d 	bl	8000a20 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d302      	bcc.n	80045d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80045d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d140      	bne.n	800465a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045e0:	e853 3f00 	ldrex	r3, [r3]
 80045e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045ec:	667b      	str	r3, [r7, #100]	; 0x64
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045fe:	e841 2300 	strex	r3, r2, [r1]
 8004602:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e6      	bne.n	80045d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3308      	adds	r3, #8
 8004610:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800461a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461c:	f023 0301 	bic.w	r3, r3, #1
 8004620:	663b      	str	r3, [r7, #96]	; 0x60
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3308      	adds	r3, #8
 8004628:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800462a:	64ba      	str	r2, [r7, #72]	; 0x48
 800462c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e5      	bne.n	800460a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e069      	b.n	800472e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d051      	beq.n	800470c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004676:	d149      	bne.n	800470c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004680:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004696:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a0:	637b      	str	r3, [r7, #52]	; 0x34
 80046a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046a8:	e841 2300 	strex	r3, r2, [r1]
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e6      	bne.n	8004682 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3308      	adds	r3, #8
 80046ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	613b      	str	r3, [r7, #16]
   return(result);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3308      	adds	r3, #8
 80046d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046d4:	623a      	str	r2, [r7, #32]
 80046d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d8:	69f9      	ldr	r1, [r7, #28]
 80046da:	6a3a      	ldr	r2, [r7, #32]
 80046dc:	e841 2300 	strex	r3, r2, [r1]
 80046e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e5      	bne.n	80046b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e010      	b.n	800472e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69da      	ldr	r2, [r3, #28]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4013      	ands	r3, r2
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	bf0c      	ite	eq
 800471c:	2301      	moveq	r3, #1
 800471e:	2300      	movne	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	461a      	mov	r2, r3
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	429a      	cmp	r2, r3
 8004728:	f43f af46 	beq.w	80045b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3770      	adds	r7, #112	; 0x70
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004736:	b480      	push	{r7}
 8004738:	b085      	sub	sp, #20
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_UARTEx_DisableFifoMode+0x16>
 8004748:	2302      	movs	r3, #2
 800474a:	e027      	b.n	800479c <HAL_UARTEx_DisableFifoMode+0x66>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2224      	movs	r2, #36	; 0x24
 8004758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800477a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047bc:	2302      	movs	r3, #2
 80047be:	e02d      	b.n	800481c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2224      	movs	r2, #36	; 0x24
 80047cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0201 	bic.w	r2, r2, #1
 80047e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f84f 	bl	80048a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004838:	2302      	movs	r3, #2
 800483a:	e02d      	b.n	8004898 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2224      	movs	r2, #36	; 0x24
 8004848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f811 	bl	80048a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2220      	movs	r2, #32
 800488a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d108      	bne.n	80048c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048c0:	e031      	b.n	8004926 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048c2:	2308      	movs	r3, #8
 80048c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048c6:	2308      	movs	r3, #8
 80048c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	0e5b      	lsrs	r3, r3, #25
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	0f5b      	lsrs	r3, r3, #29
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048ea:	7bbb      	ldrb	r3, [r7, #14]
 80048ec:	7b3a      	ldrb	r2, [r7, #12]
 80048ee:	4911      	ldr	r1, [pc, #68]	; (8004934 <UARTEx_SetNbDataToProcess+0x94>)
 80048f0:	5c8a      	ldrb	r2, [r1, r2]
 80048f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80048f6:	7b3a      	ldrb	r2, [r7, #12]
 80048f8:	490f      	ldr	r1, [pc, #60]	; (8004938 <UARTEx_SetNbDataToProcess+0x98>)
 80048fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8004900:	b29a      	uxth	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	7b7a      	ldrb	r2, [r7, #13]
 800490c:	4909      	ldr	r1, [pc, #36]	; (8004934 <UARTEx_SetNbDataToProcess+0x94>)
 800490e:	5c8a      	ldrb	r2, [r1, r2]
 8004910:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004914:	7b7a      	ldrb	r2, [r7, #13]
 8004916:	4908      	ldr	r1, [pc, #32]	; (8004938 <UARTEx_SetNbDataToProcess+0x98>)
 8004918:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800491a:	fb93 f3f2 	sdiv	r3, r3, r2
 800491e:	b29a      	uxth	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004926:	bf00      	nop
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	08008230 	.word	0x08008230
 8004938:	08008238 	.word	0x08008238

0800493c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800493c:	b084      	sub	sp, #16
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	f107 001c 	add.w	r0, r7, #28
 800494a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f001 faf6 	bl	8005f4c <USB_CoreReset>
 8004960:	4603      	mov	r3, r0
 8004962:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	639a      	str	r2, [r3, #56]	; 0x38
 8004976:	e005      	b.n	8004984 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004984:	7bfb      	ldrb	r3, [r7, #15]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004990:	b004      	add	sp, #16
 8004992:	4770      	bx	lr

08004994 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	4613      	mov	r3, r2
 80049a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d165      	bne.n	8004a74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4a3e      	ldr	r2, [pc, #248]	; (8004aa4 <USB_SetTurnaroundTime+0x110>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d906      	bls.n	80049be <USB_SetTurnaroundTime+0x2a>
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4a3d      	ldr	r2, [pc, #244]	; (8004aa8 <USB_SetTurnaroundTime+0x114>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d202      	bcs.n	80049be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80049b8:	230f      	movs	r3, #15
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	e05c      	b.n	8004a78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	4a39      	ldr	r2, [pc, #228]	; (8004aa8 <USB_SetTurnaroundTime+0x114>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d306      	bcc.n	80049d4 <USB_SetTurnaroundTime+0x40>
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4a38      	ldr	r2, [pc, #224]	; (8004aac <USB_SetTurnaroundTime+0x118>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d202      	bcs.n	80049d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80049ce:	230e      	movs	r3, #14
 80049d0:	617b      	str	r3, [r7, #20]
 80049d2:	e051      	b.n	8004a78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4a35      	ldr	r2, [pc, #212]	; (8004aac <USB_SetTurnaroundTime+0x118>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d306      	bcc.n	80049ea <USB_SetTurnaroundTime+0x56>
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4a34      	ldr	r2, [pc, #208]	; (8004ab0 <USB_SetTurnaroundTime+0x11c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d202      	bcs.n	80049ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80049e4:	230d      	movs	r3, #13
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	e046      	b.n	8004a78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4a30      	ldr	r2, [pc, #192]	; (8004ab0 <USB_SetTurnaroundTime+0x11c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d306      	bcc.n	8004a00 <USB_SetTurnaroundTime+0x6c>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4a2f      	ldr	r2, [pc, #188]	; (8004ab4 <USB_SetTurnaroundTime+0x120>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d802      	bhi.n	8004a00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80049fa:	230c      	movs	r3, #12
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	e03b      	b.n	8004a78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4a2c      	ldr	r2, [pc, #176]	; (8004ab4 <USB_SetTurnaroundTime+0x120>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d906      	bls.n	8004a16 <USB_SetTurnaroundTime+0x82>
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4a2b      	ldr	r2, [pc, #172]	; (8004ab8 <USB_SetTurnaroundTime+0x124>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d802      	bhi.n	8004a16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a10:	230b      	movs	r3, #11
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	e030      	b.n	8004a78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	4a27      	ldr	r2, [pc, #156]	; (8004ab8 <USB_SetTurnaroundTime+0x124>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d906      	bls.n	8004a2c <USB_SetTurnaroundTime+0x98>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	4a26      	ldr	r2, [pc, #152]	; (8004abc <USB_SetTurnaroundTime+0x128>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d802      	bhi.n	8004a2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a26:	230a      	movs	r3, #10
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e025      	b.n	8004a78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4a23      	ldr	r2, [pc, #140]	; (8004abc <USB_SetTurnaroundTime+0x128>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d906      	bls.n	8004a42 <USB_SetTurnaroundTime+0xae>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4a22      	ldr	r2, [pc, #136]	; (8004ac0 <USB_SetTurnaroundTime+0x12c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d202      	bcs.n	8004a42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a3c:	2309      	movs	r3, #9
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e01a      	b.n	8004a78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4a1e      	ldr	r2, [pc, #120]	; (8004ac0 <USB_SetTurnaroundTime+0x12c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d306      	bcc.n	8004a58 <USB_SetTurnaroundTime+0xc4>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ac4 <USB_SetTurnaroundTime+0x130>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d802      	bhi.n	8004a58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a52:	2308      	movs	r3, #8
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	e00f      	b.n	8004a78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4a1a      	ldr	r2, [pc, #104]	; (8004ac4 <USB_SetTurnaroundTime+0x130>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d906      	bls.n	8004a6e <USB_SetTurnaroundTime+0xda>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4a19      	ldr	r2, [pc, #100]	; (8004ac8 <USB_SetTurnaroundTime+0x134>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d202      	bcs.n	8004a6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004a68:	2307      	movs	r3, #7
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	e004      	b.n	8004a78 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004a6e:	2306      	movs	r3, #6
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	e001      	b.n	8004a78 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004a74:	2309      	movs	r3, #9
 8004a76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	029b      	lsls	r3, r3, #10
 8004a8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004a90:	431a      	orrs	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	00d8acbf 	.word	0x00d8acbf
 8004aa8:	00e4e1c0 	.word	0x00e4e1c0
 8004aac:	00f42400 	.word	0x00f42400
 8004ab0:	01067380 	.word	0x01067380
 8004ab4:	011a499f 	.word	0x011a499f
 8004ab8:	01312cff 	.word	0x01312cff
 8004abc:	014ca43f 	.word	0x014ca43f
 8004ac0:	016e3600 	.word	0x016e3600
 8004ac4:	01a6ab1f 	.word	0x01a6ab1f
 8004ac8:	01e84800 	.word	0x01e84800

08004acc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f043 0201 	orr.w	r2, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f023 0201 	bic.w	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d115      	bne.n	8004b5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b3e:	2001      	movs	r0, #1
 8004b40:	f7fb ff7a 	bl	8000a38 <HAL_Delay>
      ms++;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3301      	adds	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f001 f985 	bl	8005e5a <USB_GetMode>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d01e      	beq.n	8004b94 <USB_SetCurrentMode+0x84>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b31      	cmp	r3, #49	; 0x31
 8004b5a:	d9f0      	bls.n	8004b3e <USB_SetCurrentMode+0x2e>
 8004b5c:	e01a      	b.n	8004b94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d115      	bne.n	8004b90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b70:	2001      	movs	r0, #1
 8004b72:	f7fb ff61 	bl	8000a38 <HAL_Delay>
      ms++;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f001 f96c 	bl	8005e5a <USB_GetMode>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <USB_SetCurrentMode+0x84>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b31      	cmp	r3, #49	; 0x31
 8004b8c:	d9f0      	bls.n	8004b70 <USB_SetCurrentMode+0x60>
 8004b8e:	e001      	b.n	8004b94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e005      	b.n	8004ba0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b32      	cmp	r3, #50	; 0x32
 8004b98:	d101      	bne.n	8004b9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ba8:	b084      	sub	sp, #16
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b086      	sub	sp, #24
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	e009      	b.n	8004bdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	3340      	adds	r3, #64	; 0x40
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	2b0e      	cmp	r3, #14
 8004be0:	d9f2      	bls.n	8004bc8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d11c      	bne.n	8004c22 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bf6:	f043 0302 	orr.w	r3, r3, #2
 8004bfa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e005      	b.n	8004c2e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c34:	461a      	mov	r2, r3
 8004c36:	2300      	movs	r3, #0
 8004c38:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c40:	4619      	mov	r1, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c48:	461a      	mov	r2, r3
 8004c4a:	680b      	ldr	r3, [r1, #0]
 8004c4c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c4e:	2103      	movs	r1, #3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f959 	bl	8004f08 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c56:	2110      	movs	r1, #16
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f8f1 	bl	8004e40 <USB_FlushTxFifo>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f91d 	bl	8004ea8 <USB_FlushRxFifo>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7e:	461a      	mov	r2, r3
 8004c80:	2300      	movs	r3, #0
 8004c82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c96:	461a      	mov	r2, r3
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	e043      	b.n	8004d2a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cb8:	d118      	bne.n	8004cec <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	e013      	b.n	8004cfe <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e008      	b.n	8004cfe <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	3301      	adds	r3, #1
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d3b7      	bcc.n	8004ca2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d32:	2300      	movs	r3, #0
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	e043      	b.n	8004dc0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d4e:	d118      	bne.n	8004d82 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10a      	bne.n	8004d6c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d62:	461a      	mov	r2, r3
 8004d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	e013      	b.n	8004d94 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	e008      	b.n	8004d94 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8e:	461a      	mov	r2, r3
 8004d90:	2300      	movs	r3, #0
 8004d92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da0:	461a      	mov	r2, r3
 8004da2:	2300      	movs	r3, #0
 8004da4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db2:	461a      	mov	r2, r3
 8004db4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004db8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	613b      	str	r3, [r7, #16]
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d3b7      	bcc.n	8004d38 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004de8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f043 0210 	orr.w	r2, r3, #16
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699a      	ldr	r2, [r3, #24]
 8004dfa:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <USB_DevInit+0x294>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	f043 0208 	orr.w	r2, r3, #8
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d107      	bne.n	8004e2a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e22:	f043 0304 	orr.w	r3, r3, #4
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e36:	b004      	add	sp, #16
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	803c3800 	.word	0x803c3800

08004e40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3301      	adds	r3, #1
 8004e52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4a13      	ldr	r2, [pc, #76]	; (8004ea4 <USB_FlushTxFifo+0x64>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d901      	bls.n	8004e60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e01b      	b.n	8004e98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	daf2      	bge.n	8004e4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	019b      	lsls	r3, r3, #6
 8004e70:	f043 0220 	orr.w	r2, r3, #32
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4a08      	ldr	r2, [pc, #32]	; (8004ea4 <USB_FlushTxFifo+0x64>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d901      	bls.n	8004e8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e006      	b.n	8004e98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	d0f0      	beq.n	8004e78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	00030d40 	.word	0x00030d40

08004ea8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4a11      	ldr	r2, [pc, #68]	; (8004f04 <USB_FlushRxFifo+0x5c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d901      	bls.n	8004ec6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e018      	b.n	8004ef8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	daf2      	bge.n	8004eb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2210      	movs	r2, #16
 8004ed6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3301      	adds	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4a08      	ldr	r2, [pc, #32]	; (8004f04 <USB_FlushRxFifo+0x5c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e006      	b.n	8004ef8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	2b10      	cmp	r3, #16
 8004ef4:	d0f0      	beq.n	8004ed8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	00030d40 	.word	0x00030d40

08004f08 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	68f9      	ldr	r1, [r7, #12]
 8004f24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b087      	sub	sp, #28
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 0306 	and.w	r3, r3, #6
 8004f52:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d002      	beq.n	8004f60 <USB_GetDevSpeed+0x26>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b06      	cmp	r3, #6
 8004f5e:	d102      	bne.n	8004f66 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004f60:	2302      	movs	r3, #2
 8004f62:	75fb      	strb	r3, [r7, #23]
 8004f64:	e001      	b.n	8004f6a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004f66:	230f      	movs	r3, #15
 8004f68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	785b      	ldrb	r3, [r3, #1]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d13a      	bne.n	800500a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	68f9      	ldr	r1, [r7, #12]
 8004fae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d155      	bne.n	8005078 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	791b      	ldrb	r3, [r3, #4]
 8004fe6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fe8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	059b      	lsls	r3, r3, #22
 8004fee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	0151      	lsls	r1, r2, #5
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	e036      	b.n	8005078 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005010:	69da      	ldr	r2, [r3, #28]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	2101      	movs	r1, #1
 800501c:	fa01 f303 	lsl.w	r3, r1, r3
 8005020:	041b      	lsls	r3, r3, #16
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005028:	4313      	orrs	r3, r2
 800502a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d11a      	bne.n	8005078 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	791b      	ldrb	r3, [r3, #4]
 800505c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800505e:	430b      	orrs	r3, r1
 8005060:	4313      	orrs	r3, r2
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	440a      	add	r2, r1
 800506a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800506e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005076:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
	...

08005088 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d161      	bne.n	8005168 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ba:	d11f      	bne.n	80050fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	0151      	lsls	r1, r2, #5
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	440a      	add	r2, r1
 80050d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	0151      	lsls	r1, r2, #5
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	440a      	add	r2, r1
 80050f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	2101      	movs	r1, #1
 800510e:	fa01 f303 	lsl.w	r3, r1, r3
 8005112:	b29b      	uxth	r3, r3
 8005114:	43db      	mvns	r3, r3
 8005116:	68f9      	ldr	r1, [r7, #12]
 8005118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800511c:	4013      	ands	r3, r2
 800511e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	2101      	movs	r1, #1
 8005132:	fa01 f303 	lsl.w	r3, r1, r3
 8005136:	b29b      	uxth	r3, r3
 8005138:	43db      	mvns	r3, r3
 800513a:	68f9      	ldr	r1, [r7, #12]
 800513c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005140:	4013      	ands	r3, r2
 8005142:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	0159      	lsls	r1, r3, #5
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	440b      	add	r3, r1
 800515a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515e:	4619      	mov	r1, r3
 8005160:	4b35      	ldr	r3, [pc, #212]	; (8005238 <USB_DeactivateEndpoint+0x1b0>)
 8005162:	4013      	ands	r3, r2
 8005164:	600b      	str	r3, [r1, #0]
 8005166:	e060      	b.n	800522a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800517a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800517e:	d11f      	bne.n	80051c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	440a      	add	r2, r1
 8005196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800519a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800519e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	2101      	movs	r1, #1
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	43db      	mvns	r3, r3
 80051da:	68f9      	ldr	r1, [r7, #12]
 80051dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051e0:	4013      	ands	r3, r2
 80051e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ea:	69da      	ldr	r2, [r3, #28]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	2101      	movs	r1, #1
 80051f6:	fa01 f303 	lsl.w	r3, r1, r3
 80051fa:	041b      	lsls	r3, r3, #16
 80051fc:	43db      	mvns	r3, r3
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005204:	4013      	ands	r3, r2
 8005206:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	0159      	lsls	r1, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	440b      	add	r3, r1
 800521e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005222:	4619      	mov	r1, r3
 8005224:	4b05      	ldr	r3, [pc, #20]	; (800523c <USB_DeactivateEndpoint+0x1b4>)
 8005226:	4013      	ands	r3, r2
 8005228:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	ec337800 	.word	0xec337800
 800523c:	eff37800 	.word	0xeff37800

08005240 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	2b01      	cmp	r3, #1
 800525a:	f040 810a 	bne.w	8005472 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d132      	bne.n	80052cc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	0151      	lsls	r1, r2, #5
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	440a      	add	r2, r1
 800527c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005280:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005284:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005288:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c4:	0cdb      	lsrs	r3, r3, #19
 80052c6:	04db      	lsls	r3, r3, #19
 80052c8:	6113      	str	r3, [r2, #16]
 80052ca:	e074      	b.n	80053b6 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e6:	0cdb      	lsrs	r3, r3, #19
 80052e8:	04db      	lsls	r3, r3, #19
 80052ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005306:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800530a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800530e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6999      	ldr	r1, [r3, #24]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	440b      	add	r3, r1
 8005328:	1e59      	subs	r1, r3, #1
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005332:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005334:	4b9e      	ldr	r3, [pc, #632]	; (80055b0 <USB_EPStartXfer+0x370>)
 8005336:	400b      	ands	r3, r1
 8005338:	6939      	ldr	r1, [r7, #16]
 800533a:	0148      	lsls	r0, r1, #5
 800533c:	6979      	ldr	r1, [r7, #20]
 800533e:	4401      	add	r1, r0
 8005340:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005344:	4313      	orrs	r3, r2
 8005346:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800535e:	6939      	ldr	r1, [r7, #16]
 8005360:	0148      	lsls	r0, r1, #5
 8005362:	6979      	ldr	r1, [r7, #20]
 8005364:	4401      	add	r1, r0
 8005366:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800536a:	4313      	orrs	r3, r2
 800536c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	791b      	ldrb	r3, [r3, #4]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d11f      	bne.n	80053b6 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	440a      	add	r2, r1
 800538c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005390:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005394:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	0151      	lsls	r1, r2, #5
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	440a      	add	r2, r1
 80053ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053b4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	0151      	lsls	r1, r2, #5
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	440a      	add	r2, r1
 80053cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053d4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	791b      	ldrb	r3, [r3, #4]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d015      	beq.n	800540a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 8106 	beq.w	80055f4 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	f003 030f 	and.w	r3, r3, #15
 80053f8:	2101      	movs	r1, #1
 80053fa:	fa01 f303 	lsl.w	r3, r1, r3
 80053fe:	6979      	ldr	r1, [r7, #20]
 8005400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005404:	4313      	orrs	r3, r2
 8005406:	634b      	str	r3, [r1, #52]	; 0x34
 8005408:	e0f4      	b.n	80055f4 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005416:	2b00      	cmp	r3, #0
 8005418:	d110      	bne.n	800543c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	440a      	add	r2, r1
 8005430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005434:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e00f      	b.n	800545c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	0151      	lsls	r1, r2, #5
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	440a      	add	r2, r1
 8005452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800545a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	6919      	ldr	r1, [r3, #16]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781a      	ldrb	r2, [r3, #0]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	b29b      	uxth	r3, r3
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fa94 	bl	8005998 <USB_WritePacket>
 8005470:	e0c0      	b.n	80055f4 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	0151      	lsls	r1, r2, #5
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	440a      	add	r2, r1
 8005488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548c:	0cdb      	lsrs	r3, r3, #19
 800548e:	04db      	lsls	r3, r3, #19
 8005490:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d123      	bne.n	8005506 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d4:	6939      	ldr	r1, [r7, #16]
 80054d6:	0148      	lsls	r0, r1, #5
 80054d8:	6979      	ldr	r1, [r7, #20]
 80054da:	4401      	add	r1, r0
 80054dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054e0:	4313      	orrs	r3, r2
 80054e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005502:	6113      	str	r3, [r2, #16]
 8005504:	e037      	b.n	8005576 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	4413      	add	r3, r2
 8005510:	1e5a      	subs	r2, r3, #1
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	fbb2 f3f3 	udiv	r3, r2, r3
 800551a:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	89fa      	ldrh	r2, [r7, #14]
 8005522:	fb03 f202 	mul.w	r2, r3, r2
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	89fb      	ldrh	r3, [r7, #14]
 800553a:	04d9      	lsls	r1, r3, #19
 800553c:	4b1c      	ldr	r3, [pc, #112]	; (80055b0 <USB_EPStartXfer+0x370>)
 800553e:	400b      	ands	r3, r1
 8005540:	6939      	ldr	r1, [r7, #16]
 8005542:	0148      	lsls	r0, r1, #5
 8005544:	6979      	ldr	r1, [r7, #20]
 8005546:	4401      	add	r1, r0
 8005548:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800554c:	4313      	orrs	r3, r2
 800554e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005566:	6939      	ldr	r1, [r7, #16]
 8005568:	0148      	lsls	r0, r1, #5
 800556a:	6979      	ldr	r1, [r7, #20]
 800556c:	4401      	add	r1, r0
 800556e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005572:	4313      	orrs	r3, r2
 8005574:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	791b      	ldrb	r3, [r3, #4]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d12a      	bne.n	80055d4 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d112      	bne.n	80055b4 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	0151      	lsls	r1, r2, #5
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	440a      	add	r2, r1
 80055a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e011      	b.n	80055d4 <USB_EPStartXfer+0x394>
 80055b0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	0151      	lsls	r1, r2, #5
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	440a      	add	r2, r1
 80055ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	0151      	lsls	r1, r2, #5
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	440a      	add	r2, r1
 80055ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop

08005600 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	785b      	ldrb	r3, [r3, #1]
 8005618:	2b01      	cmp	r3, #1
 800561a:	f040 80ab 	bne.w	8005774 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d132      	bne.n	800568c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	0151      	lsls	r1, r2, #5
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	440a      	add	r2, r1
 800563c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005640:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005644:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005648:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	0151      	lsls	r1, r2, #5
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	440a      	add	r2, r1
 8005660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005664:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005668:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	0151      	lsls	r1, r2, #5
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	440a      	add	r2, r1
 8005680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005684:	0cdb      	lsrs	r3, r3, #19
 8005686:	04db      	lsls	r3, r3, #19
 8005688:	6113      	str	r3, [r2, #16]
 800568a:	e04e      	b.n	800572a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	0151      	lsls	r1, r2, #5
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	440a      	add	r2, r1
 80056a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a6:	0cdb      	lsrs	r3, r3, #19
 80056a8:	04db      	lsls	r3, r3, #19
 80056aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	0151      	lsls	r1, r2, #5
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	440a      	add	r2, r1
 80056c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056ce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	699a      	ldr	r2, [r3, #24]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d903      	bls.n	80056e4 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	0151      	lsls	r1, r2, #5
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	440a      	add	r2, r1
 80056fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005702:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005710:	691a      	ldr	r2, [r3, #16]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	0148      	lsls	r0, r1, #5
 800571e:	68f9      	ldr	r1, [r7, #12]
 8005720:	4401      	add	r1, r0
 8005722:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005726:	4313      	orrs	r3, r2
 8005728:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	0151      	lsls	r1, r2, #5
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	440a      	add	r2, r1
 8005740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005744:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005748:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d071      	beq.n	8005836 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	2101      	movs	r1, #1
 8005764:	fa01 f303 	lsl.w	r3, r1, r3
 8005768:	68f9      	ldr	r1, [r7, #12]
 800576a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800576e:	4313      	orrs	r3, r2
 8005770:	634b      	str	r3, [r1, #52]	; 0x34
 8005772:	e060      	b.n	8005836 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	440a      	add	r2, r1
 800578a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800578e:	0cdb      	lsrs	r3, r3, #19
 8005790:	04db      	lsls	r3, r3, #19
 8005792:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057b6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	0151      	lsls	r1, r2, #5
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	440a      	add	r2, r1
 80057e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005806:	68b9      	ldr	r1, [r7, #8]
 8005808:	0148      	lsls	r0, r1, #5
 800580a:	68f9      	ldr	r1, [r7, #12]
 800580c:	4401      	add	r1, r0
 800580e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005812:	4313      	orrs	r3, r2
 8005814:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	440a      	add	r2, r1
 800582c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005830:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005834:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	785b      	ldrb	r3, [r3, #1]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d14a      	bne.n	80058f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005876:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800587a:	f040 8086 	bne.w	800598a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	7812      	ldrb	r2, [r2, #0]
 8005892:	0151      	lsls	r1, r2, #5
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	440a      	add	r2, r1
 8005898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800589c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	7812      	ldrb	r2, [r2, #0]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3301      	adds	r3, #1
 80058ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d902      	bls.n	80058dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	75fb      	strb	r3, [r7, #23]
          break;
 80058da:	e056      	b.n	800598a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058f4:	d0e7      	beq.n	80058c6 <USB_EPStopXfer+0x82>
 80058f6:	e048      	b.n	800598a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800590c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005910:	d13b      	bne.n	800598a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	7812      	ldrb	r2, [r2, #0]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005930:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005934:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	7812      	ldrb	r2, [r2, #0]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005954:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005958:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3301      	adds	r3, #1
 800595e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f242 7210 	movw	r2, #10000	; 0x2710
 8005966:	4293      	cmp	r3, r2
 8005968:	d902      	bls.n	8005970 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	75fb      	strb	r3, [r7, #23]
          break;
 800596e:	e00c      	b.n	800598a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005988:	d0e7      	beq.n	800595a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800598a:	7dfb      	ldrb	r3, [r7, #23]
}
 800598c:	4618      	mov	r0, r3
 800598e:	371c      	adds	r7, #28
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005998:	b480      	push	{r7}
 800599a:	b089      	sub	sp, #36	; 0x24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	4611      	mov	r1, r2
 80059a4:	461a      	mov	r2, r3
 80059a6:	460b      	mov	r3, r1
 80059a8:	71fb      	strb	r3, [r7, #7]
 80059aa:	4613      	mov	r3, r2
 80059ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80059b6:	88bb      	ldrh	r3, [r7, #4]
 80059b8:	3303      	adds	r3, #3
 80059ba:	089b      	lsrs	r3, r3, #2
 80059bc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80059be:	2300      	movs	r3, #0
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e018      	b.n	80059f6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	031a      	lsls	r2, r3, #12
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059d0:	461a      	mov	r2, r3
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	3301      	adds	r3, #1
 80059dc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	3301      	adds	r3, #1
 80059e2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	3301      	adds	r3, #1
 80059e8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	3301      	adds	r3, #1
 80059ee:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	3301      	adds	r3, #1
 80059f4:	61bb      	str	r3, [r7, #24]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d3e2      	bcc.n	80059c4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3724      	adds	r7, #36	; 0x24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b08b      	sub	sp, #44	; 0x2c
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	4613      	mov	r3, r2
 8005a18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a22:	88fb      	ldrh	r3, [r7, #6]
 8005a24:	089b      	lsrs	r3, r3, #2
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	f003 0303 	and.w	r3, r3, #3
 8005a30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a32:	2300      	movs	r3, #0
 8005a34:	623b      	str	r3, [r7, #32]
 8005a36:	e014      	b.n	8005a62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	3301      	adds	r3, #1
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	3301      	adds	r3, #1
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	3301      	adds	r3, #1
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	623b      	str	r3, [r7, #32]
 8005a62:	6a3a      	ldr	r2, [r7, #32]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d3e6      	bcc.n	8005a38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a6a:	8bfb      	ldrh	r3, [r7, #30]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01e      	beq.n	8005aae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f107 0310 	add.w	r3, r7, #16
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	701a      	strb	r2, [r3, #0]
      i++;
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005aa2:	8bfb      	ldrh	r3, [r7, #30]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005aa8:	8bfb      	ldrh	r3, [r7, #30]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1ea      	bne.n	8005a84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	372c      	adds	r7, #44	; 0x2c
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d12c      	bne.n	8005b32 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	db12      	blt.n	8005b10 <USB_EPSetStall+0x54>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00f      	beq.n	8005b10 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b0e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	e02b      	b.n	8005b8a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	db12      	blt.n	8005b6a <USB_EPSetStall+0xae>
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00f      	beq.n	8005b6a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	0151      	lsls	r1, r2, #5
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	440a      	add	r2, r1
 8005b60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b68:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	0151      	lsls	r1, r2, #5
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	440a      	add	r2, r1
 8005b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d128      	bne.n	8005c06 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bd2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	791b      	ldrb	r3, [r3, #4]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d003      	beq.n	8005be4 <USB_EPClearStall+0x4c>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	791b      	ldrb	r3, [r3, #4]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d138      	bne.n	8005c56 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	e027      	b.n	8005c56 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	791b      	ldrb	r3, [r3, #4]
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d003      	beq.n	8005c36 <USB_EPClearStall+0x9e>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	791b      	ldrb	r3, [r3, #4]
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d10f      	bne.n	8005c56 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c54:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c86:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c98:	68f9      	ldr	r1, [r7, #12]
 8005c9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cca:	f023 0303 	bic.w	r3, r3, #3
 8005cce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cde:	f023 0302 	bic.w	r3, r3, #2
 8005ce2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d0c:	f023 0303 	bic.w	r3, r3, #3
 8005d10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d20:	f043 0302 	orr.w	r3, r3, #2
 8005d24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	0c1b      	lsrs	r3, r3, #16
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	4013      	ands	r3, r2
 8005db0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	b29b      	uxth	r3, r3
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005dd2:	78fb      	ldrb	r3, [r7, #3]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	4013      	ands	r3, r2
 8005dee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005df0:	68bb      	ldr	r3, [r7, #8]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b087      	sub	sp, #28
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	460b      	mov	r3, r1
 8005e08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e20:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	f003 030f 	and.w	r3, r3, #15
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2e:	01db      	lsls	r3, r3, #7
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e4c:	68bb      	ldr	r3, [r7, #8]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f003 0301 	and.w	r3, r3, #1
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e94:	f023 0307 	bic.w	r3, r3, #7
 8005e98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	333c      	adds	r3, #60	; 0x3c
 8005ece:	3304      	adds	r3, #4
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4a1c      	ldr	r2, [pc, #112]	; (8005f48 <USB_EP0_OutStart+0x8c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d90a      	bls.n	8005ef2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eec:	d101      	bne.n	8005ef2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	e024      	b.n	8005f3c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef8:	461a      	mov	r2, r3
 8005efa:	2300      	movs	r3, #0
 8005efc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f20:	f043 0318 	orr.w	r3, r3, #24
 8005f24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f38:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	4f54300a 	.word	0x4f54300a

08005f4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4a13      	ldr	r2, [pc, #76]	; (8005fb0 <USB_CoreReset+0x64>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d901      	bls.n	8005f6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e01b      	b.n	8005fa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	daf2      	bge.n	8005f58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f043 0201 	orr.w	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3301      	adds	r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <USB_CoreReset+0x64>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d901      	bls.n	8005f94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e006      	b.n	8005fa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d0f0      	beq.n	8005f82 <USB_CoreReset+0x36>

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	00030d40 	.word	0x00030d40

08005fb4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005fc0:	2010      	movs	r0, #16
 8005fc2:	f002 f88b 	bl	80080dc <USBD_static_malloc>
 8005fc6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d105      	bne.n	8005fda <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e01b      	b.n	8006012 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	7c1b      	ldrb	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d103      	bne.n	8005ff2 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2207      	movs	r2, #7
 8005fee:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005ff0:	e002      	b.n	8005ff8 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	220a      	movs	r2, #10
 8005ff6:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	2203      	movs	r2, #3
 8005ffc:	2181      	movs	r1, #129	; 0x81
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f001 fe6c 	bl	8007cdc <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	460b      	mov	r3, r1
 8006024:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006026:	2181      	movs	r1, #129	; 0x81
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f001 fe95 	bl	8007d58 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006040:	2b00      	cmp	r3, #0
 8006042:	d009      	beq.n	8006058 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800604a:	4618      	mov	r0, r3
 800604c:	f002 f854 	bl	80080f8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006074:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006084:	2303      	movs	r3, #3
 8006086:	e0e8      	b.n	800625a <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006090:	2b00      	cmp	r3, #0
 8006092:	d046      	beq.n	8006122 <USBD_HID_Setup+0xbe>
 8006094:	2b20      	cmp	r3, #32
 8006096:	f040 80d8 	bne.w	800624a <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	3b02      	subs	r3, #2
 80060a0:	2b09      	cmp	r3, #9
 80060a2:	d836      	bhi.n	8006112 <USBD_HID_Setup+0xae>
 80060a4:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <USBD_HID_Setup+0x48>)
 80060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060aa:	bf00      	nop
 80060ac:	08006103 	.word	0x08006103
 80060b0:	080060e3 	.word	0x080060e3
 80060b4:	08006113 	.word	0x08006113
 80060b8:	08006113 	.word	0x08006113
 80060bc:	08006113 	.word	0x08006113
 80060c0:	08006113 	.word	0x08006113
 80060c4:	08006113 	.word	0x08006113
 80060c8:	08006113 	.word	0x08006113
 80060cc:	080060f1 	.word	0x080060f1
 80060d0:	080060d5 	.word	0x080060d5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	885b      	ldrh	r3, [r3, #2]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	601a      	str	r2, [r3, #0]
          break;
 80060e0:	e01e      	b.n	8006120 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2201      	movs	r2, #1
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 fa4c 	bl	8007586 <USBD_CtlSendData>
          break;
 80060ee:	e017      	b.n	8006120 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	885b      	ldrh	r3, [r3, #2]
 80060f4:	0a1b      	lsrs	r3, r3, #8
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	605a      	str	r2, [r3, #4]
          break;
 8006100:	e00e      	b.n	8006120 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	3304      	adds	r3, #4
 8006106:	2201      	movs	r2, #1
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f001 fa3b 	bl	8007586 <USBD_CtlSendData>
          break;
 8006110:	e006      	b.n	8006120 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 f9c5 	bl	80074a4 <USBD_CtlError>
          ret = USBD_FAIL;
 800611a:	2303      	movs	r3, #3
 800611c:	75fb      	strb	r3, [r7, #23]
          break;
 800611e:	bf00      	nop
      }
      break;
 8006120:	e09a      	b.n	8006258 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	2b0b      	cmp	r3, #11
 8006128:	f200 8086 	bhi.w	8006238 <USBD_HID_Setup+0x1d4>
 800612c:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <USBD_HID_Setup+0xd0>)
 800612e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006132:	bf00      	nop
 8006134:	08006165 	.word	0x08006165
 8006138:	08006247 	.word	0x08006247
 800613c:	08006239 	.word	0x08006239
 8006140:	08006239 	.word	0x08006239
 8006144:	08006239 	.word	0x08006239
 8006148:	08006239 	.word	0x08006239
 800614c:	0800618f 	.word	0x0800618f
 8006150:	08006239 	.word	0x08006239
 8006154:	08006239 	.word	0x08006239
 8006158:	08006239 	.word	0x08006239
 800615c:	080061e7 	.word	0x080061e7
 8006160:	08006211 	.word	0x08006211
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b03      	cmp	r3, #3
 800616e:	d107      	bne.n	8006180 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006170:	f107 030a 	add.w	r3, r7, #10
 8006174:	2202      	movs	r2, #2
 8006176:	4619      	mov	r1, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f001 fa04 	bl	8007586 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800617e:	e063      	b.n	8006248 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 f98e 	bl	80074a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006188:	2303      	movs	r3, #3
 800618a:	75fb      	strb	r3, [r7, #23]
          break;
 800618c:	e05c      	b.n	8006248 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	885b      	ldrh	r3, [r3, #2]
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b22      	cmp	r3, #34	; 0x22
 8006198:	d108      	bne.n	80061ac <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	88db      	ldrh	r3, [r3, #6]
 800619e:	2b4a      	cmp	r3, #74	; 0x4a
 80061a0:	bf28      	it	cs
 80061a2:	234a      	movcs	r3, #74	; 0x4a
 80061a4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80061a6:	4b2f      	ldr	r3, [pc, #188]	; (8006264 <USBD_HID_Setup+0x200>)
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	e015      	b.n	80061d8 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	885b      	ldrh	r3, [r3, #2]
 80061b0:	0a1b      	lsrs	r3, r3, #8
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	2b21      	cmp	r3, #33	; 0x21
 80061b6:	d108      	bne.n	80061ca <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 80061b8:	4b2b      	ldr	r3, [pc, #172]	; (8006268 <USBD_HID_Setup+0x204>)
 80061ba:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	88db      	ldrh	r3, [r3, #6]
 80061c0:	2b09      	cmp	r3, #9
 80061c2:	bf28      	it	cs
 80061c4:	2309      	movcs	r3, #9
 80061c6:	82bb      	strh	r3, [r7, #20]
 80061c8:	e006      	b.n	80061d8 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f001 f969 	bl	80074a4 <USBD_CtlError>
            ret = USBD_FAIL;
 80061d2:	2303      	movs	r3, #3
 80061d4:	75fb      	strb	r3, [r7, #23]
            break;
 80061d6:	e037      	b.n	8006248 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80061d8:	8abb      	ldrh	r3, [r7, #20]
 80061da:	461a      	mov	r2, r3
 80061dc:	6939      	ldr	r1, [r7, #16]
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 f9d1 	bl	8007586 <USBD_CtlSendData>
          break;
 80061e4:	e030      	b.n	8006248 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d107      	bne.n	8006202 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3308      	adds	r3, #8
 80061f6:	2201      	movs	r2, #1
 80061f8:	4619      	mov	r1, r3
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f001 f9c3 	bl	8007586 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006200:	e022      	b.n	8006248 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f001 f94d 	bl	80074a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800620a:	2303      	movs	r3, #3
 800620c:	75fb      	strb	r3, [r7, #23]
          break;
 800620e:	e01b      	b.n	8006248 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b03      	cmp	r3, #3
 800621a:	d106      	bne.n	800622a <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	885b      	ldrh	r3, [r3, #2]
 8006220:	b2db      	uxtb	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006228:	e00e      	b.n	8006248 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 f939 	bl	80074a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006232:	2303      	movs	r3, #3
 8006234:	75fb      	strb	r3, [r7, #23]
          break;
 8006236:	e007      	b.n	8006248 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f001 f932 	bl	80074a4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006240:	2303      	movs	r3, #3
 8006242:	75fb      	strb	r3, [r7, #23]
          break;
 8006244:	e000      	b.n	8006248 <USBD_HID_Setup+0x1e4>
          break;
 8006246:	bf00      	nop
      }
      break;
 8006248:	e006      	b.n	8006258 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 f929 	bl	80074a4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006252:	2303      	movs	r3, #3
 8006254:	75fb      	strb	r3, [r7, #23]
      break;
 8006256:	bf00      	nop
  }

  return (uint8_t)ret;
 8006258:	7dfb      	ldrb	r3, [r7, #23]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	200000c8 	.word	0x200000c8
 8006268:	200000b0 	.word	0x200000b0

0800626c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	4613      	mov	r3, r2
 8006278:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006280:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8006288:	2303      	movs	r3, #3
 800628a:	e013      	b.n	80062b4 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b03      	cmp	r3, #3
 8006296:	d10c      	bne.n	80062b2 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	7b1b      	ldrb	r3, [r3, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d108      	bne.n	80062b2 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	2201      	movs	r2, #1
 80062a4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80062a6:	88fb      	ldrh	r3, [r7, #6]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	2181      	movs	r1, #129	; 0x81
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f001 fe57 	bl	8007f60 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2222      	movs	r2, #34	; 0x22
 80062c8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80062ca:	4b03      	ldr	r3, [pc, #12]	; (80062d8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	20000044 	.word	0x20000044

080062dc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2222      	movs	r2, #34	; 0x22
 80062e8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80062ea:	4b03      	ldr	r3, [pc, #12]	; (80062f8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	20000068 	.word	0x20000068

080062fc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2222      	movs	r2, #34	; 0x22
 8006308:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800630a:	4b03      	ldr	r3, [pc, #12]	; (8006318 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	2000008c 	.word	0x2000008c

0800631c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800632e:	2200      	movs	r2, #0
 8006330:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	220a      	movs	r2, #10
 800634c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800634e:	4b03      	ldr	r3, [pc, #12]	; (800635c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006350:	4618      	mov	r0, r3
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	200000bc 	.word	0x200000bc

08006360 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	4613      	mov	r3, r2
 800636c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006374:	2303      	movs	r3, #3
 8006376:	e01f      	b.n	80063b8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	79fa      	ldrb	r2, [r7, #7]
 80063aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f001 fc19 	bl	8007be4 <USBD_LL_Init>
 80063b2:	4603      	mov	r3, r0
 80063b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80063b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e016      	b.n	8006406 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00b      	beq.n	8006404 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	f107 020e 	add.w	r2, r7, #14
 80063f8:	4610      	mov	r0, r2
 80063fa:	4798      	blx	r3
 80063fc:	4602      	mov	r2, r0
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b082      	sub	sp, #8
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f001 fc2e 	bl	8007c78 <USBD_LL_Start>
 800641c:	4603      	mov	r3, r0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006448:	2303      	movs	r3, #3
 800644a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d009      	beq.n	800646a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	78fa      	ldrb	r2, [r7, #3]
 8006460:	4611      	mov	r1, r2
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	4798      	blx	r3
 8006466:	4603      	mov	r3, r0
 8006468:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800646a:	7bfb      	ldrb	r3, [r7, #15]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d007      	beq.n	800649a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	78fa      	ldrb	r2, [r7, #3]
 8006494:	4611      	mov	r1, r2
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	4798      	blx	r3
  }

  return USBD_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 ffba 	bl	8007430 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80064ca:	461a      	mov	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064d8:	f003 031f 	and.w	r3, r3, #31
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d01a      	beq.n	8006516 <USBD_LL_SetupStage+0x72>
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d822      	bhi.n	800652a <USBD_LL_SetupStage+0x86>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <USBD_LL_SetupStage+0x4a>
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d00a      	beq.n	8006502 <USBD_LL_SetupStage+0x5e>
 80064ec:	e01d      	b.n	800652a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fa62 	bl	80069c0 <USBD_StdDevReq>
 80064fc:	4603      	mov	r3, r0
 80064fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006500:	e020      	b.n	8006544 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fac6 	bl	8006a9c <USBD_StdItfReq>
 8006510:	4603      	mov	r3, r0
 8006512:	73fb      	strb	r3, [r7, #15]
      break;
 8006514:	e016      	b.n	8006544 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fb05 	bl	8006b2e <USBD_StdEPReq>
 8006524:	4603      	mov	r3, r0
 8006526:	73fb      	strb	r3, [r7, #15]
      break;
 8006528:	e00c      	b.n	8006544 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006530:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006534:	b2db      	uxtb	r3, r3
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 fc43 	bl	8007dc4 <USBD_LL_StallEP>
 800653e:	4603      	mov	r3, r0
 8006540:	73fb      	strb	r3, [r7, #15]
      break;
 8006542:	bf00      	nop
  }

  return ret;
 8006544:	7bfb      	ldrb	r3, [r7, #15]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b086      	sub	sp, #24
 8006552:	af00      	add	r7, sp, #0
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	460b      	mov	r3, r1
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800655c:	7afb      	ldrb	r3, [r7, #11]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d138      	bne.n	80065d4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006568:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006570:	2b03      	cmp	r3, #3
 8006572:	d14a      	bne.n	800660a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	429a      	cmp	r2, r3
 800657e:	d913      	bls.n	80065a8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	1ad2      	subs	r2, r2, r3
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	4293      	cmp	r3, r2
 8006598:	bf28      	it	cs
 800659a:	4613      	movcs	r3, r2
 800659c:	461a      	mov	r2, r3
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f001 f81c 	bl	80075de <USBD_CtlContinueRx>
 80065a6:	e030      	b.n	800660a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d10b      	bne.n	80065cc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d005      	beq.n	80065cc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f001 f817 	bl	8007600 <USBD_CtlSendStatus>
 80065d2:	e01a      	b.n	800660a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d114      	bne.n	800660a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00e      	beq.n	800660a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	7afa      	ldrb	r2, [r7, #11]
 80065f6:	4611      	mov	r1, r2
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	4798      	blx	r3
 80065fc:	4603      	mov	r3, r0
 80065fe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006606:	7dfb      	ldrb	r3, [r7, #23]
 8006608:	e000      	b.n	800660c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	460b      	mov	r3, r1
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006622:	7afb      	ldrb	r3, [r7, #11]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d16b      	bne.n	8006700 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3314      	adds	r3, #20
 800662c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006634:	2b02      	cmp	r3, #2
 8006636:	d156      	bne.n	80066e6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	429a      	cmp	r2, r3
 8006642:	d914      	bls.n	800666e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	1ad2      	subs	r2, r2, r3
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	461a      	mov	r2, r3
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 ffae 	bl	80075bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006660:	2300      	movs	r3, #0
 8006662:	2200      	movs	r2, #0
 8006664:	2100      	movs	r1, #0
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f001 fcb2 	bl	8007fd0 <USBD_LL_PrepareReceive>
 800666c:	e03b      	b.n	80066e6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	429a      	cmp	r2, r3
 8006678:	d11c      	bne.n	80066b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006682:	429a      	cmp	r2, r3
 8006684:	d316      	bcc.n	80066b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006690:	429a      	cmp	r2, r3
 8006692:	d20f      	bcs.n	80066b4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006694:	2200      	movs	r2, #0
 8006696:	2100      	movs	r1, #0
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 ff8f 	bl	80075bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066a6:	2300      	movs	r3, #0
 80066a8:	2200      	movs	r2, #0
 80066aa:	2100      	movs	r1, #0
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f001 fc8f 	bl	8007fd0 <USBD_LL_PrepareReceive>
 80066b2:	e018      	b.n	80066e6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d10b      	bne.n	80066d8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066d8:	2180      	movs	r1, #128	; 0x80
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f001 fb72 	bl	8007dc4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 ffa0 	bl	8007626 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d122      	bne.n	8006736 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff fe98 	bl	8006426 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066fe:	e01a      	b.n	8006736 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b03      	cmp	r3, #3
 800670a:	d114      	bne.n	8006736 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00e      	beq.n	8006736 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	7afa      	ldrb	r2, [r7, #11]
 8006722:	4611      	mov	r1, r2
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	4798      	blx	r3
 8006728:	4603      	mov	r3, r0
 800672a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800672c:	7dfb      	ldrb	r3, [r7, #23]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006732:	7dfb      	ldrb	r3, [r7, #23]
 8006734:	e000      	b.n	8006738 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006770:	2303      	movs	r3, #3
 8006772:	e02f      	b.n	80067d4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00f      	beq.n	800679e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d009      	beq.n	800679e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	6852      	ldr	r2, [r2, #4]
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	4611      	mov	r1, r2
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800679e:	2340      	movs	r3, #64	; 0x40
 80067a0:	2200      	movs	r2, #0
 80067a2:	2100      	movs	r1, #0
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 fa99 	bl	8007cdc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2240      	movs	r2, #64	; 0x40
 80067b6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067ba:	2340      	movs	r3, #64	; 0x40
 80067bc:	2200      	movs	r2, #0
 80067be:	2180      	movs	r1, #128	; 0x80
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 fa8b 	bl	8007cdc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2240      	movs	r2, #64	; 0x40
 80067d0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	78fa      	ldrb	r2, [r7, #3]
 80067ec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800680a:	b2da      	uxtb	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2204      	movs	r2, #4
 8006816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b04      	cmp	r3, #4
 800683a:	d106      	bne.n	800684a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006842:	b2da      	uxtb	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800686a:	2303      	movs	r3, #3
 800686c:	e012      	b.n	8006894 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b03      	cmp	r3, #3
 8006878:	d10b      	bne.n	8006892 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d005      	beq.n	8006892 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e014      	b.n	80068e0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d10d      	bne.n	80068de <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d007      	beq.n	80068de <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	78fa      	ldrb	r2, [r7, #3]
 80068d8:	4611      	mov	r1, r2
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80068fe:	2303      	movs	r3, #3
 8006900:	e014      	b.n	800692c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b03      	cmp	r3, #3
 800690c:	d10d      	bne.n	800692a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	2b00      	cmp	r3, #0
 8006918:	d007      	beq.n	800692a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	78fa      	ldrb	r2, [r7, #3]
 8006924:	4611      	mov	r1, r2
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b082      	sub	sp, #8
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006960:	2b00      	cmp	r3, #0
 8006962:	d009      	beq.n	8006978 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6852      	ldr	r2, [r2, #4]
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	4611      	mov	r1, r2
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	4798      	blx	r3
  }

  return USBD_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006982:	b480      	push	{r7}
 8006984:	b087      	sub	sp, #28
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	3301      	adds	r3, #1
 8006998:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069a0:	8a3b      	ldrh	r3, [r7, #16]
 80069a2:	021b      	lsls	r3, r3, #8
 80069a4:	b21a      	sxth	r2, r3
 80069a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	b21b      	sxth	r3, r3
 80069ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80069b0:	89fb      	ldrh	r3, [r7, #14]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
	...

080069c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069d6:	2b40      	cmp	r3, #64	; 0x40
 80069d8:	d005      	beq.n	80069e6 <USBD_StdDevReq+0x26>
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d853      	bhi.n	8006a86 <USBD_StdDevReq+0xc6>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00b      	beq.n	80069fa <USBD_StdDevReq+0x3a>
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	d14f      	bne.n	8006a86 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	4798      	blx	r3
 80069f4:	4603      	mov	r3, r0
 80069f6:	73fb      	strb	r3, [r7, #15]
      break;
 80069f8:	e04a      	b.n	8006a90 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	785b      	ldrb	r3, [r3, #1]
 80069fe:	2b09      	cmp	r3, #9
 8006a00:	d83b      	bhi.n	8006a7a <USBD_StdDevReq+0xba>
 8006a02:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <USBD_StdDevReq+0x48>)
 8006a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a08:	08006a5d 	.word	0x08006a5d
 8006a0c:	08006a71 	.word	0x08006a71
 8006a10:	08006a7b 	.word	0x08006a7b
 8006a14:	08006a67 	.word	0x08006a67
 8006a18:	08006a7b 	.word	0x08006a7b
 8006a1c:	08006a3b 	.word	0x08006a3b
 8006a20:	08006a31 	.word	0x08006a31
 8006a24:	08006a7b 	.word	0x08006a7b
 8006a28:	08006a53 	.word	0x08006a53
 8006a2c:	08006a45 	.word	0x08006a45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f9de 	bl	8006df4 <USBD_GetDescriptor>
          break;
 8006a38:	e024      	b.n	8006a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fb6d 	bl	800711c <USBD_SetAddress>
          break;
 8006a42:	e01f      	b.n	8006a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fbac 	bl	80071a4 <USBD_SetConfig>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73fb      	strb	r3, [r7, #15]
          break;
 8006a50:	e018      	b.n	8006a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fc4b 	bl	80072f0 <USBD_GetConfig>
          break;
 8006a5a:	e013      	b.n	8006a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fc7c 	bl	800735c <USBD_GetStatus>
          break;
 8006a64:	e00e      	b.n	8006a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fcab 	bl	80073c4 <USBD_SetFeature>
          break;
 8006a6e:	e009      	b.n	8006a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fcba 	bl	80073ec <USBD_ClrFeature>
          break;
 8006a78:	e004      	b.n	8006a84 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fd11 	bl	80074a4 <USBD_CtlError>
          break;
 8006a82:	bf00      	nop
      }
      break;
 8006a84:	e004      	b.n	8006a90 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fd0b 	bl	80074a4 <USBD_CtlError>
      break;
 8006a8e:	bf00      	nop
  }

  return ret;
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop

08006a9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ab2:	2b40      	cmp	r3, #64	; 0x40
 8006ab4:	d005      	beq.n	8006ac2 <USBD_StdItfReq+0x26>
 8006ab6:	2b40      	cmp	r3, #64	; 0x40
 8006ab8:	d82f      	bhi.n	8006b1a <USBD_StdItfReq+0x7e>
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <USBD_StdItfReq+0x26>
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	d12b      	bne.n	8006b1a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	3b01      	subs	r3, #1
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d81d      	bhi.n	8006b0c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	889b      	ldrh	r3, [r3, #4]
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d813      	bhi.n	8006b02 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	4798      	blx	r3
 8006ae8:	4603      	mov	r3, r0
 8006aea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	88db      	ldrh	r3, [r3, #6]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d110      	bne.n	8006b16 <USBD_StdItfReq+0x7a>
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10d      	bne.n	8006b16 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fd80 	bl	8007600 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b00:	e009      	b.n	8006b16 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fccd 	bl	80074a4 <USBD_CtlError>
          break;
 8006b0a:	e004      	b.n	8006b16 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fcc8 	bl	80074a4 <USBD_CtlError>
          break;
 8006b14:	e000      	b.n	8006b18 <USBD_StdItfReq+0x7c>
          break;
 8006b16:	bf00      	nop
      }
      break;
 8006b18:	e004      	b.n	8006b24 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fcc1 	bl	80074a4 <USBD_CtlError>
      break;
 8006b22:	bf00      	nop
  }

  return ret;
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
 8006b36:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	889b      	ldrh	r3, [r3, #4]
 8006b40:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b4a:	2b40      	cmp	r3, #64	; 0x40
 8006b4c:	d007      	beq.n	8006b5e <USBD_StdEPReq+0x30>
 8006b4e:	2b40      	cmp	r3, #64	; 0x40
 8006b50:	f200 8145 	bhi.w	8006dde <USBD_StdEPReq+0x2b0>
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00c      	beq.n	8006b72 <USBD_StdEPReq+0x44>
 8006b58:	2b20      	cmp	r3, #32
 8006b5a:	f040 8140 	bne.w	8006dde <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	4798      	blx	r3
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b70:	e13a      	b.n	8006de8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d007      	beq.n	8006b8a <USBD_StdEPReq+0x5c>
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	f300 8129 	bgt.w	8006dd2 <USBD_StdEPReq+0x2a4>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d07f      	beq.n	8006c84 <USBD_StdEPReq+0x156>
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d03c      	beq.n	8006c02 <USBD_StdEPReq+0xd4>
 8006b88:	e123      	b.n	8006dd2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d002      	beq.n	8006b9c <USBD_StdEPReq+0x6e>
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	d016      	beq.n	8006bc8 <USBD_StdEPReq+0x9a>
 8006b9a:	e02c      	b.n	8006bf6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b9c:	7bbb      	ldrb	r3, [r7, #14]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00d      	beq.n	8006bbe <USBD_StdEPReq+0x90>
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	2b80      	cmp	r3, #128	; 0x80
 8006ba6:	d00a      	beq.n	8006bbe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ba8:	7bbb      	ldrb	r3, [r7, #14]
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f001 f909 	bl	8007dc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bb2:	2180      	movs	r1, #128	; 0x80
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 f905 	bl	8007dc4 <USBD_LL_StallEP>
 8006bba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bbc:	e020      	b.n	8006c00 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fc6f 	bl	80074a4 <USBD_CtlError>
              break;
 8006bc6:	e01b      	b.n	8006c00 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	885b      	ldrh	r3, [r3, #2]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10e      	bne.n	8006bee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00b      	beq.n	8006bee <USBD_StdEPReq+0xc0>
 8006bd6:	7bbb      	ldrb	r3, [r7, #14]
 8006bd8:	2b80      	cmp	r3, #128	; 0x80
 8006bda:	d008      	beq.n	8006bee <USBD_StdEPReq+0xc0>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	88db      	ldrh	r3, [r3, #6]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d104      	bne.n	8006bee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006be4:	7bbb      	ldrb	r3, [r7, #14]
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 f8eb 	bl	8007dc4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fd06 	bl	8007600 <USBD_CtlSendStatus>

              break;
 8006bf4:	e004      	b.n	8006c00 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fc53 	bl	80074a4 <USBD_CtlError>
              break;
 8006bfe:	bf00      	nop
          }
          break;
 8006c00:	e0ec      	b.n	8006ddc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d002      	beq.n	8006c14 <USBD_StdEPReq+0xe6>
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d016      	beq.n	8006c40 <USBD_StdEPReq+0x112>
 8006c12:	e030      	b.n	8006c76 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c14:	7bbb      	ldrb	r3, [r7, #14]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00d      	beq.n	8006c36 <USBD_StdEPReq+0x108>
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	2b80      	cmp	r3, #128	; 0x80
 8006c1e:	d00a      	beq.n	8006c36 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 f8cd 	bl	8007dc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c2a:	2180      	movs	r1, #128	; 0x80
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f001 f8c9 	bl	8007dc4 <USBD_LL_StallEP>
 8006c32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c34:	e025      	b.n	8006c82 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fc33 	bl	80074a4 <USBD_CtlError>
              break;
 8006c3e:	e020      	b.n	8006c82 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	885b      	ldrh	r3, [r3, #2]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d11b      	bne.n	8006c80 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c48:	7bbb      	ldrb	r3, [r7, #14]
 8006c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d004      	beq.n	8006c5c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c52:	7bbb      	ldrb	r3, [r7, #14]
 8006c54:	4619      	mov	r1, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 f8ea 	bl	8007e30 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fccf 	bl	8007600 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	4798      	blx	r3
 8006c70:	4603      	mov	r3, r0
 8006c72:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006c74:	e004      	b.n	8006c80 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fc13 	bl	80074a4 <USBD_CtlError>
              break;
 8006c7e:	e000      	b.n	8006c82 <USBD_StdEPReq+0x154>
              break;
 8006c80:	bf00      	nop
          }
          break;
 8006c82:	e0ab      	b.n	8006ddc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d002      	beq.n	8006c96 <USBD_StdEPReq+0x168>
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d032      	beq.n	8006cfa <USBD_StdEPReq+0x1cc>
 8006c94:	e097      	b.n	8006dc6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d007      	beq.n	8006cac <USBD_StdEPReq+0x17e>
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
 8006c9e:	2b80      	cmp	r3, #128	; 0x80
 8006ca0:	d004      	beq.n	8006cac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fbfd 	bl	80074a4 <USBD_CtlError>
                break;
 8006caa:	e091      	b.n	8006dd0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	da0b      	bge.n	8006ccc <USBD_StdEPReq+0x19e>
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cba:	4613      	mov	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	3310      	adds	r3, #16
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	3304      	adds	r3, #4
 8006cca:	e00b      	b.n	8006ce4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fc47 	bl	8007586 <USBD_CtlSendData>
              break;
 8006cf8:	e06a      	b.n	8006dd0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006cfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	da11      	bge.n	8006d26 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d02:	7bbb      	ldrb	r3, [r7, #14]
 8006d04:	f003 020f 	and.w	r2, r3, #15
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	440b      	add	r3, r1
 8006d14:	3324      	adds	r3, #36	; 0x24
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d117      	bne.n	8006d4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fbc0 	bl	80074a4 <USBD_CtlError>
                  break;
 8006d24:	e054      	b.n	8006dd0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	f003 020f 	and.w	r2, r3, #15
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d104      	bne.n	8006d4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fbad 	bl	80074a4 <USBD_CtlError>
                  break;
 8006d4a:	e041      	b.n	8006dd0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	da0b      	bge.n	8006d6c <USBD_StdEPReq+0x23e>
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
 8006d56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	3310      	adds	r3, #16
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	4413      	add	r3, r2
 8006d68:	3304      	adds	r3, #4
 8006d6a:	e00b      	b.n	8006d84 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	4413      	add	r3, r2
 8006d82:	3304      	adds	r3, #4
 8006d84:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d86:	7bbb      	ldrb	r3, [r7, #14]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <USBD_StdEPReq+0x264>
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	2b80      	cmp	r3, #128	; 0x80
 8006d90:	d103      	bne.n	8006d9a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2200      	movs	r2, #0
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	e00e      	b.n	8006db8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f001 f87c 	bl	8007e9c <USBD_LL_IsStallEP>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2201      	movs	r2, #1
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	e002      	b.n	8006db8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fbe1 	bl	8007586 <USBD_CtlSendData>
              break;
 8006dc4:	e004      	b.n	8006dd0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fb6b 	bl	80074a4 <USBD_CtlError>
              break;
 8006dce:	bf00      	nop
          }
          break;
 8006dd0:	e004      	b.n	8006ddc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fb65 	bl	80074a4 <USBD_CtlError>
          break;
 8006dda:	bf00      	nop
      }
      break;
 8006ddc:	e004      	b.n	8006de8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fb5f 	bl	80074a4 <USBD_CtlError>
      break;
 8006de6:	bf00      	nop
  }

  return ret;
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
	...

08006df4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	885b      	ldrh	r3, [r3, #2]
 8006e0e:	0a1b      	lsrs	r3, r3, #8
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	3b01      	subs	r3, #1
 8006e14:	2b0e      	cmp	r3, #14
 8006e16:	f200 8152 	bhi.w	80070be <USBD_GetDescriptor+0x2ca>
 8006e1a:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <USBD_GetDescriptor+0x2c>)
 8006e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e20:	08006e91 	.word	0x08006e91
 8006e24:	08006ea9 	.word	0x08006ea9
 8006e28:	08006ee9 	.word	0x08006ee9
 8006e2c:	080070bf 	.word	0x080070bf
 8006e30:	080070bf 	.word	0x080070bf
 8006e34:	0800705f 	.word	0x0800705f
 8006e38:	0800708b 	.word	0x0800708b
 8006e3c:	080070bf 	.word	0x080070bf
 8006e40:	080070bf 	.word	0x080070bf
 8006e44:	080070bf 	.word	0x080070bf
 8006e48:	080070bf 	.word	0x080070bf
 8006e4c:	080070bf 	.word	0x080070bf
 8006e50:	080070bf 	.word	0x080070bf
 8006e54:	080070bf 	.word	0x080070bf
 8006e58:	08006e5d 	.word	0x08006e5d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00b      	beq.n	8006e80 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	7c12      	ldrb	r2, [r2, #16]
 8006e74:	f107 0108 	add.w	r1, r7, #8
 8006e78:	4610      	mov	r0, r2
 8006e7a:	4798      	blx	r3
 8006e7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e7e:	e126      	b.n	80070ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fb0e 	bl	80074a4 <USBD_CtlError>
        err++;
 8006e88:	7afb      	ldrb	r3, [r7, #11]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	72fb      	strb	r3, [r7, #11]
      break;
 8006e8e:	e11e      	b.n	80070ce <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	7c12      	ldrb	r2, [r2, #16]
 8006e9c:	f107 0108 	add.w	r1, r7, #8
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	4798      	blx	r3
 8006ea4:	60f8      	str	r0, [r7, #12]
      break;
 8006ea6:	e112      	b.n	80070ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	7c1b      	ldrb	r3, [r3, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10d      	bne.n	8006ecc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb8:	f107 0208 	add.w	r2, r7, #8
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4798      	blx	r3
 8006ec0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006eca:	e100      	b.n	80070ce <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	f107 0208 	add.w	r2, r7, #8
 8006ed8:	4610      	mov	r0, r2
 8006eda:	4798      	blx	r3
 8006edc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	701a      	strb	r2, [r3, #0]
      break;
 8006ee6:	e0f2      	b.n	80070ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	885b      	ldrh	r3, [r3, #2]
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b05      	cmp	r3, #5
 8006ef0:	f200 80ac 	bhi.w	800704c <USBD_GetDescriptor+0x258>
 8006ef4:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <USBD_GetDescriptor+0x108>)
 8006ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efa:	bf00      	nop
 8006efc:	08006f15 	.word	0x08006f15
 8006f00:	08006f49 	.word	0x08006f49
 8006f04:	08006f7d 	.word	0x08006f7d
 8006f08:	08006fb1 	.word	0x08006fb1
 8006f0c:	08006fe5 	.word	0x08006fe5
 8006f10:	08007019 	.word	0x08007019
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	7c12      	ldrb	r2, [r2, #16]
 8006f2c:	f107 0108 	add.w	r1, r7, #8
 8006f30:	4610      	mov	r0, r2
 8006f32:	4798      	blx	r3
 8006f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f36:	e091      	b.n	800705c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fab2 	bl	80074a4 <USBD_CtlError>
            err++;
 8006f40:	7afb      	ldrb	r3, [r7, #11]
 8006f42:	3301      	adds	r3, #1
 8006f44:	72fb      	strb	r3, [r7, #11]
          break;
 8006f46:	e089      	b.n	800705c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00b      	beq.n	8006f6c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	7c12      	ldrb	r2, [r2, #16]
 8006f60:	f107 0108 	add.w	r1, r7, #8
 8006f64:	4610      	mov	r0, r2
 8006f66:	4798      	blx	r3
 8006f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f6a:	e077      	b.n	800705c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa98 	bl	80074a4 <USBD_CtlError>
            err++;
 8006f74:	7afb      	ldrb	r3, [r7, #11]
 8006f76:	3301      	adds	r3, #1
 8006f78:	72fb      	strb	r3, [r7, #11]
          break;
 8006f7a:	e06f      	b.n	800705c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00b      	beq.n	8006fa0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	7c12      	ldrb	r2, [r2, #16]
 8006f94:	f107 0108 	add.w	r1, r7, #8
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4798      	blx	r3
 8006f9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f9e:	e05d      	b.n	800705c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fa7e 	bl	80074a4 <USBD_CtlError>
            err++;
 8006fa8:	7afb      	ldrb	r3, [r7, #11]
 8006faa:	3301      	adds	r3, #1
 8006fac:	72fb      	strb	r3, [r7, #11]
          break;
 8006fae:	e055      	b.n	800705c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00b      	beq.n	8006fd4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	7c12      	ldrb	r2, [r2, #16]
 8006fc8:	f107 0108 	add.w	r1, r7, #8
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4798      	blx	r3
 8006fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fd2:	e043      	b.n	800705c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fa64 	bl	80074a4 <USBD_CtlError>
            err++;
 8006fdc:	7afb      	ldrb	r3, [r7, #11]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8006fe2:	e03b      	b.n	800705c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00b      	beq.n	8007008 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	7c12      	ldrb	r2, [r2, #16]
 8006ffc:	f107 0108 	add.w	r1, r7, #8
 8007000:	4610      	mov	r0, r2
 8007002:	4798      	blx	r3
 8007004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007006:	e029      	b.n	800705c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fa4a 	bl	80074a4 <USBD_CtlError>
            err++;
 8007010:	7afb      	ldrb	r3, [r7, #11]
 8007012:	3301      	adds	r3, #1
 8007014:	72fb      	strb	r3, [r7, #11]
          break;
 8007016:	e021      	b.n	800705c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00b      	beq.n	800703c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	7c12      	ldrb	r2, [r2, #16]
 8007030:	f107 0108 	add.w	r1, r7, #8
 8007034:	4610      	mov	r0, r2
 8007036:	4798      	blx	r3
 8007038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800703a:	e00f      	b.n	800705c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa30 	bl	80074a4 <USBD_CtlError>
            err++;
 8007044:	7afb      	ldrb	r3, [r7, #11]
 8007046:	3301      	adds	r3, #1
 8007048:	72fb      	strb	r3, [r7, #11]
          break;
 800704a:	e007      	b.n	800705c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fa28 	bl	80074a4 <USBD_CtlError>
          err++;
 8007054:	7afb      	ldrb	r3, [r7, #11]
 8007056:	3301      	adds	r3, #1
 8007058:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800705a:	bf00      	nop
      }
      break;
 800705c:	e037      	b.n	80070ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	7c1b      	ldrb	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d109      	bne.n	800707a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706e:	f107 0208 	add.w	r2, r7, #8
 8007072:	4610      	mov	r0, r2
 8007074:	4798      	blx	r3
 8007076:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007078:	e029      	b.n	80070ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fa11 	bl	80074a4 <USBD_CtlError>
        err++;
 8007082:	7afb      	ldrb	r3, [r7, #11]
 8007084:	3301      	adds	r3, #1
 8007086:	72fb      	strb	r3, [r7, #11]
      break;
 8007088:	e021      	b.n	80070ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	7c1b      	ldrb	r3, [r3, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10d      	bne.n	80070ae <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	f107 0208 	add.w	r2, r7, #8
 800709e:	4610      	mov	r0, r2
 80070a0:	4798      	blx	r3
 80070a2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3301      	adds	r3, #1
 80070a8:	2207      	movs	r2, #7
 80070aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070ac:	e00f      	b.n	80070ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f9f7 	bl	80074a4 <USBD_CtlError>
        err++;
 80070b6:	7afb      	ldrb	r3, [r7, #11]
 80070b8:	3301      	adds	r3, #1
 80070ba:	72fb      	strb	r3, [r7, #11]
      break;
 80070bc:	e007      	b.n	80070ce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f9ef 	bl	80074a4 <USBD_CtlError>
      err++;
 80070c6:	7afb      	ldrb	r3, [r7, #11]
 80070c8:	3301      	adds	r3, #1
 80070ca:	72fb      	strb	r3, [r7, #11]
      break;
 80070cc:	bf00      	nop
  }

  if (err != 0U)
 80070ce:	7afb      	ldrb	r3, [r7, #11]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d11e      	bne.n	8007112 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	88db      	ldrh	r3, [r3, #6]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d016      	beq.n	800710a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80070dc:	893b      	ldrh	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00e      	beq.n	8007100 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	88da      	ldrh	r2, [r3, #6]
 80070e6:	893b      	ldrh	r3, [r7, #8]
 80070e8:	4293      	cmp	r3, r2
 80070ea:	bf28      	it	cs
 80070ec:	4613      	movcs	r3, r2
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80070f2:	893b      	ldrh	r3, [r7, #8]
 80070f4:	461a      	mov	r2, r3
 80070f6:	68f9      	ldr	r1, [r7, #12]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fa44 	bl	8007586 <USBD_CtlSendData>
 80070fe:	e009      	b.n	8007114 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f9ce 	bl	80074a4 <USBD_CtlError>
 8007108:	e004      	b.n	8007114 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fa78 	bl	8007600 <USBD_CtlSendStatus>
 8007110:	e000      	b.n	8007114 <USBD_GetDescriptor+0x320>
    return;
 8007112:	bf00      	nop
  }
}
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop

0800711c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	889b      	ldrh	r3, [r3, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d131      	bne.n	8007192 <USBD_SetAddress+0x76>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	88db      	ldrh	r3, [r3, #6]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d12d      	bne.n	8007192 <USBD_SetAddress+0x76>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	885b      	ldrh	r3, [r3, #2]
 800713a:	2b7f      	cmp	r3, #127	; 0x7f
 800713c:	d829      	bhi.n	8007192 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	885b      	ldrh	r3, [r3, #2]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007148:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b03      	cmp	r3, #3
 8007154:	d104      	bne.n	8007160 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f9a3 	bl	80074a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800715e:	e01d      	b.n	800719c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7bfa      	ldrb	r2, [r7, #15]
 8007164:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007168:	7bfb      	ldrb	r3, [r7, #15]
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fec1 	bl	8007ef4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fa44 	bl	8007600 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d004      	beq.n	8007188 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2202      	movs	r2, #2
 8007182:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007186:	e009      	b.n	800719c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007190:	e004      	b.n	800719c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f985 	bl	80074a4 <USBD_CtlError>
  }
}
 800719a:	bf00      	nop
 800719c:	bf00      	nop
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	885b      	ldrh	r3, [r3, #2]
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	4b4c      	ldr	r3, [pc, #304]	; (80072ec <USBD_SetConfig+0x148>)
 80071ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80071bc:	4b4b      	ldr	r3, [pc, #300]	; (80072ec <USBD_SetConfig+0x148>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d905      	bls.n	80071d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f96c 	bl	80074a4 <USBD_CtlError>
    return USBD_FAIL;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e088      	b.n	80072e2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d002      	beq.n	80071e2 <USBD_SetConfig+0x3e>
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d025      	beq.n	800722c <USBD_SetConfig+0x88>
 80071e0:	e071      	b.n	80072c6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80071e2:	4b42      	ldr	r3, [pc, #264]	; (80072ec <USBD_SetConfig+0x148>)
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01c      	beq.n	8007224 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80071ea:	4b40      	ldr	r3, [pc, #256]	; (80072ec <USBD_SetConfig+0x148>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071f4:	4b3d      	ldr	r3, [pc, #244]	; (80072ec <USBD_SetConfig+0x148>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff f91e 	bl	800643c <USBD_SetClassConfig>
 8007200:	4603      	mov	r3, r0
 8007202:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007204:	7bfb      	ldrb	r3, [r7, #15]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d004      	beq.n	8007214 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f949 	bl	80074a4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007212:	e065      	b.n	80072e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f9f3 	bl	8007600 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2203      	movs	r2, #3
 800721e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007222:	e05d      	b.n	80072e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f9eb 	bl	8007600 <USBD_CtlSendStatus>
      break;
 800722a:	e059      	b.n	80072e0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800722c:	4b2f      	ldr	r3, [pc, #188]	; (80072ec <USBD_SetConfig+0x148>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d112      	bne.n	800725a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800723c:	4b2b      	ldr	r3, [pc, #172]	; (80072ec <USBD_SetConfig+0x148>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	461a      	mov	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007246:	4b29      	ldr	r3, [pc, #164]	; (80072ec <USBD_SetConfig+0x148>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff f911 	bl	8006474 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f9d4 	bl	8007600 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007258:	e042      	b.n	80072e0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800725a:	4b24      	ldr	r3, [pc, #144]	; (80072ec <USBD_SetConfig+0x148>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	429a      	cmp	r2, r3
 8007266:	d02a      	beq.n	80072be <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	b2db      	uxtb	r3, r3
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff f8ff 	bl	8006474 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007276:	4b1d      	ldr	r3, [pc, #116]	; (80072ec <USBD_SetConfig+0x148>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007280:	4b1a      	ldr	r3, [pc, #104]	; (80072ec <USBD_SetConfig+0x148>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7ff f8d8 	bl	800643c <USBD_SetClassConfig>
 800728c:	4603      	mov	r3, r0
 800728e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00f      	beq.n	80072b6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f903 	bl	80074a4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7ff f8e4 	bl	8006474 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80072b4:	e014      	b.n	80072e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f9a2 	bl	8007600 <USBD_CtlSendStatus>
      break;
 80072bc:	e010      	b.n	80072e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f99e 	bl	8007600 <USBD_CtlSendStatus>
      break;
 80072c4:	e00c      	b.n	80072e0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f8eb 	bl	80074a4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072ce:	4b07      	ldr	r3, [pc, #28]	; (80072ec <USBD_SetConfig+0x148>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7ff f8cd 	bl	8006474 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80072da:	2303      	movs	r3, #3
 80072dc:	73fb      	strb	r3, [r7, #15]
      break;
 80072de:	bf00      	nop
  }

  return ret;
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20000228 	.word	0x20000228

080072f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	88db      	ldrh	r3, [r3, #6]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d004      	beq.n	800730c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f8cd 	bl	80074a4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800730a:	e023      	b.n	8007354 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b02      	cmp	r3, #2
 8007316:	dc02      	bgt.n	800731e <USBD_GetConfig+0x2e>
 8007318:	2b00      	cmp	r3, #0
 800731a:	dc03      	bgt.n	8007324 <USBD_GetConfig+0x34>
 800731c:	e015      	b.n	800734a <USBD_GetConfig+0x5a>
 800731e:	2b03      	cmp	r3, #3
 8007320:	d00b      	beq.n	800733a <USBD_GetConfig+0x4a>
 8007322:	e012      	b.n	800734a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	3308      	adds	r3, #8
 800732e:	2201      	movs	r2, #1
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f927 	bl	8007586 <USBD_CtlSendData>
        break;
 8007338:	e00c      	b.n	8007354 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3304      	adds	r3, #4
 800733e:	2201      	movs	r2, #1
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f91f 	bl	8007586 <USBD_CtlSendData>
        break;
 8007348:	e004      	b.n	8007354 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f8a9 	bl	80074a4 <USBD_CtlError>
        break;
 8007352:	bf00      	nop
}
 8007354:	bf00      	nop
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800736c:	b2db      	uxtb	r3, r3
 800736e:	3b01      	subs	r3, #1
 8007370:	2b02      	cmp	r3, #2
 8007372:	d81e      	bhi.n	80073b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	88db      	ldrh	r3, [r3, #6]
 8007378:	2b02      	cmp	r3, #2
 800737a:	d004      	beq.n	8007386 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f890 	bl	80074a4 <USBD_CtlError>
        break;
 8007384:	e01a      	b.n	80073bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f043 0202 	orr.w	r2, r3, #2
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	330c      	adds	r3, #12
 80073a6:	2202      	movs	r2, #2
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f8eb 	bl	8007586 <USBD_CtlSendData>
      break;
 80073b0:	e004      	b.n	80073bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f875 	bl	80074a4 <USBD_CtlError>
      break;
 80073ba:	bf00      	nop
  }
}
 80073bc:	bf00      	nop
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	885b      	ldrh	r3, [r3, #2]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d106      	bne.n	80073e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f90e 	bl	8007600 <USBD_CtlSendStatus>
  }
}
 80073e4:	bf00      	nop
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	2b02      	cmp	r3, #2
 8007402:	d80b      	bhi.n	800741c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	885b      	ldrh	r3, [r3, #2]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d10c      	bne.n	8007426 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f8f3 	bl	8007600 <USBD_CtlSendStatus>
      }
      break;
 800741a:	e004      	b.n	8007426 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f840 	bl	80074a4 <USBD_CtlError>
      break;
 8007424:	e000      	b.n	8007428 <USBD_ClrFeature+0x3c>
      break;
 8007426:	bf00      	nop
  }
}
 8007428:	bf00      	nop
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	781a      	ldrb	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3301      	adds	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	781a      	ldrb	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	3301      	adds	r3, #1
 8007458:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f7ff fa91 	bl	8006982 <SWAPBYTE>
 8007460:	4603      	mov	r3, r0
 8007462:	461a      	mov	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3301      	adds	r3, #1
 8007472:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff fa84 	bl	8006982 <SWAPBYTE>
 800747a:	4603      	mov	r3, r0
 800747c:	461a      	mov	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3301      	adds	r3, #1
 8007486:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3301      	adds	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7ff fa77 	bl	8006982 <SWAPBYTE>
 8007494:	4603      	mov	r3, r0
 8007496:	461a      	mov	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	80da      	strh	r2, [r3, #6]
}
 800749c:	bf00      	nop
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80074ae:	2180      	movs	r1, #128	; 0x80
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fc87 	bl	8007dc4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80074b6:	2100      	movs	r1, #0
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fc83 	bl	8007dc4 <USBD_LL_StallEP>
}
 80074be:	bf00      	nop
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b086      	sub	sp, #24
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	60f8      	str	r0, [r7, #12]
 80074ce:	60b9      	str	r1, [r7, #8]
 80074d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d036      	beq.n	800754a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80074e0:	6938      	ldr	r0, [r7, #16]
 80074e2:	f000 f836 	bl	8007552 <USBD_GetLen>
 80074e6:	4603      	mov	r3, r0
 80074e8:	3301      	adds	r3, #1
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	4413      	add	r3, r2
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	7812      	ldrb	r2, [r2, #0]
 80074fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8007500:	7dfb      	ldrb	r3, [r7, #23]
 8007502:	3301      	adds	r3, #1
 8007504:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007506:	7dfb      	ldrb	r3, [r7, #23]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	4413      	add	r3, r2
 800750c:	2203      	movs	r2, #3
 800750e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007510:	7dfb      	ldrb	r3, [r7, #23]
 8007512:	3301      	adds	r3, #1
 8007514:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007516:	e013      	b.n	8007540 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007518:	7dfb      	ldrb	r3, [r7, #23]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	4413      	add	r3, r2
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	7812      	ldrb	r2, [r2, #0]
 8007522:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	3301      	adds	r3, #1
 8007528:	613b      	str	r3, [r7, #16]
    idx++;
 800752a:	7dfb      	ldrb	r3, [r7, #23]
 800752c:	3301      	adds	r3, #1
 800752e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007530:	7dfb      	ldrb	r3, [r7, #23]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	4413      	add	r3, r2
 8007536:	2200      	movs	r2, #0
 8007538:	701a      	strb	r2, [r3, #0]
    idx++;
 800753a:	7dfb      	ldrb	r3, [r7, #23]
 800753c:	3301      	adds	r3, #1
 800753e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e7      	bne.n	8007518 <USBD_GetString+0x52>
 8007548:	e000      	b.n	800754c <USBD_GetString+0x86>
    return;
 800754a:	bf00      	nop
  }
}
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007552:	b480      	push	{r7}
 8007554:	b085      	sub	sp, #20
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007562:	e005      	b.n	8007570 <USBD_GetLen+0x1e>
  {
    len++;
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	3301      	adds	r3, #1
 8007568:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	3301      	adds	r3, #1
 800756e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1f5      	bne.n	8007564 <USBD_GetLen+0x12>
  }

  return len;
 8007578:	7bfb      	ldrb	r3, [r7, #15]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2202      	movs	r2, #2
 8007596:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	2100      	movs	r1, #0
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 fcd7 	bl	8007f60 <USBD_LL_Transmit>

  return USBD_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	2100      	movs	r1, #0
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 fcc6 	bl	8007f60 <USBD_LL_Transmit>

  return USBD_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b084      	sub	sp, #16
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	2100      	movs	r1, #0
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 fced 	bl	8007fd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2204      	movs	r2, #4
 800760c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007610:	2300      	movs	r3, #0
 8007612:	2200      	movs	r2, #0
 8007614:	2100      	movs	r1, #0
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fca2 	bl	8007f60 <USBD_LL_Transmit>

  return USBD_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2205      	movs	r2, #5
 8007632:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007636:	2300      	movs	r3, #0
 8007638:	2200      	movs	r2, #0
 800763a:	2100      	movs	r1, #0
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fcc7 	bl	8007fd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007650:	2200      	movs	r2, #0
 8007652:	490e      	ldr	r1, [pc, #56]	; (800768c <MX_USB_DEVICE_Init+0x40>)
 8007654:	480e      	ldr	r0, [pc, #56]	; (8007690 <MX_USB_DEVICE_Init+0x44>)
 8007656:	f7fe fe83 	bl	8006360 <USBD_Init>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007660:	f7f9 f87e 	bl	8000760 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007664:	490b      	ldr	r1, [pc, #44]	; (8007694 <MX_USB_DEVICE_Init+0x48>)
 8007666:	480a      	ldr	r0, [pc, #40]	; (8007690 <MX_USB_DEVICE_Init+0x44>)
 8007668:	f7fe feaa 	bl	80063c0 <USBD_RegisterClass>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007672:	f7f9 f875 	bl	8000760 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007676:	4806      	ldr	r0, [pc, #24]	; (8007690 <MX_USB_DEVICE_Init+0x44>)
 8007678:	f7fe fec9 	bl	800640e <USBD_Start>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007682:	f7f9 f86d 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007686:	bf00      	nop
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20000114 	.word	0x20000114
 8007690:	2000022c 	.word	0x2000022c
 8007694:	2000000c 	.word	0x2000000c

08007698 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	6039      	str	r1, [r7, #0]
 80076a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2212      	movs	r2, #18
 80076a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076aa:	4b03      	ldr	r3, [pc, #12]	; (80076b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	20000134 	.word	0x20000134

080076bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	4603      	mov	r3, r0
 80076c4:	6039      	str	r1, [r7, #0]
 80076c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2204      	movs	r2, #4
 80076cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076ce:	4b03      	ldr	r3, [pc, #12]	; (80076dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	20000154 	.word	0x20000154

080076e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	4603      	mov	r3, r0
 80076e8:	6039      	str	r1, [r7, #0]
 80076ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076ec:	79fb      	ldrb	r3, [r7, #7]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d105      	bne.n	80076fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	4907      	ldr	r1, [pc, #28]	; (8007714 <USBD_FS_ProductStrDescriptor+0x34>)
 80076f6:	4808      	ldr	r0, [pc, #32]	; (8007718 <USBD_FS_ProductStrDescriptor+0x38>)
 80076f8:	f7ff fee5 	bl	80074c6 <USBD_GetString>
 80076fc:	e004      	b.n	8007708 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	4904      	ldr	r1, [pc, #16]	; (8007714 <USBD_FS_ProductStrDescriptor+0x34>)
 8007702:	4805      	ldr	r0, [pc, #20]	; (8007718 <USBD_FS_ProductStrDescriptor+0x38>)
 8007704:	f7ff fedf 	bl	80074c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007708:	4b02      	ldr	r3, [pc, #8]	; (8007714 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	200004fc 	.word	0x200004fc
 8007718:	08008188 	.word	0x08008188

0800771c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	6039      	str	r1, [r7, #0]
 8007726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	4904      	ldr	r1, [pc, #16]	; (800773c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800772c:	4804      	ldr	r0, [pc, #16]	; (8007740 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800772e:	f7ff feca 	bl	80074c6 <USBD_GetString>
  return USBD_StrDesc;
 8007732:	4b02      	ldr	r3, [pc, #8]	; (800773c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007734:	4618      	mov	r0, r3
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	200004fc 	.word	0x200004fc
 8007740:	080081a0 	.word	0x080081a0

08007744 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	4603      	mov	r3, r0
 800774c:	6039      	str	r1, [r7, #0]
 800774e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	221a      	movs	r2, #26
 8007754:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007756:	f000 f855 	bl	8007804 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800775a:	4b02      	ldr	r3, [pc, #8]	; (8007764 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	20000158 	.word	0x20000158

08007768 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	6039      	str	r1, [r7, #0]
 8007772:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007774:	79fb      	ldrb	r3, [r7, #7]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d105      	bne.n	8007786 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	4907      	ldr	r1, [pc, #28]	; (800779c <USBD_FS_ConfigStrDescriptor+0x34>)
 800777e:	4808      	ldr	r0, [pc, #32]	; (80077a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007780:	f7ff fea1 	bl	80074c6 <USBD_GetString>
 8007784:	e004      	b.n	8007790 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	4904      	ldr	r1, [pc, #16]	; (800779c <USBD_FS_ConfigStrDescriptor+0x34>)
 800778a:	4805      	ldr	r0, [pc, #20]	; (80077a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800778c:	f7ff fe9b 	bl	80074c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007790:	4b02      	ldr	r3, [pc, #8]	; (800779c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	200004fc 	.word	0x200004fc
 80077a0:	080081b4 	.word	0x080081b4

080077a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	6039      	str	r1, [r7, #0]
 80077ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077b0:	79fb      	ldrb	r3, [r7, #7]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d105      	bne.n	80077c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	4907      	ldr	r1, [pc, #28]	; (80077d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077ba:	4808      	ldr	r0, [pc, #32]	; (80077dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077bc:	f7ff fe83 	bl	80074c6 <USBD_GetString>
 80077c0:	e004      	b.n	80077cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	4904      	ldr	r1, [pc, #16]	; (80077d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077c6:	4805      	ldr	r0, [pc, #20]	; (80077dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077c8:	f7ff fe7d 	bl	80074c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077cc:	4b02      	ldr	r3, [pc, #8]	; (80077d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	200004fc 	.word	0x200004fc
 80077dc:	080081c0 	.word	0x080081c0

080077e0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	6039      	str	r1, [r7, #0]
 80077ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	220c      	movs	r2, #12
 80077f0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80077f2:	4b03      	ldr	r3, [pc, #12]	; (8007800 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	20000148 	.word	0x20000148

08007804 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800780a:	4b0f      	ldr	r3, [pc, #60]	; (8007848 <Get_SerialNum+0x44>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007810:	4b0e      	ldr	r3, [pc, #56]	; (800784c <Get_SerialNum+0x48>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007816:	4b0e      	ldr	r3, [pc, #56]	; (8007850 <Get_SerialNum+0x4c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4413      	add	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d009      	beq.n	800783e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800782a:	2208      	movs	r2, #8
 800782c:	4909      	ldr	r1, [pc, #36]	; (8007854 <Get_SerialNum+0x50>)
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 f814 	bl	800785c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007834:	2204      	movs	r2, #4
 8007836:	4908      	ldr	r1, [pc, #32]	; (8007858 <Get_SerialNum+0x54>)
 8007838:	68b8      	ldr	r0, [r7, #8]
 800783a:	f000 f80f 	bl	800785c <IntToUnicode>
  }
}
 800783e:	bf00      	nop
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	1fff7590 	.word	0x1fff7590
 800784c:	1fff7594 	.word	0x1fff7594
 8007850:	1fff7598 	.word	0x1fff7598
 8007854:	2000015a 	.word	0x2000015a
 8007858:	2000016a 	.word	0x2000016a

0800785c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800786e:	2300      	movs	r3, #0
 8007870:	75fb      	strb	r3, [r7, #23]
 8007872:	e027      	b.n	80078c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	0f1b      	lsrs	r3, r3, #28
 8007878:	2b09      	cmp	r3, #9
 800787a:	d80b      	bhi.n	8007894 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	0f1b      	lsrs	r3, r3, #28
 8007880:	b2da      	uxtb	r2, r3
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	4619      	mov	r1, r3
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	440b      	add	r3, r1
 800788c:	3230      	adds	r2, #48	; 0x30
 800788e:	b2d2      	uxtb	r2, r2
 8007890:	701a      	strb	r2, [r3, #0]
 8007892:	e00a      	b.n	80078aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	0f1b      	lsrs	r3, r3, #28
 8007898:	b2da      	uxtb	r2, r3
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	4619      	mov	r1, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	440b      	add	r3, r1
 80078a4:	3237      	adds	r2, #55	; 0x37
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	3301      	adds	r3, #1
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	4413      	add	r3, r2
 80078ba:	2200      	movs	r2, #0
 80078bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078be:	7dfb      	ldrb	r3, [r7, #23]
 80078c0:	3301      	adds	r3, #1
 80078c2:	75fb      	strb	r3, [r7, #23]
 80078c4:	7dfa      	ldrb	r2, [r7, #23]
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d3d3      	bcc.n	8007874 <IntToUnicode+0x18>
  }
}
 80078cc:	bf00      	nop
 80078ce:	bf00      	nop
 80078d0:	371c      	adds	r7, #28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
	...

080078dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b0b0      	sub	sp, #192	; 0xc0
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80078e8:	2200      	movs	r2, #0
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	605a      	str	r2, [r3, #4]
 80078ee:	609a      	str	r2, [r3, #8]
 80078f0:	60da      	str	r2, [r3, #12]
 80078f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80078f4:	f107 0318 	add.w	r3, r7, #24
 80078f8:	2294      	movs	r2, #148	; 0x94
 80078fa:	2100      	movs	r1, #0
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 fc2f 	bl	8008160 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800790a:	d163      	bne.n	80079d4 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800790c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007910:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007912:	2300      	movs	r3, #0
 8007914:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007918:	f107 0318 	add.w	r3, r7, #24
 800791c:	4618      	mov	r0, r3
 800791e:	f7fb fcf1 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8007928:	f7f8 ff1a 	bl	8000760 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800792c:	4b2b      	ldr	r3, [pc, #172]	; (80079dc <HAL_PCD_MspInit+0x100>)
 800792e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007930:	4a2a      	ldr	r2, [pc, #168]	; (80079dc <HAL_PCD_MspInit+0x100>)
 8007932:	f043 0301 	orr.w	r3, r3, #1
 8007936:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007938:	4b28      	ldr	r3, [pc, #160]	; (80079dc <HAL_PCD_MspInit+0x100>)
 800793a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	617b      	str	r3, [r7, #20]
 8007942:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007944:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800794c:	2302      	movs	r3, #2
 800794e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007952:	2300      	movs	r3, #0
 8007954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007958:	2303      	movs	r3, #3
 800795a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800795e:	230a      	movs	r3, #10
 8007960:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007964:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007968:	4619      	mov	r1, r3
 800796a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800796e:	f7f9 f999 	bl	8000ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007972:	4b1a      	ldr	r3, [pc, #104]	; (80079dc <HAL_PCD_MspInit+0x100>)
 8007974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007976:	4a19      	ldr	r2, [pc, #100]	; (80079dc <HAL_PCD_MspInit+0x100>)
 8007978:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800797c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800797e:	4b17      	ldr	r3, [pc, #92]	; (80079dc <HAL_PCD_MspInit+0x100>)
 8007980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007986:	613b      	str	r3, [r7, #16]
 8007988:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800798a:	4b14      	ldr	r3, [pc, #80]	; (80079dc <HAL_PCD_MspInit+0x100>)
 800798c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800798e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d114      	bne.n	80079c0 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007996:	4b11      	ldr	r3, [pc, #68]	; (80079dc <HAL_PCD_MspInit+0x100>)
 8007998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799a:	4a10      	ldr	r2, [pc, #64]	; (80079dc <HAL_PCD_MspInit+0x100>)
 800799c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079a0:	6593      	str	r3, [r2, #88]	; 0x58
 80079a2:	4b0e      	ldr	r3, [pc, #56]	; (80079dc <HAL_PCD_MspInit+0x100>)
 80079a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80079ae:	f7fa fdc1 	bl	8002534 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80079b2:	4b0a      	ldr	r3, [pc, #40]	; (80079dc <HAL_PCD_MspInit+0x100>)
 80079b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b6:	4a09      	ldr	r2, [pc, #36]	; (80079dc <HAL_PCD_MspInit+0x100>)
 80079b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079bc:	6593      	str	r3, [r2, #88]	; 0x58
 80079be:	e001      	b.n	80079c4 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80079c0:	f7fa fdb8 	bl	8002534 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80079c4:	2200      	movs	r2, #0
 80079c6:	2100      	movs	r1, #0
 80079c8:	2043      	movs	r0, #67	; 0x43
 80079ca:	f7f9 f934 	bl	8000c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80079ce:	2043      	movs	r0, #67	; 0x43
 80079d0:	f7f9 f94d 	bl	8000c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80079d4:	bf00      	nop
 80079d6:	37c0      	adds	r7, #192	; 0xc0
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	40021000 	.word	0x40021000

080079e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80079f4:	4619      	mov	r1, r3
 80079f6:	4610      	mov	r0, r2
 80079f8:	f7fe fd54 	bl	80064a4 <USBD_LL_SetupStage>
}
 80079fc:	bf00      	nop
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007a16:	78fa      	ldrb	r2, [r7, #3]
 8007a18:	6879      	ldr	r1, [r7, #4]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	00db      	lsls	r3, r3, #3
 8007a1e:	4413      	add	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	440b      	add	r3, r1
 8007a24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	78fb      	ldrb	r3, [r7, #3]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	f7fe fd8e 	bl	800654e <USBD_LL_DataOutStage>
}
 8007a32:	bf00      	nop
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	460b      	mov	r3, r1
 8007a44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007a4c:	78fa      	ldrb	r2, [r7, #3]
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	4613      	mov	r3, r2
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	440b      	add	r3, r1
 8007a5a:	334c      	adds	r3, #76	; 0x4c
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	78fb      	ldrb	r3, [r7, #3]
 8007a60:	4619      	mov	r1, r3
 8007a62:	f7fe fdd7 	bl	8006614 <USBD_LL_DataInStage>
}
 8007a66:	bf00      	nop
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b082      	sub	sp, #8
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fe feeb 	bl	8006858 <USBD_LL_SOF>
}
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a92:	2301      	movs	r3, #1
 8007a94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d001      	beq.n	8007aa2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007a9e:	f7f8 fe5f 	bl	8000760 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007aa8:	7bfa      	ldrb	r2, [r7, #15]
 8007aaa:	4611      	mov	r1, r2
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fe fe95 	bl	80067dc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fe fe41 	bl	8006740 <USBD_LL_Reset>
}
 8007abe:	bf00      	nop
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	6812      	ldr	r2, [r2, #0]
 8007ade:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ae2:	f043 0301 	orr.w	r3, r3, #1
 8007ae6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe fe84 	bl	80067fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d005      	beq.n	8007b08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007afc:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <HAL_PCD_SuspendCallback+0x48>)
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	4a03      	ldr	r2, [pc, #12]	; (8007b10 <HAL_PCD_SuspendCallback+0x48>)
 8007b02:	f043 0306 	orr.w	r3, r3, #6
 8007b06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b08:	bf00      	nop
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	e000ed00 	.word	0xe000ed00

08007b14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	6812      	ldr	r2, [r2, #0]
 8007b2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b2e:	f023 0301 	bic.w	r3, r3, #1
 8007b32:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d007      	beq.n	8007b4c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b3c:	4b08      	ldr	r3, [pc, #32]	; (8007b60 <HAL_PCD_ResumeCallback+0x4c>)
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	4a07      	ldr	r2, [pc, #28]	; (8007b60 <HAL_PCD_ResumeCallback+0x4c>)
 8007b42:	f023 0306 	bic.w	r3, r3, #6
 8007b46:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007b48:	f000 fae0 	bl	800810c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fe fe68 	bl	8006828 <USBD_LL_Resume>
}
 8007b58:	bf00      	nop
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	e000ed00 	.word	0xe000ed00

08007b64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b76:	78fa      	ldrb	r2, [r7, #3]
 8007b78:	4611      	mov	r1, r2
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fe feb4 	bl	80068e8 <USBD_LL_IsoOUTIncomplete>
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b9a:	78fa      	ldrb	r2, [r7, #3]
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fe7c 	bl	800689c <USBD_LL_IsoINIncomplete>
}
 8007ba4:	bf00      	nop
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe feba 	bl	8006934 <USBD_LL_DevConnected>
}
 8007bc0:	bf00      	nop
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe feb7 	bl	800694a <USBD_LL_DevDisconnected>
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d139      	bne.n	8007c68 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007bf4:	4a1f      	ldr	r2, [pc, #124]	; (8007c74 <USBD_LL_Init+0x90>)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a1d      	ldr	r2, [pc, #116]	; (8007c74 <USBD_LL_Init+0x90>)
 8007c00:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c04:	4b1b      	ldr	r3, [pc, #108]	; (8007c74 <USBD_LL_Init+0x90>)
 8007c06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007c0c:	4b19      	ldr	r3, [pc, #100]	; (8007c74 <USBD_LL_Init+0x90>)
 8007c0e:	2206      	movs	r2, #6
 8007c10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c12:	4b18      	ldr	r3, [pc, #96]	; (8007c74 <USBD_LL_Init+0x90>)
 8007c14:	2202      	movs	r2, #2
 8007c16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c18:	4b16      	ldr	r3, [pc, #88]	; (8007c74 <USBD_LL_Init+0x90>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c1e:	4b15      	ldr	r3, [pc, #84]	; (8007c74 <USBD_LL_Init+0x90>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c24:	4b13      	ldr	r3, [pc, #76]	; (8007c74 <USBD_LL_Init+0x90>)
 8007c26:	2200      	movs	r2, #0
 8007c28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007c2a:	4b12      	ldr	r3, [pc, #72]	; (8007c74 <USBD_LL_Init+0x90>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c30:	4b10      	ldr	r3, [pc, #64]	; (8007c74 <USBD_LL_Init+0x90>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c36:	4b0f      	ldr	r3, [pc, #60]	; (8007c74 <USBD_LL_Init+0x90>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c3c:	480d      	ldr	r0, [pc, #52]	; (8007c74 <USBD_LL_Init+0x90>)
 8007c3e:	f7f9 fa0d 	bl	800105c <HAL_PCD_Init>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8007c48:	f7f8 fd8a 	bl	8000760 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007c4c:	2180      	movs	r1, #128	; 0x80
 8007c4e:	4809      	ldr	r0, [pc, #36]	; (8007c74 <USBD_LL_Init+0x90>)
 8007c50:	f7fa fb77 	bl	8002342 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007c54:	2240      	movs	r2, #64	; 0x40
 8007c56:	2100      	movs	r1, #0
 8007c58:	4806      	ldr	r0, [pc, #24]	; (8007c74 <USBD_LL_Init+0x90>)
 8007c5a:	f7fa fb2b 	bl	80022b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c5e:	2280      	movs	r2, #128	; 0x80
 8007c60:	2101      	movs	r1, #1
 8007c62:	4804      	ldr	r0, [pc, #16]	; (8007c74 <USBD_LL_Init+0x90>)
 8007c64:	f7fa fb26 	bl	80022b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	200006fc 	.word	0x200006fc

08007c78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c84:	2300      	movs	r3, #0
 8007c86:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7f9 fb08 	bl	80012a4 <HAL_PCD_Start>
 8007c94:	4603      	mov	r3, r0
 8007c96:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007c98:	7bbb      	ldrb	r3, [r7, #14]
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d816      	bhi.n	8007ccc <USBD_LL_Start+0x54>
 8007c9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <USBD_LL_Start+0x2c>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007cb5 	.word	0x08007cb5
 8007ca8:	08007cbb 	.word	0x08007cbb
 8007cac:	08007cc1 	.word	0x08007cc1
 8007cb0:	08007cc7 	.word	0x08007cc7
    case HAL_OK :
      usb_status = USBD_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	73fb      	strb	r3, [r7, #15]
    break;
 8007cb8:	e00b      	b.n	8007cd2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	73fb      	strb	r3, [r7, #15]
    break;
 8007cbe:	e008      	b.n	8007cd2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	73fb      	strb	r3, [r7, #15]
    break;
 8007cc4:	e005      	b.n	8007cd2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	73fb      	strb	r3, [r7, #15]
    break;
 8007cca:	e002      	b.n	8007cd2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	73fb      	strb	r3, [r7, #15]
    break;
 8007cd0:	bf00      	nop
  }
  return usb_status;
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	4608      	mov	r0, r1
 8007ce6:	4611      	mov	r1, r2
 8007ce8:	461a      	mov	r2, r3
 8007cea:	4603      	mov	r3, r0
 8007cec:	70fb      	strb	r3, [r7, #3]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	70bb      	strb	r3, [r7, #2]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d04:	78bb      	ldrb	r3, [r7, #2]
 8007d06:	883a      	ldrh	r2, [r7, #0]
 8007d08:	78f9      	ldrb	r1, [r7, #3]
 8007d0a:	f7f9 ffb2 	bl	8001c72 <HAL_PCD_EP_Open>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007d12:	7bbb      	ldrb	r3, [r7, #14]
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d817      	bhi.n	8007d48 <USBD_LL_OpenEP+0x6c>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <USBD_LL_OpenEP+0x44>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d31 	.word	0x08007d31
 8007d24:	08007d37 	.word	0x08007d37
 8007d28:	08007d3d 	.word	0x08007d3d
 8007d2c:	08007d43 	.word	0x08007d43
    case HAL_OK :
      usb_status = USBD_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	73fb      	strb	r3, [r7, #15]
    break;
 8007d34:	e00b      	b.n	8007d4e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d36:	2303      	movs	r3, #3
 8007d38:	73fb      	strb	r3, [r7, #15]
    break;
 8007d3a:	e008      	b.n	8007d4e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d40:	e005      	b.n	8007d4e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d42:	2303      	movs	r3, #3
 8007d44:	73fb      	strb	r3, [r7, #15]
    break;
 8007d46:	e002      	b.n	8007d4e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d4c:	bf00      	nop
  }
  return usb_status;
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d72:	78fa      	ldrb	r2, [r7, #3]
 8007d74:	4611      	mov	r1, r2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7f9 ffe3 	bl	8001d42 <HAL_PCD_EP_Close>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d816      	bhi.n	8007db4 <USBD_LL_CloseEP+0x5c>
 8007d86:	a201      	add	r2, pc, #4	; (adr r2, 8007d8c <USBD_LL_CloseEP+0x34>)
 8007d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8c:	08007d9d 	.word	0x08007d9d
 8007d90:	08007da3 	.word	0x08007da3
 8007d94:	08007da9 	.word	0x08007da9
 8007d98:	08007daf 	.word	0x08007daf
    case HAL_OK :
      usb_status = USBD_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007da0:	e00b      	b.n	8007dba <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007da2:	2303      	movs	r3, #3
 8007da4:	73fb      	strb	r3, [r7, #15]
    break;
 8007da6:	e008      	b.n	8007dba <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007da8:	2301      	movs	r3, #1
 8007daa:	73fb      	strb	r3, [r7, #15]
    break;
 8007dac:	e005      	b.n	8007dba <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dae:	2303      	movs	r3, #3
 8007db0:	73fb      	strb	r3, [r7, #15]
    break;
 8007db2:	e002      	b.n	8007dba <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007db4:	2303      	movs	r3, #3
 8007db6:	73fb      	strb	r3, [r7, #15]
    break;
 8007db8:	bf00      	nop
  }
  return usb_status;
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	460b      	mov	r3, r1
 8007dce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dde:	78fa      	ldrb	r2, [r7, #3]
 8007de0:	4611      	mov	r1, r2
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fa f872 	bl	8001ecc <HAL_PCD_EP_SetStall>
 8007de8:	4603      	mov	r3, r0
 8007dea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d816      	bhi.n	8007e20 <USBD_LL_StallEP+0x5c>
 8007df2:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <USBD_LL_StallEP+0x34>)
 8007df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df8:	08007e09 	.word	0x08007e09
 8007dfc:	08007e0f 	.word	0x08007e0f
 8007e00:	08007e15 	.word	0x08007e15
 8007e04:	08007e1b 	.word	0x08007e1b
    case HAL_OK :
      usb_status = USBD_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e0c:	e00b      	b.n	8007e26 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	73fb      	strb	r3, [r7, #15]
    break;
 8007e12:	e008      	b.n	8007e26 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e14:	2301      	movs	r3, #1
 8007e16:	73fb      	strb	r3, [r7, #15]
    break;
 8007e18:	e005      	b.n	8007e26 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e1e:	e002      	b.n	8007e26 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007e20:	2303      	movs	r3, #3
 8007e22:	73fb      	strb	r3, [r7, #15]
    break;
 8007e24:	bf00      	nop
  }
  return usb_status;
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e4a:	78fa      	ldrb	r2, [r7, #3]
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fa f89e 	bl	8001f90 <HAL_PCD_EP_ClrStall>
 8007e54:	4603      	mov	r3, r0
 8007e56:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007e58:	7bbb      	ldrb	r3, [r7, #14]
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d816      	bhi.n	8007e8c <USBD_LL_ClearStallEP+0x5c>
 8007e5e:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <USBD_LL_ClearStallEP+0x34>)
 8007e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e64:	08007e75 	.word	0x08007e75
 8007e68:	08007e7b 	.word	0x08007e7b
 8007e6c:	08007e81 	.word	0x08007e81
 8007e70:	08007e87 	.word	0x08007e87
    case HAL_OK :
      usb_status = USBD_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73fb      	strb	r3, [r7, #15]
    break;
 8007e78:	e00b      	b.n	8007e92 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e7e:	e008      	b.n	8007e92 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e80:	2301      	movs	r3, #1
 8007e82:	73fb      	strb	r3, [r7, #15]
    break;
 8007e84:	e005      	b.n	8007e92 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e86:	2303      	movs	r3, #3
 8007e88:	73fb      	strb	r3, [r7, #15]
    break;
 8007e8a:	e002      	b.n	8007e92 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e90:	bf00      	nop
  }
  return usb_status;
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007eae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	da0b      	bge.n	8007ed0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007eb8:	78fb      	ldrb	r3, [r7, #3]
 8007eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ebe:	68f9      	ldr	r1, [r7, #12]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	4413      	add	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	440b      	add	r3, r1
 8007eca:	333e      	adds	r3, #62	; 0x3e
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	e00b      	b.n	8007ee8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ed0:	78fb      	ldrb	r3, [r7, #3]
 8007ed2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ed6:	68f9      	ldr	r1, [r7, #12]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	4413      	add	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	440b      	add	r3, r1
 8007ee2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007ee6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	460b      	mov	r3, r1
 8007efe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f0e:	78fa      	ldrb	r2, [r7, #3]
 8007f10:	4611      	mov	r1, r2
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7f9 fe88 	bl	8001c28 <HAL_PCD_SetAddress>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007f1c:	7bbb      	ldrb	r3, [r7, #14]
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d816      	bhi.n	8007f50 <USBD_LL_SetUSBAddress+0x5c>
 8007f22:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <USBD_LL_SetUSBAddress+0x34>)
 8007f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f28:	08007f39 	.word	0x08007f39
 8007f2c:	08007f3f 	.word	0x08007f3f
 8007f30:	08007f45 	.word	0x08007f45
 8007f34:	08007f4b 	.word	0x08007f4b
    case HAL_OK :
      usb_status = USBD_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f3c:	e00b      	b.n	8007f56 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	73fb      	strb	r3, [r7, #15]
    break;
 8007f42:	e008      	b.n	8007f56 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f44:	2301      	movs	r3, #1
 8007f46:	73fb      	strb	r3, [r7, #15]
    break;
 8007f48:	e005      	b.n	8007f56 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f4e:	e002      	b.n	8007f56 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007f50:	2303      	movs	r3, #3
 8007f52:	73fb      	strb	r3, [r7, #15]
    break;
 8007f54:	bf00      	nop
  }
  return usb_status;
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	607a      	str	r2, [r7, #4]
 8007f6a:	603b      	str	r3, [r7, #0]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f7e:	7af9      	ldrb	r1, [r7, #11]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	f7f9 ff65 	bl	8001e52 <HAL_PCD_EP_Transmit>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007f8c:	7dbb      	ldrb	r3, [r7, #22]
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d816      	bhi.n	8007fc0 <USBD_LL_Transmit+0x60>
 8007f92:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <USBD_LL_Transmit+0x38>)
 8007f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f98:	08007fa9 	.word	0x08007fa9
 8007f9c:	08007faf 	.word	0x08007faf
 8007fa0:	08007fb5 	.word	0x08007fb5
 8007fa4:	08007fbb 	.word	0x08007fbb
    case HAL_OK :
      usb_status = USBD_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	75fb      	strb	r3, [r7, #23]
    break;
 8007fac:	e00b      	b.n	8007fc6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	75fb      	strb	r3, [r7, #23]
    break;
 8007fb2:	e008      	b.n	8007fc6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	75fb      	strb	r3, [r7, #23]
    break;
 8007fb8:	e005      	b.n	8007fc6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	75fb      	strb	r3, [r7, #23]
    break;
 8007fbe:	e002      	b.n	8007fc6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	75fb      	strb	r3, [r7, #23]
    break;
 8007fc4:	bf00      	nop
  }
  return usb_status;
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	607a      	str	r2, [r7, #4]
 8007fda:	603b      	str	r3, [r7, #0]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007fee:	7af9      	ldrb	r1, [r7, #11]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	f7f9 feef 	bl	8001dd6 <HAL_PCD_EP_Receive>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007ffc:	7dbb      	ldrb	r3, [r7, #22]
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d816      	bhi.n	8008030 <USBD_LL_PrepareReceive+0x60>
 8008002:	a201      	add	r2, pc, #4	; (adr r2, 8008008 <USBD_LL_PrepareReceive+0x38>)
 8008004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008008:	08008019 	.word	0x08008019
 800800c:	0800801f 	.word	0x0800801f
 8008010:	08008025 	.word	0x08008025
 8008014:	0800802b 	.word	0x0800802b
    case HAL_OK :
      usb_status = USBD_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	75fb      	strb	r3, [r7, #23]
    break;
 800801c:	e00b      	b.n	8008036 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800801e:	2303      	movs	r3, #3
 8008020:	75fb      	strb	r3, [r7, #23]
    break;
 8008022:	e008      	b.n	8008036 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008024:	2301      	movs	r3, #1
 8008026:	75fb      	strb	r3, [r7, #23]
    break;
 8008028:	e005      	b.n	8008036 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800802a:	2303      	movs	r3, #3
 800802c:	75fb      	strb	r3, [r7, #23]
    break;
 800802e:	e002      	b.n	8008036 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008030:	2303      	movs	r3, #3
 8008032:	75fb      	strb	r3, [r7, #23]
    break;
 8008034:	bf00      	nop
  }
  return usb_status;
 8008036:	7dfb      	ldrb	r3, [r7, #23]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3718      	adds	r7, #24
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	460b      	mov	r3, r1
 800804a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800804c:	78fb      	ldrb	r3, [r7, #3]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d002      	beq.n	8008058 <HAL_PCDEx_LPM_Callback+0x18>
 8008052:	2b01      	cmp	r3, #1
 8008054:	d01f      	beq.n	8008096 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008056:	e03b      	b.n	80080d0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d007      	beq.n	8008070 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008060:	f000 f854 	bl	800810c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008064:	4b1c      	ldr	r3, [pc, #112]	; (80080d8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	4a1b      	ldr	r2, [pc, #108]	; (80080d8 <HAL_PCDEx_LPM_Callback+0x98>)
 800806a:	f023 0306 	bic.w	r3, r3, #6
 800806e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	6812      	ldr	r2, [r2, #0]
 800807e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008082:	f023 0301 	bic.w	r3, r3, #1
 8008086:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe fbca 	bl	8006828 <USBD_LL_Resume>
    break;
 8008094:	e01c      	b.n	80080d0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	6812      	ldr	r2, [r2, #0]
 80080a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080a8:	f043 0301 	orr.w	r3, r3, #1
 80080ac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fe fba1 	bl	80067fc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d005      	beq.n	80080ce <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080c2:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	4a04      	ldr	r2, [pc, #16]	; (80080d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80080c8:	f043 0306 	orr.w	r3, r3, #6
 80080cc:	6113      	str	r3, [r2, #16]
    break;
 80080ce:	bf00      	nop
}
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	e000ed00 	.word	0xe000ed00

080080dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080e4:	4b03      	ldr	r3, [pc, #12]	; (80080f4 <USBD_static_malloc+0x18>)
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	20000c08 	.word	0x20000c08

080080f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]

}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008110:	f7f8 fa2c 	bl	800056c <SystemClock_Config>
}
 8008114:	bf00      	nop
 8008116:	bd80      	pop	{r7, pc}

08008118 <__libc_init_array>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	4d0d      	ldr	r5, [pc, #52]	; (8008150 <__libc_init_array+0x38>)
 800811c:	4c0d      	ldr	r4, [pc, #52]	; (8008154 <__libc_init_array+0x3c>)
 800811e:	1b64      	subs	r4, r4, r5
 8008120:	10a4      	asrs	r4, r4, #2
 8008122:	2600      	movs	r6, #0
 8008124:	42a6      	cmp	r6, r4
 8008126:	d109      	bne.n	800813c <__libc_init_array+0x24>
 8008128:	4d0b      	ldr	r5, [pc, #44]	; (8008158 <__libc_init_array+0x40>)
 800812a:	4c0c      	ldr	r4, [pc, #48]	; (800815c <__libc_init_array+0x44>)
 800812c:	f000 f820 	bl	8008170 <_init>
 8008130:	1b64      	subs	r4, r4, r5
 8008132:	10a4      	asrs	r4, r4, #2
 8008134:	2600      	movs	r6, #0
 8008136:	42a6      	cmp	r6, r4
 8008138:	d105      	bne.n	8008146 <__libc_init_array+0x2e>
 800813a:	bd70      	pop	{r4, r5, r6, pc}
 800813c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008140:	4798      	blx	r3
 8008142:	3601      	adds	r6, #1
 8008144:	e7ee      	b.n	8008124 <__libc_init_array+0xc>
 8008146:	f855 3b04 	ldr.w	r3, [r5], #4
 800814a:	4798      	blx	r3
 800814c:	3601      	adds	r6, #1
 800814e:	e7f2      	b.n	8008136 <__libc_init_array+0x1e>
 8008150:	08008248 	.word	0x08008248
 8008154:	08008248 	.word	0x08008248
 8008158:	08008248 	.word	0x08008248
 800815c:	0800824c 	.word	0x0800824c

08008160 <memset>:
 8008160:	4402      	add	r2, r0
 8008162:	4603      	mov	r3, r0
 8008164:	4293      	cmp	r3, r2
 8008166:	d100      	bne.n	800816a <memset+0xa>
 8008168:	4770      	bx	lr
 800816a:	f803 1b01 	strb.w	r1, [r3], #1
 800816e:	e7f9      	b.n	8008164 <memset+0x4>

08008170 <_init>:
 8008170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008172:	bf00      	nop
 8008174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008176:	bc08      	pop	{r3}
 8008178:	469e      	mov	lr, r3
 800817a:	4770      	bx	lr

0800817c <_fini>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	bf00      	nop
 8008180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008182:	bc08      	pop	{r3}
 8008184:	469e      	mov	lr, r3
 8008186:	4770      	bx	lr
