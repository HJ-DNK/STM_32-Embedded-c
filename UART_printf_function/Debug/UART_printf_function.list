
UART_printf_function.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027e0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800291c  0800291c  0001291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b0  080029b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080029b0  080029b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029b8  080029b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029b8  080029b8  000129b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080029c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000070  08002a30  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002a30  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000792f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001556  00000000  00000000  000279c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  00028f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  000295f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b50  00000000  00000000  00029c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000826d  00000000  00000000  0003f788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082ded  00000000  00000000  000479f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ca7e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002130  00000000  00000000  000ca834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08002904 	.word	0x08002904

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08002904 	.word	0x08002904

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 fa03 	bl	8000892 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f80e 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f000 f884 	bl	800059c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000494:	f000 f858 	bl	8000548 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	printf("hello hiren\n");
 8000498:	4803      	ldr	r0, [pc, #12]	; (80004a8 <main+0x24>)
 800049a:	f001 fdab 	bl	8001ff4 <puts>
	HAL_Delay(1000);
 800049e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004a2:	f000 fa65 	bl	8000970 <HAL_Delay>
	printf("hello hiren\n");
 80004a6:	e7f7      	b.n	8000498 <main+0x14>
 80004a8:	0800291c 	.word	0x0800291c

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b092      	sub	sp, #72	; 0x48
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	f107 0314 	add.w	r3, r7, #20
 80004b6:	2234      	movs	r2, #52	; 0x34
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f001 fd24 	bl	8001f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c0:	463b      	mov	r3, r7
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ce:	4b1d      	ldr	r3, [pc, #116]	; (8000544 <SystemClock_Config+0x98>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004d6:	4a1b      	ldr	r2, [pc, #108]	; (8000544 <SystemClock_Config+0x98>)
 80004d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004dc:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004de:	2302      	movs	r3, #2
 80004e0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e2:	2301      	movs	r3, #1
 80004e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e6:	2310      	movs	r3, #16
 80004e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ea:	2302      	movs	r3, #2
 80004ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004ee:	2300      	movs	r3, #0
 80004f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80004f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80004f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80004fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	4618      	mov	r0, r3
 8000504:	f000 fcba 	bl	8000e7c <HAL_RCC_OscConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800050e:	f000 f85b 	bl	80005c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000512:	230f      	movs	r3, #15
 8000514:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000516:	2303      	movs	r3, #3
 8000518:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000526:	463b      	mov	r3, r7
 8000528:	2101      	movs	r1, #1
 800052a:	4618      	mov	r0, r3
 800052c:	f000 ffd6 	bl	80014dc <HAL_RCC_ClockConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000536:	f000 f847 	bl	80005c8 <Error_Handler>
  }
}
 800053a:	bf00      	nop
 800053c:	3748      	adds	r7, #72	; 0x48
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40007000 	.word	0x40007000

08000548 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 800054e:	4a12      	ldr	r2, [pc, #72]	; (8000598 <MX_USART2_UART_Init+0x50>)
 8000550:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 8000554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000558:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 800056e:	220c      	movs	r2, #12
 8000570:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 800057a:	2200      	movs	r2, #0
 800057c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 8000580:	f001 fa72 	bl	8001a68 <HAL_UART_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800058a:	f000 f81d 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000008c 	.word	0x2000008c
 8000598:	40004400 	.word	0x40004400

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <MX_GPIO_Init+0x28>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <MX_GPIO_Init+0x28>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <MX_GPIO_Init+0x28>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	40023800 	.word	0x40023800

080005c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
}
 80005ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <Error_Handler+0x8>
	...

080005d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <HAL_MspInit+0x5c>)
 80005dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <HAL_MspInit+0x5c>)
 80005e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005e4:	6253      	str	r3, [r2, #36]	; 0x24
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_MspInit+0x5c>)
 80005e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_MspInit+0x5c>)
 80005f4:	6a1b      	ldr	r3, [r3, #32]
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <HAL_MspInit+0x5c>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6213      	str	r3, [r2, #32]
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <HAL_MspInit+0x5c>)
 8000600:	6a1b      	ldr	r3, [r3, #32]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <HAL_MspInit+0x5c>)
 800060c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800060e:	4a08      	ldr	r2, [pc, #32]	; (8000630 <HAL_MspInit+0x5c>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	6253      	str	r3, [r2, #36]	; 0x24
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_MspInit+0x5c>)
 8000618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000622:	2007      	movs	r0, #7
 8000624:	f000 fa76 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800

08000634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <HAL_UART_MspInit+0x7c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d127      	bne.n	80006a6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <HAL_UART_MspInit+0x80>)
 8000658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800065a:	4a16      	ldr	r2, [pc, #88]	; (80006b4 <HAL_UART_MspInit+0x80>)
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	6253      	str	r3, [r2, #36]	; 0x24
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <HAL_UART_MspInit+0x80>)
 8000664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <HAL_UART_MspInit+0x80>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <HAL_UART_MspInit+0x80>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <HAL_UART_MspInit+0x80>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000686:	230c      	movs	r3, #12
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000692:	2303      	movs	r3, #3
 8000694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000696:	2307      	movs	r3, #7
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <HAL_UART_MspInit+0x84>)
 80006a2:	f000 fa6b 	bl	8000b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006a6:	bf00      	nop
 80006a8:	3728      	adds	r7, #40	; 0x28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40004400 	.word	0x40004400
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40020000 	.word	0x40020000

080006bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <NMI_Handler+0x4>

080006c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <HardFault_Handler+0x4>

080006c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <MemManage_Handler+0x4>

080006ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <BusFault_Handler+0x4>

080006d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <UsageFault_Handler+0x4>

080006da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr

080006fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000702:	f000 f919 	bl	8000938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}

0800070a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b086      	sub	sp, #24
 800070e:	af00      	add	r7, sp, #0
 8000710:	60f8      	str	r0, [r7, #12]
 8000712:	60b9      	str	r1, [r7, #8]
 8000714:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	e00a      	b.n	8000732 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800071c:	f3af 8000 	nop.w
 8000720:	4601      	mov	r1, r0
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	60ba      	str	r2, [r7, #8]
 8000728:	b2ca      	uxtb	r2, r1
 800072a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	3301      	adds	r3, #1
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	429a      	cmp	r2, r3
 8000738:	dbf0      	blt.n	800071c <_read+0x12>
  }

  return len;
 800073a:	687b      	ldr	r3, [r7, #4]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);// ttrnsmit data
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b29a      	uxth	r2, r3
 8000754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	4804      	ldr	r0, [pc, #16]	; (800076c <_write+0x28>)
 800075c:	f001 f9d4 	bl	8001b08 <HAL_UART_Transmit>

	return len;
 8000760:	687b      	ldr	r3, [r7, #4]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000008c 	.word	0x2000008c

08000770 <_close>:

int _close(int file)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800077c:	4618      	mov	r0, r3
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000796:	605a      	str	r2, [r3, #4]
  return 0;
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <_isatty>:

int _isatty(int file)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007ac:	2301      	movs	r3, #1
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d8:	4a14      	ldr	r2, [pc, #80]	; (800082c <_sbrk+0x5c>)
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <_sbrk+0x60>)
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <_sbrk+0x64>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d102      	bne.n	80007f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <_sbrk+0x64>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <_sbrk+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <_sbrk+0x64>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	693a      	ldr	r2, [r7, #16]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d207      	bcs.n	8000810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000800:	f001 fb58 	bl	8001eb4 <__errno>
 8000804:	4603      	mov	r3, r0
 8000806:	220c      	movs	r2, #12
 8000808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800080a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800080e:	e009      	b.n	8000824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <_sbrk+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000816:	4b07      	ldr	r3, [pc, #28]	; (8000834 <_sbrk+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	4a05      	ldr	r2, [pc, #20]	; (8000834 <_sbrk+0x64>)
 8000820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000822:	68fb      	ldr	r3, [r7, #12]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20008000 	.word	0x20008000
 8000830:	00000400 	.word	0x00000400
 8000834:	200000d4 	.word	0x200000d4
 8000838:	200000f0 	.word	0x200000f0

0800083c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000848:	f7ff fff8 	bl	800083c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800084e:	490c      	ldr	r1, [pc, #48]	; (8000880 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000850:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a09      	ldr	r2, [pc, #36]	; (8000888 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000864:	4c09      	ldr	r4, [pc, #36]	; (800088c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000872:	f001 fb25 	bl	8001ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000876:	f7ff fe05 	bl	8000484 <main>
  bx lr
 800087a:	4770      	bx	lr
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000884:	080029c0 	.word	0x080029c0
  ldr r2, =_sbss
 8000888:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800088c:	200000ec 	.word	0x200000ec

08000890 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_IRQHandler>

08000892 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000898:	2300      	movs	r3, #0
 800089a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089c:	2003      	movs	r0, #3
 800089e:	f000 f939 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008a2:	2000      	movs	r0, #0
 80008a4:	f000 f80e 	bl	80008c4 <HAL_InitTick>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	e001      	b.n	80008b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008b4:	f7ff fe8e 	bl	80005d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008b8:	79fb      	ldrb	r3, [r7, #7]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008cc:	2300      	movs	r3, #0
 80008ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <HAL_InitTick+0x68>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d022      	beq.n	800091e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_InitTick+0x6c>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <HAL_InitTick+0x68>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80008e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f938 	bl	8000b62 <HAL_SYSTICK_Config>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d10f      	bne.n	8000918 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b0f      	cmp	r3, #15
 80008fc:	d809      	bhi.n	8000912 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fe:	2200      	movs	r2, #0
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000906:	f000 f910 	bl	8000b2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <HAL_InitTick+0x70>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	e007      	b.n	8000922 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]
 8000916:	e004      	b.n	8000922 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	73fb      	strb	r3, [r7, #15]
 800091c:	e001      	b.n	8000922 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000922:	7bfb      	ldrb	r3, [r7, #15]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000008 	.word	0x20000008
 8000930:	20000000 	.word	0x20000000
 8000934:	20000004 	.word	0x20000004

08000938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <HAL_IncTick+0x1c>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_IncTick+0x20>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4413      	add	r3, r2
 8000946:	4a03      	ldr	r2, [pc, #12]	; (8000954 <HAL_IncTick+0x1c>)
 8000948:	6013      	str	r3, [r2, #0]
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	200000d8 	.word	0x200000d8
 8000958:	20000008 	.word	0x20000008

0800095c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b02      	ldr	r3, [pc, #8]	; (800096c <HAL_GetTick+0x10>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	200000d8 	.word	0x200000d8

08000970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000978:	f7ff fff0 	bl	800095c <HAL_GetTick>
 800097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000988:	d004      	beq.n	8000994 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_Delay+0x40>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	4413      	add	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000994:	bf00      	nop
 8000996:	f7ff ffe1 	bl	800095c <HAL_GetTick>
 800099a:	4602      	mov	r2, r0
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d8f7      	bhi.n	8000996 <HAL_Delay+0x26>
  {
  }
}
 80009a6:	bf00      	nop
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000008 	.word	0x20000008

080009b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d0:	4013      	ands	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	60d3      	str	r3, [r2, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <__NVIC_GetPriorityGrouping+0x18>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	f003 0307 	and.w	r3, r3, #7
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db0a      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	490c      	ldr	r1, [pc, #48]	; (8000a64 <__NVIC_SetPriority+0x4c>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	0112      	lsls	r2, r2, #4
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a40:	e00a      	b.n	8000a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4908      	ldr	r1, [pc, #32]	; (8000a68 <__NVIC_SetPriority+0x50>)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	761a      	strb	r2, [r3, #24]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	bf28      	it	cs
 8000a8a:	2304      	movcs	r3, #4
 8000a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d902      	bls.n	8000a9c <NVIC_EncodePriority+0x30>
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3b03      	subs	r3, #3
 8000a9a:	e000      	b.n	8000a9e <NVIC_EncodePriority+0x32>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	43d9      	mvns	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	4313      	orrs	r3, r2
         );
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	; 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af4:	f7ff ff90 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff49 	bl	80009b4 <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3c:	f7ff ff5e 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8000b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ff90 	bl	8000a6c <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff5f 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ffb0 	bl	8000ad0 <SysTick_Config>
 8000b70:	4603      	mov	r3, r0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b92:	e154      	b.n	8000e3e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f000 8146 	beq.w	8000e38 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d005      	beq.n	8000bc4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d130      	bne.n	8000c26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	2203      	movs	r2, #3
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	091b      	lsrs	r3, r3, #4
 8000c10:	f003 0201 	and.w	r2, r3, #1
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	d017      	beq.n	8000c62 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d123      	bne.n	8000cb6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	08da      	lsrs	r2, r3, #3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3208      	adds	r2, #8
 8000c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	220f      	movs	r2, #15
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	691a      	ldr	r2, [r3, #16]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f003 0307 	and.w	r3, r3, #7
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	08da      	lsrs	r2, r3, #3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3208      	adds	r2, #8
 8000cb0:	6939      	ldr	r1, [r7, #16]
 8000cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0203 	and.w	r2, r3, #3
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f000 80a0 	beq.w	8000e38 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf8:	4b58      	ldr	r3, [pc, #352]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000cfa:	6a1b      	ldr	r3, [r3, #32]
 8000cfc:	4a57      	ldr	r2, [pc, #348]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6213      	str	r3, [r2, #32]
 8000d04:	4b55      	ldr	r3, [pc, #340]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000d06:	6a1b      	ldr	r3, [r3, #32]
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000d10:	4a53      	ldr	r2, [pc, #332]	; (8000e60 <HAL_GPIO_Init+0x2e4>)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	089b      	lsrs	r3, r3, #2
 8000d16:	3302      	adds	r3, #2
 8000d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	220f      	movs	r2, #15
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a4b      	ldr	r2, [pc, #300]	; (8000e64 <HAL_GPIO_Init+0x2e8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d019      	beq.n	8000d70 <HAL_GPIO_Init+0x1f4>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a4a      	ldr	r2, [pc, #296]	; (8000e68 <HAL_GPIO_Init+0x2ec>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d013      	beq.n	8000d6c <HAL_GPIO_Init+0x1f0>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a49      	ldr	r2, [pc, #292]	; (8000e6c <HAL_GPIO_Init+0x2f0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d00d      	beq.n	8000d68 <HAL_GPIO_Init+0x1ec>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a48      	ldr	r2, [pc, #288]	; (8000e70 <HAL_GPIO_Init+0x2f4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d007      	beq.n	8000d64 <HAL_GPIO_Init+0x1e8>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a47      	ldr	r2, [pc, #284]	; (8000e74 <HAL_GPIO_Init+0x2f8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d101      	bne.n	8000d60 <HAL_GPIO_Init+0x1e4>
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	e008      	b.n	8000d72 <HAL_GPIO_Init+0x1f6>
 8000d60:	2305      	movs	r3, #5
 8000d62:	e006      	b.n	8000d72 <HAL_GPIO_Init+0x1f6>
 8000d64:	2303      	movs	r3, #3
 8000d66:	e004      	b.n	8000d72 <HAL_GPIO_Init+0x1f6>
 8000d68:	2302      	movs	r3, #2
 8000d6a:	e002      	b.n	8000d72 <HAL_GPIO_Init+0x1f6>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e000      	b.n	8000d72 <HAL_GPIO_Init+0x1f6>
 8000d70:	2300      	movs	r3, #0
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	f002 0203 	and.w	r2, r2, #3
 8000d78:	0092      	lsls	r2, r2, #2
 8000d7a:	4093      	lsls	r3, r2
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d82:	4937      	ldr	r1, [pc, #220]	; (8000e60 <HAL_GPIO_Init+0x2e4>)
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3302      	adds	r3, #2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d90:	4b39      	ldr	r3, [pc, #228]	; (8000e78 <HAL_GPIO_Init+0x2fc>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000db4:	4a30      	ldr	r2, [pc, #192]	; (8000e78 <HAL_GPIO_Init+0x2fc>)
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dba:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <HAL_GPIO_Init+0x2fc>)
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dde:	4a26      	ldr	r2, [pc, #152]	; (8000e78 <HAL_GPIO_Init+0x2fc>)
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <HAL_GPIO_Init+0x2fc>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e08:	4a1b      	ldr	r2, [pc, #108]	; (8000e78 <HAL_GPIO_Init+0x2fc>)
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <HAL_GPIO_Init+0x2fc>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e32:	4a11      	ldr	r2, [pc, #68]	; (8000e78 <HAL_GPIO_Init+0x2fc>)
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	fa22 f303 	lsr.w	r3, r2, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f47f aea3 	bne.w	8000b94 <HAL_GPIO_Init+0x18>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	bf00      	nop
 8000e52:	371c      	adds	r7, #28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40010000 	.word	0x40010000
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	40020800 	.word	0x40020800
 8000e70:	40020c00 	.word	0x40020c00
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010400 	.word	0x40010400

08000e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e31d      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e8e:	4b94      	ldr	r3, [pc, #592]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f003 030c 	and.w	r3, r3, #12
 8000e96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e98:	4b91      	ldr	r3, [pc, #580]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d07b      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d006      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	2b0c      	cmp	r3, #12
 8000eb8:	d10f      	bne.n	8000eda <HAL_RCC_OscConfig+0x5e>
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec0:	d10b      	bne.n	8000eda <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec2:	4b87      	ldr	r3, [pc, #540]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d06a      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x128>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d166      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e2f7      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d106      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x74>
 8000ee2:	4b7f      	ldr	r3, [pc, #508]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a7e      	ldr	r2, [pc, #504]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e02d      	b.n	8000f4c <HAL_RCC_OscConfig+0xd0>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d10c      	bne.n	8000f12 <HAL_RCC_OscConfig+0x96>
 8000ef8:	4b79      	ldr	r3, [pc, #484]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a78      	ldr	r2, [pc, #480]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b76      	ldr	r3, [pc, #472]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a75      	ldr	r2, [pc, #468]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	e01c      	b.n	8000f4c <HAL_RCC_OscConfig+0xd0>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b05      	cmp	r3, #5
 8000f18:	d10c      	bne.n	8000f34 <HAL_RCC_OscConfig+0xb8>
 8000f1a:	4b71      	ldr	r3, [pc, #452]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a70      	ldr	r2, [pc, #448]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	4b6e      	ldr	r3, [pc, #440]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a6d      	ldr	r2, [pc, #436]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e00b      	b.n	8000f4c <HAL_RCC_OscConfig+0xd0>
 8000f34:	4b6a      	ldr	r3, [pc, #424]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a69      	ldr	r2, [pc, #420]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b67      	ldr	r3, [pc, #412]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a66      	ldr	r2, [pc, #408]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d013      	beq.n	8000f7c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fd02 	bl	800095c <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fcfe 	bl	800095c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	; 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e2ad      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f6e:	4b5c      	ldr	r3, [pc, #368]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f0      	beq.n	8000f5c <HAL_RCC_OscConfig+0xe0>
 8000f7a:	e014      	b.n	8000fa6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fcee 	bl	800095c <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fcea 	bl	800095c <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e299      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f96:	4b52      	ldr	r3, [pc, #328]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f0      	bne.n	8000f84 <HAL_RCC_OscConfig+0x108>
 8000fa2:	e000      	b.n	8000fa6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d05a      	beq.n	8001068 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d005      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2b0c      	cmp	r3, #12
 8000fbc:	d119      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x176>
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d116      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc4:	4b46      	ldr	r3, [pc, #280]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <HAL_RCC_OscConfig+0x160>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d001      	beq.n	8000fdc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e276      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fdc:	4b40      	ldr	r3, [pc, #256]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	493d      	ldr	r1, [pc, #244]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff0:	e03a      	b.n	8001068 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d020      	beq.n	800103c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ffa:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <HAL_RCC_OscConfig+0x268>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff fcac 	bl	800095c <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001008:	f7ff fca8 	bl	800095c <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e257      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800101a:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	492a      	ldr	r1, [pc, #168]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 8001036:	4313      	orrs	r3, r2
 8001038:	604b      	str	r3, [r1, #4]
 800103a:	e015      	b.n	8001068 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800103c:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <HAL_RCC_OscConfig+0x268>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff fc8b 	bl	800095c <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800104a:	f7ff fc87 	bl	800095c <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e236      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f0      	bne.n	800104a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0310 	and.w	r3, r3, #16
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80b8 	beq.w	80011e6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d170      	bne.n	800115e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001084:	2b00      	cmp	r3, #0
 8001086:	d005      	beq.n	8001094 <HAL_RCC_OscConfig+0x218>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e21a      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1a      	ldr	r2, [r3, #32]
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d921      	bls.n	80010e8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fc7d 	bl	80019a8 <RCC_SetFlashLatencyFromMSIRange>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e208      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	4906      	ldr	r1, [pc, #24]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	061b      	lsls	r3, r3, #24
 80010d8:	4901      	ldr	r1, [pc, #4]	; (80010e0 <HAL_RCC_OscConfig+0x264>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	604b      	str	r3, [r1, #4]
 80010de:	e020      	b.n	8001122 <HAL_RCC_OscConfig+0x2a6>
 80010e0:	40023800 	.word	0x40023800
 80010e4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e8:	4b99      	ldr	r3, [pc, #612]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	4996      	ldr	r1, [pc, #600]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010fa:	4b95      	ldr	r3, [pc, #596]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	061b      	lsls	r3, r3, #24
 8001108:	4991      	ldr	r1, [pc, #580]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 800110a:	4313      	orrs	r3, r2
 800110c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fc48 	bl	80019a8 <RCC_SetFlashLatencyFromMSIRange>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e1d3      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	0b5b      	lsrs	r3, r3, #13
 8001128:	3301      	adds	r3, #1
 800112a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001132:	4a87      	ldr	r2, [pc, #540]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 8001134:	6892      	ldr	r2, [r2, #8]
 8001136:	0912      	lsrs	r2, r2, #4
 8001138:	f002 020f 	and.w	r2, r2, #15
 800113c:	4985      	ldr	r1, [pc, #532]	; (8001354 <HAL_RCC_OscConfig+0x4d8>)
 800113e:	5c8a      	ldrb	r2, [r1, r2]
 8001140:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001142:	4a85      	ldr	r2, [pc, #532]	; (8001358 <HAL_RCC_OscConfig+0x4dc>)
 8001144:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001146:	4b85      	ldr	r3, [pc, #532]	; (800135c <HAL_RCC_OscConfig+0x4e0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fbba 	bl	80008c4 <HAL_InitTick>
 8001150:	4603      	mov	r3, r0
 8001152:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d045      	beq.n	80011e6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	e1b5      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d029      	beq.n	80011ba <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001166:	4b7e      	ldr	r3, [pc, #504]	; (8001360 <HAL_RCC_OscConfig+0x4e4>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fbf6 	bl	800095c <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001174:	f7ff fbf2 	bl	800095c <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e1a1      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001186:	4b72      	ldr	r3, [pc, #456]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f0      	beq.n	8001174 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001192:	4b6f      	ldr	r3, [pc, #444]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	496c      	ldr	r1, [pc, #432]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 80011a0:	4313      	orrs	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a4:	4b6a      	ldr	r3, [pc, #424]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	061b      	lsls	r3, r3, #24
 80011b2:	4967      	ldr	r1, [pc, #412]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]
 80011b8:	e015      	b.n	80011e6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011ba:	4b69      	ldr	r3, [pc, #420]	; (8001360 <HAL_RCC_OscConfig+0x4e4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff fbcc 	bl	800095c <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011c8:	f7ff fbc8 	bl	800095c <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e177      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011da:	4b5d      	ldr	r3, [pc, #372]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d030      	beq.n	8001254 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d016      	beq.n	8001228 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fa:	4b5a      	ldr	r3, [pc, #360]	; (8001364 <HAL_RCC_OscConfig+0x4e8>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001200:	f7ff fbac 	bl	800095c <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001208:	f7ff fba8 	bl	800095c <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e157      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800121a:	4b4d      	ldr	r3, [pc, #308]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 800121c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x38c>
 8001226:	e015      	b.n	8001254 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001228:	4b4e      	ldr	r3, [pc, #312]	; (8001364 <HAL_RCC_OscConfig+0x4e8>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fb95 	bl	800095c <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001236:	f7ff fb91 	bl	800095c <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e140      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001248:	4b41      	ldr	r3, [pc, #260]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 800124a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f0      	bne.n	8001236 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80b5 	beq.w	80013cc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001266:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10d      	bne.n	800128e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	4b37      	ldr	r3, [pc, #220]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	4a36      	ldr	r2, [pc, #216]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	6253      	str	r3, [r2, #36]	; 0x24
 800127e:	4b34      	ldr	r3, [pc, #208]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800128a:	2301      	movs	r3, #1
 800128c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128e:	4b36      	ldr	r3, [pc, #216]	; (8001368 <HAL_RCC_OscConfig+0x4ec>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001296:	2b00      	cmp	r3, #0
 8001298:	d118      	bne.n	80012cc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800129a:	4b33      	ldr	r3, [pc, #204]	; (8001368 <HAL_RCC_OscConfig+0x4ec>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a32      	ldr	r2, [pc, #200]	; (8001368 <HAL_RCC_OscConfig+0x4ec>)
 80012a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fb59 	bl	800095c <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ae:	f7ff fb55 	bl	800095c <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b64      	cmp	r3, #100	; 0x64
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e104      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c0:	4b29      	ldr	r3, [pc, #164]	; (8001368 <HAL_RCC_OscConfig+0x4ec>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f0      	beq.n	80012ae <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d106      	bne.n	80012e2 <HAL_RCC_OscConfig+0x466>
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 80012d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d8:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 80012da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012de:	6353      	str	r3, [r2, #52]	; 0x34
 80012e0:	e02d      	b.n	800133e <HAL_RCC_OscConfig+0x4c2>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x488>
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 80012ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ee:	4a18      	ldr	r2, [pc, #96]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 80012f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012f4:	6353      	str	r3, [r2, #52]	; 0x34
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 80012f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fa:	4a15      	ldr	r2, [pc, #84]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 80012fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001300:	6353      	str	r3, [r2, #52]	; 0x34
 8001302:	e01c      	b.n	800133e <HAL_RCC_OscConfig+0x4c2>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b05      	cmp	r3, #5
 800130a:	d10c      	bne.n	8001326 <HAL_RCC_OscConfig+0x4aa>
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 800130e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001310:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 8001312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001316:	6353      	str	r3, [r2, #52]	; 0x34
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 800131a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131c:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 800131e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001322:	6353      	str	r3, [r2, #52]	; 0x34
 8001324:	e00b      	b.n	800133e <HAL_RCC_OscConfig+0x4c2>
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 8001328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 800132c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001330:	6353      	str	r3, [r2, #52]	; 0x34
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 8001334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001336:	4a06      	ldr	r2, [pc, #24]	; (8001350 <HAL_RCC_OscConfig+0x4d4>)
 8001338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800133c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d024      	beq.n	8001390 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001346:	f7ff fb09 	bl	800095c <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800134c:	e019      	b.n	8001382 <HAL_RCC_OscConfig+0x506>
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	08002934 	.word	0x08002934
 8001358:	20000000 	.word	0x20000000
 800135c:	20000004 	.word	0x20000004
 8001360:	42470020 	.word	0x42470020
 8001364:	42470680 	.word	0x42470680
 8001368:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136c:	f7ff faf6 	bl	800095c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f241 3288 	movw	r2, #5000	; 0x1388
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e0a3      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001382:	4b54      	ldr	r3, [pc, #336]	; (80014d4 <HAL_RCC_OscConfig+0x658>)
 8001384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0ee      	beq.n	800136c <HAL_RCC_OscConfig+0x4f0>
 800138e:	e014      	b.n	80013ba <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001390:	f7ff fae4 	bl	800095c <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001396:	e00a      	b.n	80013ae <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f7ff fae0 	bl	800095c <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e08d      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013ae:	4b49      	ldr	r3, [pc, #292]	; (80014d4 <HAL_RCC_OscConfig+0x658>)
 80013b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1ee      	bne.n	8001398 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013ba:	7ffb      	ldrb	r3, [r7, #31]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d105      	bne.n	80013cc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c0:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <HAL_RCC_OscConfig+0x658>)
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	4a43      	ldr	r2, [pc, #268]	; (80014d4 <HAL_RCC_OscConfig+0x658>)
 80013c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ca:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d079      	beq.n	80014c8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2b0c      	cmp	r3, #12
 80013d8:	d056      	beq.n	8001488 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d13b      	bne.n	800145a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <HAL_RCC_OscConfig+0x65c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fab8 	bl	800095c <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff fab4 	bl	800095c <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e063      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <HAL_RCC_OscConfig+0x658>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <HAL_RCC_OscConfig+0x658>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	4319      	orrs	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	430b      	orrs	r3, r1
 8001426:	492b      	ldr	r1, [pc, #172]	; (80014d4 <HAL_RCC_OscConfig+0x658>)
 8001428:	4313      	orrs	r3, r2
 800142a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <HAL_RCC_OscConfig+0x65c>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff fa93 	bl	800095c <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143a:	f7ff fa8f 	bl	800095c <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e03e      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800144c:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <HAL_RCC_OscConfig+0x658>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x5be>
 8001458:	e036      	b.n	80014c8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <HAL_RCC_OscConfig+0x65c>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fa7c 	bl	800095c <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001468:	f7ff fa78 	bl	800095c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e027      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <HAL_RCC_OscConfig+0x658>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x5ec>
 8001486:	e01f      	b.n	80014c8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e01a      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_RCC_OscConfig+0x658>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d10d      	bne.n	80014c4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d106      	bne.n	80014c4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	42470060 	.word	0x42470060

080014dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e11a      	b.n	8001726 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014f0:	4b8f      	ldr	r3, [pc, #572]	; (8001730 <HAL_RCC_ClockConfig+0x254>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d919      	bls.n	8001532 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d105      	bne.n	8001510 <HAL_RCC_ClockConfig+0x34>
 8001504:	4b8a      	ldr	r3, [pc, #552]	; (8001730 <HAL_RCC_ClockConfig+0x254>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a89      	ldr	r2, [pc, #548]	; (8001730 <HAL_RCC_ClockConfig+0x254>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b87      	ldr	r3, [pc, #540]	; (8001730 <HAL_RCC_ClockConfig+0x254>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f023 0201 	bic.w	r2, r3, #1
 8001518:	4985      	ldr	r1, [pc, #532]	; (8001730 <HAL_RCC_ClockConfig+0x254>)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	4313      	orrs	r3, r2
 800151e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001520:	4b83      	ldr	r3, [pc, #524]	; (8001730 <HAL_RCC_ClockConfig+0x254>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d001      	beq.n	8001532 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0f9      	b.n	8001726 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d008      	beq.n	8001550 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800153e:	4b7d      	ldr	r3, [pc, #500]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	497a      	ldr	r1, [pc, #488]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 800154c:	4313      	orrs	r3, r2
 800154e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 808e 	beq.w	800167a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d107      	bne.n	8001576 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001566:	4b73      	ldr	r3, [pc, #460]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d121      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0d7      	b.n	8001726 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b03      	cmp	r3, #3
 800157c:	d107      	bne.n	800158e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800157e:	4b6d      	ldr	r3, [pc, #436]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d115      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e0cb      	b.n	8001726 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d107      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001596:	4b67      	ldr	r3, [pc, #412]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d109      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e0bf      	b.n	8001726 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015a6:	4b63      	ldr	r3, [pc, #396]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e0b7      	b.n	8001726 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015b6:	4b5f      	ldr	r3, [pc, #380]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f023 0203 	bic.w	r2, r3, #3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	495c      	ldr	r1, [pc, #368]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c8:	f7ff f9c8 	bl	800095c <HAL_GetTick>
 80015cc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d112      	bne.n	80015fc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d8:	f7ff f9c0 	bl	800095c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e09b      	b.n	8001726 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015ee:	4b51      	ldr	r3, [pc, #324]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d1ee      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xfc>
 80015fa:	e03e      	b.n	800167a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b03      	cmp	r3, #3
 8001602:	d112      	bne.n	800162a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001604:	e00a      	b.n	800161c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001606:	f7ff f9a9 	bl	800095c <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	; 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e084      	b.n	8001726 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800161c:	4b45      	ldr	r3, [pc, #276]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	2b0c      	cmp	r3, #12
 8001626:	d1ee      	bne.n	8001606 <HAL_RCC_ClockConfig+0x12a>
 8001628:	e027      	b.n	800167a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d11d      	bne.n	800166e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001632:	e00a      	b.n	800164a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001634:	f7ff f992 	bl	800095c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e06d      	b.n	8001726 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800164a:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b04      	cmp	r3, #4
 8001654:	d1ee      	bne.n	8001634 <HAL_RCC_ClockConfig+0x158>
 8001656:	e010      	b.n	800167a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001658:	f7ff f980 	bl	800095c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e05b      	b.n	8001726 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800166e:	4b31      	ldr	r3, [pc, #196]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1ee      	bne.n	8001658 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800167a:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <HAL_RCC_ClockConfig+0x254>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d219      	bcs.n	80016bc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d105      	bne.n	800169a <HAL_RCC_ClockConfig+0x1be>
 800168e:	4b28      	ldr	r3, [pc, #160]	; (8001730 <HAL_RCC_ClockConfig+0x254>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a27      	ldr	r2, [pc, #156]	; (8001730 <HAL_RCC_ClockConfig+0x254>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_RCC_ClockConfig+0x254>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 0201 	bic.w	r2, r3, #1
 80016a2:	4923      	ldr	r1, [pc, #140]	; (8001730 <HAL_RCC_ClockConfig+0x254>)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_RCC_ClockConfig+0x254>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e034      	b.n	8001726 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c8:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	4917      	ldr	r1, [pc, #92]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d009      	beq.n	80016fa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	490f      	ldr	r1, [pc, #60]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016fa:	f000 f823 	bl	8001744 <HAL_RCC_GetSysClockFreq>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_RCC_ClockConfig+0x258>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	490b      	ldr	r1, [pc, #44]	; (8001738 <HAL_RCC_ClockConfig+0x25c>)
 800170c:	5ccb      	ldrb	r3, [r1, r3]
 800170e:	fa22 f303 	lsr.w	r3, r2, r3
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_RCC_ClockConfig+0x260>)
 8001714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_RCC_ClockConfig+0x264>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f8d2 	bl	80008c4 <HAL_InitTick>
 8001720:	4603      	mov	r3, r0
 8001722:	72fb      	strb	r3, [r7, #11]

  return status;
 8001724:	7afb      	ldrb	r3, [r7, #11]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00
 8001734:	40023800 	.word	0x40023800
 8001738:	08002934 	.word	0x08002934
 800173c:	20000000 	.word	0x20000000
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001748:	b092      	sub	sp, #72	; 0x48
 800174a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800174c:	4b79      	ldr	r3, [pc, #484]	; (8001934 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b0c      	cmp	r3, #12
 800175a:	d00d      	beq.n	8001778 <HAL_RCC_GetSysClockFreq+0x34>
 800175c:	2b0c      	cmp	r3, #12
 800175e:	f200 80d5 	bhi.w	800190c <HAL_RCC_GetSysClockFreq+0x1c8>
 8001762:	2b04      	cmp	r3, #4
 8001764:	d002      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x28>
 8001766:	2b08      	cmp	r3, #8
 8001768:	d003      	beq.n	8001772 <HAL_RCC_GetSysClockFreq+0x2e>
 800176a:	e0cf      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800176c:	4b72      	ldr	r3, [pc, #456]	; (8001938 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800176e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001770:	e0da      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001772:	4b72      	ldr	r3, [pc, #456]	; (800193c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001774:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001776:	e0d7      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800177a:	0c9b      	lsrs	r3, r3, #18
 800177c:	f003 020f 	and.w	r2, r3, #15
 8001780:	4b6f      	ldr	r3, [pc, #444]	; (8001940 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001782:	5c9b      	ldrb	r3, [r3, r2]
 8001784:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001788:	0d9b      	lsrs	r3, r3, #22
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	3301      	adds	r3, #1
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001792:	4b68      	ldr	r3, [pc, #416]	; (8001934 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d05d      	beq.n	800185a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800179e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a0:	2200      	movs	r2, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	4611      	mov	r1, r2
 80017a6:	4604      	mov	r4, r0
 80017a8:	460d      	mov	r5, r1
 80017aa:	4622      	mov	r2, r4
 80017ac:	462b      	mov	r3, r5
 80017ae:	f04f 0000 	mov.w	r0, #0
 80017b2:	f04f 0100 	mov.w	r1, #0
 80017b6:	0159      	lsls	r1, r3, #5
 80017b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017bc:	0150      	lsls	r0, r2, #5
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4621      	mov	r1, r4
 80017c4:	1a51      	subs	r1, r2, r1
 80017c6:	6139      	str	r1, [r7, #16]
 80017c8:	4629      	mov	r1, r5
 80017ca:	eb63 0301 	sbc.w	r3, r3, r1
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017dc:	4659      	mov	r1, fp
 80017de:	018b      	lsls	r3, r1, #6
 80017e0:	4651      	mov	r1, sl
 80017e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017e6:	4651      	mov	r1, sl
 80017e8:	018a      	lsls	r2, r1, #6
 80017ea:	46d4      	mov	ip, sl
 80017ec:	ebb2 080c 	subs.w	r8, r2, ip
 80017f0:	4659      	mov	r1, fp
 80017f2:	eb63 0901 	sbc.w	r9, r3, r1
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001802:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001806:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800180a:	4690      	mov	r8, r2
 800180c:	4699      	mov	r9, r3
 800180e:	4623      	mov	r3, r4
 8001810:	eb18 0303 	adds.w	r3, r8, r3
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	462b      	mov	r3, r5
 8001818:	eb49 0303 	adc.w	r3, r9, r3
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800182a:	4629      	mov	r1, r5
 800182c:	024b      	lsls	r3, r1, #9
 800182e:	4620      	mov	r0, r4
 8001830:	4629      	mov	r1, r5
 8001832:	4604      	mov	r4, r0
 8001834:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001838:	4601      	mov	r1, r0
 800183a:	024a      	lsls	r2, r1, #9
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001842:	2200      	movs	r2, #0
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
 8001846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800184c:	f7fe fc96 	bl	800017c <__aeabi_uldivmod>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4613      	mov	r3, r2
 8001856:	647b      	str	r3, [r7, #68]	; 0x44
 8001858:	e055      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800185a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800185c:	2200      	movs	r2, #0
 800185e:	623b      	str	r3, [r7, #32]
 8001860:	627a      	str	r2, [r7, #36]	; 0x24
 8001862:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001866:	4642      	mov	r2, r8
 8001868:	464b      	mov	r3, r9
 800186a:	f04f 0000 	mov.w	r0, #0
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	0159      	lsls	r1, r3, #5
 8001874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001878:	0150      	lsls	r0, r2, #5
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	46c4      	mov	ip, r8
 8001880:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001884:	4640      	mov	r0, r8
 8001886:	4649      	mov	r1, r9
 8001888:	468c      	mov	ip, r1
 800188a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800189a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800189e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018a2:	ebb2 040a 	subs.w	r4, r2, sl
 80018a6:	eb63 050b 	sbc.w	r5, r3, fp
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	00eb      	lsls	r3, r5, #3
 80018b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018b8:	00e2      	lsls	r2, r4, #3
 80018ba:	4614      	mov	r4, r2
 80018bc:	461d      	mov	r5, r3
 80018be:	4603      	mov	r3, r0
 80018c0:	18e3      	adds	r3, r4, r3
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	460b      	mov	r3, r1
 80018c6:	eb45 0303 	adc.w	r3, r5, r3
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018d8:	4629      	mov	r1, r5
 80018da:	028b      	lsls	r3, r1, #10
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	4604      	mov	r4, r0
 80018e2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80018e6:	4601      	mov	r1, r0
 80018e8:	028a      	lsls	r2, r1, #10
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f0:	2200      	movs	r2, #0
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	61fa      	str	r2, [r7, #28]
 80018f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018fa:	f7fe fc3f 	bl	800017c <__aeabi_uldivmod>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4613      	mov	r3, r2
 8001904:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001908:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800190a:	e00d      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	0b5b      	lsrs	r3, r3, #13
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800191a:	3301      	adds	r3, #1
 800191c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001926:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800192a:	4618      	mov	r0, r3
 800192c:	3748      	adds	r7, #72	; 0x48
 800192e:	46bd      	mov	sp, r7
 8001930:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001934:	40023800 	.word	0x40023800
 8001938:	00f42400 	.word	0x00f42400
 800193c:	007a1200 	.word	0x007a1200
 8001940:	08002928 	.word	0x08002928

08001944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001948:	4b02      	ldr	r3, [pc, #8]	; (8001954 <HAL_RCC_GetHCLKFreq+0x10>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	20000000 	.word	0x20000000

08001958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800195c:	f7ff fff2 	bl	8001944 <HAL_RCC_GetHCLKFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	4903      	ldr	r1, [pc, #12]	; (800197c <HAL_RCC_GetPCLK1Freq+0x24>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001974:	4618      	mov	r0, r3
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	08002944 	.word	0x08002944

08001980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001984:	f7ff ffde 	bl	8001944 <HAL_RCC_GetHCLKFreq>
 8001988:	4602      	mov	r2, r0
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	0adb      	lsrs	r3, r3, #11
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	4903      	ldr	r1, [pc, #12]	; (80019a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001996:	5ccb      	ldrb	r3, [r1, r3]
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	08002944 	.word	0x08002944

080019a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d12c      	bne.n	8001a1a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019c0:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	e016      	b.n	8001a06 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	4a1f      	ldr	r2, [pc, #124]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e2:	6253      	str	r3, [r2, #36]	; 0x24
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80019f8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001a0c:	d105      	bne.n	8001a1a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001a14:	d101      	bne.n	8001a1a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001a16:	2301      	movs	r3, #1
 8001a18:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 0201 	bic.w	r2, r3, #1
 8001a34:	490b      	ldr	r1, [pc, #44]	; (8001a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d001      	beq.n	8001a4e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40007000 	.word	0x40007000
 8001a64:	40023c00 	.word	0x40023c00

08001a68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e042      	b.n	8001b00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7fe fdd0 	bl	8000634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2224      	movs	r2, #36	; 0x24
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f91d 	bl	8001cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695a      	ldr	r2, [r3, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ad0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ae0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	4613      	mov	r3, r2
 8001b16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	d16d      	bne.n	8001c04 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_UART_Transmit+0x2c>
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e066      	b.n	8001c06 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2221      	movs	r2, #33	; 0x21
 8001b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b46:	f7fe ff09 	bl	800095c <HAL_GetTick>
 8001b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	88fa      	ldrh	r2, [r7, #6]
 8001b50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	88fa      	ldrh	r2, [r7, #6]
 8001b56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b60:	d108      	bne.n	8001b74 <HAL_UART_Transmit+0x6c>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d104      	bne.n	8001b74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	e003      	b.n	8001b7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b7c:	e02a      	b.n	8001bd4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2200      	movs	r2, #0
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 f840 	bl	8001c0e <UART_WaitOnFlagUntilTimeout>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e036      	b.n	8001c06 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	61bb      	str	r3, [r7, #24]
 8001bb4:	e007      	b.n	8001bc6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1cf      	bne.n	8001b7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2200      	movs	r2, #0
 8001be6:	2140      	movs	r1, #64	; 0x40
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 f810 	bl	8001c0e <UART_WaitOnFlagUntilTimeout>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e006      	b.n	8001c06 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e000      	b.n	8001c06 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001c04:	2302      	movs	r3, #2
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b090      	sub	sp, #64	; 0x40
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c1e:	e050      	b.n	8001cc2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c26:	d04c      	beq.n	8001cc2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <UART_WaitOnFlagUntilTimeout+0x30>
 8001c2e:	f7fe fe95 	bl	800095c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d241      	bcs.n	8001cc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	330c      	adds	r3, #12
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c48:	e853 3f00 	ldrex	r3, [r3]
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	330c      	adds	r3, #12
 8001c5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c5e:	637a      	str	r2, [r7, #52]	; 0x34
 8001c60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c66:	e841 2300 	strex	r3, r2, [r1]
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1e5      	bne.n	8001c3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	3314      	adds	r3, #20
 8001c78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	e853 3f00 	ldrex	r3, [r3]
 8001c80:	613b      	str	r3, [r7, #16]
   return(result);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3314      	adds	r3, #20
 8001c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c92:	623a      	str	r2, [r7, #32]
 8001c94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c96:	69f9      	ldr	r1, [r7, #28]
 8001c98:	6a3a      	ldr	r2, [r7, #32]
 8001c9a:	e841 2300 	strex	r3, r2, [r1]
 8001c9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1e5      	bne.n	8001c72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e00f      	b.n	8001ce2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	bf0c      	ite	eq
 8001cd2:	2301      	moveq	r3, #1
 8001cd4:	2300      	movne	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d09f      	beq.n	8001c20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3740      	adds	r7, #64	; 0x40
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001d2c:	f023 030c 	bic.w	r3, r3, #12
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	430b      	orrs	r3, r1
 8001d38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699a      	ldr	r2, [r3, #24]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a55      	ldr	r2, [pc, #340]	; (8001eac <UART_SetConfig+0x1c0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d103      	bne.n	8001d62 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d5a:	f7ff fe11 	bl	8001980 <HAL_RCC_GetPCLK2Freq>
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	e002      	b.n	8001d68 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d62:	f7ff fdf9 	bl	8001958 <HAL_RCC_GetPCLK1Freq>
 8001d66:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d70:	d14c      	bne.n	8001e0c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	009a      	lsls	r2, r3, #2
 8001d7c:	441a      	add	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	4a49      	ldr	r2, [pc, #292]	; (8001eb0 <UART_SetConfig+0x1c4>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	0119      	lsls	r1, r3, #4
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	009a      	lsls	r2, r3, #2
 8001d9c:	441a      	add	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001da8:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <UART_SetConfig+0x1c4>)
 8001daa:	fba3 0302 	umull	r0, r3, r3, r2
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2064      	movs	r0, #100	; 0x64
 8001db2:	fb00 f303 	mul.w	r3, r0, r3
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	3332      	adds	r3, #50	; 0x32
 8001dbc:	4a3c      	ldr	r2, [pc, #240]	; (8001eb0 <UART_SetConfig+0x1c4>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001dca:	4419      	add	r1, r3
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009a      	lsls	r2, r3, #2
 8001dd6:	441a      	add	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de2:	4b33      	ldr	r3, [pc, #204]	; (8001eb0 <UART_SetConfig+0x1c4>)
 8001de4:	fba3 0302 	umull	r0, r3, r3, r2
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	2064      	movs	r0, #100	; 0x64
 8001dec:	fb00 f303 	mul.w	r3, r0, r3
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	3332      	adds	r3, #50	; 0x32
 8001df6:	4a2e      	ldr	r2, [pc, #184]	; (8001eb0 <UART_SetConfig+0x1c4>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	f003 0207 	and.w	r2, r3, #7
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	440a      	add	r2, r1
 8001e08:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e0a:	e04a      	b.n	8001ea2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	009a      	lsls	r2, r3, #2
 8001e16:	441a      	add	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <UART_SetConfig+0x1c4>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	0119      	lsls	r1, r3, #4
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	009a      	lsls	r2, r3, #2
 8001e36:	441a      	add	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e42:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <UART_SetConfig+0x1c4>)
 8001e44:	fba3 0302 	umull	r0, r3, r3, r2
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	2064      	movs	r0, #100	; 0x64
 8001e4c:	fb00 f303 	mul.w	r3, r0, r3
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	3332      	adds	r3, #50	; 0x32
 8001e56:	4a16      	ldr	r2, [pc, #88]	; (8001eb0 <UART_SetConfig+0x1c4>)
 8001e58:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5c:	095b      	lsrs	r3, r3, #5
 8001e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e62:	4419      	add	r1, r3
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009a      	lsls	r2, r3, #2
 8001e6e:	441a      	add	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <UART_SetConfig+0x1c4>)
 8001e7c:	fba3 0302 	umull	r0, r3, r3, r2
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	2064      	movs	r0, #100	; 0x64
 8001e84:	fb00 f303 	mul.w	r3, r0, r3
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	3332      	adds	r3, #50	; 0x32
 8001e8e:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <UART_SetConfig+0x1c4>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	095b      	lsrs	r3, r3, #5
 8001e96:	f003 020f 	and.w	r2, r3, #15
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	440a      	add	r2, r1
 8001ea0:	609a      	str	r2, [r3, #8]
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40013800 	.word	0x40013800
 8001eb0:	51eb851f 	.word	0x51eb851f

08001eb4 <__errno>:
 8001eb4:	4b01      	ldr	r3, [pc, #4]	; (8001ebc <__errno+0x8>)
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	2000000c 	.word	0x2000000c

08001ec0 <__libc_init_array>:
 8001ec0:	b570      	push	{r4, r5, r6, lr}
 8001ec2:	2600      	movs	r6, #0
 8001ec4:	4d0c      	ldr	r5, [pc, #48]	; (8001ef8 <__libc_init_array+0x38>)
 8001ec6:	4c0d      	ldr	r4, [pc, #52]	; (8001efc <__libc_init_array+0x3c>)
 8001ec8:	1b64      	subs	r4, r4, r5
 8001eca:	10a4      	asrs	r4, r4, #2
 8001ecc:	42a6      	cmp	r6, r4
 8001ece:	d109      	bne.n	8001ee4 <__libc_init_array+0x24>
 8001ed0:	f000 fd18 	bl	8002904 <_init>
 8001ed4:	2600      	movs	r6, #0
 8001ed6:	4d0a      	ldr	r5, [pc, #40]	; (8001f00 <__libc_init_array+0x40>)
 8001ed8:	4c0a      	ldr	r4, [pc, #40]	; (8001f04 <__libc_init_array+0x44>)
 8001eda:	1b64      	subs	r4, r4, r5
 8001edc:	10a4      	asrs	r4, r4, #2
 8001ede:	42a6      	cmp	r6, r4
 8001ee0:	d105      	bne.n	8001eee <__libc_init_array+0x2e>
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}
 8001ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ee8:	4798      	blx	r3
 8001eea:	3601      	adds	r6, #1
 8001eec:	e7ee      	b.n	8001ecc <__libc_init_array+0xc>
 8001eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ef2:	4798      	blx	r3
 8001ef4:	3601      	adds	r6, #1
 8001ef6:	e7f2      	b.n	8001ede <__libc_init_array+0x1e>
 8001ef8:	080029b8 	.word	0x080029b8
 8001efc:	080029b8 	.word	0x080029b8
 8001f00:	080029b8 	.word	0x080029b8
 8001f04:	080029bc 	.word	0x080029bc

08001f08 <memset>:
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4402      	add	r2, r0
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d100      	bne.n	8001f12 <memset+0xa>
 8001f10:	4770      	bx	lr
 8001f12:	f803 1b01 	strb.w	r1, [r3], #1
 8001f16:	e7f9      	b.n	8001f0c <memset+0x4>

08001f18 <_puts_r>:
 8001f18:	b570      	push	{r4, r5, r6, lr}
 8001f1a:	460e      	mov	r6, r1
 8001f1c:	4605      	mov	r5, r0
 8001f1e:	b118      	cbz	r0, 8001f28 <_puts_r+0x10>
 8001f20:	6983      	ldr	r3, [r0, #24]
 8001f22:	b90b      	cbnz	r3, 8001f28 <_puts_r+0x10>
 8001f24:	f000 fa44 	bl	80023b0 <__sinit>
 8001f28:	69ab      	ldr	r3, [r5, #24]
 8001f2a:	68ac      	ldr	r4, [r5, #8]
 8001f2c:	b913      	cbnz	r3, 8001f34 <_puts_r+0x1c>
 8001f2e:	4628      	mov	r0, r5
 8001f30:	f000 fa3e 	bl	80023b0 <__sinit>
 8001f34:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <_puts_r+0xd0>)
 8001f36:	429c      	cmp	r4, r3
 8001f38:	d120      	bne.n	8001f7c <_puts_r+0x64>
 8001f3a:	686c      	ldr	r4, [r5, #4]
 8001f3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f3e:	07db      	lsls	r3, r3, #31
 8001f40:	d405      	bmi.n	8001f4e <_puts_r+0x36>
 8001f42:	89a3      	ldrh	r3, [r4, #12]
 8001f44:	0598      	lsls	r0, r3, #22
 8001f46:	d402      	bmi.n	8001f4e <_puts_r+0x36>
 8001f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f4a:	f000 facf 	bl	80024ec <__retarget_lock_acquire_recursive>
 8001f4e:	89a3      	ldrh	r3, [r4, #12]
 8001f50:	0719      	lsls	r1, r3, #28
 8001f52:	d51d      	bpl.n	8001f90 <_puts_r+0x78>
 8001f54:	6923      	ldr	r3, [r4, #16]
 8001f56:	b1db      	cbz	r3, 8001f90 <_puts_r+0x78>
 8001f58:	3e01      	subs	r6, #1
 8001f5a:	68a3      	ldr	r3, [r4, #8]
 8001f5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001f60:	3b01      	subs	r3, #1
 8001f62:	60a3      	str	r3, [r4, #8]
 8001f64:	bb39      	cbnz	r1, 8001fb6 <_puts_r+0x9e>
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	da38      	bge.n	8001fdc <_puts_r+0xc4>
 8001f6a:	4622      	mov	r2, r4
 8001f6c:	210a      	movs	r1, #10
 8001f6e:	4628      	mov	r0, r5
 8001f70:	f000 f848 	bl	8002004 <__swbuf_r>
 8001f74:	3001      	adds	r0, #1
 8001f76:	d011      	beq.n	8001f9c <_puts_r+0x84>
 8001f78:	250a      	movs	r5, #10
 8001f7a:	e011      	b.n	8001fa0 <_puts_r+0x88>
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <_puts_r+0xd4>)
 8001f7e:	429c      	cmp	r4, r3
 8001f80:	d101      	bne.n	8001f86 <_puts_r+0x6e>
 8001f82:	68ac      	ldr	r4, [r5, #8]
 8001f84:	e7da      	b.n	8001f3c <_puts_r+0x24>
 8001f86:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <_puts_r+0xd8>)
 8001f88:	429c      	cmp	r4, r3
 8001f8a:	bf08      	it	eq
 8001f8c:	68ec      	ldreq	r4, [r5, #12]
 8001f8e:	e7d5      	b.n	8001f3c <_puts_r+0x24>
 8001f90:	4621      	mov	r1, r4
 8001f92:	4628      	mov	r0, r5
 8001f94:	f000 f888 	bl	80020a8 <__swsetup_r>
 8001f98:	2800      	cmp	r0, #0
 8001f9a:	d0dd      	beq.n	8001f58 <_puts_r+0x40>
 8001f9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001fa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fa2:	07da      	lsls	r2, r3, #31
 8001fa4:	d405      	bmi.n	8001fb2 <_puts_r+0x9a>
 8001fa6:	89a3      	ldrh	r3, [r4, #12]
 8001fa8:	059b      	lsls	r3, r3, #22
 8001faa:	d402      	bmi.n	8001fb2 <_puts_r+0x9a>
 8001fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fae:	f000 fa9e 	bl	80024ee <__retarget_lock_release_recursive>
 8001fb2:	4628      	mov	r0, r5
 8001fb4:	bd70      	pop	{r4, r5, r6, pc}
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	da04      	bge.n	8001fc4 <_puts_r+0xac>
 8001fba:	69a2      	ldr	r2, [r4, #24]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	dc06      	bgt.n	8001fce <_puts_r+0xb6>
 8001fc0:	290a      	cmp	r1, #10
 8001fc2:	d004      	beq.n	8001fce <_puts_r+0xb6>
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	6022      	str	r2, [r4, #0]
 8001fca:	7019      	strb	r1, [r3, #0]
 8001fcc:	e7c5      	b.n	8001f5a <_puts_r+0x42>
 8001fce:	4622      	mov	r2, r4
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	f000 f817 	bl	8002004 <__swbuf_r>
 8001fd6:	3001      	adds	r0, #1
 8001fd8:	d1bf      	bne.n	8001f5a <_puts_r+0x42>
 8001fda:	e7df      	b.n	8001f9c <_puts_r+0x84>
 8001fdc:	250a      	movs	r5, #10
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	6022      	str	r2, [r4, #0]
 8001fe4:	701d      	strb	r5, [r3, #0]
 8001fe6:	e7db      	b.n	8001fa0 <_puts_r+0x88>
 8001fe8:	08002970 	.word	0x08002970
 8001fec:	08002990 	.word	0x08002990
 8001ff0:	08002950 	.word	0x08002950

08001ff4 <puts>:
 8001ff4:	4b02      	ldr	r3, [pc, #8]	; (8002000 <puts+0xc>)
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	f7ff bf8d 	b.w	8001f18 <_puts_r>
 8001ffe:	bf00      	nop
 8002000:	2000000c 	.word	0x2000000c

08002004 <__swbuf_r>:
 8002004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002006:	460e      	mov	r6, r1
 8002008:	4614      	mov	r4, r2
 800200a:	4605      	mov	r5, r0
 800200c:	b118      	cbz	r0, 8002016 <__swbuf_r+0x12>
 800200e:	6983      	ldr	r3, [r0, #24]
 8002010:	b90b      	cbnz	r3, 8002016 <__swbuf_r+0x12>
 8002012:	f000 f9cd 	bl	80023b0 <__sinit>
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <__swbuf_r+0x98>)
 8002018:	429c      	cmp	r4, r3
 800201a:	d12b      	bne.n	8002074 <__swbuf_r+0x70>
 800201c:	686c      	ldr	r4, [r5, #4]
 800201e:	69a3      	ldr	r3, [r4, #24]
 8002020:	60a3      	str	r3, [r4, #8]
 8002022:	89a3      	ldrh	r3, [r4, #12]
 8002024:	071a      	lsls	r2, r3, #28
 8002026:	d52f      	bpl.n	8002088 <__swbuf_r+0x84>
 8002028:	6923      	ldr	r3, [r4, #16]
 800202a:	b36b      	cbz	r3, 8002088 <__swbuf_r+0x84>
 800202c:	6923      	ldr	r3, [r4, #16]
 800202e:	6820      	ldr	r0, [r4, #0]
 8002030:	b2f6      	uxtb	r6, r6
 8002032:	1ac0      	subs	r0, r0, r3
 8002034:	6963      	ldr	r3, [r4, #20]
 8002036:	4637      	mov	r7, r6
 8002038:	4283      	cmp	r3, r0
 800203a:	dc04      	bgt.n	8002046 <__swbuf_r+0x42>
 800203c:	4621      	mov	r1, r4
 800203e:	4628      	mov	r0, r5
 8002040:	f000 f922 	bl	8002288 <_fflush_r>
 8002044:	bb30      	cbnz	r0, 8002094 <__swbuf_r+0x90>
 8002046:	68a3      	ldr	r3, [r4, #8]
 8002048:	3001      	adds	r0, #1
 800204a:	3b01      	subs	r3, #1
 800204c:	60a3      	str	r3, [r4, #8]
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	6022      	str	r2, [r4, #0]
 8002054:	701e      	strb	r6, [r3, #0]
 8002056:	6963      	ldr	r3, [r4, #20]
 8002058:	4283      	cmp	r3, r0
 800205a:	d004      	beq.n	8002066 <__swbuf_r+0x62>
 800205c:	89a3      	ldrh	r3, [r4, #12]
 800205e:	07db      	lsls	r3, r3, #31
 8002060:	d506      	bpl.n	8002070 <__swbuf_r+0x6c>
 8002062:	2e0a      	cmp	r6, #10
 8002064:	d104      	bne.n	8002070 <__swbuf_r+0x6c>
 8002066:	4621      	mov	r1, r4
 8002068:	4628      	mov	r0, r5
 800206a:	f000 f90d 	bl	8002288 <_fflush_r>
 800206e:	b988      	cbnz	r0, 8002094 <__swbuf_r+0x90>
 8002070:	4638      	mov	r0, r7
 8002072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <__swbuf_r+0x9c>)
 8002076:	429c      	cmp	r4, r3
 8002078:	d101      	bne.n	800207e <__swbuf_r+0x7a>
 800207a:	68ac      	ldr	r4, [r5, #8]
 800207c:	e7cf      	b.n	800201e <__swbuf_r+0x1a>
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <__swbuf_r+0xa0>)
 8002080:	429c      	cmp	r4, r3
 8002082:	bf08      	it	eq
 8002084:	68ec      	ldreq	r4, [r5, #12]
 8002086:	e7ca      	b.n	800201e <__swbuf_r+0x1a>
 8002088:	4621      	mov	r1, r4
 800208a:	4628      	mov	r0, r5
 800208c:	f000 f80c 	bl	80020a8 <__swsetup_r>
 8002090:	2800      	cmp	r0, #0
 8002092:	d0cb      	beq.n	800202c <__swbuf_r+0x28>
 8002094:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002098:	e7ea      	b.n	8002070 <__swbuf_r+0x6c>
 800209a:	bf00      	nop
 800209c:	08002970 	.word	0x08002970
 80020a0:	08002990 	.word	0x08002990
 80020a4:	08002950 	.word	0x08002950

080020a8 <__swsetup_r>:
 80020a8:	4b32      	ldr	r3, [pc, #200]	; (8002174 <__swsetup_r+0xcc>)
 80020aa:	b570      	push	{r4, r5, r6, lr}
 80020ac:	681d      	ldr	r5, [r3, #0]
 80020ae:	4606      	mov	r6, r0
 80020b0:	460c      	mov	r4, r1
 80020b2:	b125      	cbz	r5, 80020be <__swsetup_r+0x16>
 80020b4:	69ab      	ldr	r3, [r5, #24]
 80020b6:	b913      	cbnz	r3, 80020be <__swsetup_r+0x16>
 80020b8:	4628      	mov	r0, r5
 80020ba:	f000 f979 	bl	80023b0 <__sinit>
 80020be:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <__swsetup_r+0xd0>)
 80020c0:	429c      	cmp	r4, r3
 80020c2:	d10f      	bne.n	80020e4 <__swsetup_r+0x3c>
 80020c4:	686c      	ldr	r4, [r5, #4]
 80020c6:	89a3      	ldrh	r3, [r4, #12]
 80020c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020cc:	0719      	lsls	r1, r3, #28
 80020ce:	d42c      	bmi.n	800212a <__swsetup_r+0x82>
 80020d0:	06dd      	lsls	r5, r3, #27
 80020d2:	d411      	bmi.n	80020f8 <__swsetup_r+0x50>
 80020d4:	2309      	movs	r3, #9
 80020d6:	6033      	str	r3, [r6, #0]
 80020d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020e0:	81a3      	strh	r3, [r4, #12]
 80020e2:	e03e      	b.n	8002162 <__swsetup_r+0xba>
 80020e4:	4b25      	ldr	r3, [pc, #148]	; (800217c <__swsetup_r+0xd4>)
 80020e6:	429c      	cmp	r4, r3
 80020e8:	d101      	bne.n	80020ee <__swsetup_r+0x46>
 80020ea:	68ac      	ldr	r4, [r5, #8]
 80020ec:	e7eb      	b.n	80020c6 <__swsetup_r+0x1e>
 80020ee:	4b24      	ldr	r3, [pc, #144]	; (8002180 <__swsetup_r+0xd8>)
 80020f0:	429c      	cmp	r4, r3
 80020f2:	bf08      	it	eq
 80020f4:	68ec      	ldreq	r4, [r5, #12]
 80020f6:	e7e6      	b.n	80020c6 <__swsetup_r+0x1e>
 80020f8:	0758      	lsls	r0, r3, #29
 80020fa:	d512      	bpl.n	8002122 <__swsetup_r+0x7a>
 80020fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020fe:	b141      	cbz	r1, 8002112 <__swsetup_r+0x6a>
 8002100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002104:	4299      	cmp	r1, r3
 8002106:	d002      	beq.n	800210e <__swsetup_r+0x66>
 8002108:	4630      	mov	r0, r6
 800210a:	f000 fa57 	bl	80025bc <_free_r>
 800210e:	2300      	movs	r3, #0
 8002110:	6363      	str	r3, [r4, #52]	; 0x34
 8002112:	89a3      	ldrh	r3, [r4, #12]
 8002114:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002118:	81a3      	strh	r3, [r4, #12]
 800211a:	2300      	movs	r3, #0
 800211c:	6063      	str	r3, [r4, #4]
 800211e:	6923      	ldr	r3, [r4, #16]
 8002120:	6023      	str	r3, [r4, #0]
 8002122:	89a3      	ldrh	r3, [r4, #12]
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	81a3      	strh	r3, [r4, #12]
 800212a:	6923      	ldr	r3, [r4, #16]
 800212c:	b94b      	cbnz	r3, 8002142 <__swsetup_r+0x9a>
 800212e:	89a3      	ldrh	r3, [r4, #12]
 8002130:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002138:	d003      	beq.n	8002142 <__swsetup_r+0x9a>
 800213a:	4621      	mov	r1, r4
 800213c:	4630      	mov	r0, r6
 800213e:	f000 f9fd 	bl	800253c <__smakebuf_r>
 8002142:	89a0      	ldrh	r0, [r4, #12]
 8002144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002148:	f010 0301 	ands.w	r3, r0, #1
 800214c:	d00a      	beq.n	8002164 <__swsetup_r+0xbc>
 800214e:	2300      	movs	r3, #0
 8002150:	60a3      	str	r3, [r4, #8]
 8002152:	6963      	ldr	r3, [r4, #20]
 8002154:	425b      	negs	r3, r3
 8002156:	61a3      	str	r3, [r4, #24]
 8002158:	6923      	ldr	r3, [r4, #16]
 800215a:	b943      	cbnz	r3, 800216e <__swsetup_r+0xc6>
 800215c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002160:	d1ba      	bne.n	80020d8 <__swsetup_r+0x30>
 8002162:	bd70      	pop	{r4, r5, r6, pc}
 8002164:	0781      	lsls	r1, r0, #30
 8002166:	bf58      	it	pl
 8002168:	6963      	ldrpl	r3, [r4, #20]
 800216a:	60a3      	str	r3, [r4, #8]
 800216c:	e7f4      	b.n	8002158 <__swsetup_r+0xb0>
 800216e:	2000      	movs	r0, #0
 8002170:	e7f7      	b.n	8002162 <__swsetup_r+0xba>
 8002172:	bf00      	nop
 8002174:	2000000c 	.word	0x2000000c
 8002178:	08002970 	.word	0x08002970
 800217c:	08002990 	.word	0x08002990
 8002180:	08002950 	.word	0x08002950

08002184 <__sflush_r>:
 8002184:	898a      	ldrh	r2, [r1, #12]
 8002186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002188:	4605      	mov	r5, r0
 800218a:	0710      	lsls	r0, r2, #28
 800218c:	460c      	mov	r4, r1
 800218e:	d457      	bmi.n	8002240 <__sflush_r+0xbc>
 8002190:	684b      	ldr	r3, [r1, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	dc04      	bgt.n	80021a0 <__sflush_r+0x1c>
 8002196:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	dc01      	bgt.n	80021a0 <__sflush_r+0x1c>
 800219c:	2000      	movs	r0, #0
 800219e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021a2:	2e00      	cmp	r6, #0
 80021a4:	d0fa      	beq.n	800219c <__sflush_r+0x18>
 80021a6:	2300      	movs	r3, #0
 80021a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80021ac:	682f      	ldr	r7, [r5, #0]
 80021ae:	602b      	str	r3, [r5, #0]
 80021b0:	d032      	beq.n	8002218 <__sflush_r+0x94>
 80021b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80021b4:	89a3      	ldrh	r3, [r4, #12]
 80021b6:	075a      	lsls	r2, r3, #29
 80021b8:	d505      	bpl.n	80021c6 <__sflush_r+0x42>
 80021ba:	6863      	ldr	r3, [r4, #4]
 80021bc:	1ac0      	subs	r0, r0, r3
 80021be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021c0:	b10b      	cbz	r3, 80021c6 <__sflush_r+0x42>
 80021c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021c4:	1ac0      	subs	r0, r0, r3
 80021c6:	2300      	movs	r3, #0
 80021c8:	4602      	mov	r2, r0
 80021ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021cc:	4628      	mov	r0, r5
 80021ce:	6a21      	ldr	r1, [r4, #32]
 80021d0:	47b0      	blx	r6
 80021d2:	1c43      	adds	r3, r0, #1
 80021d4:	89a3      	ldrh	r3, [r4, #12]
 80021d6:	d106      	bne.n	80021e6 <__sflush_r+0x62>
 80021d8:	6829      	ldr	r1, [r5, #0]
 80021da:	291d      	cmp	r1, #29
 80021dc:	d82c      	bhi.n	8002238 <__sflush_r+0xb4>
 80021de:	4a29      	ldr	r2, [pc, #164]	; (8002284 <__sflush_r+0x100>)
 80021e0:	40ca      	lsrs	r2, r1
 80021e2:	07d6      	lsls	r6, r2, #31
 80021e4:	d528      	bpl.n	8002238 <__sflush_r+0xb4>
 80021e6:	2200      	movs	r2, #0
 80021e8:	6062      	str	r2, [r4, #4]
 80021ea:	6922      	ldr	r2, [r4, #16]
 80021ec:	04d9      	lsls	r1, r3, #19
 80021ee:	6022      	str	r2, [r4, #0]
 80021f0:	d504      	bpl.n	80021fc <__sflush_r+0x78>
 80021f2:	1c42      	adds	r2, r0, #1
 80021f4:	d101      	bne.n	80021fa <__sflush_r+0x76>
 80021f6:	682b      	ldr	r3, [r5, #0]
 80021f8:	b903      	cbnz	r3, 80021fc <__sflush_r+0x78>
 80021fa:	6560      	str	r0, [r4, #84]	; 0x54
 80021fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021fe:	602f      	str	r7, [r5, #0]
 8002200:	2900      	cmp	r1, #0
 8002202:	d0cb      	beq.n	800219c <__sflush_r+0x18>
 8002204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002208:	4299      	cmp	r1, r3
 800220a:	d002      	beq.n	8002212 <__sflush_r+0x8e>
 800220c:	4628      	mov	r0, r5
 800220e:	f000 f9d5 	bl	80025bc <_free_r>
 8002212:	2000      	movs	r0, #0
 8002214:	6360      	str	r0, [r4, #52]	; 0x34
 8002216:	e7c2      	b.n	800219e <__sflush_r+0x1a>
 8002218:	6a21      	ldr	r1, [r4, #32]
 800221a:	2301      	movs	r3, #1
 800221c:	4628      	mov	r0, r5
 800221e:	47b0      	blx	r6
 8002220:	1c41      	adds	r1, r0, #1
 8002222:	d1c7      	bne.n	80021b4 <__sflush_r+0x30>
 8002224:	682b      	ldr	r3, [r5, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0c4      	beq.n	80021b4 <__sflush_r+0x30>
 800222a:	2b1d      	cmp	r3, #29
 800222c:	d001      	beq.n	8002232 <__sflush_r+0xae>
 800222e:	2b16      	cmp	r3, #22
 8002230:	d101      	bne.n	8002236 <__sflush_r+0xb2>
 8002232:	602f      	str	r7, [r5, #0]
 8002234:	e7b2      	b.n	800219c <__sflush_r+0x18>
 8002236:	89a3      	ldrh	r3, [r4, #12]
 8002238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800223c:	81a3      	strh	r3, [r4, #12]
 800223e:	e7ae      	b.n	800219e <__sflush_r+0x1a>
 8002240:	690f      	ldr	r7, [r1, #16]
 8002242:	2f00      	cmp	r7, #0
 8002244:	d0aa      	beq.n	800219c <__sflush_r+0x18>
 8002246:	0793      	lsls	r3, r2, #30
 8002248:	bf18      	it	ne
 800224a:	2300      	movne	r3, #0
 800224c:	680e      	ldr	r6, [r1, #0]
 800224e:	bf08      	it	eq
 8002250:	694b      	ldreq	r3, [r1, #20]
 8002252:	1bf6      	subs	r6, r6, r7
 8002254:	600f      	str	r7, [r1, #0]
 8002256:	608b      	str	r3, [r1, #8]
 8002258:	2e00      	cmp	r6, #0
 800225a:	dd9f      	ble.n	800219c <__sflush_r+0x18>
 800225c:	4633      	mov	r3, r6
 800225e:	463a      	mov	r2, r7
 8002260:	4628      	mov	r0, r5
 8002262:	6a21      	ldr	r1, [r4, #32]
 8002264:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002268:	47e0      	blx	ip
 800226a:	2800      	cmp	r0, #0
 800226c:	dc06      	bgt.n	800227c <__sflush_r+0xf8>
 800226e:	89a3      	ldrh	r3, [r4, #12]
 8002270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002278:	81a3      	strh	r3, [r4, #12]
 800227a:	e790      	b.n	800219e <__sflush_r+0x1a>
 800227c:	4407      	add	r7, r0
 800227e:	1a36      	subs	r6, r6, r0
 8002280:	e7ea      	b.n	8002258 <__sflush_r+0xd4>
 8002282:	bf00      	nop
 8002284:	20400001 	.word	0x20400001

08002288 <_fflush_r>:
 8002288:	b538      	push	{r3, r4, r5, lr}
 800228a:	690b      	ldr	r3, [r1, #16]
 800228c:	4605      	mov	r5, r0
 800228e:	460c      	mov	r4, r1
 8002290:	b913      	cbnz	r3, 8002298 <_fflush_r+0x10>
 8002292:	2500      	movs	r5, #0
 8002294:	4628      	mov	r0, r5
 8002296:	bd38      	pop	{r3, r4, r5, pc}
 8002298:	b118      	cbz	r0, 80022a2 <_fflush_r+0x1a>
 800229a:	6983      	ldr	r3, [r0, #24]
 800229c:	b90b      	cbnz	r3, 80022a2 <_fflush_r+0x1a>
 800229e:	f000 f887 	bl	80023b0 <__sinit>
 80022a2:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <_fflush_r+0x6c>)
 80022a4:	429c      	cmp	r4, r3
 80022a6:	d11b      	bne.n	80022e0 <_fflush_r+0x58>
 80022a8:	686c      	ldr	r4, [r5, #4]
 80022aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0ef      	beq.n	8002292 <_fflush_r+0xa>
 80022b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80022b4:	07d0      	lsls	r0, r2, #31
 80022b6:	d404      	bmi.n	80022c2 <_fflush_r+0x3a>
 80022b8:	0599      	lsls	r1, r3, #22
 80022ba:	d402      	bmi.n	80022c2 <_fflush_r+0x3a>
 80022bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022be:	f000 f915 	bl	80024ec <__retarget_lock_acquire_recursive>
 80022c2:	4628      	mov	r0, r5
 80022c4:	4621      	mov	r1, r4
 80022c6:	f7ff ff5d 	bl	8002184 <__sflush_r>
 80022ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022cc:	4605      	mov	r5, r0
 80022ce:	07da      	lsls	r2, r3, #31
 80022d0:	d4e0      	bmi.n	8002294 <_fflush_r+0xc>
 80022d2:	89a3      	ldrh	r3, [r4, #12]
 80022d4:	059b      	lsls	r3, r3, #22
 80022d6:	d4dd      	bmi.n	8002294 <_fflush_r+0xc>
 80022d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022da:	f000 f908 	bl	80024ee <__retarget_lock_release_recursive>
 80022de:	e7d9      	b.n	8002294 <_fflush_r+0xc>
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <_fflush_r+0x70>)
 80022e2:	429c      	cmp	r4, r3
 80022e4:	d101      	bne.n	80022ea <_fflush_r+0x62>
 80022e6:	68ac      	ldr	r4, [r5, #8]
 80022e8:	e7df      	b.n	80022aa <_fflush_r+0x22>
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <_fflush_r+0x74>)
 80022ec:	429c      	cmp	r4, r3
 80022ee:	bf08      	it	eq
 80022f0:	68ec      	ldreq	r4, [r5, #12]
 80022f2:	e7da      	b.n	80022aa <_fflush_r+0x22>
 80022f4:	08002970 	.word	0x08002970
 80022f8:	08002990 	.word	0x08002990
 80022fc:	08002950 	.word	0x08002950

08002300 <std>:
 8002300:	2300      	movs	r3, #0
 8002302:	b510      	push	{r4, lr}
 8002304:	4604      	mov	r4, r0
 8002306:	e9c0 3300 	strd	r3, r3, [r0]
 800230a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800230e:	6083      	str	r3, [r0, #8]
 8002310:	8181      	strh	r1, [r0, #12]
 8002312:	6643      	str	r3, [r0, #100]	; 0x64
 8002314:	81c2      	strh	r2, [r0, #14]
 8002316:	6183      	str	r3, [r0, #24]
 8002318:	4619      	mov	r1, r3
 800231a:	2208      	movs	r2, #8
 800231c:	305c      	adds	r0, #92	; 0x5c
 800231e:	f7ff fdf3 	bl	8001f08 <memset>
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <std+0x38>)
 8002324:	6224      	str	r4, [r4, #32]
 8002326:	6263      	str	r3, [r4, #36]	; 0x24
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <std+0x3c>)
 800232a:	62a3      	str	r3, [r4, #40]	; 0x28
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <std+0x40>)
 800232e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <std+0x44>)
 8002332:	6323      	str	r3, [r4, #48]	; 0x30
 8002334:	bd10      	pop	{r4, pc}
 8002336:	bf00      	nop
 8002338:	08002795 	.word	0x08002795
 800233c:	080027b7 	.word	0x080027b7
 8002340:	080027ef 	.word	0x080027ef
 8002344:	08002813 	.word	0x08002813

08002348 <_cleanup_r>:
 8002348:	4901      	ldr	r1, [pc, #4]	; (8002350 <_cleanup_r+0x8>)
 800234a:	f000 b8af 	b.w	80024ac <_fwalk_reent>
 800234e:	bf00      	nop
 8002350:	08002289 	.word	0x08002289

08002354 <__sfmoreglue>:
 8002354:	2268      	movs	r2, #104	; 0x68
 8002356:	b570      	push	{r4, r5, r6, lr}
 8002358:	1e4d      	subs	r5, r1, #1
 800235a:	4355      	muls	r5, r2
 800235c:	460e      	mov	r6, r1
 800235e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002362:	f000 f993 	bl	800268c <_malloc_r>
 8002366:	4604      	mov	r4, r0
 8002368:	b140      	cbz	r0, 800237c <__sfmoreglue+0x28>
 800236a:	2100      	movs	r1, #0
 800236c:	e9c0 1600 	strd	r1, r6, [r0]
 8002370:	300c      	adds	r0, #12
 8002372:	60a0      	str	r0, [r4, #8]
 8002374:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002378:	f7ff fdc6 	bl	8001f08 <memset>
 800237c:	4620      	mov	r0, r4
 800237e:	bd70      	pop	{r4, r5, r6, pc}

08002380 <__sfp_lock_acquire>:
 8002380:	4801      	ldr	r0, [pc, #4]	; (8002388 <__sfp_lock_acquire+0x8>)
 8002382:	f000 b8b3 	b.w	80024ec <__retarget_lock_acquire_recursive>
 8002386:	bf00      	nop
 8002388:	200000dd 	.word	0x200000dd

0800238c <__sfp_lock_release>:
 800238c:	4801      	ldr	r0, [pc, #4]	; (8002394 <__sfp_lock_release+0x8>)
 800238e:	f000 b8ae 	b.w	80024ee <__retarget_lock_release_recursive>
 8002392:	bf00      	nop
 8002394:	200000dd 	.word	0x200000dd

08002398 <__sinit_lock_acquire>:
 8002398:	4801      	ldr	r0, [pc, #4]	; (80023a0 <__sinit_lock_acquire+0x8>)
 800239a:	f000 b8a7 	b.w	80024ec <__retarget_lock_acquire_recursive>
 800239e:	bf00      	nop
 80023a0:	200000de 	.word	0x200000de

080023a4 <__sinit_lock_release>:
 80023a4:	4801      	ldr	r0, [pc, #4]	; (80023ac <__sinit_lock_release+0x8>)
 80023a6:	f000 b8a2 	b.w	80024ee <__retarget_lock_release_recursive>
 80023aa:	bf00      	nop
 80023ac:	200000de 	.word	0x200000de

080023b0 <__sinit>:
 80023b0:	b510      	push	{r4, lr}
 80023b2:	4604      	mov	r4, r0
 80023b4:	f7ff fff0 	bl	8002398 <__sinit_lock_acquire>
 80023b8:	69a3      	ldr	r3, [r4, #24]
 80023ba:	b11b      	cbz	r3, 80023c4 <__sinit+0x14>
 80023bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023c0:	f7ff bff0 	b.w	80023a4 <__sinit_lock_release>
 80023c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80023c8:	6523      	str	r3, [r4, #80]	; 0x50
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <__sinit+0x68>)
 80023cc:	4a13      	ldr	r2, [pc, #76]	; (800241c <__sinit+0x6c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80023d2:	42a3      	cmp	r3, r4
 80023d4:	bf08      	it	eq
 80023d6:	2301      	moveq	r3, #1
 80023d8:	4620      	mov	r0, r4
 80023da:	bf08      	it	eq
 80023dc:	61a3      	streq	r3, [r4, #24]
 80023de:	f000 f81f 	bl	8002420 <__sfp>
 80023e2:	6060      	str	r0, [r4, #4]
 80023e4:	4620      	mov	r0, r4
 80023e6:	f000 f81b 	bl	8002420 <__sfp>
 80023ea:	60a0      	str	r0, [r4, #8]
 80023ec:	4620      	mov	r0, r4
 80023ee:	f000 f817 	bl	8002420 <__sfp>
 80023f2:	2200      	movs	r2, #0
 80023f4:	2104      	movs	r1, #4
 80023f6:	60e0      	str	r0, [r4, #12]
 80023f8:	6860      	ldr	r0, [r4, #4]
 80023fa:	f7ff ff81 	bl	8002300 <std>
 80023fe:	2201      	movs	r2, #1
 8002400:	2109      	movs	r1, #9
 8002402:	68a0      	ldr	r0, [r4, #8]
 8002404:	f7ff ff7c 	bl	8002300 <std>
 8002408:	2202      	movs	r2, #2
 800240a:	2112      	movs	r1, #18
 800240c:	68e0      	ldr	r0, [r4, #12]
 800240e:	f7ff ff77 	bl	8002300 <std>
 8002412:	2301      	movs	r3, #1
 8002414:	61a3      	str	r3, [r4, #24]
 8002416:	e7d1      	b.n	80023bc <__sinit+0xc>
 8002418:	0800294c 	.word	0x0800294c
 800241c:	08002349 	.word	0x08002349

08002420 <__sfp>:
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002422:	4607      	mov	r7, r0
 8002424:	f7ff ffac 	bl	8002380 <__sfp_lock_acquire>
 8002428:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <__sfp+0x84>)
 800242a:	681e      	ldr	r6, [r3, #0]
 800242c:	69b3      	ldr	r3, [r6, #24]
 800242e:	b913      	cbnz	r3, 8002436 <__sfp+0x16>
 8002430:	4630      	mov	r0, r6
 8002432:	f7ff ffbd 	bl	80023b0 <__sinit>
 8002436:	3648      	adds	r6, #72	; 0x48
 8002438:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800243c:	3b01      	subs	r3, #1
 800243e:	d503      	bpl.n	8002448 <__sfp+0x28>
 8002440:	6833      	ldr	r3, [r6, #0]
 8002442:	b30b      	cbz	r3, 8002488 <__sfp+0x68>
 8002444:	6836      	ldr	r6, [r6, #0]
 8002446:	e7f7      	b.n	8002438 <__sfp+0x18>
 8002448:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800244c:	b9d5      	cbnz	r5, 8002484 <__sfp+0x64>
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <__sfp+0x88>)
 8002450:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002454:	60e3      	str	r3, [r4, #12]
 8002456:	6665      	str	r5, [r4, #100]	; 0x64
 8002458:	f000 f847 	bl	80024ea <__retarget_lock_init_recursive>
 800245c:	f7ff ff96 	bl	800238c <__sfp_lock_release>
 8002460:	2208      	movs	r2, #8
 8002462:	4629      	mov	r1, r5
 8002464:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002468:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800246c:	6025      	str	r5, [r4, #0]
 800246e:	61a5      	str	r5, [r4, #24]
 8002470:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002474:	f7ff fd48 	bl	8001f08 <memset>
 8002478:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800247c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002480:	4620      	mov	r0, r4
 8002482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002484:	3468      	adds	r4, #104	; 0x68
 8002486:	e7d9      	b.n	800243c <__sfp+0x1c>
 8002488:	2104      	movs	r1, #4
 800248a:	4638      	mov	r0, r7
 800248c:	f7ff ff62 	bl	8002354 <__sfmoreglue>
 8002490:	4604      	mov	r4, r0
 8002492:	6030      	str	r0, [r6, #0]
 8002494:	2800      	cmp	r0, #0
 8002496:	d1d5      	bne.n	8002444 <__sfp+0x24>
 8002498:	f7ff ff78 	bl	800238c <__sfp_lock_release>
 800249c:	230c      	movs	r3, #12
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	e7ee      	b.n	8002480 <__sfp+0x60>
 80024a2:	bf00      	nop
 80024a4:	0800294c 	.word	0x0800294c
 80024a8:	ffff0001 	.word	0xffff0001

080024ac <_fwalk_reent>:
 80024ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024b0:	4606      	mov	r6, r0
 80024b2:	4688      	mov	r8, r1
 80024b4:	2700      	movs	r7, #0
 80024b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80024ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80024be:	f1b9 0901 	subs.w	r9, r9, #1
 80024c2:	d505      	bpl.n	80024d0 <_fwalk_reent+0x24>
 80024c4:	6824      	ldr	r4, [r4, #0]
 80024c6:	2c00      	cmp	r4, #0
 80024c8:	d1f7      	bne.n	80024ba <_fwalk_reent+0xe>
 80024ca:	4638      	mov	r0, r7
 80024cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024d0:	89ab      	ldrh	r3, [r5, #12]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d907      	bls.n	80024e6 <_fwalk_reent+0x3a>
 80024d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024da:	3301      	adds	r3, #1
 80024dc:	d003      	beq.n	80024e6 <_fwalk_reent+0x3a>
 80024de:	4629      	mov	r1, r5
 80024e0:	4630      	mov	r0, r6
 80024e2:	47c0      	blx	r8
 80024e4:	4307      	orrs	r7, r0
 80024e6:	3568      	adds	r5, #104	; 0x68
 80024e8:	e7e9      	b.n	80024be <_fwalk_reent+0x12>

080024ea <__retarget_lock_init_recursive>:
 80024ea:	4770      	bx	lr

080024ec <__retarget_lock_acquire_recursive>:
 80024ec:	4770      	bx	lr

080024ee <__retarget_lock_release_recursive>:
 80024ee:	4770      	bx	lr

080024f0 <__swhatbuf_r>:
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	460e      	mov	r6, r1
 80024f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024f8:	4614      	mov	r4, r2
 80024fa:	2900      	cmp	r1, #0
 80024fc:	461d      	mov	r5, r3
 80024fe:	b096      	sub	sp, #88	; 0x58
 8002500:	da08      	bge.n	8002514 <__swhatbuf_r+0x24>
 8002502:	2200      	movs	r2, #0
 8002504:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002508:	602a      	str	r2, [r5, #0]
 800250a:	061a      	lsls	r2, r3, #24
 800250c:	d410      	bmi.n	8002530 <__swhatbuf_r+0x40>
 800250e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002512:	e00e      	b.n	8002532 <__swhatbuf_r+0x42>
 8002514:	466a      	mov	r2, sp
 8002516:	f000 f9a3 	bl	8002860 <_fstat_r>
 800251a:	2800      	cmp	r0, #0
 800251c:	dbf1      	blt.n	8002502 <__swhatbuf_r+0x12>
 800251e:	9a01      	ldr	r2, [sp, #4]
 8002520:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002524:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002528:	425a      	negs	r2, r3
 800252a:	415a      	adcs	r2, r3
 800252c:	602a      	str	r2, [r5, #0]
 800252e:	e7ee      	b.n	800250e <__swhatbuf_r+0x1e>
 8002530:	2340      	movs	r3, #64	; 0x40
 8002532:	2000      	movs	r0, #0
 8002534:	6023      	str	r3, [r4, #0]
 8002536:	b016      	add	sp, #88	; 0x58
 8002538:	bd70      	pop	{r4, r5, r6, pc}
	...

0800253c <__smakebuf_r>:
 800253c:	898b      	ldrh	r3, [r1, #12]
 800253e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002540:	079d      	lsls	r5, r3, #30
 8002542:	4606      	mov	r6, r0
 8002544:	460c      	mov	r4, r1
 8002546:	d507      	bpl.n	8002558 <__smakebuf_r+0x1c>
 8002548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800254c:	6023      	str	r3, [r4, #0]
 800254e:	6123      	str	r3, [r4, #16]
 8002550:	2301      	movs	r3, #1
 8002552:	6163      	str	r3, [r4, #20]
 8002554:	b002      	add	sp, #8
 8002556:	bd70      	pop	{r4, r5, r6, pc}
 8002558:	466a      	mov	r2, sp
 800255a:	ab01      	add	r3, sp, #4
 800255c:	f7ff ffc8 	bl	80024f0 <__swhatbuf_r>
 8002560:	9900      	ldr	r1, [sp, #0]
 8002562:	4605      	mov	r5, r0
 8002564:	4630      	mov	r0, r6
 8002566:	f000 f891 	bl	800268c <_malloc_r>
 800256a:	b948      	cbnz	r0, 8002580 <__smakebuf_r+0x44>
 800256c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002570:	059a      	lsls	r2, r3, #22
 8002572:	d4ef      	bmi.n	8002554 <__smakebuf_r+0x18>
 8002574:	f023 0303 	bic.w	r3, r3, #3
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	81a3      	strh	r3, [r4, #12]
 800257e:	e7e3      	b.n	8002548 <__smakebuf_r+0xc>
 8002580:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <__smakebuf_r+0x7c>)
 8002582:	62b3      	str	r3, [r6, #40]	; 0x28
 8002584:	89a3      	ldrh	r3, [r4, #12]
 8002586:	6020      	str	r0, [r4, #0]
 8002588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800258c:	81a3      	strh	r3, [r4, #12]
 800258e:	9b00      	ldr	r3, [sp, #0]
 8002590:	6120      	str	r0, [r4, #16]
 8002592:	6163      	str	r3, [r4, #20]
 8002594:	9b01      	ldr	r3, [sp, #4]
 8002596:	b15b      	cbz	r3, 80025b0 <__smakebuf_r+0x74>
 8002598:	4630      	mov	r0, r6
 800259a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800259e:	f000 f971 	bl	8002884 <_isatty_r>
 80025a2:	b128      	cbz	r0, 80025b0 <__smakebuf_r+0x74>
 80025a4:	89a3      	ldrh	r3, [r4, #12]
 80025a6:	f023 0303 	bic.w	r3, r3, #3
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	81a3      	strh	r3, [r4, #12]
 80025b0:	89a0      	ldrh	r0, [r4, #12]
 80025b2:	4305      	orrs	r5, r0
 80025b4:	81a5      	strh	r5, [r4, #12]
 80025b6:	e7cd      	b.n	8002554 <__smakebuf_r+0x18>
 80025b8:	08002349 	.word	0x08002349

080025bc <_free_r>:
 80025bc:	b538      	push	{r3, r4, r5, lr}
 80025be:	4605      	mov	r5, r0
 80025c0:	2900      	cmp	r1, #0
 80025c2:	d040      	beq.n	8002646 <_free_r+0x8a>
 80025c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025c8:	1f0c      	subs	r4, r1, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bfb8      	it	lt
 80025ce:	18e4      	addlt	r4, r4, r3
 80025d0:	f000 f97a 	bl	80028c8 <__malloc_lock>
 80025d4:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <_free_r+0x8c>)
 80025d6:	6813      	ldr	r3, [r2, #0]
 80025d8:	b933      	cbnz	r3, 80025e8 <_free_r+0x2c>
 80025da:	6063      	str	r3, [r4, #4]
 80025dc:	6014      	str	r4, [r2, #0]
 80025de:	4628      	mov	r0, r5
 80025e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025e4:	f000 b976 	b.w	80028d4 <__malloc_unlock>
 80025e8:	42a3      	cmp	r3, r4
 80025ea:	d908      	bls.n	80025fe <_free_r+0x42>
 80025ec:	6820      	ldr	r0, [r4, #0]
 80025ee:	1821      	adds	r1, r4, r0
 80025f0:	428b      	cmp	r3, r1
 80025f2:	bf01      	itttt	eq
 80025f4:	6819      	ldreq	r1, [r3, #0]
 80025f6:	685b      	ldreq	r3, [r3, #4]
 80025f8:	1809      	addeq	r1, r1, r0
 80025fa:	6021      	streq	r1, [r4, #0]
 80025fc:	e7ed      	b.n	80025da <_free_r+0x1e>
 80025fe:	461a      	mov	r2, r3
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	b10b      	cbz	r3, 8002608 <_free_r+0x4c>
 8002604:	42a3      	cmp	r3, r4
 8002606:	d9fa      	bls.n	80025fe <_free_r+0x42>
 8002608:	6811      	ldr	r1, [r2, #0]
 800260a:	1850      	adds	r0, r2, r1
 800260c:	42a0      	cmp	r0, r4
 800260e:	d10b      	bne.n	8002628 <_free_r+0x6c>
 8002610:	6820      	ldr	r0, [r4, #0]
 8002612:	4401      	add	r1, r0
 8002614:	1850      	adds	r0, r2, r1
 8002616:	4283      	cmp	r3, r0
 8002618:	6011      	str	r1, [r2, #0]
 800261a:	d1e0      	bne.n	80025de <_free_r+0x22>
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4401      	add	r1, r0
 8002622:	6011      	str	r1, [r2, #0]
 8002624:	6053      	str	r3, [r2, #4]
 8002626:	e7da      	b.n	80025de <_free_r+0x22>
 8002628:	d902      	bls.n	8002630 <_free_r+0x74>
 800262a:	230c      	movs	r3, #12
 800262c:	602b      	str	r3, [r5, #0]
 800262e:	e7d6      	b.n	80025de <_free_r+0x22>
 8002630:	6820      	ldr	r0, [r4, #0]
 8002632:	1821      	adds	r1, r4, r0
 8002634:	428b      	cmp	r3, r1
 8002636:	bf01      	itttt	eq
 8002638:	6819      	ldreq	r1, [r3, #0]
 800263a:	685b      	ldreq	r3, [r3, #4]
 800263c:	1809      	addeq	r1, r1, r0
 800263e:	6021      	streq	r1, [r4, #0]
 8002640:	6063      	str	r3, [r4, #4]
 8002642:	6054      	str	r4, [r2, #4]
 8002644:	e7cb      	b.n	80025de <_free_r+0x22>
 8002646:	bd38      	pop	{r3, r4, r5, pc}
 8002648:	200000e0 	.word	0x200000e0

0800264c <sbrk_aligned>:
 800264c:	b570      	push	{r4, r5, r6, lr}
 800264e:	4e0e      	ldr	r6, [pc, #56]	; (8002688 <sbrk_aligned+0x3c>)
 8002650:	460c      	mov	r4, r1
 8002652:	6831      	ldr	r1, [r6, #0]
 8002654:	4605      	mov	r5, r0
 8002656:	b911      	cbnz	r1, 800265e <sbrk_aligned+0x12>
 8002658:	f000 f88c 	bl	8002774 <_sbrk_r>
 800265c:	6030      	str	r0, [r6, #0]
 800265e:	4621      	mov	r1, r4
 8002660:	4628      	mov	r0, r5
 8002662:	f000 f887 	bl	8002774 <_sbrk_r>
 8002666:	1c43      	adds	r3, r0, #1
 8002668:	d00a      	beq.n	8002680 <sbrk_aligned+0x34>
 800266a:	1cc4      	adds	r4, r0, #3
 800266c:	f024 0403 	bic.w	r4, r4, #3
 8002670:	42a0      	cmp	r0, r4
 8002672:	d007      	beq.n	8002684 <sbrk_aligned+0x38>
 8002674:	1a21      	subs	r1, r4, r0
 8002676:	4628      	mov	r0, r5
 8002678:	f000 f87c 	bl	8002774 <_sbrk_r>
 800267c:	3001      	adds	r0, #1
 800267e:	d101      	bne.n	8002684 <sbrk_aligned+0x38>
 8002680:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002684:	4620      	mov	r0, r4
 8002686:	bd70      	pop	{r4, r5, r6, pc}
 8002688:	200000e4 	.word	0x200000e4

0800268c <_malloc_r>:
 800268c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002690:	1ccd      	adds	r5, r1, #3
 8002692:	f025 0503 	bic.w	r5, r5, #3
 8002696:	3508      	adds	r5, #8
 8002698:	2d0c      	cmp	r5, #12
 800269a:	bf38      	it	cc
 800269c:	250c      	movcc	r5, #12
 800269e:	2d00      	cmp	r5, #0
 80026a0:	4607      	mov	r7, r0
 80026a2:	db01      	blt.n	80026a8 <_malloc_r+0x1c>
 80026a4:	42a9      	cmp	r1, r5
 80026a6:	d905      	bls.n	80026b4 <_malloc_r+0x28>
 80026a8:	230c      	movs	r3, #12
 80026aa:	2600      	movs	r6, #0
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	4630      	mov	r0, r6
 80026b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026b4:	4e2e      	ldr	r6, [pc, #184]	; (8002770 <_malloc_r+0xe4>)
 80026b6:	f000 f907 	bl	80028c8 <__malloc_lock>
 80026ba:	6833      	ldr	r3, [r6, #0]
 80026bc:	461c      	mov	r4, r3
 80026be:	bb34      	cbnz	r4, 800270e <_malloc_r+0x82>
 80026c0:	4629      	mov	r1, r5
 80026c2:	4638      	mov	r0, r7
 80026c4:	f7ff ffc2 	bl	800264c <sbrk_aligned>
 80026c8:	1c43      	adds	r3, r0, #1
 80026ca:	4604      	mov	r4, r0
 80026cc:	d14d      	bne.n	800276a <_malloc_r+0xde>
 80026ce:	6834      	ldr	r4, [r6, #0]
 80026d0:	4626      	mov	r6, r4
 80026d2:	2e00      	cmp	r6, #0
 80026d4:	d140      	bne.n	8002758 <_malloc_r+0xcc>
 80026d6:	6823      	ldr	r3, [r4, #0]
 80026d8:	4631      	mov	r1, r6
 80026da:	4638      	mov	r0, r7
 80026dc:	eb04 0803 	add.w	r8, r4, r3
 80026e0:	f000 f848 	bl	8002774 <_sbrk_r>
 80026e4:	4580      	cmp	r8, r0
 80026e6:	d13a      	bne.n	800275e <_malloc_r+0xd2>
 80026e8:	6821      	ldr	r1, [r4, #0]
 80026ea:	3503      	adds	r5, #3
 80026ec:	1a6d      	subs	r5, r5, r1
 80026ee:	f025 0503 	bic.w	r5, r5, #3
 80026f2:	3508      	adds	r5, #8
 80026f4:	2d0c      	cmp	r5, #12
 80026f6:	bf38      	it	cc
 80026f8:	250c      	movcc	r5, #12
 80026fa:	4638      	mov	r0, r7
 80026fc:	4629      	mov	r1, r5
 80026fe:	f7ff ffa5 	bl	800264c <sbrk_aligned>
 8002702:	3001      	adds	r0, #1
 8002704:	d02b      	beq.n	800275e <_malloc_r+0xd2>
 8002706:	6823      	ldr	r3, [r4, #0]
 8002708:	442b      	add	r3, r5
 800270a:	6023      	str	r3, [r4, #0]
 800270c:	e00e      	b.n	800272c <_malloc_r+0xa0>
 800270e:	6822      	ldr	r2, [r4, #0]
 8002710:	1b52      	subs	r2, r2, r5
 8002712:	d41e      	bmi.n	8002752 <_malloc_r+0xc6>
 8002714:	2a0b      	cmp	r2, #11
 8002716:	d916      	bls.n	8002746 <_malloc_r+0xba>
 8002718:	1961      	adds	r1, r4, r5
 800271a:	42a3      	cmp	r3, r4
 800271c:	6025      	str	r5, [r4, #0]
 800271e:	bf18      	it	ne
 8002720:	6059      	strne	r1, [r3, #4]
 8002722:	6863      	ldr	r3, [r4, #4]
 8002724:	bf08      	it	eq
 8002726:	6031      	streq	r1, [r6, #0]
 8002728:	5162      	str	r2, [r4, r5]
 800272a:	604b      	str	r3, [r1, #4]
 800272c:	4638      	mov	r0, r7
 800272e:	f104 060b 	add.w	r6, r4, #11
 8002732:	f000 f8cf 	bl	80028d4 <__malloc_unlock>
 8002736:	f026 0607 	bic.w	r6, r6, #7
 800273a:	1d23      	adds	r3, r4, #4
 800273c:	1af2      	subs	r2, r6, r3
 800273e:	d0b6      	beq.n	80026ae <_malloc_r+0x22>
 8002740:	1b9b      	subs	r3, r3, r6
 8002742:	50a3      	str	r3, [r4, r2]
 8002744:	e7b3      	b.n	80026ae <_malloc_r+0x22>
 8002746:	6862      	ldr	r2, [r4, #4]
 8002748:	42a3      	cmp	r3, r4
 800274a:	bf0c      	ite	eq
 800274c:	6032      	streq	r2, [r6, #0]
 800274e:	605a      	strne	r2, [r3, #4]
 8002750:	e7ec      	b.n	800272c <_malloc_r+0xa0>
 8002752:	4623      	mov	r3, r4
 8002754:	6864      	ldr	r4, [r4, #4]
 8002756:	e7b2      	b.n	80026be <_malloc_r+0x32>
 8002758:	4634      	mov	r4, r6
 800275a:	6876      	ldr	r6, [r6, #4]
 800275c:	e7b9      	b.n	80026d2 <_malloc_r+0x46>
 800275e:	230c      	movs	r3, #12
 8002760:	4638      	mov	r0, r7
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	f000 f8b6 	bl	80028d4 <__malloc_unlock>
 8002768:	e7a1      	b.n	80026ae <_malloc_r+0x22>
 800276a:	6025      	str	r5, [r4, #0]
 800276c:	e7de      	b.n	800272c <_malloc_r+0xa0>
 800276e:	bf00      	nop
 8002770:	200000e0 	.word	0x200000e0

08002774 <_sbrk_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	2300      	movs	r3, #0
 8002778:	4d05      	ldr	r5, [pc, #20]	; (8002790 <_sbrk_r+0x1c>)
 800277a:	4604      	mov	r4, r0
 800277c:	4608      	mov	r0, r1
 800277e:	602b      	str	r3, [r5, #0]
 8002780:	f7fe f826 	bl	80007d0 <_sbrk>
 8002784:	1c43      	adds	r3, r0, #1
 8002786:	d102      	bne.n	800278e <_sbrk_r+0x1a>
 8002788:	682b      	ldr	r3, [r5, #0]
 800278a:	b103      	cbz	r3, 800278e <_sbrk_r+0x1a>
 800278c:	6023      	str	r3, [r4, #0]
 800278e:	bd38      	pop	{r3, r4, r5, pc}
 8002790:	200000e8 	.word	0x200000e8

08002794 <__sread>:
 8002794:	b510      	push	{r4, lr}
 8002796:	460c      	mov	r4, r1
 8002798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800279c:	f000 f8a0 	bl	80028e0 <_read_r>
 80027a0:	2800      	cmp	r0, #0
 80027a2:	bfab      	itete	ge
 80027a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80027a6:	89a3      	ldrhlt	r3, [r4, #12]
 80027a8:	181b      	addge	r3, r3, r0
 80027aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80027ae:	bfac      	ite	ge
 80027b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80027b2:	81a3      	strhlt	r3, [r4, #12]
 80027b4:	bd10      	pop	{r4, pc}

080027b6 <__swrite>:
 80027b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027ba:	461f      	mov	r7, r3
 80027bc:	898b      	ldrh	r3, [r1, #12]
 80027be:	4605      	mov	r5, r0
 80027c0:	05db      	lsls	r3, r3, #23
 80027c2:	460c      	mov	r4, r1
 80027c4:	4616      	mov	r6, r2
 80027c6:	d505      	bpl.n	80027d4 <__swrite+0x1e>
 80027c8:	2302      	movs	r3, #2
 80027ca:	2200      	movs	r2, #0
 80027cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027d0:	f000 f868 	bl	80028a4 <_lseek_r>
 80027d4:	89a3      	ldrh	r3, [r4, #12]
 80027d6:	4632      	mov	r2, r6
 80027d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027dc:	81a3      	strh	r3, [r4, #12]
 80027de:	4628      	mov	r0, r5
 80027e0:	463b      	mov	r3, r7
 80027e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027ea:	f000 b817 	b.w	800281c <_write_r>

080027ee <__sseek>:
 80027ee:	b510      	push	{r4, lr}
 80027f0:	460c      	mov	r4, r1
 80027f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027f6:	f000 f855 	bl	80028a4 <_lseek_r>
 80027fa:	1c43      	adds	r3, r0, #1
 80027fc:	89a3      	ldrh	r3, [r4, #12]
 80027fe:	bf15      	itete	ne
 8002800:	6560      	strne	r0, [r4, #84]	; 0x54
 8002802:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002806:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800280a:	81a3      	strheq	r3, [r4, #12]
 800280c:	bf18      	it	ne
 800280e:	81a3      	strhne	r3, [r4, #12]
 8002810:	bd10      	pop	{r4, pc}

08002812 <__sclose>:
 8002812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002816:	f000 b813 	b.w	8002840 <_close_r>
	...

0800281c <_write_r>:
 800281c:	b538      	push	{r3, r4, r5, lr}
 800281e:	4604      	mov	r4, r0
 8002820:	4608      	mov	r0, r1
 8002822:	4611      	mov	r1, r2
 8002824:	2200      	movs	r2, #0
 8002826:	4d05      	ldr	r5, [pc, #20]	; (800283c <_write_r+0x20>)
 8002828:	602a      	str	r2, [r5, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	f7fd ff8a 	bl	8000744 <_write>
 8002830:	1c43      	adds	r3, r0, #1
 8002832:	d102      	bne.n	800283a <_write_r+0x1e>
 8002834:	682b      	ldr	r3, [r5, #0]
 8002836:	b103      	cbz	r3, 800283a <_write_r+0x1e>
 8002838:	6023      	str	r3, [r4, #0]
 800283a:	bd38      	pop	{r3, r4, r5, pc}
 800283c:	200000e8 	.word	0x200000e8

08002840 <_close_r>:
 8002840:	b538      	push	{r3, r4, r5, lr}
 8002842:	2300      	movs	r3, #0
 8002844:	4d05      	ldr	r5, [pc, #20]	; (800285c <_close_r+0x1c>)
 8002846:	4604      	mov	r4, r0
 8002848:	4608      	mov	r0, r1
 800284a:	602b      	str	r3, [r5, #0]
 800284c:	f7fd ff90 	bl	8000770 <_close>
 8002850:	1c43      	adds	r3, r0, #1
 8002852:	d102      	bne.n	800285a <_close_r+0x1a>
 8002854:	682b      	ldr	r3, [r5, #0]
 8002856:	b103      	cbz	r3, 800285a <_close_r+0x1a>
 8002858:	6023      	str	r3, [r4, #0]
 800285a:	bd38      	pop	{r3, r4, r5, pc}
 800285c:	200000e8 	.word	0x200000e8

08002860 <_fstat_r>:
 8002860:	b538      	push	{r3, r4, r5, lr}
 8002862:	2300      	movs	r3, #0
 8002864:	4d06      	ldr	r5, [pc, #24]	; (8002880 <_fstat_r+0x20>)
 8002866:	4604      	mov	r4, r0
 8002868:	4608      	mov	r0, r1
 800286a:	4611      	mov	r1, r2
 800286c:	602b      	str	r3, [r5, #0]
 800286e:	f7fd ff8a 	bl	8000786 <_fstat>
 8002872:	1c43      	adds	r3, r0, #1
 8002874:	d102      	bne.n	800287c <_fstat_r+0x1c>
 8002876:	682b      	ldr	r3, [r5, #0]
 8002878:	b103      	cbz	r3, 800287c <_fstat_r+0x1c>
 800287a:	6023      	str	r3, [r4, #0]
 800287c:	bd38      	pop	{r3, r4, r5, pc}
 800287e:	bf00      	nop
 8002880:	200000e8 	.word	0x200000e8

08002884 <_isatty_r>:
 8002884:	b538      	push	{r3, r4, r5, lr}
 8002886:	2300      	movs	r3, #0
 8002888:	4d05      	ldr	r5, [pc, #20]	; (80028a0 <_isatty_r+0x1c>)
 800288a:	4604      	mov	r4, r0
 800288c:	4608      	mov	r0, r1
 800288e:	602b      	str	r3, [r5, #0]
 8002890:	f7fd ff88 	bl	80007a4 <_isatty>
 8002894:	1c43      	adds	r3, r0, #1
 8002896:	d102      	bne.n	800289e <_isatty_r+0x1a>
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	b103      	cbz	r3, 800289e <_isatty_r+0x1a>
 800289c:	6023      	str	r3, [r4, #0]
 800289e:	bd38      	pop	{r3, r4, r5, pc}
 80028a0:	200000e8 	.word	0x200000e8

080028a4 <_lseek_r>:
 80028a4:	b538      	push	{r3, r4, r5, lr}
 80028a6:	4604      	mov	r4, r0
 80028a8:	4608      	mov	r0, r1
 80028aa:	4611      	mov	r1, r2
 80028ac:	2200      	movs	r2, #0
 80028ae:	4d05      	ldr	r5, [pc, #20]	; (80028c4 <_lseek_r+0x20>)
 80028b0:	602a      	str	r2, [r5, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	f7fd ff80 	bl	80007b8 <_lseek>
 80028b8:	1c43      	adds	r3, r0, #1
 80028ba:	d102      	bne.n	80028c2 <_lseek_r+0x1e>
 80028bc:	682b      	ldr	r3, [r5, #0]
 80028be:	b103      	cbz	r3, 80028c2 <_lseek_r+0x1e>
 80028c0:	6023      	str	r3, [r4, #0]
 80028c2:	bd38      	pop	{r3, r4, r5, pc}
 80028c4:	200000e8 	.word	0x200000e8

080028c8 <__malloc_lock>:
 80028c8:	4801      	ldr	r0, [pc, #4]	; (80028d0 <__malloc_lock+0x8>)
 80028ca:	f7ff be0f 	b.w	80024ec <__retarget_lock_acquire_recursive>
 80028ce:	bf00      	nop
 80028d0:	200000dc 	.word	0x200000dc

080028d4 <__malloc_unlock>:
 80028d4:	4801      	ldr	r0, [pc, #4]	; (80028dc <__malloc_unlock+0x8>)
 80028d6:	f7ff be0a 	b.w	80024ee <__retarget_lock_release_recursive>
 80028da:	bf00      	nop
 80028dc:	200000dc 	.word	0x200000dc

080028e0 <_read_r>:
 80028e0:	b538      	push	{r3, r4, r5, lr}
 80028e2:	4604      	mov	r4, r0
 80028e4:	4608      	mov	r0, r1
 80028e6:	4611      	mov	r1, r2
 80028e8:	2200      	movs	r2, #0
 80028ea:	4d05      	ldr	r5, [pc, #20]	; (8002900 <_read_r+0x20>)
 80028ec:	602a      	str	r2, [r5, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	f7fd ff0b 	bl	800070a <_read>
 80028f4:	1c43      	adds	r3, r0, #1
 80028f6:	d102      	bne.n	80028fe <_read_r+0x1e>
 80028f8:	682b      	ldr	r3, [r5, #0]
 80028fa:	b103      	cbz	r3, 80028fe <_read_r+0x1e>
 80028fc:	6023      	str	r3, [r4, #0]
 80028fe:	bd38      	pop	{r3, r4, r5, pc}
 8002900:	200000e8 	.word	0x200000e8

08002904 <_init>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	bf00      	nop
 8002908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290a:	bc08      	pop	{r3}
 800290c:	469e      	mov	lr, r3
 800290e:	4770      	bx	lr

08002910 <_fini>:
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002912:	bf00      	nop
 8002914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002916:	bc08      	pop	{r3}
 8002918:	469e      	mov	lr, r3
 800291a:	4770      	bx	lr
