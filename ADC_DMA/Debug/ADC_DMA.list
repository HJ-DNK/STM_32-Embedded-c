
ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038e8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003a24  08003a24  00013a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ae4  08003ae4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ae4  08003ae4  00013ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003aec  08003aec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aec  08003aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af0  08003af0  00013af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  08003b64  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08003b64  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096de  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001adf  00000000  00000000  00029777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0002b258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002bac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163c2  00000000  00000000  0002c290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ba5  00000000  00000000  00042652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000893f8  00000000  00000000  0004c1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d55ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000297c  00000000  00000000  000d5640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08003a0c 	.word	0x08003a0c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08003a0c 	.word	0x08003a0c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	adc_val=buffer;
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <HAL_ADC_ConvCpltCallback+0x24>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a06      	ldr	r2, [pc, #24]	; (80004ac <HAL_ADC_ConvCpltCallback+0x28>)
 8000492:	6013      	str	r3, [r2, #0]
	//HAL_GPIO_TogglePin(BSP_LED1_GPIO_Port, BSP_LED1_Pin);

	printf("%d\n",buffer);
 8000494:	4b04      	ldr	r3, [pc, #16]	; (80004a8 <HAL_ADC_ConvCpltCallback+0x24>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4619      	mov	r1, r3
 800049a:	4805      	ldr	r0, [pc, #20]	; (80004b0 <HAL_ADC_ConvCpltCallback+0x2c>)
 800049c:	f002 fb22 	bl	8002ae4 <iprintf>

	//HAL_ADC_Start_DMA(&hadc,&buffer,1);

}
 80004a0:	bf00      	nop
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000170 	.word	0x20000170
 80004ac:	2000016c 	.word	0x2000016c
 80004b0:	08003a24 	.word	0x08003a24

080004b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b8:	f000 fafb 	bl	8000ab2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004bc:	f000 f812 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c0:	f000 f8fe 	bl	80006c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004c4:	f000 f8de 	bl	8000684 <MX_DMA_Init>
  MX_ADC_Init();
 80004c8:	f000 f85a 	bl	8000580 <MX_ADC_Init>
  MX_USART2_UART_Init();
 80004cc:	f000 f8b0 	bl	8000630 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc,&buffer,sizeof(buffer));
 80004d0:	2204      	movs	r2, #4
 80004d2:	4902      	ldr	r1, [pc, #8]	; (80004dc <main+0x28>)
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <main+0x2c>)
 80004d6:	f000 fca1 	bl	8000e1c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004da:	e7fe      	b.n	80004da <main+0x26>
 80004dc:	20000170 	.word	0x20000170
 80004e0:	2000008c 	.word	0x2000008c

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b092      	sub	sp, #72	; 0x48
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	2234      	movs	r2, #52	; 0x34
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 faee 	bl	8002ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	463b      	mov	r3, r7
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000506:	4b1d      	ldr	r3, [pc, #116]	; (800057c <SystemClock_Config+0x98>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800050e:	4a1b      	ldr	r2, [pc, #108]	; (800057c <SystemClock_Config+0x98>)
 8000510:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000514:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000516:	2302      	movs	r3, #2
 8000518:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051a:	2301      	movs	r3, #1
 800051c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051e:	2310      	movs	r3, #16
 8000520:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000522:	2302      	movs	r3, #2
 8000524:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000526:	2300      	movs	r3, #0
 8000528:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800052a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800052e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000530:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000534:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	4618      	mov	r0, r3
 800053c:	f001 fb76 	bl	8001c2c <HAL_RCC_OscConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000546:	f000 f8d1 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054a:	230f      	movs	r3, #15
 800054c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800054e:	2303      	movs	r3, #3
 8000550:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800055e:	463b      	mov	r3, r7
 8000560:	2101      	movs	r1, #1
 8000562:	4618      	mov	r0, r3
 8000564:	f001 fe92 	bl	800228c <HAL_RCC_ClockConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800056e:	f000 f8bd 	bl	80006ec <Error_Handler>
  }
}
 8000572:	bf00      	nop
 8000574:	3748      	adds	r7, #72	; 0x48
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40007000 	.word	0x40007000

08000580 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <MX_ADC_Init+0xa8>)
 8000592:	4a26      	ldr	r2, [pc, #152]	; (800062c <MX_ADC_Init+0xac>)
 8000594:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000596:	4b24      	ldr	r3, [pc, #144]	; (8000628 <MX_ADC_Init+0xa8>)
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800059c:	4b22      	ldr	r3, [pc, #136]	; (8000628 <MX_ADC_Init+0xa8>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <MX_ADC_Init+0xa8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <MX_ADC_Init+0xa8>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005ae:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <MX_ADC_Init+0xa8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <MX_ADC_Init+0xa8>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_ADC_Init+0xa8>)
 80005bc:	2200      	movs	r2, #0
 80005be:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <MX_ADC_Init+0xa8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_ADC_Init+0xa8>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <MX_ADC_Init+0xa8>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_ADC_Init+0xa8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_ADC_Init+0xa8>)
 80005de:	2210      	movs	r2, #16
 80005e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_ADC_Init+0xa8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_ADC_Init+0xa8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <MX_ADC_Init+0xa8>)
 80005f2:	f000 facd 	bl	8000b90 <HAL_ADC_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80005fc:	f000 f876 	bl	80006ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000604:	2301      	movs	r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4619      	mov	r1, r3
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_ADC_Init+0xa8>)
 8000612:	f000 fca3 	bl	8000f5c <HAL_ADC_ConfigChannel>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 800061c:	f000 f866 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000008c 	.word	0x2000008c
 800062c:	40012400 	.word	0x40012400

08000630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <MX_USART2_UART_Init+0x50>)
 8000638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_USART2_UART_Init+0x4c>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_USART2_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000668:	f002 f8d6 	bl	8002818 <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000672:	f000 f83b 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000124 	.word	0x20000124
 8000680:	40004400 	.word	0x40004400

08000684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_DMA_Init+0x38>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <MX_DMA_Init+0x38>)
 8000690:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000694:	61d3      	str	r3, [r2, #28]
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_DMA_Init+0x38>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	200b      	movs	r0, #11
 80006a8:	f000 ff57 	bl	800155a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006ac:	200b      	movs	r0, #11
 80006ae:	f000 ff70 	bl	8001592 <HAL_NVIC_EnableIRQ>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_GPIO_Init+0x28>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <MX_GPIO_Init+0x28>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	61d3      	str	r3, [r2, #28]
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <MX_GPIO_Init+0x28>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	40023800 	.word	0x40023800

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_MspInit+0x5c>)
 8000700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000702:	4a14      	ldr	r2, [pc, #80]	; (8000754 <HAL_MspInit+0x5c>)
 8000704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000708:	6253      	str	r3, [r2, #36]	; 0x24
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_MspInit+0x5c>)
 800070c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x5c>)
 8000718:	6a1b      	ldr	r3, [r3, #32]
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <HAL_MspInit+0x5c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6213      	str	r3, [r2, #32]
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <HAL_MspInit+0x5c>)
 8000724:	6a1b      	ldr	r3, [r3, #32]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_MspInit+0x5c>)
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <HAL_MspInit+0x5c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	6253      	str	r3, [r2, #36]	; 0x24
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_MspInit+0x5c>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000746:	2007      	movs	r0, #7
 8000748:	f000 fefc 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800

08000758 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a29      	ldr	r2, [pc, #164]	; (800081c <HAL_ADC_MspInit+0xc4>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d14b      	bne.n	8000812 <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800077a:	4b29      	ldr	r3, [pc, #164]	; (8000820 <HAL_ADC_MspInit+0xc8>)
 800077c:	6a1b      	ldr	r3, [r3, #32]
 800077e:	4a28      	ldr	r2, [pc, #160]	; (8000820 <HAL_ADC_MspInit+0xc8>)
 8000780:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000784:	6213      	str	r3, [r2, #32]
 8000786:	4b26      	ldr	r3, [pc, #152]	; (8000820 <HAL_ADC_MspInit+0xc8>)
 8000788:	6a1b      	ldr	r3, [r3, #32]
 800078a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b23      	ldr	r3, [pc, #140]	; (8000820 <HAL_ADC_MspInit+0xc8>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a22      	ldr	r2, [pc, #136]	; (8000820 <HAL_ADC_MspInit+0xc8>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <HAL_ADC_MspInit+0xc8>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007aa:	2301      	movs	r3, #1
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ae:	2303      	movs	r3, #3
 80007b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4819      	ldr	r0, [pc, #100]	; (8000824 <HAL_ADC_MspInit+0xcc>)
 80007be:	f001 f8b5 	bl	800192c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <HAL_ADC_MspInit+0xd0>)
 80007c4:	4a19      	ldr	r2, [pc, #100]	; (800082c <HAL_ADC_MspInit+0xd4>)
 80007c6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <HAL_ADC_MspInit+0xd0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <HAL_ADC_MspInit+0xd0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <HAL_ADC_MspInit+0xd0>)
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <HAL_ADC_MspInit+0xd0>)
 80007dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_ADC_MspInit+0xd0>)
 80007e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_ADC_MspInit+0xd0>)
 80007ec:	2220      	movs	r2, #32
 80007ee:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <HAL_ADC_MspInit+0xd0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80007f6:	480c      	ldr	r0, [pc, #48]	; (8000828 <HAL_ADC_MspInit+0xd0>)
 80007f8:	f000 fee6 	bl	80015c8 <HAL_DMA_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8000802:	f7ff ff73 	bl	80006ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_ADC_MspInit+0xd0>)
 800080a:	645a      	str	r2, [r3, #68]	; 0x44
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <HAL_ADC_MspInit+0xd0>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40012400 	.word	0x40012400
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000
 8000828:	200000e0 	.word	0x200000e0
 800082c:	40026008 	.word	0x40026008

08000830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a17      	ldr	r2, [pc, #92]	; (80008ac <HAL_UART_MspInit+0x7c>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d127      	bne.n	80008a2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <HAL_UART_MspInit+0x80>)
 8000854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000856:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <HAL_UART_MspInit+0x80>)
 8000858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085c:	6253      	str	r3, [r2, #36]	; 0x24
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <HAL_UART_MspInit+0x80>)
 8000860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <HAL_UART_MspInit+0x80>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <HAL_UART_MspInit+0x80>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	61d3      	str	r3, [r2, #28]
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <HAL_UART_MspInit+0x80>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000882:	230c      	movs	r3, #12
 8000884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000892:	2307      	movs	r3, #7
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <HAL_UART_MspInit+0x84>)
 800089e:	f001 f845 	bl	800192c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40004400 	.word	0x40004400
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <MemManage_Handler+0x4>

080008ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr

080008e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr

080008ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fe:	f000 f92b 	bl	8000b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <DMA1_Channel1_IRQHandler+0x10>)
 800090e:	f000 ff2f 	bl	8001770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000e0 	.word	0x200000e0

0800091c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	e00a      	b.n	8000944 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800092e:	f3af 8000 	nop.w
 8000932:	4601      	mov	r1, r0
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	60ba      	str	r2, [r7, #8]
 800093a:	b2ca      	uxtb	r2, r1
 800093c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	3301      	adds	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	dbf0      	blt.n	800092e <_read+0x12>
  }

  return len;
 800094c:	687b      	ldr	r3, [r7, #4]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	e009      	b.n	800097c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	60ba      	str	r2, [r7, #8]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf1      	blt.n	8000968 <_write+0x12>
  }
  return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_close>:

int _close(int file)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b4:	605a      	str	r2, [r3, #4]
  return 0;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <_isatty>:

int _isatty(int file)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ca:	2301      	movs	r3, #1
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b085      	sub	sp, #20
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
	...

080009f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <_sbrk+0x5c>)
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <_sbrk+0x60>)
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <_sbrk+0x64>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <_sbrk+0x68>)
 8000a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d207      	bcs.n	8000a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a20:	f002 f82e 	bl	8002a80 <__errno>
 8000a24:	4603      	mov	r3, r0
 8000a26:	220c      	movs	r2, #12
 8000a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a2e:	e009      	b.n	8000a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <_sbrk+0x64>)
 8000a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20008000 	.word	0x20008000
 8000a50:	00000400 	.word	0x00000400
 8000a54:	20000174 	.word	0x20000174
 8000a58:	20000190 	.word	0x20000190

08000a5c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a68:	f7ff fff8 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a6c:	480b      	ldr	r0, [pc, #44]	; (8000a9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a6e:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a70:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a84:	4c09      	ldr	r4, [pc, #36]	; (8000aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a92:	f001 fffb 	bl	8002a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a96:	f7ff fd0d 	bl	80004b4 <main>
  bx lr
 8000a9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000aa4:	08003af4 	.word	0x08003af4
  ldr r2, =_sbss
 8000aa8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000aac:	2000018c 	.word	0x2000018c

08000ab0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_IRQHandler>

08000ab2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 fd41 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 f80e 	bl	8000ae4 <HAL_InitTick>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	71fb      	strb	r3, [r7, #7]
 8000ad2:	e001      	b.n	8000ad8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ad4:	f7ff fe10 	bl	80006f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <HAL_InitTick+0x68>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d022      	beq.n	8000b3e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_InitTick+0x6c>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <HAL_InitTick+0x68>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fd4e 	bl	80015ae <HAL_SYSTICK_Config>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d10f      	bne.n	8000b38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b0f      	cmp	r3, #15
 8000b1c:	d809      	bhi.n	8000b32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	6879      	ldr	r1, [r7, #4]
 8000b22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b26:	f000 fd18 	bl	800155a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_InitTick+0x70>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	e007      	b.n	8000b42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	73fb      	strb	r3, [r7, #15]
 8000b36:	e004      	b.n	8000b42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	73fb      	strb	r3, [r7, #15]
 8000b3c:	e001      	b.n	8000b42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000004 	.word	0x20000004

08000b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_IncTick+0x1c>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_IncTick+0x20>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a03      	ldr	r2, [pc, #12]	; (8000b74 <HAL_IncTick+0x1c>)
 8000b68:	6013      	str	r3, [r2, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000178 	.word	0x20000178
 8000b78:	20000008 	.word	0x20000008

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b02      	ldr	r3, [pc, #8]	; (8000b8c <HAL_GetTick+0x10>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	20000178 	.word	0x20000178

08000b90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	; 0x38
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d101      	bne.n	8000bb0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	e127      	b.n	8000e00 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d115      	bne.n	8000bea <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bcc:	4b8e      	ldr	r3, [pc, #568]	; (8000e08 <HAL_ADC_Init+0x278>)
 8000bce:	6a1b      	ldr	r3, [r3, #32]
 8000bd0:	4a8d      	ldr	r2, [pc, #564]	; (8000e08 <HAL_ADC_Init+0x278>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6213      	str	r3, [r2, #32]
 8000bd8:	4b8b      	ldr	r3, [pc, #556]	; (8000e08 <HAL_ADC_Init+0x278>)
 8000bda:	6a1b      	ldr	r3, [r3, #32]
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fdb7 	bl	8000758 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	f003 0310 	and.w	r3, r3, #16
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 80ff 	bne.w	8000df6 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c00:	f023 0302 	bic.w	r3, r3, #2
 8000c04:	f043 0202 	orr.w	r2, r3, #2
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000c0c:	4b7f      	ldr	r3, [pc, #508]	; (8000e0c <HAL_ADC_Init+0x27c>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	497c      	ldr	r1, [pc, #496]	; (8000e0c <HAL_ADC_Init+0x27c>)
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000c26:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c34:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	fa93 f3a3 	rbit	r3, r3
 8000c3c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	fab3 f383 	clz	r3, r3
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000c4a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c50:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c60:	fa93 f3a3 	rbit	r3, r3
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c68:	fab3 f383 	clz	r3, r3
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000c72:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c76:	4313      	orrs	r3, r2
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c7e:	2b10      	cmp	r3, #16
 8000c80:	d007      	beq.n	8000c92 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9c:	2b40      	cmp	r3, #64	; 0x40
 8000c9e:	d04f      	beq.n	8000d40 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000cb2:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	6912      	ldr	r2, [r2, #16]
 8000cb8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000cbc:	d003      	beq.n	8000cc6 <HAL_ADC_Init+0x136>
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	6912      	ldr	r2, [r2, #16]
 8000cc2:	2a01      	cmp	r2, #1
 8000cc4:	d102      	bne.n	8000ccc <HAL_ADC_Init+0x13c>
 8000cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cca:	e000      	b.n	8000cce <HAL_ADC_Init+0x13e>
 8000ccc:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000cce:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d125      	bne.n	8000d2c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d114      	bne.n	8000d14 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000cf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	fa92 f2a2 	rbit	r2, r2
 8000cfc:	617a      	str	r2, [r7, #20]
  return result;
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	4093      	lsls	r3, r2
 8000d08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	633b      	str	r3, [r7, #48]	; 0x30
 8000d12:	e00b      	b.n	8000d2c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d18:	f043 0220 	orr.w	r2, r3, #32
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d24:	f043 0201 	orr.w	r2, r3, #1
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	4b37      	ldr	r3, [pc, #220]	; (8000e10 <HAL_ADC_Init+0x280>)
 8000d34:	4013      	ands	r3, r2
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	6812      	ldr	r2, [r2, #0]
 8000d3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000d3c:	430b      	orrs	r3, r1
 8000d3e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	4b33      	ldr	r3, [pc, #204]	; (8000e14 <HAL_ADC_Init+0x284>)
 8000d48:	4013      	ands	r3, r2
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d50:	430b      	orrs	r3, r1
 8000d52:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d5c:	d003      	beq.n	8000d66 <HAL_ADC_Init+0x1d6>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	691b      	ldr	r3, [r3, #16]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d119      	bne.n	8000d9a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d74:	3b01      	subs	r3, #1
 8000d76:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000d7a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	fa92 f2a2 	rbit	r2, r2
 8000d82:	60fa      	str	r2, [r7, #12]
  return result;
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	fa03 f202 	lsl.w	r2, r3, r2
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	631a      	str	r2, [r3, #48]	; 0x30
 8000d98:	e007      	b.n	8000daa <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000da8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_ADC_Init+0x288>)
 8000db2:	4013      	ands	r3, r2
 8000db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d10b      	bne.n	8000dd2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc4:	f023 0303 	bic.w	r3, r3, #3
 8000dc8:	f043 0201 	orr.w	r2, r3, #1
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	64da      	str	r2, [r3, #76]	; 0x4c
 8000dd0:	e014      	b.n	8000dfc <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f023 0312 	bic.w	r3, r3, #18
 8000dda:	f043 0210 	orr.w	r2, r3, #16
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000de6:	f043 0201 	orr.w	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000df4:	e002      	b.n	8000dfc <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3738      	adds	r7, #56	; 0x38
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40012700 	.word	0x40012700
 8000e10:	fcfc16ff 	.word	0xfcfc16ff
 8000e14:	c0fff189 	.word	0xc0fff189
 8000e18:	bf80fffe 	.word	0xbf80fffe

08000e1c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d101      	bne.n	8000e3a <HAL_ADC_Start_DMA+0x1e>
 8000e36:	2302      	movs	r3, #2
 8000e38:	e074      	b.n	8000f24 <HAL_ADC_Start_DMA+0x108>
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f000 f9da 	bl	80011fc <ADC_Enable>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d167      	bne.n	8000f22 <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e5a:	f023 0301 	bic.w	r3, r3, #1
 8000e5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d007      	beq.n	8000e84 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e90:	d106      	bne.n	8000ea0 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e96:	f023 0206 	bic.w	r2, r3, #6
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	651a      	str	r2, [r3, #80]	; 0x50
 8000e9e:	e002      	b.n	8000ea6 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a1e      	ldr	r2, [pc, #120]	; (8000f2c <HAL_ADC_Start_DMA+0x110>)
 8000eb4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <HAL_ADC_Start_DMA+0x114>)
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <HAL_ADC_Start_DMA+0x118>)
 8000ec4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ece:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000ede:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000eee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3358      	adds	r3, #88	; 0x58
 8000efa:	4619      	mov	r1, r3
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f000 fbd6 	bl	80016b0 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d107      	bne.n	8000f22 <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f20:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	080012b5 	.word	0x080012b5
 8000f30:	0800135d 	.word	0x0800135d
 8000f34:	08001379 	.word	0x08001379

08000f38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d101      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x20>
 8000f78:	2302      	movs	r3, #2
 8000f7a:	e134      	b.n	80011e6 <HAL_ADC_ConfigChannel+0x28a>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b06      	cmp	r3, #6
 8000f8a:	d81c      	bhi.n	8000fc6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	3b05      	subs	r3, #5
 8000f9e:	221f      	movs	r2, #31
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	4019      	ands	r1, r3
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	3b05      	subs	r3, #5
 8000fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	641a      	str	r2, [r3, #64]	; 0x40
 8000fc4:	e07e      	b.n	80010c4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b0c      	cmp	r3, #12
 8000fcc:	d81c      	bhi.n	8001008 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	3b23      	subs	r3, #35	; 0x23
 8000fe0:	221f      	movs	r2, #31
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	4019      	ands	r1, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3b23      	subs	r3, #35	; 0x23
 8000ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	430a      	orrs	r2, r1
 8001004:	63da      	str	r2, [r3, #60]	; 0x3c
 8001006:	e05d      	b.n	80010c4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b12      	cmp	r3, #18
 800100e:	d81c      	bhi.n	800104a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	3b41      	subs	r3, #65	; 0x41
 8001022:	221f      	movs	r2, #31
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	4019      	ands	r1, r3
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	3b41      	subs	r3, #65	; 0x41
 800103c:	fa00 f203 	lsl.w	r2, r0, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	639a      	str	r2, [r3, #56]	; 0x38
 8001048:	e03c      	b.n	80010c4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b18      	cmp	r3, #24
 8001050:	d81c      	bhi.n	800108c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	3b5f      	subs	r3, #95	; 0x5f
 8001064:	221f      	movs	r2, #31
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	4019      	ands	r1, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	3b5f      	subs	r3, #95	; 0x5f
 800107e:	fa00 f203 	lsl.w	r2, r0, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	430a      	orrs	r2, r1
 8001088:	635a      	str	r2, [r3, #52]	; 0x34
 800108a:	e01b      	b.n	80010c4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	3b7d      	subs	r3, #125	; 0x7d
 800109e:	221f      	movs	r2, #31
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	4019      	ands	r1, r3
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	3b7d      	subs	r3, #125	; 0x7d
 80010b8:	fa00 f203 	lsl.w	r2, r0, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b09      	cmp	r3, #9
 80010ca:	d81a      	bhi.n	8001102 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6959      	ldr	r1, [r3, #20]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	2207      	movs	r2, #7
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	4019      	ands	r1, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	6898      	ldr	r0, [r3, #8]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4613      	mov	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	fa00 f203 	lsl.w	r2, r0, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	615a      	str	r2, [r3, #20]
 8001100:	e042      	b.n	8001188 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b13      	cmp	r3, #19
 8001108:	d81c      	bhi.n	8001144 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6919      	ldr	r1, [r3, #16]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	3b1e      	subs	r3, #30
 800111c:	2207      	movs	r2, #7
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	4019      	ands	r1, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	6898      	ldr	r0, [r3, #8]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	3b1e      	subs	r3, #30
 8001136:	fa00 f203 	lsl.w	r2, r0, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	430a      	orrs	r2, r1
 8001140:	611a      	str	r2, [r3, #16]
 8001142:	e021      	b.n	8001188 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b1a      	cmp	r3, #26
 800114a:	d81c      	bhi.n	8001186 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	68d9      	ldr	r1, [r3, #12]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	3b3c      	subs	r3, #60	; 0x3c
 800115e:	2207      	movs	r2, #7
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	4019      	ands	r1, r3
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	6898      	ldr	r0, [r3, #8]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	3b3c      	subs	r3, #60	; 0x3c
 8001178:	fa00 f203 	lsl.w	r2, r0, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	e000      	b.n	8001188 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001186:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b10      	cmp	r3, #16
 800118e:	d003      	beq.n	8001198 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001194:	2b11      	cmp	r3, #17
 8001196:	d121      	bne.n	80011dc <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_ADC_ConfigChannel+0x294>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d11b      	bne.n	80011dc <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_ADC_ConfigChannel+0x294>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <HAL_ADC_ConfigChannel+0x294>)
 80011aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011ae:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b10      	cmp	r3, #16
 80011b6:	d111      	bne.n	80011dc <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_ADC_ConfigChannel+0x298>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <HAL_ADC_ConfigChannel+0x29c>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	0c9a      	lsrs	r2, r3, #18
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80011ce:	e002      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f9      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	40012700 	.word	0x40012700
 80011f4:	20000000 	.word	0x20000000
 80011f8:	431bde83 	.word	0x431bde83

080011fc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001216:	2b40      	cmp	r3, #64	; 0x40
 8001218:	d043      	beq.n	80012a2 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 0201 	orr.w	r2, r2, #1
 8001228:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <ADC_Enable+0xb0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a20      	ldr	r2, [pc, #128]	; (80012b0 <ADC_Enable+0xb4>)
 8001230:	fba2 2303 	umull	r2, r3, r2, r3
 8001234:	0c9a      	lsrs	r2, r3, #18
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800123e:	e002      	b.n	8001246 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	3b01      	subs	r3, #1
 8001244:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f9      	bne.n	8001240 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800124c:	f7ff fc96 	bl	8000b7c <HAL_GetTick>
 8001250:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001252:	e01f      	b.n	8001294 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001254:	f7ff fc92 	bl	8000b7c <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d918      	bls.n	8001294 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126c:	2b40      	cmp	r3, #64	; 0x40
 800126e:	d011      	beq.n	8001294 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	f043 0210 	orr.w	r2, r3, #16
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001280:	f043 0201 	orr.w	r2, r3, #1
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e007      	b.n	80012a4 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129e:	2b40      	cmp	r3, #64	; 0x40
 80012a0:	d1d8      	bne.n	8001254 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000000 	.word	0x20000000
 80012b0:	431bde83 	.word	0x431bde83

080012b4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d13d      	bne.n	800134a <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d12c      	bne.n	8001342 <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d127      	bne.n	8001342 <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d006      	beq.n	800130e <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800130a:	2b00      	cmp	r3, #0
 800130c:	d119      	bne.n	8001342 <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0220 	bic.w	r2, r2, #32
 800131c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d105      	bne.n	8001342 <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f043 0201 	orr.w	r2, r3, #1
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f7ff f89e 	bl	8000484 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001348:	e004      	b.n	8001354 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	4798      	blx	r3
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f7ff fde4 	bl	8000f38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001396:	f043 0204 	orr.w	r2, r3, #4
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f7ff fdd3 	bl	8000f4a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c8:	4013      	ands	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <__NVIC_GetPriorityGrouping+0x18>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	f003 0307 	and.w	r3, r3, #7
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	db0b      	blt.n	800143a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	f003 021f 	and.w	r2, r3, #31
 8001428:	4906      	ldr	r1, [pc, #24]	; (8001444 <__NVIC_EnableIRQ+0x34>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	2001      	movs	r0, #1
 8001432:	fa00 f202 	lsl.w	r2, r0, r2
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001510:	d301      	bcc.n	8001516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001512:	2301      	movs	r3, #1
 8001514:	e00f      	b.n	8001536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <SysTick_Config+0x40>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151e:	210f      	movs	r1, #15
 8001520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001524:	f7ff ff90 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SysTick_Config+0x40>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SysTick_Config+0x40>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	e000e010 	.word	0xe000e010

08001544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff2d 	bl	80013ac <__NVIC_SetPriorityGrouping>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800156c:	f7ff ff42 	bl	80013f4 <__NVIC_GetPriorityGrouping>
 8001570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	6978      	ldr	r0, [r7, #20]
 8001578:	f7ff ff90 	bl	800149c <NVIC_EncodePriority>
 800157c:	4602      	mov	r2, r0
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff5f 	bl	8001448 <__NVIC_SetPriority>
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff35 	bl	8001410 <__NVIC_EnableIRQ>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffa2 	bl	8001500 <SysTick_Config>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e059      	b.n	800168e <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_DMA_Init+0xd0>)
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d80f      	bhi.n	8001606 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_DMA_Init+0xd4>)
 80015ee:	4413      	add	r3, r2
 80015f0:	4a2b      	ldr	r2, [pc, #172]	; (80016a0 <HAL_DMA_Init+0xd8>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	009a      	lsls	r2, r3, #2
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a28      	ldr	r2, [pc, #160]	; (80016a4 <HAL_DMA_Init+0xdc>)
 8001602:	63da      	str	r2, [r3, #60]	; 0x3c
 8001604:	e00e      	b.n	8001624 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <HAL_DMA_Init+0xe0>)
 800160e:	4413      	add	r3, r2
 8001610:	4a23      	ldr	r2, [pc, #140]	; (80016a0 <HAL_DMA_Init+0xd8>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	009a      	lsls	r2, r3, #2
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a22      	ldr	r2, [pc, #136]	; (80016ac <HAL_DMA_Init+0xe4>)
 8001622:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800163a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800163e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	40026407 	.word	0x40026407
 800169c:	bffd9ff8 	.word	0xbffd9ff8
 80016a0:	cccccccd 	.word	0xcccccccd
 80016a4:	40026000 	.word	0x40026000
 80016a8:	bffd9bf8 	.word	0xbffd9bf8
 80016ac:	40026400 	.word	0x40026400

080016b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_DMA_Start_IT+0x20>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e04b      	b.n	8001768 <HAL_DMA_Start_IT+0xb8>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d13a      	bne.n	800175a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2202      	movs	r2, #2
 80016e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0201 	bic.w	r2, r2, #1
 8001700:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	68b9      	ldr	r1, [r7, #8]
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 f8e0 	bl	80018ce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	2b00      	cmp	r3, #0
 8001714:	d008      	beq.n	8001728 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 020e 	orr.w	r2, r2, #14
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e00f      	b.n	8001748 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0204 	bic.w	r2, r2, #4
 8001736:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 020a 	orr.w	r2, r2, #10
 8001746:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0201 	orr.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e005      	b.n	8001766 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001762:	2302      	movs	r3, #2
 8001764:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001766:	7dfb      	ldrb	r3, [r7, #23]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f003 031c 	and.w	r3, r3, #28
 8001790:	2204      	movs	r2, #4
 8001792:	409a      	lsls	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4013      	ands	r3, r2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d026      	beq.n	80017ea <HAL_DMA_IRQHandler+0x7a>
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d021      	beq.n	80017ea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0320 	and.w	r3, r3, #32
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d107      	bne.n	80017c4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0204 	bic.w	r2, r2, #4
 80017c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f003 021c 	and.w	r2, r3, #28
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d0:	2104      	movs	r1, #4
 80017d2:	fa01 f202 	lsl.w	r2, r1, r2
 80017d6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d071      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017e8:	e06c      	b.n	80018c4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 031c 	and.w	r3, r3, #28
 80017f2:	2202      	movs	r2, #2
 80017f4:	409a      	lsls	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d02e      	beq.n	800185c <HAL_DMA_IRQHandler+0xec>
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d029      	beq.n	800185c <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0320 	and.w	r3, r3, #32
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10b      	bne.n	800182e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 020a 	bic.w	r2, r2, #10
 8001824:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 021c 	and.w	r2, r3, #28
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183a:	2102      	movs	r1, #2
 800183c:	fa01 f202 	lsl.w	r2, r1, r2
 8001840:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	2b00      	cmp	r3, #0
 8001850:	d038      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800185a:	e033      	b.n	80018c4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f003 031c 	and.w	r3, r3, #28
 8001864:	2208      	movs	r2, #8
 8001866:	409a      	lsls	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d02a      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x156>
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d025      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 020e 	bic.w	r2, r2, #14
 8001888:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 021c 	and.w	r2, r3, #28
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001896:	2101      	movs	r1, #1
 8001898:	fa01 f202 	lsl.w	r2, r1, r2
 800189c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
}
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b085      	sub	sp, #20
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f003 021c 	and.w	r2, r3, #28
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e8:	2101      	movs	r1, #1
 80018ea:	fa01 f202 	lsl.w	r2, r1, r2
 80018ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b10      	cmp	r3, #16
 80018fe:	d108      	bne.n	8001912 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001910:	e007      	b.n	8001922 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	60da      	str	r2, [r3, #12]
}
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001942:	e154      	b.n	8001bee <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2101      	movs	r1, #1
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8146 	beq.w	8001be8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d005      	beq.n	8001974 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001970:	2b02      	cmp	r3, #2
 8001972:	d130      	bne.n	80019d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80019aa:	2201      	movs	r2, #1
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	f003 0201 	and.w	r2, r3, #1
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d017      	beq.n	8001a12 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d123      	bne.n	8001a66 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	08da      	lsrs	r2, r3, #3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3208      	adds	r2, #8
 8001a60:	6939      	ldr	r1, [r7, #16]
 8001a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	2203      	movs	r2, #3
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0203 	and.w	r2, r3, #3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80a0 	beq.w	8001be8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa8:	4b58      	ldr	r3, [pc, #352]	; (8001c0c <HAL_GPIO_Init+0x2e0>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	4a57      	ldr	r2, [pc, #348]	; (8001c0c <HAL_GPIO_Init+0x2e0>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6213      	str	r3, [r2, #32]
 8001ab4:	4b55      	ldr	r3, [pc, #340]	; (8001c0c <HAL_GPIO_Init+0x2e0>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ac0:	4a53      	ldr	r2, [pc, #332]	; (8001c10 <HAL_GPIO_Init+0x2e4>)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001acc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a4b      	ldr	r2, [pc, #300]	; (8001c14 <HAL_GPIO_Init+0x2e8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d019      	beq.n	8001b20 <HAL_GPIO_Init+0x1f4>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a4a      	ldr	r2, [pc, #296]	; (8001c18 <HAL_GPIO_Init+0x2ec>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d013      	beq.n	8001b1c <HAL_GPIO_Init+0x1f0>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a49      	ldr	r2, [pc, #292]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d00d      	beq.n	8001b18 <HAL_GPIO_Init+0x1ec>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a48      	ldr	r2, [pc, #288]	; (8001c20 <HAL_GPIO_Init+0x2f4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d007      	beq.n	8001b14 <HAL_GPIO_Init+0x1e8>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a47      	ldr	r2, [pc, #284]	; (8001c24 <HAL_GPIO_Init+0x2f8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d101      	bne.n	8001b10 <HAL_GPIO_Init+0x1e4>
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	e008      	b.n	8001b22 <HAL_GPIO_Init+0x1f6>
 8001b10:	2305      	movs	r3, #5
 8001b12:	e006      	b.n	8001b22 <HAL_GPIO_Init+0x1f6>
 8001b14:	2303      	movs	r3, #3
 8001b16:	e004      	b.n	8001b22 <HAL_GPIO_Init+0x1f6>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e002      	b.n	8001b22 <HAL_GPIO_Init+0x1f6>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_GPIO_Init+0x1f6>
 8001b20:	2300      	movs	r3, #0
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	f002 0203 	and.w	r2, r2, #3
 8001b28:	0092      	lsls	r2, r2, #2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b32:	4937      	ldr	r1, [pc, #220]	; (8001c10 <HAL_GPIO_Init+0x2e4>)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b40:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <HAL_GPIO_Init+0x2fc>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b64:	4a30      	ldr	r2, [pc, #192]	; (8001c28 <HAL_GPIO_Init+0x2fc>)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <HAL_GPIO_Init+0x2fc>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b8e:	4a26      	ldr	r2, [pc, #152]	; (8001c28 <HAL_GPIO_Init+0x2fc>)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_GPIO_Init+0x2fc>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bb8:	4a1b      	ldr	r2, [pc, #108]	; (8001c28 <HAL_GPIO_Init+0x2fc>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <HAL_GPIO_Init+0x2fc>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001be2:	4a11      	ldr	r2, [pc, #68]	; (8001c28 <HAL_GPIO_Init+0x2fc>)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3301      	adds	r3, #1
 8001bec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f47f aea3 	bne.w	8001944 <HAL_GPIO_Init+0x18>
  }
}
 8001bfe:	bf00      	nop
 8001c00:	bf00      	nop
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40010000 	.word	0x40010000
 8001c14:	40020000 	.word	0x40020000
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	40020c00 	.word	0x40020c00
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40010400 	.word	0x40010400

08001c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e31d      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c3e:	4b94      	ldr	r3, [pc, #592]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c48:	4b91      	ldr	r3, [pc, #580]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c50:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d07b      	beq.n	8001d56 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d006      	beq.n	8001c72 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2b0c      	cmp	r3, #12
 8001c68:	d10f      	bne.n	8001c8a <HAL_RCC_OscConfig+0x5e>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c70:	d10b      	bne.n	8001c8a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c72:	4b87      	ldr	r3, [pc, #540]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d06a      	beq.n	8001d54 <HAL_RCC_OscConfig+0x128>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d166      	bne.n	8001d54 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e2f7      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d106      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x74>
 8001c92:	4b7f      	ldr	r3, [pc, #508]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a7e      	ldr	r2, [pc, #504]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e02d      	b.n	8001cfc <HAL_RCC_OscConfig+0xd0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10c      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x96>
 8001ca8:	4b79      	ldr	r3, [pc, #484]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a78      	ldr	r2, [pc, #480]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a75      	ldr	r2, [pc, #468]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	e01c      	b.n	8001cfc <HAL_RCC_OscConfig+0xd0>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xb8>
 8001cca:	4b71      	ldr	r3, [pc, #452]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a70      	ldr	r2, [pc, #448]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b6e      	ldr	r3, [pc, #440]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a6d      	ldr	r2, [pc, #436]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0xd0>
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a69      	ldr	r2, [pc, #420]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a66      	ldr	r2, [pc, #408]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d013      	beq.n	8001d2c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7fe ff3a 	bl	8000b7c <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7fe ff36 	bl	8000b7c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	; 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e2ad      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d1e:	4b5c      	ldr	r3, [pc, #368]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0xe0>
 8001d2a:	e014      	b.n	8001d56 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7fe ff26 	bl	8000b7c <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d34:	f7fe ff22 	bl	8000b7c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e299      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d46:	4b52      	ldr	r3, [pc, #328]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x108>
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d05a      	beq.n	8001e18 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d119      	bne.n	8001da2 <HAL_RCC_OscConfig+0x176>
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d116      	bne.n	8001da2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d74:	4b46      	ldr	r3, [pc, #280]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_OscConfig+0x160>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e276      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4b40      	ldr	r3, [pc, #256]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	493d      	ldr	r1, [pc, #244]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da0:	e03a      	b.n	8001e18 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d020      	beq.n	8001dec <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001daa:	4b3a      	ldr	r3, [pc, #232]	; (8001e94 <HAL_RCC_OscConfig+0x268>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7fe fee4 	bl	8000b7c <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db8:	f7fe fee0 	bl	8000b7c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e257      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dca:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd6:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	492a      	ldr	r1, [pc, #168]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
 8001dea:	e015      	b.n	8001e18 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dec:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <HAL_RCC_OscConfig+0x268>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7fe fec3 	bl	8000b7c <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfa:	f7fe febf 	bl	8000b7c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e236      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f0      	bne.n	8001dfa <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80b8 	beq.w	8001f96 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d170      	bne.n	8001f0e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_OscConfig+0x218>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e21a      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1a      	ldr	r2, [r3, #32]
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d921      	bls.n	8001e98 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fc7d 	bl	8002758 <RCC_SetFlashLatencyFromMSIRange>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e208      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4906      	ldr	r1, [pc, #24]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	061b      	lsls	r3, r3, #24
 8001e88:	4901      	ldr	r1, [pc, #4]	; (8001e90 <HAL_RCC_OscConfig+0x264>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
 8001e8e:	e020      	b.n	8001ed2 <HAL_RCC_OscConfig+0x2a6>
 8001e90:	40023800 	.word	0x40023800
 8001e94:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e98:	4b99      	ldr	r3, [pc, #612]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4996      	ldr	r1, [pc, #600]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eaa:	4b95      	ldr	r3, [pc, #596]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	061b      	lsls	r3, r3, #24
 8001eb8:	4991      	ldr	r1, [pc, #580]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 fc48 	bl	8002758 <RCC_SetFlashLatencyFromMSIRange>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e1d3      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	0b5b      	lsrs	r3, r3, #13
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001ee2:	4a87      	ldr	r2, [pc, #540]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8001ee4:	6892      	ldr	r2, [r2, #8]
 8001ee6:	0912      	lsrs	r2, r2, #4
 8001ee8:	f002 020f 	and.w	r2, r2, #15
 8001eec:	4985      	ldr	r1, [pc, #532]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001eee:	5c8a      	ldrb	r2, [r1, r2]
 8001ef0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ef2:	4a85      	ldr	r2, [pc, #532]	; (8002108 <HAL_RCC_OscConfig+0x4dc>)
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ef6:	4b85      	ldr	r3, [pc, #532]	; (800210c <HAL_RCC_OscConfig+0x4e0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fdf2 	bl	8000ae4 <HAL_InitTick>
 8001f00:	4603      	mov	r3, r0
 8001f02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d045      	beq.n	8001f96 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	e1b5      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d029      	beq.n	8001f6a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f16:	4b7e      	ldr	r3, [pc, #504]	; (8002110 <HAL_RCC_OscConfig+0x4e4>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7fe fe2e 	bl	8000b7c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f24:	f7fe fe2a 	bl	8000b7c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e1a1      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f36:	4b72      	ldr	r3, [pc, #456]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f42:	4b6f      	ldr	r3, [pc, #444]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	496c      	ldr	r1, [pc, #432]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f54:	4b6a      	ldr	r3, [pc, #424]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	061b      	lsls	r3, r3, #24
 8001f62:	4967      	ldr	r1, [pc, #412]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
 8001f68:	e015      	b.n	8001f96 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f6a:	4b69      	ldr	r3, [pc, #420]	; (8002110 <HAL_RCC_OscConfig+0x4e4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7fe fe04 	bl	8000b7c <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f78:	f7fe fe00 	bl	8000b7c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e177      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f8a:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d030      	beq.n	8002004 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d016      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001faa:	4b5a      	ldr	r3, [pc, #360]	; (8002114 <HAL_RCC_OscConfig+0x4e8>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb0:	f7fe fde4 	bl	8000b7c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb8:	f7fe fde0 	bl	8000b7c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e157      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fca:	4b4d      	ldr	r3, [pc, #308]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x38c>
 8001fd6:	e015      	b.n	8002004 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd8:	4b4e      	ldr	r3, [pc, #312]	; (8002114 <HAL_RCC_OscConfig+0x4e8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fde:	f7fe fdcd 	bl	8000b7c <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe6:	f7fe fdc9 	bl	8000b7c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e140      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ff8:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8001ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80b5 	beq.w	800217c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002016:	4b3a      	ldr	r3, [pc, #232]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10d      	bne.n	800203e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	4b37      	ldr	r3, [pc, #220]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	4a36      	ldr	r2, [pc, #216]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8002028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202c:	6253      	str	r3, [r2, #36]	; 0x24
 800202e:	4b34      	ldr	r3, [pc, #208]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800203a:	2301      	movs	r3, #1
 800203c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203e:	4b36      	ldr	r3, [pc, #216]	; (8002118 <HAL_RCC_OscConfig+0x4ec>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002046:	2b00      	cmp	r3, #0
 8002048:	d118      	bne.n	800207c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800204a:	4b33      	ldr	r3, [pc, #204]	; (8002118 <HAL_RCC_OscConfig+0x4ec>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a32      	ldr	r2, [pc, #200]	; (8002118 <HAL_RCC_OscConfig+0x4ec>)
 8002050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002056:	f7fe fd91 	bl	8000b7c <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205e:	f7fe fd8d 	bl	8000b7c <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b64      	cmp	r3, #100	; 0x64
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e104      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_RCC_OscConfig+0x4ec>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d106      	bne.n	8002092 <HAL_RCC_OscConfig+0x466>
 8002084:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8002086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002088:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208e:	6353      	str	r3, [r2, #52]	; 0x34
 8002090:	e02d      	b.n	80020ee <HAL_RCC_OscConfig+0x4c2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x488>
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 800209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209e:	4a18      	ldr	r2, [pc, #96]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 80020a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a4:	6353      	str	r3, [r2, #52]	; 0x34
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 80020a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020aa:	4a15      	ldr	r2, [pc, #84]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 80020ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020b0:	6353      	str	r3, [r2, #52]	; 0x34
 80020b2:	e01c      	b.n	80020ee <HAL_RCC_OscConfig+0x4c2>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d10c      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4aa>
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 80020be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c0:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 80020c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020c6:	6353      	str	r3, [r2, #52]	; 0x34
 80020c8:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 80020ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020cc:	4a0c      	ldr	r2, [pc, #48]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d2:	6353      	str	r3, [r2, #52]	; 0x34
 80020d4:	e00b      	b.n	80020ee <HAL_RCC_OscConfig+0x4c2>
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 80020d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 80020dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e0:	6353      	str	r3, [r2, #52]	; 0x34
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e6:	4a06      	ldr	r2, [pc, #24]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 80020e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020ec:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d024      	beq.n	8002140 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f6:	f7fe fd41 	bl	8000b7c <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020fc:	e019      	b.n	8002132 <HAL_RCC_OscConfig+0x506>
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	08003a34 	.word	0x08003a34
 8002108:	20000000 	.word	0x20000000
 800210c:	20000004 	.word	0x20000004
 8002110:	42470020 	.word	0x42470020
 8002114:	42470680 	.word	0x42470680
 8002118:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800211c:	f7fe fd2e 	bl	8000b7c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f241 3288 	movw	r2, #5000	; 0x1388
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e0a3      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002132:	4b54      	ldr	r3, [pc, #336]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 8002134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0ee      	beq.n	800211c <HAL_RCC_OscConfig+0x4f0>
 800213e:	e014      	b.n	800216a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002140:	f7fe fd1c 	bl	8000b7c <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002146:	e00a      	b.n	800215e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002148:	f7fe fd18 	bl	8000b7c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	; 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e08d      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800215e:	4b49      	ldr	r3, [pc, #292]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 8002160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ee      	bne.n	8002148 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800216a:	7ffb      	ldrb	r3, [r7, #31]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002170:	4b44      	ldr	r3, [pc, #272]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	4a43      	ldr	r2, [pc, #268]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 8002176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	2b00      	cmp	r3, #0
 8002182:	d079      	beq.n	8002278 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d056      	beq.n	8002238 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	2b02      	cmp	r3, #2
 8002190:	d13b      	bne.n	800220a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002192:	4b3d      	ldr	r3, [pc, #244]	; (8002288 <HAL_RCC_OscConfig+0x65c>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7fe fcf0 	bl	8000b7c <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a0:	f7fe fcec 	bl	8000b7c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e063      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021b2:	4b34      	ldr	r3, [pc, #208]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021be:	4b31      	ldr	r3, [pc, #196]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	4319      	orrs	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	430b      	orrs	r3, r1
 80021d6:	492b      	ldr	r1, [pc, #172]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021dc:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <HAL_RCC_OscConfig+0x65c>)
 80021de:	2201      	movs	r2, #1
 80021e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7fe fccb 	bl	8000b7c <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ea:	f7fe fcc7 	bl	8000b7c <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e03e      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021fc:	4b21      	ldr	r3, [pc, #132]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_RCC_OscConfig+0x5be>
 8002208:	e036      	b.n	8002278 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220a:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <HAL_RCC_OscConfig+0x65c>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe fcb4 	bl	8000b7c <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002218:	f7fe fcb0 	bl	8000b7c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e027      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x5ec>
 8002236:	e01f      	b.n	8002278 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e01a      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <HAL_RCC_OscConfig+0x658>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	429a      	cmp	r2, r3
 8002256:	d10d      	bne.n	8002274 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d106      	bne.n	8002274 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	42470060 	.word	0x42470060

0800228c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e11a      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b8f      	ldr	r3, [pc, #572]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d919      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d105      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x34>
 80022b4:	4b8a      	ldr	r3, [pc, #552]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a89      	ldr	r2, [pc, #548]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b87      	ldr	r3, [pc, #540]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 0201 	bic.w	r2, r3, #1
 80022c8:	4985      	ldr	r1, [pc, #532]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d0:	4b83      	ldr	r3, [pc, #524]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d001      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0f9      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ee:	4b7d      	ldr	r3, [pc, #500]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	497a      	ldr	r1, [pc, #488]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 808e 	beq.w	800242a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002316:	4b73      	ldr	r3, [pc, #460]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d121      	bne.n	8002366 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e0d7      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800232e:	4b6d      	ldr	r3, [pc, #436]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d115      	bne.n	8002366 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0cb      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002346:	4b67      	ldr	r3, [pc, #412]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0bf      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0b7      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002366:	4b5f      	ldr	r3, [pc, #380]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f023 0203 	bic.w	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	495c      	ldr	r1, [pc, #368]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002374:	4313      	orrs	r3, r2
 8002376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002378:	f7fe fc00 	bl	8000b7c <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d112      	bne.n	80023ac <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002386:	e00a      	b.n	800239e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002388:	f7fe fbf8 	bl	8000b7c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e09b      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800239e:	4b51      	ldr	r3, [pc, #324]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d1ee      	bne.n	8002388 <HAL_RCC_ClockConfig+0xfc>
 80023aa:	e03e      	b.n	800242a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d112      	bne.n	80023da <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b4:	e00a      	b.n	80023cc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b6:	f7fe fbe1 	bl	8000b7c <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e084      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023cc:	4b45      	ldr	r3, [pc, #276]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b0c      	cmp	r3, #12
 80023d6:	d1ee      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x12a>
 80023d8:	e027      	b.n	800242a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d11d      	bne.n	800241e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	f7fe fbca 	bl	8000b7c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e06d      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023fa:	4b3a      	ldr	r3, [pc, #232]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b04      	cmp	r3, #4
 8002404:	d1ee      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x158>
 8002406:	e010      	b.n	800242a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002408:	f7fe fbb8 	bl	8000b7c <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e05b      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800241e:	4b31      	ldr	r3, [pc, #196]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1ee      	bne.n	8002408 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d219      	bcs.n	800246c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d105      	bne.n	800244a <HAL_RCC_ClockConfig+0x1be>
 800243e:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a27      	ldr	r2, [pc, #156]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 8002444:	f043 0304 	orr.w	r3, r3, #4
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b25      	ldr	r3, [pc, #148]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 0201 	bic.w	r2, r3, #1
 8002452:	4923      	ldr	r1, [pc, #140]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e034      	b.n	80024d6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002478:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4917      	ldr	r1, [pc, #92]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002496:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	490f      	ldr	r1, [pc, #60]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024aa:	f000 f823 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 80024ae:	4602      	mov	r2, r0
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCC_ClockConfig+0x258>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	490b      	ldr	r1, [pc, #44]	; (80024e8 <HAL_RCC_ClockConfig+0x25c>)
 80024bc:	5ccb      	ldrb	r3, [r1, r3]
 80024be:	fa22 f303 	lsr.w	r3, r2, r3
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <HAL_RCC_ClockConfig+0x260>)
 80024c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <HAL_RCC_ClockConfig+0x264>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe fb0a 	bl	8000ae4 <HAL_InitTick>
 80024d0:	4603      	mov	r3, r0
 80024d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80024d4:	7afb      	ldrb	r3, [r7, #11]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023c00 	.word	0x40023c00
 80024e4:	40023800 	.word	0x40023800
 80024e8:	08003a34 	.word	0x08003a34
 80024ec:	20000000 	.word	0x20000000
 80024f0:	20000004 	.word	0x20000004

080024f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f8:	b092      	sub	sp, #72	; 0x48
 80024fa:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80024fc:	4b79      	ldr	r3, [pc, #484]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b0c      	cmp	r3, #12
 800250a:	d00d      	beq.n	8002528 <HAL_RCC_GetSysClockFreq+0x34>
 800250c:	2b0c      	cmp	r3, #12
 800250e:	f200 80d5 	bhi.w	80026bc <HAL_RCC_GetSysClockFreq+0x1c8>
 8002512:	2b04      	cmp	r3, #4
 8002514:	d002      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x28>
 8002516:	2b08      	cmp	r3, #8
 8002518:	d003      	beq.n	8002522 <HAL_RCC_GetSysClockFreq+0x2e>
 800251a:	e0cf      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800251c:	4b72      	ldr	r3, [pc, #456]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800251e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002520:	e0da      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002522:	4b72      	ldr	r3, [pc, #456]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002524:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002526:	e0d7      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252a:	0c9b      	lsrs	r3, r3, #18
 800252c:	f003 020f 	and.w	r2, r3, #15
 8002530:	4b6f      	ldr	r3, [pc, #444]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002532:	5c9b      	ldrb	r3, [r3, r2]
 8002534:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002538:	0d9b      	lsrs	r3, r3, #22
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	3301      	adds	r3, #1
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002542:	4b68      	ldr	r3, [pc, #416]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d05d      	beq.n	800260a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002550:	2200      	movs	r2, #0
 8002552:	4618      	mov	r0, r3
 8002554:	4611      	mov	r1, r2
 8002556:	4604      	mov	r4, r0
 8002558:	460d      	mov	r5, r1
 800255a:	4622      	mov	r2, r4
 800255c:	462b      	mov	r3, r5
 800255e:	f04f 0000 	mov.w	r0, #0
 8002562:	f04f 0100 	mov.w	r1, #0
 8002566:	0159      	lsls	r1, r3, #5
 8002568:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800256c:	0150      	lsls	r0, r2, #5
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4621      	mov	r1, r4
 8002574:	1a51      	subs	r1, r2, r1
 8002576:	6139      	str	r1, [r7, #16]
 8002578:	4629      	mov	r1, r5
 800257a:	eb63 0301 	sbc.w	r3, r3, r1
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800258c:	4659      	mov	r1, fp
 800258e:	018b      	lsls	r3, r1, #6
 8002590:	4651      	mov	r1, sl
 8002592:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002596:	4651      	mov	r1, sl
 8002598:	018a      	lsls	r2, r1, #6
 800259a:	46d4      	mov	ip, sl
 800259c:	ebb2 080c 	subs.w	r8, r2, ip
 80025a0:	4659      	mov	r1, fp
 80025a2:	eb63 0901 	sbc.w	r9, r3, r1
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025ba:	4690      	mov	r8, r2
 80025bc:	4699      	mov	r9, r3
 80025be:	4623      	mov	r3, r4
 80025c0:	eb18 0303 	adds.w	r3, r8, r3
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	462b      	mov	r3, r5
 80025c8:	eb49 0303 	adc.w	r3, r9, r3
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025da:	4629      	mov	r1, r5
 80025dc:	024b      	lsls	r3, r1, #9
 80025de:	4620      	mov	r0, r4
 80025e0:	4629      	mov	r1, r5
 80025e2:	4604      	mov	r4, r0
 80025e4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80025e8:	4601      	mov	r1, r0
 80025ea:	024a      	lsls	r2, r1, #9
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f2:	2200      	movs	r2, #0
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025fc:	f7fd fdbe 	bl	800017c <__aeabi_uldivmod>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4613      	mov	r3, r2
 8002606:	647b      	str	r3, [r7, #68]	; 0x44
 8002608:	e055      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260c:	2200      	movs	r2, #0
 800260e:	623b      	str	r3, [r7, #32]
 8002610:	627a      	str	r2, [r7, #36]	; 0x24
 8002612:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002616:	4642      	mov	r2, r8
 8002618:	464b      	mov	r3, r9
 800261a:	f04f 0000 	mov.w	r0, #0
 800261e:	f04f 0100 	mov.w	r1, #0
 8002622:	0159      	lsls	r1, r3, #5
 8002624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002628:	0150      	lsls	r0, r2, #5
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	46c4      	mov	ip, r8
 8002630:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002634:	4640      	mov	r0, r8
 8002636:	4649      	mov	r1, r9
 8002638:	468c      	mov	ip, r1
 800263a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800264a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800264e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002652:	ebb2 040a 	subs.w	r4, r2, sl
 8002656:	eb63 050b 	sbc.w	r5, r3, fp
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	00eb      	lsls	r3, r5, #3
 8002664:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002668:	00e2      	lsls	r2, r4, #3
 800266a:	4614      	mov	r4, r2
 800266c:	461d      	mov	r5, r3
 800266e:	4603      	mov	r3, r0
 8002670:	18e3      	adds	r3, r4, r3
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	460b      	mov	r3, r1
 8002676:	eb45 0303 	adc.w	r3, r5, r3
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002688:	4629      	mov	r1, r5
 800268a:	028b      	lsls	r3, r1, #10
 800268c:	4620      	mov	r0, r4
 800268e:	4629      	mov	r1, r5
 8002690:	4604      	mov	r4, r0
 8002692:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002696:	4601      	mov	r1, r0
 8002698:	028a      	lsls	r2, r1, #10
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a0:	2200      	movs	r2, #0
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	61fa      	str	r2, [r7, #28]
 80026a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026aa:	f7fd fd67 	bl	800017c <__aeabi_uldivmod>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4613      	mov	r3, r2
 80026b4:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80026b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80026ba:	e00d      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	0b5b      	lsrs	r3, r3, #13
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ca:	3301      	adds	r3, #1
 80026cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80026d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3748      	adds	r7, #72	; 0x48
 80026de:	46bd      	mov	sp, r7
 80026e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	00f42400 	.word	0x00f42400
 80026ec:	007a1200 	.word	0x007a1200
 80026f0:	08003a28 	.word	0x08003a28

080026f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f8:	4b02      	ldr	r3, [pc, #8]	; (8002704 <HAL_RCC_GetHCLKFreq+0x10>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	20000000 	.word	0x20000000

08002708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800270c:	f7ff fff2 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	4903      	ldr	r1, [pc, #12]	; (800272c <HAL_RCC_GetPCLK1Freq+0x24>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40023800 	.word	0x40023800
 800272c:	08003a44 	.word	0x08003a44

08002730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002734:	f7ff ffde 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0adb      	lsrs	r3, r3, #11
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4903      	ldr	r1, [pc, #12]	; (8002754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800
 8002754:	08003a44 	.word	0x08003a44

08002758 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002764:	4b29      	ldr	r3, [pc, #164]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d12c      	bne.n	80027ca <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002770:	4b26      	ldr	r3, [pc, #152]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800277c:	4b24      	ldr	r3, [pc, #144]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e016      	b.n	80027b6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002788:	4b20      	ldr	r3, [pc, #128]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	4a1f      	ldr	r2, [pc, #124]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800278e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002792:	6253      	str	r3, [r2, #36]	; 0x24
 8002794:	4b1d      	ldr	r3, [pc, #116]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80027a0:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80027a8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	4a17      	ldr	r2, [pc, #92]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80027b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80027bc:	d105      	bne.n	80027ca <RCC_SetFlashLatencyFromMSIRange+0x72>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80027c4:	d101      	bne.n	80027ca <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80027c6:	2301      	movs	r3, #1
 80027c8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80027d0:	4b10      	ldr	r3, [pc, #64]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027d6:	f043 0304 	orr.w	r3, r3, #4
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 0201 	bic.w	r2, r3, #1
 80027e4:	490b      	ldr	r1, [pc, #44]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d001      	beq.n	80027fe <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800
 8002810:	40007000 	.word	0x40007000
 8002814:	40023c00 	.word	0x40023c00

08002818 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e042      	b.n	80028b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fd fff6 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2224      	movs	r2, #36	; 0x24
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800285a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f82b 	bl	80028b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002870:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695a      	ldr	r2, [r3, #20]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002880:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002890:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80028f8:	f023 030c 	bic.w	r3, r3, #12
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	430b      	orrs	r3, r1
 8002904:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699a      	ldr	r2, [r3, #24]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a55      	ldr	r2, [pc, #340]	; (8002a78 <UART_SetConfig+0x1c0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d103      	bne.n	800292e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002926:	f7ff ff03 	bl	8002730 <HAL_RCC_GetPCLK2Freq>
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	e002      	b.n	8002934 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800292e:	f7ff feeb 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8002932:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800293c:	d14c      	bne.n	80029d8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	009a      	lsls	r2, r3, #2
 8002948:	441a      	add	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	4a49      	ldr	r2, [pc, #292]	; (8002a7c <UART_SetConfig+0x1c4>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	0119      	lsls	r1, r3, #4
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	009a      	lsls	r2, r3, #2
 8002968:	441a      	add	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fbb2 f2f3 	udiv	r2, r2, r3
 8002974:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <UART_SetConfig+0x1c4>)
 8002976:	fba3 0302 	umull	r0, r3, r3, r2
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2064      	movs	r0, #100	; 0x64
 800297e:	fb00 f303 	mul.w	r3, r0, r3
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	3332      	adds	r3, #50	; 0x32
 8002988:	4a3c      	ldr	r2, [pc, #240]	; (8002a7c <UART_SetConfig+0x1c4>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002996:	4419      	add	r1, r3
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	009a      	lsls	r2, r3, #2
 80029a2:	441a      	add	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ae:	4b33      	ldr	r3, [pc, #204]	; (8002a7c <UART_SetConfig+0x1c4>)
 80029b0:	fba3 0302 	umull	r0, r3, r3, r2
 80029b4:	095b      	lsrs	r3, r3, #5
 80029b6:	2064      	movs	r0, #100	; 0x64
 80029b8:	fb00 f303 	mul.w	r3, r0, r3
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	3332      	adds	r3, #50	; 0x32
 80029c2:	4a2e      	ldr	r2, [pc, #184]	; (8002a7c <UART_SetConfig+0x1c4>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	f003 0207 	and.w	r2, r3, #7
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	440a      	add	r2, r1
 80029d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029d6:	e04a      	b.n	8002a6e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	009a      	lsls	r2, r3, #2
 80029e2:	441a      	add	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ee:	4a23      	ldr	r2, [pc, #140]	; (8002a7c <UART_SetConfig+0x1c4>)
 80029f0:	fba2 2303 	umull	r2, r3, r2, r3
 80029f4:	095b      	lsrs	r3, r3, #5
 80029f6:	0119      	lsls	r1, r3, #4
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	009a      	lsls	r2, r3, #2
 8002a02:	441a      	add	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <UART_SetConfig+0x1c4>)
 8002a10:	fba3 0302 	umull	r0, r3, r3, r2
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	2064      	movs	r0, #100	; 0x64
 8002a18:	fb00 f303 	mul.w	r3, r0, r3
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	3332      	adds	r3, #50	; 0x32
 8002a22:	4a16      	ldr	r2, [pc, #88]	; (8002a7c <UART_SetConfig+0x1c4>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a2e:	4419      	add	r1, r3
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	009a      	lsls	r2, r3, #2
 8002a3a:	441a      	add	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <UART_SetConfig+0x1c4>)
 8002a48:	fba3 0302 	umull	r0, r3, r3, r2
 8002a4c:	095b      	lsrs	r3, r3, #5
 8002a4e:	2064      	movs	r0, #100	; 0x64
 8002a50:	fb00 f303 	mul.w	r3, r0, r3
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	3332      	adds	r3, #50	; 0x32
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <UART_SetConfig+0x1c4>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	f003 020f 	and.w	r2, r3, #15
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	440a      	add	r2, r1
 8002a6c:	609a      	str	r2, [r3, #8]
}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40013800 	.word	0x40013800
 8002a7c:	51eb851f 	.word	0x51eb851f

08002a80 <__errno>:
 8002a80:	4b01      	ldr	r3, [pc, #4]	; (8002a88 <__errno+0x8>)
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	2000000c 	.word	0x2000000c

08002a8c <__libc_init_array>:
 8002a8c:	b570      	push	{r4, r5, r6, lr}
 8002a8e:	2600      	movs	r6, #0
 8002a90:	4d0c      	ldr	r5, [pc, #48]	; (8002ac4 <__libc_init_array+0x38>)
 8002a92:	4c0d      	ldr	r4, [pc, #52]	; (8002ac8 <__libc_init_array+0x3c>)
 8002a94:	1b64      	subs	r4, r4, r5
 8002a96:	10a4      	asrs	r4, r4, #2
 8002a98:	42a6      	cmp	r6, r4
 8002a9a:	d109      	bne.n	8002ab0 <__libc_init_array+0x24>
 8002a9c:	f000 ffb6 	bl	8003a0c <_init>
 8002aa0:	2600      	movs	r6, #0
 8002aa2:	4d0a      	ldr	r5, [pc, #40]	; (8002acc <__libc_init_array+0x40>)
 8002aa4:	4c0a      	ldr	r4, [pc, #40]	; (8002ad0 <__libc_init_array+0x44>)
 8002aa6:	1b64      	subs	r4, r4, r5
 8002aa8:	10a4      	asrs	r4, r4, #2
 8002aaa:	42a6      	cmp	r6, r4
 8002aac:	d105      	bne.n	8002aba <__libc_init_array+0x2e>
 8002aae:	bd70      	pop	{r4, r5, r6, pc}
 8002ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab4:	4798      	blx	r3
 8002ab6:	3601      	adds	r6, #1
 8002ab8:	e7ee      	b.n	8002a98 <__libc_init_array+0xc>
 8002aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002abe:	4798      	blx	r3
 8002ac0:	3601      	adds	r6, #1
 8002ac2:	e7f2      	b.n	8002aaa <__libc_init_array+0x1e>
 8002ac4:	08003aec 	.word	0x08003aec
 8002ac8:	08003aec 	.word	0x08003aec
 8002acc:	08003aec 	.word	0x08003aec
 8002ad0:	08003af0 	.word	0x08003af0

08002ad4 <memset>:
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4402      	add	r2, r0
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d100      	bne.n	8002ade <memset+0xa>
 8002adc:	4770      	bx	lr
 8002ade:	f803 1b01 	strb.w	r1, [r3], #1
 8002ae2:	e7f9      	b.n	8002ad8 <memset+0x4>

08002ae4 <iprintf>:
 8002ae4:	b40f      	push	{r0, r1, r2, r3}
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <iprintf+0x2c>)
 8002ae8:	b513      	push	{r0, r1, r4, lr}
 8002aea:	681c      	ldr	r4, [r3, #0]
 8002aec:	b124      	cbz	r4, 8002af8 <iprintf+0x14>
 8002aee:	69a3      	ldr	r3, [r4, #24]
 8002af0:	b913      	cbnz	r3, 8002af8 <iprintf+0x14>
 8002af2:	4620      	mov	r0, r4
 8002af4:	f000 f866 	bl	8002bc4 <__sinit>
 8002af8:	ab05      	add	r3, sp, #20
 8002afa:	4620      	mov	r0, r4
 8002afc:	9a04      	ldr	r2, [sp, #16]
 8002afe:	68a1      	ldr	r1, [r4, #8]
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	f000 f9bb 	bl	8002e7c <_vfiprintf_r>
 8002b06:	b002      	add	sp, #8
 8002b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b0c:	b004      	add	sp, #16
 8002b0e:	4770      	bx	lr
 8002b10:	2000000c 	.word	0x2000000c

08002b14 <std>:
 8002b14:	2300      	movs	r3, #0
 8002b16:	b510      	push	{r4, lr}
 8002b18:	4604      	mov	r4, r0
 8002b1a:	e9c0 3300 	strd	r3, r3, [r0]
 8002b1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b22:	6083      	str	r3, [r0, #8]
 8002b24:	8181      	strh	r1, [r0, #12]
 8002b26:	6643      	str	r3, [r0, #100]	; 0x64
 8002b28:	81c2      	strh	r2, [r0, #14]
 8002b2a:	6183      	str	r3, [r0, #24]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	2208      	movs	r2, #8
 8002b30:	305c      	adds	r0, #92	; 0x5c
 8002b32:	f7ff ffcf 	bl	8002ad4 <memset>
 8002b36:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <std+0x38>)
 8002b38:	6224      	str	r4, [r4, #32]
 8002b3a:	6263      	str	r3, [r4, #36]	; 0x24
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <std+0x3c>)
 8002b3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <std+0x40>)
 8002b42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b44:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <std+0x44>)
 8002b46:	6323      	str	r3, [r4, #48]	; 0x30
 8002b48:	bd10      	pop	{r4, pc}
 8002b4a:	bf00      	nop
 8002b4c:	08003429 	.word	0x08003429
 8002b50:	0800344b 	.word	0x0800344b
 8002b54:	08003483 	.word	0x08003483
 8002b58:	080034a7 	.word	0x080034a7

08002b5c <_cleanup_r>:
 8002b5c:	4901      	ldr	r1, [pc, #4]	; (8002b64 <_cleanup_r+0x8>)
 8002b5e:	f000 b8af 	b.w	8002cc0 <_fwalk_reent>
 8002b62:	bf00      	nop
 8002b64:	08003779 	.word	0x08003779

08002b68 <__sfmoreglue>:
 8002b68:	2268      	movs	r2, #104	; 0x68
 8002b6a:	b570      	push	{r4, r5, r6, lr}
 8002b6c:	1e4d      	subs	r5, r1, #1
 8002b6e:	4355      	muls	r5, r2
 8002b70:	460e      	mov	r6, r1
 8002b72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002b76:	f000 f8e5 	bl	8002d44 <_malloc_r>
 8002b7a:	4604      	mov	r4, r0
 8002b7c:	b140      	cbz	r0, 8002b90 <__sfmoreglue+0x28>
 8002b7e:	2100      	movs	r1, #0
 8002b80:	e9c0 1600 	strd	r1, r6, [r0]
 8002b84:	300c      	adds	r0, #12
 8002b86:	60a0      	str	r0, [r4, #8]
 8002b88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b8c:	f7ff ffa2 	bl	8002ad4 <memset>
 8002b90:	4620      	mov	r0, r4
 8002b92:	bd70      	pop	{r4, r5, r6, pc}

08002b94 <__sfp_lock_acquire>:
 8002b94:	4801      	ldr	r0, [pc, #4]	; (8002b9c <__sfp_lock_acquire+0x8>)
 8002b96:	f000 b8b3 	b.w	8002d00 <__retarget_lock_acquire_recursive>
 8002b9a:	bf00      	nop
 8002b9c:	2000017d 	.word	0x2000017d

08002ba0 <__sfp_lock_release>:
 8002ba0:	4801      	ldr	r0, [pc, #4]	; (8002ba8 <__sfp_lock_release+0x8>)
 8002ba2:	f000 b8ae 	b.w	8002d02 <__retarget_lock_release_recursive>
 8002ba6:	bf00      	nop
 8002ba8:	2000017d 	.word	0x2000017d

08002bac <__sinit_lock_acquire>:
 8002bac:	4801      	ldr	r0, [pc, #4]	; (8002bb4 <__sinit_lock_acquire+0x8>)
 8002bae:	f000 b8a7 	b.w	8002d00 <__retarget_lock_acquire_recursive>
 8002bb2:	bf00      	nop
 8002bb4:	2000017e 	.word	0x2000017e

08002bb8 <__sinit_lock_release>:
 8002bb8:	4801      	ldr	r0, [pc, #4]	; (8002bc0 <__sinit_lock_release+0x8>)
 8002bba:	f000 b8a2 	b.w	8002d02 <__retarget_lock_release_recursive>
 8002bbe:	bf00      	nop
 8002bc0:	2000017e 	.word	0x2000017e

08002bc4 <__sinit>:
 8002bc4:	b510      	push	{r4, lr}
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	f7ff fff0 	bl	8002bac <__sinit_lock_acquire>
 8002bcc:	69a3      	ldr	r3, [r4, #24]
 8002bce:	b11b      	cbz	r3, 8002bd8 <__sinit+0x14>
 8002bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bd4:	f7ff bff0 	b.w	8002bb8 <__sinit_lock_release>
 8002bd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002bdc:	6523      	str	r3, [r4, #80]	; 0x50
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <__sinit+0x68>)
 8002be0:	4a13      	ldr	r2, [pc, #76]	; (8002c30 <__sinit+0x6c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	62a2      	str	r2, [r4, #40]	; 0x28
 8002be6:	42a3      	cmp	r3, r4
 8002be8:	bf08      	it	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	4620      	mov	r0, r4
 8002bee:	bf08      	it	eq
 8002bf0:	61a3      	streq	r3, [r4, #24]
 8002bf2:	f000 f81f 	bl	8002c34 <__sfp>
 8002bf6:	6060      	str	r0, [r4, #4]
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f000 f81b 	bl	8002c34 <__sfp>
 8002bfe:	60a0      	str	r0, [r4, #8]
 8002c00:	4620      	mov	r0, r4
 8002c02:	f000 f817 	bl	8002c34 <__sfp>
 8002c06:	2200      	movs	r2, #0
 8002c08:	2104      	movs	r1, #4
 8002c0a:	60e0      	str	r0, [r4, #12]
 8002c0c:	6860      	ldr	r0, [r4, #4]
 8002c0e:	f7ff ff81 	bl	8002b14 <std>
 8002c12:	2201      	movs	r2, #1
 8002c14:	2109      	movs	r1, #9
 8002c16:	68a0      	ldr	r0, [r4, #8]
 8002c18:	f7ff ff7c 	bl	8002b14 <std>
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	2112      	movs	r1, #18
 8002c20:	68e0      	ldr	r0, [r4, #12]
 8002c22:	f7ff ff77 	bl	8002b14 <std>
 8002c26:	2301      	movs	r3, #1
 8002c28:	61a3      	str	r3, [r4, #24]
 8002c2a:	e7d1      	b.n	8002bd0 <__sinit+0xc>
 8002c2c:	08003a4c 	.word	0x08003a4c
 8002c30:	08002b5d 	.word	0x08002b5d

08002c34 <__sfp>:
 8002c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c36:	4607      	mov	r7, r0
 8002c38:	f7ff ffac 	bl	8002b94 <__sfp_lock_acquire>
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <__sfp+0x84>)
 8002c3e:	681e      	ldr	r6, [r3, #0]
 8002c40:	69b3      	ldr	r3, [r6, #24]
 8002c42:	b913      	cbnz	r3, 8002c4a <__sfp+0x16>
 8002c44:	4630      	mov	r0, r6
 8002c46:	f7ff ffbd 	bl	8002bc4 <__sinit>
 8002c4a:	3648      	adds	r6, #72	; 0x48
 8002c4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	d503      	bpl.n	8002c5c <__sfp+0x28>
 8002c54:	6833      	ldr	r3, [r6, #0]
 8002c56:	b30b      	cbz	r3, 8002c9c <__sfp+0x68>
 8002c58:	6836      	ldr	r6, [r6, #0]
 8002c5a:	e7f7      	b.n	8002c4c <__sfp+0x18>
 8002c5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002c60:	b9d5      	cbnz	r5, 8002c98 <__sfp+0x64>
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <__sfp+0x88>)
 8002c64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c68:	60e3      	str	r3, [r4, #12]
 8002c6a:	6665      	str	r5, [r4, #100]	; 0x64
 8002c6c:	f000 f847 	bl	8002cfe <__retarget_lock_init_recursive>
 8002c70:	f7ff ff96 	bl	8002ba0 <__sfp_lock_release>
 8002c74:	2208      	movs	r2, #8
 8002c76:	4629      	mov	r1, r5
 8002c78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002c7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002c80:	6025      	str	r5, [r4, #0]
 8002c82:	61a5      	str	r5, [r4, #24]
 8002c84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c88:	f7ff ff24 	bl	8002ad4 <memset>
 8002c8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002c90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002c94:	4620      	mov	r0, r4
 8002c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c98:	3468      	adds	r4, #104	; 0x68
 8002c9a:	e7d9      	b.n	8002c50 <__sfp+0x1c>
 8002c9c:	2104      	movs	r1, #4
 8002c9e:	4638      	mov	r0, r7
 8002ca0:	f7ff ff62 	bl	8002b68 <__sfmoreglue>
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	6030      	str	r0, [r6, #0]
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	d1d5      	bne.n	8002c58 <__sfp+0x24>
 8002cac:	f7ff ff78 	bl	8002ba0 <__sfp_lock_release>
 8002cb0:	230c      	movs	r3, #12
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	e7ee      	b.n	8002c94 <__sfp+0x60>
 8002cb6:	bf00      	nop
 8002cb8:	08003a4c 	.word	0x08003a4c
 8002cbc:	ffff0001 	.word	0xffff0001

08002cc0 <_fwalk_reent>:
 8002cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cc4:	4606      	mov	r6, r0
 8002cc6:	4688      	mov	r8, r1
 8002cc8:	2700      	movs	r7, #0
 8002cca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002cce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002cd2:	f1b9 0901 	subs.w	r9, r9, #1
 8002cd6:	d505      	bpl.n	8002ce4 <_fwalk_reent+0x24>
 8002cd8:	6824      	ldr	r4, [r4, #0]
 8002cda:	2c00      	cmp	r4, #0
 8002cdc:	d1f7      	bne.n	8002cce <_fwalk_reent+0xe>
 8002cde:	4638      	mov	r0, r7
 8002ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ce4:	89ab      	ldrh	r3, [r5, #12]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d907      	bls.n	8002cfa <_fwalk_reent+0x3a>
 8002cea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	d003      	beq.n	8002cfa <_fwalk_reent+0x3a>
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	4630      	mov	r0, r6
 8002cf6:	47c0      	blx	r8
 8002cf8:	4307      	orrs	r7, r0
 8002cfa:	3568      	adds	r5, #104	; 0x68
 8002cfc:	e7e9      	b.n	8002cd2 <_fwalk_reent+0x12>

08002cfe <__retarget_lock_init_recursive>:
 8002cfe:	4770      	bx	lr

08002d00 <__retarget_lock_acquire_recursive>:
 8002d00:	4770      	bx	lr

08002d02 <__retarget_lock_release_recursive>:
 8002d02:	4770      	bx	lr

08002d04 <sbrk_aligned>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	4e0e      	ldr	r6, [pc, #56]	; (8002d40 <sbrk_aligned+0x3c>)
 8002d08:	460c      	mov	r4, r1
 8002d0a:	6831      	ldr	r1, [r6, #0]
 8002d0c:	4605      	mov	r5, r0
 8002d0e:	b911      	cbnz	r1, 8002d16 <sbrk_aligned+0x12>
 8002d10:	f000 fb7a 	bl	8003408 <_sbrk_r>
 8002d14:	6030      	str	r0, [r6, #0]
 8002d16:	4621      	mov	r1, r4
 8002d18:	4628      	mov	r0, r5
 8002d1a:	f000 fb75 	bl	8003408 <_sbrk_r>
 8002d1e:	1c43      	adds	r3, r0, #1
 8002d20:	d00a      	beq.n	8002d38 <sbrk_aligned+0x34>
 8002d22:	1cc4      	adds	r4, r0, #3
 8002d24:	f024 0403 	bic.w	r4, r4, #3
 8002d28:	42a0      	cmp	r0, r4
 8002d2a:	d007      	beq.n	8002d3c <sbrk_aligned+0x38>
 8002d2c:	1a21      	subs	r1, r4, r0
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f000 fb6a 	bl	8003408 <_sbrk_r>
 8002d34:	3001      	adds	r0, #1
 8002d36:	d101      	bne.n	8002d3c <sbrk_aligned+0x38>
 8002d38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	bd70      	pop	{r4, r5, r6, pc}
 8002d40:	20000184 	.word	0x20000184

08002d44 <_malloc_r>:
 8002d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d48:	1ccd      	adds	r5, r1, #3
 8002d4a:	f025 0503 	bic.w	r5, r5, #3
 8002d4e:	3508      	adds	r5, #8
 8002d50:	2d0c      	cmp	r5, #12
 8002d52:	bf38      	it	cc
 8002d54:	250c      	movcc	r5, #12
 8002d56:	2d00      	cmp	r5, #0
 8002d58:	4607      	mov	r7, r0
 8002d5a:	db01      	blt.n	8002d60 <_malloc_r+0x1c>
 8002d5c:	42a9      	cmp	r1, r5
 8002d5e:	d905      	bls.n	8002d6c <_malloc_r+0x28>
 8002d60:	230c      	movs	r3, #12
 8002d62:	2600      	movs	r6, #0
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	4630      	mov	r0, r6
 8002d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d6c:	4e2e      	ldr	r6, [pc, #184]	; (8002e28 <_malloc_r+0xe4>)
 8002d6e:	f000 fdc5 	bl	80038fc <__malloc_lock>
 8002d72:	6833      	ldr	r3, [r6, #0]
 8002d74:	461c      	mov	r4, r3
 8002d76:	bb34      	cbnz	r4, 8002dc6 <_malloc_r+0x82>
 8002d78:	4629      	mov	r1, r5
 8002d7a:	4638      	mov	r0, r7
 8002d7c:	f7ff ffc2 	bl	8002d04 <sbrk_aligned>
 8002d80:	1c43      	adds	r3, r0, #1
 8002d82:	4604      	mov	r4, r0
 8002d84:	d14d      	bne.n	8002e22 <_malloc_r+0xde>
 8002d86:	6834      	ldr	r4, [r6, #0]
 8002d88:	4626      	mov	r6, r4
 8002d8a:	2e00      	cmp	r6, #0
 8002d8c:	d140      	bne.n	8002e10 <_malloc_r+0xcc>
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	4631      	mov	r1, r6
 8002d92:	4638      	mov	r0, r7
 8002d94:	eb04 0803 	add.w	r8, r4, r3
 8002d98:	f000 fb36 	bl	8003408 <_sbrk_r>
 8002d9c:	4580      	cmp	r8, r0
 8002d9e:	d13a      	bne.n	8002e16 <_malloc_r+0xd2>
 8002da0:	6821      	ldr	r1, [r4, #0]
 8002da2:	3503      	adds	r5, #3
 8002da4:	1a6d      	subs	r5, r5, r1
 8002da6:	f025 0503 	bic.w	r5, r5, #3
 8002daa:	3508      	adds	r5, #8
 8002dac:	2d0c      	cmp	r5, #12
 8002dae:	bf38      	it	cc
 8002db0:	250c      	movcc	r5, #12
 8002db2:	4638      	mov	r0, r7
 8002db4:	4629      	mov	r1, r5
 8002db6:	f7ff ffa5 	bl	8002d04 <sbrk_aligned>
 8002dba:	3001      	adds	r0, #1
 8002dbc:	d02b      	beq.n	8002e16 <_malloc_r+0xd2>
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	442b      	add	r3, r5
 8002dc2:	6023      	str	r3, [r4, #0]
 8002dc4:	e00e      	b.n	8002de4 <_malloc_r+0xa0>
 8002dc6:	6822      	ldr	r2, [r4, #0]
 8002dc8:	1b52      	subs	r2, r2, r5
 8002dca:	d41e      	bmi.n	8002e0a <_malloc_r+0xc6>
 8002dcc:	2a0b      	cmp	r2, #11
 8002dce:	d916      	bls.n	8002dfe <_malloc_r+0xba>
 8002dd0:	1961      	adds	r1, r4, r5
 8002dd2:	42a3      	cmp	r3, r4
 8002dd4:	6025      	str	r5, [r4, #0]
 8002dd6:	bf18      	it	ne
 8002dd8:	6059      	strne	r1, [r3, #4]
 8002dda:	6863      	ldr	r3, [r4, #4]
 8002ddc:	bf08      	it	eq
 8002dde:	6031      	streq	r1, [r6, #0]
 8002de0:	5162      	str	r2, [r4, r5]
 8002de2:	604b      	str	r3, [r1, #4]
 8002de4:	4638      	mov	r0, r7
 8002de6:	f104 060b 	add.w	r6, r4, #11
 8002dea:	f000 fd8d 	bl	8003908 <__malloc_unlock>
 8002dee:	f026 0607 	bic.w	r6, r6, #7
 8002df2:	1d23      	adds	r3, r4, #4
 8002df4:	1af2      	subs	r2, r6, r3
 8002df6:	d0b6      	beq.n	8002d66 <_malloc_r+0x22>
 8002df8:	1b9b      	subs	r3, r3, r6
 8002dfa:	50a3      	str	r3, [r4, r2]
 8002dfc:	e7b3      	b.n	8002d66 <_malloc_r+0x22>
 8002dfe:	6862      	ldr	r2, [r4, #4]
 8002e00:	42a3      	cmp	r3, r4
 8002e02:	bf0c      	ite	eq
 8002e04:	6032      	streq	r2, [r6, #0]
 8002e06:	605a      	strne	r2, [r3, #4]
 8002e08:	e7ec      	b.n	8002de4 <_malloc_r+0xa0>
 8002e0a:	4623      	mov	r3, r4
 8002e0c:	6864      	ldr	r4, [r4, #4]
 8002e0e:	e7b2      	b.n	8002d76 <_malloc_r+0x32>
 8002e10:	4634      	mov	r4, r6
 8002e12:	6876      	ldr	r6, [r6, #4]
 8002e14:	e7b9      	b.n	8002d8a <_malloc_r+0x46>
 8002e16:	230c      	movs	r3, #12
 8002e18:	4638      	mov	r0, r7
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	f000 fd74 	bl	8003908 <__malloc_unlock>
 8002e20:	e7a1      	b.n	8002d66 <_malloc_r+0x22>
 8002e22:	6025      	str	r5, [r4, #0]
 8002e24:	e7de      	b.n	8002de4 <_malloc_r+0xa0>
 8002e26:	bf00      	nop
 8002e28:	20000180 	.word	0x20000180

08002e2c <__sfputc_r>:
 8002e2c:	6893      	ldr	r3, [r2, #8]
 8002e2e:	b410      	push	{r4}
 8002e30:	3b01      	subs	r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	6093      	str	r3, [r2, #8]
 8002e36:	da07      	bge.n	8002e48 <__sfputc_r+0x1c>
 8002e38:	6994      	ldr	r4, [r2, #24]
 8002e3a:	42a3      	cmp	r3, r4
 8002e3c:	db01      	blt.n	8002e42 <__sfputc_r+0x16>
 8002e3e:	290a      	cmp	r1, #10
 8002e40:	d102      	bne.n	8002e48 <__sfputc_r+0x1c>
 8002e42:	bc10      	pop	{r4}
 8002e44:	f000 bb34 	b.w	80034b0 <__swbuf_r>
 8002e48:	6813      	ldr	r3, [r2, #0]
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	6010      	str	r0, [r2, #0]
 8002e4e:	7019      	strb	r1, [r3, #0]
 8002e50:	4608      	mov	r0, r1
 8002e52:	bc10      	pop	{r4}
 8002e54:	4770      	bx	lr

08002e56 <__sfputs_r>:
 8002e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e58:	4606      	mov	r6, r0
 8002e5a:	460f      	mov	r7, r1
 8002e5c:	4614      	mov	r4, r2
 8002e5e:	18d5      	adds	r5, r2, r3
 8002e60:	42ac      	cmp	r4, r5
 8002e62:	d101      	bne.n	8002e68 <__sfputs_r+0x12>
 8002e64:	2000      	movs	r0, #0
 8002e66:	e007      	b.n	8002e78 <__sfputs_r+0x22>
 8002e68:	463a      	mov	r2, r7
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e70:	f7ff ffdc 	bl	8002e2c <__sfputc_r>
 8002e74:	1c43      	adds	r3, r0, #1
 8002e76:	d1f3      	bne.n	8002e60 <__sfputs_r+0xa>
 8002e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e7c <_vfiprintf_r>:
 8002e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e80:	460d      	mov	r5, r1
 8002e82:	4614      	mov	r4, r2
 8002e84:	4698      	mov	r8, r3
 8002e86:	4606      	mov	r6, r0
 8002e88:	b09d      	sub	sp, #116	; 0x74
 8002e8a:	b118      	cbz	r0, 8002e94 <_vfiprintf_r+0x18>
 8002e8c:	6983      	ldr	r3, [r0, #24]
 8002e8e:	b90b      	cbnz	r3, 8002e94 <_vfiprintf_r+0x18>
 8002e90:	f7ff fe98 	bl	8002bc4 <__sinit>
 8002e94:	4b89      	ldr	r3, [pc, #548]	; (80030bc <_vfiprintf_r+0x240>)
 8002e96:	429d      	cmp	r5, r3
 8002e98:	d11b      	bne.n	8002ed2 <_vfiprintf_r+0x56>
 8002e9a:	6875      	ldr	r5, [r6, #4]
 8002e9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e9e:	07d9      	lsls	r1, r3, #31
 8002ea0:	d405      	bmi.n	8002eae <_vfiprintf_r+0x32>
 8002ea2:	89ab      	ldrh	r3, [r5, #12]
 8002ea4:	059a      	lsls	r2, r3, #22
 8002ea6:	d402      	bmi.n	8002eae <_vfiprintf_r+0x32>
 8002ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002eaa:	f7ff ff29 	bl	8002d00 <__retarget_lock_acquire_recursive>
 8002eae:	89ab      	ldrh	r3, [r5, #12]
 8002eb0:	071b      	lsls	r3, r3, #28
 8002eb2:	d501      	bpl.n	8002eb8 <_vfiprintf_r+0x3c>
 8002eb4:	692b      	ldr	r3, [r5, #16]
 8002eb6:	b9eb      	cbnz	r3, 8002ef4 <_vfiprintf_r+0x78>
 8002eb8:	4629      	mov	r1, r5
 8002eba:	4630      	mov	r0, r6
 8002ebc:	f000 fb5c 	bl	8003578 <__swsetup_r>
 8002ec0:	b1c0      	cbz	r0, 8002ef4 <_vfiprintf_r+0x78>
 8002ec2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ec4:	07dc      	lsls	r4, r3, #31
 8002ec6:	d50e      	bpl.n	8002ee6 <_vfiprintf_r+0x6a>
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ecc:	b01d      	add	sp, #116	; 0x74
 8002ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ed2:	4b7b      	ldr	r3, [pc, #492]	; (80030c0 <_vfiprintf_r+0x244>)
 8002ed4:	429d      	cmp	r5, r3
 8002ed6:	d101      	bne.n	8002edc <_vfiprintf_r+0x60>
 8002ed8:	68b5      	ldr	r5, [r6, #8]
 8002eda:	e7df      	b.n	8002e9c <_vfiprintf_r+0x20>
 8002edc:	4b79      	ldr	r3, [pc, #484]	; (80030c4 <_vfiprintf_r+0x248>)
 8002ede:	429d      	cmp	r5, r3
 8002ee0:	bf08      	it	eq
 8002ee2:	68f5      	ldreq	r5, [r6, #12]
 8002ee4:	e7da      	b.n	8002e9c <_vfiprintf_r+0x20>
 8002ee6:	89ab      	ldrh	r3, [r5, #12]
 8002ee8:	0598      	lsls	r0, r3, #22
 8002eea:	d4ed      	bmi.n	8002ec8 <_vfiprintf_r+0x4c>
 8002eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002eee:	f7ff ff08 	bl	8002d02 <__retarget_lock_release_recursive>
 8002ef2:	e7e9      	b.n	8002ec8 <_vfiprintf_r+0x4c>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ef8:	2320      	movs	r3, #32
 8002efa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002efe:	2330      	movs	r3, #48	; 0x30
 8002f00:	f04f 0901 	mov.w	r9, #1
 8002f04:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f08:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80030c8 <_vfiprintf_r+0x24c>
 8002f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f10:	4623      	mov	r3, r4
 8002f12:	469a      	mov	sl, r3
 8002f14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f18:	b10a      	cbz	r2, 8002f1e <_vfiprintf_r+0xa2>
 8002f1a:	2a25      	cmp	r2, #37	; 0x25
 8002f1c:	d1f9      	bne.n	8002f12 <_vfiprintf_r+0x96>
 8002f1e:	ebba 0b04 	subs.w	fp, sl, r4
 8002f22:	d00b      	beq.n	8002f3c <_vfiprintf_r+0xc0>
 8002f24:	465b      	mov	r3, fp
 8002f26:	4622      	mov	r2, r4
 8002f28:	4629      	mov	r1, r5
 8002f2a:	4630      	mov	r0, r6
 8002f2c:	f7ff ff93 	bl	8002e56 <__sfputs_r>
 8002f30:	3001      	adds	r0, #1
 8002f32:	f000 80aa 	beq.w	800308a <_vfiprintf_r+0x20e>
 8002f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f38:	445a      	add	r2, fp
 8002f3a:	9209      	str	r2, [sp, #36]	; 0x24
 8002f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80a2 	beq.w	800308a <_vfiprintf_r+0x20e>
 8002f46:	2300      	movs	r3, #0
 8002f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f50:	f10a 0a01 	add.w	sl, sl, #1
 8002f54:	9304      	str	r3, [sp, #16]
 8002f56:	9307      	str	r3, [sp, #28]
 8002f58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f5c:	931a      	str	r3, [sp, #104]	; 0x68
 8002f5e:	4654      	mov	r4, sl
 8002f60:	2205      	movs	r2, #5
 8002f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f66:	4858      	ldr	r0, [pc, #352]	; (80030c8 <_vfiprintf_r+0x24c>)
 8002f68:	f000 fcba 	bl	80038e0 <memchr>
 8002f6c:	9a04      	ldr	r2, [sp, #16]
 8002f6e:	b9d8      	cbnz	r0, 8002fa8 <_vfiprintf_r+0x12c>
 8002f70:	06d1      	lsls	r1, r2, #27
 8002f72:	bf44      	itt	mi
 8002f74:	2320      	movmi	r3, #32
 8002f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f7a:	0713      	lsls	r3, r2, #28
 8002f7c:	bf44      	itt	mi
 8002f7e:	232b      	movmi	r3, #43	; 0x2b
 8002f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f84:	f89a 3000 	ldrb.w	r3, [sl]
 8002f88:	2b2a      	cmp	r3, #42	; 0x2a
 8002f8a:	d015      	beq.n	8002fb8 <_vfiprintf_r+0x13c>
 8002f8c:	4654      	mov	r4, sl
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f04f 0c0a 	mov.w	ip, #10
 8002f94:	9a07      	ldr	r2, [sp, #28]
 8002f96:	4621      	mov	r1, r4
 8002f98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f9c:	3b30      	subs	r3, #48	; 0x30
 8002f9e:	2b09      	cmp	r3, #9
 8002fa0:	d94e      	bls.n	8003040 <_vfiprintf_r+0x1c4>
 8002fa2:	b1b0      	cbz	r0, 8002fd2 <_vfiprintf_r+0x156>
 8002fa4:	9207      	str	r2, [sp, #28]
 8002fa6:	e014      	b.n	8002fd2 <_vfiprintf_r+0x156>
 8002fa8:	eba0 0308 	sub.w	r3, r0, r8
 8002fac:	fa09 f303 	lsl.w	r3, r9, r3
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	46a2      	mov	sl, r4
 8002fb4:	9304      	str	r3, [sp, #16]
 8002fb6:	e7d2      	b.n	8002f5e <_vfiprintf_r+0xe2>
 8002fb8:	9b03      	ldr	r3, [sp, #12]
 8002fba:	1d19      	adds	r1, r3, #4
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	9103      	str	r1, [sp, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bfbb      	ittet	lt
 8002fc4:	425b      	neglt	r3, r3
 8002fc6:	f042 0202 	orrlt.w	r2, r2, #2
 8002fca:	9307      	strge	r3, [sp, #28]
 8002fcc:	9307      	strlt	r3, [sp, #28]
 8002fce:	bfb8      	it	lt
 8002fd0:	9204      	strlt	r2, [sp, #16]
 8002fd2:	7823      	ldrb	r3, [r4, #0]
 8002fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8002fd6:	d10c      	bne.n	8002ff2 <_vfiprintf_r+0x176>
 8002fd8:	7863      	ldrb	r3, [r4, #1]
 8002fda:	2b2a      	cmp	r3, #42	; 0x2a
 8002fdc:	d135      	bne.n	800304a <_vfiprintf_r+0x1ce>
 8002fde:	9b03      	ldr	r3, [sp, #12]
 8002fe0:	3402      	adds	r4, #2
 8002fe2:	1d1a      	adds	r2, r3, #4
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	9203      	str	r2, [sp, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bfb8      	it	lt
 8002fec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002ff0:	9305      	str	r3, [sp, #20]
 8002ff2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80030cc <_vfiprintf_r+0x250>
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	4650      	mov	r0, sl
 8002ffa:	7821      	ldrb	r1, [r4, #0]
 8002ffc:	f000 fc70 	bl	80038e0 <memchr>
 8003000:	b140      	cbz	r0, 8003014 <_vfiprintf_r+0x198>
 8003002:	2340      	movs	r3, #64	; 0x40
 8003004:	eba0 000a 	sub.w	r0, r0, sl
 8003008:	fa03 f000 	lsl.w	r0, r3, r0
 800300c:	9b04      	ldr	r3, [sp, #16]
 800300e:	3401      	adds	r4, #1
 8003010:	4303      	orrs	r3, r0
 8003012:	9304      	str	r3, [sp, #16]
 8003014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003018:	2206      	movs	r2, #6
 800301a:	482d      	ldr	r0, [pc, #180]	; (80030d0 <_vfiprintf_r+0x254>)
 800301c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003020:	f000 fc5e 	bl	80038e0 <memchr>
 8003024:	2800      	cmp	r0, #0
 8003026:	d03f      	beq.n	80030a8 <_vfiprintf_r+0x22c>
 8003028:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <_vfiprintf_r+0x258>)
 800302a:	bb1b      	cbnz	r3, 8003074 <_vfiprintf_r+0x1f8>
 800302c:	9b03      	ldr	r3, [sp, #12]
 800302e:	3307      	adds	r3, #7
 8003030:	f023 0307 	bic.w	r3, r3, #7
 8003034:	3308      	adds	r3, #8
 8003036:	9303      	str	r3, [sp, #12]
 8003038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800303a:	443b      	add	r3, r7
 800303c:	9309      	str	r3, [sp, #36]	; 0x24
 800303e:	e767      	b.n	8002f10 <_vfiprintf_r+0x94>
 8003040:	460c      	mov	r4, r1
 8003042:	2001      	movs	r0, #1
 8003044:	fb0c 3202 	mla	r2, ip, r2, r3
 8003048:	e7a5      	b.n	8002f96 <_vfiprintf_r+0x11a>
 800304a:	2300      	movs	r3, #0
 800304c:	f04f 0c0a 	mov.w	ip, #10
 8003050:	4619      	mov	r1, r3
 8003052:	3401      	adds	r4, #1
 8003054:	9305      	str	r3, [sp, #20]
 8003056:	4620      	mov	r0, r4
 8003058:	f810 2b01 	ldrb.w	r2, [r0], #1
 800305c:	3a30      	subs	r2, #48	; 0x30
 800305e:	2a09      	cmp	r2, #9
 8003060:	d903      	bls.n	800306a <_vfiprintf_r+0x1ee>
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0c5      	beq.n	8002ff2 <_vfiprintf_r+0x176>
 8003066:	9105      	str	r1, [sp, #20]
 8003068:	e7c3      	b.n	8002ff2 <_vfiprintf_r+0x176>
 800306a:	4604      	mov	r4, r0
 800306c:	2301      	movs	r3, #1
 800306e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003072:	e7f0      	b.n	8003056 <_vfiprintf_r+0x1da>
 8003074:	ab03      	add	r3, sp, #12
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	462a      	mov	r2, r5
 800307a:	4630      	mov	r0, r6
 800307c:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <_vfiprintf_r+0x25c>)
 800307e:	a904      	add	r1, sp, #16
 8003080:	f3af 8000 	nop.w
 8003084:	4607      	mov	r7, r0
 8003086:	1c78      	adds	r0, r7, #1
 8003088:	d1d6      	bne.n	8003038 <_vfiprintf_r+0x1bc>
 800308a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800308c:	07d9      	lsls	r1, r3, #31
 800308e:	d405      	bmi.n	800309c <_vfiprintf_r+0x220>
 8003090:	89ab      	ldrh	r3, [r5, #12]
 8003092:	059a      	lsls	r2, r3, #22
 8003094:	d402      	bmi.n	800309c <_vfiprintf_r+0x220>
 8003096:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003098:	f7ff fe33 	bl	8002d02 <__retarget_lock_release_recursive>
 800309c:	89ab      	ldrh	r3, [r5, #12]
 800309e:	065b      	lsls	r3, r3, #25
 80030a0:	f53f af12 	bmi.w	8002ec8 <_vfiprintf_r+0x4c>
 80030a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030a6:	e711      	b.n	8002ecc <_vfiprintf_r+0x50>
 80030a8:	ab03      	add	r3, sp, #12
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	462a      	mov	r2, r5
 80030ae:	4630      	mov	r0, r6
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <_vfiprintf_r+0x25c>)
 80030b2:	a904      	add	r1, sp, #16
 80030b4:	f000 f882 	bl	80031bc <_printf_i>
 80030b8:	e7e4      	b.n	8003084 <_vfiprintf_r+0x208>
 80030ba:	bf00      	nop
 80030bc:	08003a70 	.word	0x08003a70
 80030c0:	08003a90 	.word	0x08003a90
 80030c4:	08003a50 	.word	0x08003a50
 80030c8:	08003ab0 	.word	0x08003ab0
 80030cc:	08003ab6 	.word	0x08003ab6
 80030d0:	08003aba 	.word	0x08003aba
 80030d4:	00000000 	.word	0x00000000
 80030d8:	08002e57 	.word	0x08002e57

080030dc <_printf_common>:
 80030dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e0:	4616      	mov	r6, r2
 80030e2:	4699      	mov	r9, r3
 80030e4:	688a      	ldr	r2, [r1, #8]
 80030e6:	690b      	ldr	r3, [r1, #16]
 80030e8:	4607      	mov	r7, r0
 80030ea:	4293      	cmp	r3, r2
 80030ec:	bfb8      	it	lt
 80030ee:	4613      	movlt	r3, r2
 80030f0:	6033      	str	r3, [r6, #0]
 80030f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030f6:	460c      	mov	r4, r1
 80030f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030fc:	b10a      	cbz	r2, 8003102 <_printf_common+0x26>
 80030fe:	3301      	adds	r3, #1
 8003100:	6033      	str	r3, [r6, #0]
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	0699      	lsls	r1, r3, #26
 8003106:	bf42      	ittt	mi
 8003108:	6833      	ldrmi	r3, [r6, #0]
 800310a:	3302      	addmi	r3, #2
 800310c:	6033      	strmi	r3, [r6, #0]
 800310e:	6825      	ldr	r5, [r4, #0]
 8003110:	f015 0506 	ands.w	r5, r5, #6
 8003114:	d106      	bne.n	8003124 <_printf_common+0x48>
 8003116:	f104 0a19 	add.w	sl, r4, #25
 800311a:	68e3      	ldr	r3, [r4, #12]
 800311c:	6832      	ldr	r2, [r6, #0]
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	42ab      	cmp	r3, r5
 8003122:	dc28      	bgt.n	8003176 <_printf_common+0x9a>
 8003124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003128:	1e13      	subs	r3, r2, #0
 800312a:	6822      	ldr	r2, [r4, #0]
 800312c:	bf18      	it	ne
 800312e:	2301      	movne	r3, #1
 8003130:	0692      	lsls	r2, r2, #26
 8003132:	d42d      	bmi.n	8003190 <_printf_common+0xb4>
 8003134:	4649      	mov	r1, r9
 8003136:	4638      	mov	r0, r7
 8003138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800313c:	47c0      	blx	r8
 800313e:	3001      	adds	r0, #1
 8003140:	d020      	beq.n	8003184 <_printf_common+0xa8>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	68e5      	ldr	r5, [r4, #12]
 8003146:	f003 0306 	and.w	r3, r3, #6
 800314a:	2b04      	cmp	r3, #4
 800314c:	bf18      	it	ne
 800314e:	2500      	movne	r5, #0
 8003150:	6832      	ldr	r2, [r6, #0]
 8003152:	f04f 0600 	mov.w	r6, #0
 8003156:	68a3      	ldr	r3, [r4, #8]
 8003158:	bf08      	it	eq
 800315a:	1aad      	subeq	r5, r5, r2
 800315c:	6922      	ldr	r2, [r4, #16]
 800315e:	bf08      	it	eq
 8003160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003164:	4293      	cmp	r3, r2
 8003166:	bfc4      	itt	gt
 8003168:	1a9b      	subgt	r3, r3, r2
 800316a:	18ed      	addgt	r5, r5, r3
 800316c:	341a      	adds	r4, #26
 800316e:	42b5      	cmp	r5, r6
 8003170:	d11a      	bne.n	80031a8 <_printf_common+0xcc>
 8003172:	2000      	movs	r0, #0
 8003174:	e008      	b.n	8003188 <_printf_common+0xac>
 8003176:	2301      	movs	r3, #1
 8003178:	4652      	mov	r2, sl
 800317a:	4649      	mov	r1, r9
 800317c:	4638      	mov	r0, r7
 800317e:	47c0      	blx	r8
 8003180:	3001      	adds	r0, #1
 8003182:	d103      	bne.n	800318c <_printf_common+0xb0>
 8003184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800318c:	3501      	adds	r5, #1
 800318e:	e7c4      	b.n	800311a <_printf_common+0x3e>
 8003190:	2030      	movs	r0, #48	; 0x30
 8003192:	18e1      	adds	r1, r4, r3
 8003194:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800319e:	4422      	add	r2, r4
 80031a0:	3302      	adds	r3, #2
 80031a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031a6:	e7c5      	b.n	8003134 <_printf_common+0x58>
 80031a8:	2301      	movs	r3, #1
 80031aa:	4622      	mov	r2, r4
 80031ac:	4649      	mov	r1, r9
 80031ae:	4638      	mov	r0, r7
 80031b0:	47c0      	blx	r8
 80031b2:	3001      	adds	r0, #1
 80031b4:	d0e6      	beq.n	8003184 <_printf_common+0xa8>
 80031b6:	3601      	adds	r6, #1
 80031b8:	e7d9      	b.n	800316e <_printf_common+0x92>
	...

080031bc <_printf_i>:
 80031bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031c0:	7e0f      	ldrb	r7, [r1, #24]
 80031c2:	4691      	mov	r9, r2
 80031c4:	2f78      	cmp	r7, #120	; 0x78
 80031c6:	4680      	mov	r8, r0
 80031c8:	460c      	mov	r4, r1
 80031ca:	469a      	mov	sl, r3
 80031cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031d2:	d807      	bhi.n	80031e4 <_printf_i+0x28>
 80031d4:	2f62      	cmp	r7, #98	; 0x62
 80031d6:	d80a      	bhi.n	80031ee <_printf_i+0x32>
 80031d8:	2f00      	cmp	r7, #0
 80031da:	f000 80d9 	beq.w	8003390 <_printf_i+0x1d4>
 80031de:	2f58      	cmp	r7, #88	; 0x58
 80031e0:	f000 80a4 	beq.w	800332c <_printf_i+0x170>
 80031e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031ec:	e03a      	b.n	8003264 <_printf_i+0xa8>
 80031ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031f2:	2b15      	cmp	r3, #21
 80031f4:	d8f6      	bhi.n	80031e4 <_printf_i+0x28>
 80031f6:	a101      	add	r1, pc, #4	; (adr r1, 80031fc <_printf_i+0x40>)
 80031f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031fc:	08003255 	.word	0x08003255
 8003200:	08003269 	.word	0x08003269
 8003204:	080031e5 	.word	0x080031e5
 8003208:	080031e5 	.word	0x080031e5
 800320c:	080031e5 	.word	0x080031e5
 8003210:	080031e5 	.word	0x080031e5
 8003214:	08003269 	.word	0x08003269
 8003218:	080031e5 	.word	0x080031e5
 800321c:	080031e5 	.word	0x080031e5
 8003220:	080031e5 	.word	0x080031e5
 8003224:	080031e5 	.word	0x080031e5
 8003228:	08003377 	.word	0x08003377
 800322c:	08003299 	.word	0x08003299
 8003230:	08003359 	.word	0x08003359
 8003234:	080031e5 	.word	0x080031e5
 8003238:	080031e5 	.word	0x080031e5
 800323c:	08003399 	.word	0x08003399
 8003240:	080031e5 	.word	0x080031e5
 8003244:	08003299 	.word	0x08003299
 8003248:	080031e5 	.word	0x080031e5
 800324c:	080031e5 	.word	0x080031e5
 8003250:	08003361 	.word	0x08003361
 8003254:	682b      	ldr	r3, [r5, #0]
 8003256:	1d1a      	adds	r2, r3, #4
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	602a      	str	r2, [r5, #0]
 800325c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003264:	2301      	movs	r3, #1
 8003266:	e0a4      	b.n	80033b2 <_printf_i+0x1f6>
 8003268:	6820      	ldr	r0, [r4, #0]
 800326a:	6829      	ldr	r1, [r5, #0]
 800326c:	0606      	lsls	r6, r0, #24
 800326e:	f101 0304 	add.w	r3, r1, #4
 8003272:	d50a      	bpl.n	800328a <_printf_i+0xce>
 8003274:	680e      	ldr	r6, [r1, #0]
 8003276:	602b      	str	r3, [r5, #0]
 8003278:	2e00      	cmp	r6, #0
 800327a:	da03      	bge.n	8003284 <_printf_i+0xc8>
 800327c:	232d      	movs	r3, #45	; 0x2d
 800327e:	4276      	negs	r6, r6
 8003280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003284:	230a      	movs	r3, #10
 8003286:	485e      	ldr	r0, [pc, #376]	; (8003400 <_printf_i+0x244>)
 8003288:	e019      	b.n	80032be <_printf_i+0x102>
 800328a:	680e      	ldr	r6, [r1, #0]
 800328c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003290:	602b      	str	r3, [r5, #0]
 8003292:	bf18      	it	ne
 8003294:	b236      	sxthne	r6, r6
 8003296:	e7ef      	b.n	8003278 <_printf_i+0xbc>
 8003298:	682b      	ldr	r3, [r5, #0]
 800329a:	6820      	ldr	r0, [r4, #0]
 800329c:	1d19      	adds	r1, r3, #4
 800329e:	6029      	str	r1, [r5, #0]
 80032a0:	0601      	lsls	r1, r0, #24
 80032a2:	d501      	bpl.n	80032a8 <_printf_i+0xec>
 80032a4:	681e      	ldr	r6, [r3, #0]
 80032a6:	e002      	b.n	80032ae <_printf_i+0xf2>
 80032a8:	0646      	lsls	r6, r0, #25
 80032aa:	d5fb      	bpl.n	80032a4 <_printf_i+0xe8>
 80032ac:	881e      	ldrh	r6, [r3, #0]
 80032ae:	2f6f      	cmp	r7, #111	; 0x6f
 80032b0:	bf0c      	ite	eq
 80032b2:	2308      	moveq	r3, #8
 80032b4:	230a      	movne	r3, #10
 80032b6:	4852      	ldr	r0, [pc, #328]	; (8003400 <_printf_i+0x244>)
 80032b8:	2100      	movs	r1, #0
 80032ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032be:	6865      	ldr	r5, [r4, #4]
 80032c0:	2d00      	cmp	r5, #0
 80032c2:	bfa8      	it	ge
 80032c4:	6821      	ldrge	r1, [r4, #0]
 80032c6:	60a5      	str	r5, [r4, #8]
 80032c8:	bfa4      	itt	ge
 80032ca:	f021 0104 	bicge.w	r1, r1, #4
 80032ce:	6021      	strge	r1, [r4, #0]
 80032d0:	b90e      	cbnz	r6, 80032d6 <_printf_i+0x11a>
 80032d2:	2d00      	cmp	r5, #0
 80032d4:	d04d      	beq.n	8003372 <_printf_i+0x1b6>
 80032d6:	4615      	mov	r5, r2
 80032d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80032dc:	fb03 6711 	mls	r7, r3, r1, r6
 80032e0:	5dc7      	ldrb	r7, [r0, r7]
 80032e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032e6:	4637      	mov	r7, r6
 80032e8:	42bb      	cmp	r3, r7
 80032ea:	460e      	mov	r6, r1
 80032ec:	d9f4      	bls.n	80032d8 <_printf_i+0x11c>
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d10b      	bne.n	800330a <_printf_i+0x14e>
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	07de      	lsls	r6, r3, #31
 80032f6:	d508      	bpl.n	800330a <_printf_i+0x14e>
 80032f8:	6923      	ldr	r3, [r4, #16]
 80032fa:	6861      	ldr	r1, [r4, #4]
 80032fc:	4299      	cmp	r1, r3
 80032fe:	bfde      	ittt	le
 8003300:	2330      	movle	r3, #48	; 0x30
 8003302:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003306:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800330a:	1b52      	subs	r2, r2, r5
 800330c:	6122      	str	r2, [r4, #16]
 800330e:	464b      	mov	r3, r9
 8003310:	4621      	mov	r1, r4
 8003312:	4640      	mov	r0, r8
 8003314:	f8cd a000 	str.w	sl, [sp]
 8003318:	aa03      	add	r2, sp, #12
 800331a:	f7ff fedf 	bl	80030dc <_printf_common>
 800331e:	3001      	adds	r0, #1
 8003320:	d14c      	bne.n	80033bc <_printf_i+0x200>
 8003322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003326:	b004      	add	sp, #16
 8003328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800332c:	4834      	ldr	r0, [pc, #208]	; (8003400 <_printf_i+0x244>)
 800332e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003332:	6829      	ldr	r1, [r5, #0]
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	f851 6b04 	ldr.w	r6, [r1], #4
 800333a:	6029      	str	r1, [r5, #0]
 800333c:	061d      	lsls	r5, r3, #24
 800333e:	d514      	bpl.n	800336a <_printf_i+0x1ae>
 8003340:	07df      	lsls	r7, r3, #31
 8003342:	bf44      	itt	mi
 8003344:	f043 0320 	orrmi.w	r3, r3, #32
 8003348:	6023      	strmi	r3, [r4, #0]
 800334a:	b91e      	cbnz	r6, 8003354 <_printf_i+0x198>
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	f023 0320 	bic.w	r3, r3, #32
 8003352:	6023      	str	r3, [r4, #0]
 8003354:	2310      	movs	r3, #16
 8003356:	e7af      	b.n	80032b8 <_printf_i+0xfc>
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	f043 0320 	orr.w	r3, r3, #32
 800335e:	6023      	str	r3, [r4, #0]
 8003360:	2378      	movs	r3, #120	; 0x78
 8003362:	4828      	ldr	r0, [pc, #160]	; (8003404 <_printf_i+0x248>)
 8003364:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003368:	e7e3      	b.n	8003332 <_printf_i+0x176>
 800336a:	0659      	lsls	r1, r3, #25
 800336c:	bf48      	it	mi
 800336e:	b2b6      	uxthmi	r6, r6
 8003370:	e7e6      	b.n	8003340 <_printf_i+0x184>
 8003372:	4615      	mov	r5, r2
 8003374:	e7bb      	b.n	80032ee <_printf_i+0x132>
 8003376:	682b      	ldr	r3, [r5, #0]
 8003378:	6826      	ldr	r6, [r4, #0]
 800337a:	1d18      	adds	r0, r3, #4
 800337c:	6961      	ldr	r1, [r4, #20]
 800337e:	6028      	str	r0, [r5, #0]
 8003380:	0635      	lsls	r5, r6, #24
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	d501      	bpl.n	800338a <_printf_i+0x1ce>
 8003386:	6019      	str	r1, [r3, #0]
 8003388:	e002      	b.n	8003390 <_printf_i+0x1d4>
 800338a:	0670      	lsls	r0, r6, #25
 800338c:	d5fb      	bpl.n	8003386 <_printf_i+0x1ca>
 800338e:	8019      	strh	r1, [r3, #0]
 8003390:	2300      	movs	r3, #0
 8003392:	4615      	mov	r5, r2
 8003394:	6123      	str	r3, [r4, #16]
 8003396:	e7ba      	b.n	800330e <_printf_i+0x152>
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	2100      	movs	r1, #0
 800339c:	1d1a      	adds	r2, r3, #4
 800339e:	602a      	str	r2, [r5, #0]
 80033a0:	681d      	ldr	r5, [r3, #0]
 80033a2:	6862      	ldr	r2, [r4, #4]
 80033a4:	4628      	mov	r0, r5
 80033a6:	f000 fa9b 	bl	80038e0 <memchr>
 80033aa:	b108      	cbz	r0, 80033b0 <_printf_i+0x1f4>
 80033ac:	1b40      	subs	r0, r0, r5
 80033ae:	6060      	str	r0, [r4, #4]
 80033b0:	6863      	ldr	r3, [r4, #4]
 80033b2:	6123      	str	r3, [r4, #16]
 80033b4:	2300      	movs	r3, #0
 80033b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ba:	e7a8      	b.n	800330e <_printf_i+0x152>
 80033bc:	462a      	mov	r2, r5
 80033be:	4649      	mov	r1, r9
 80033c0:	4640      	mov	r0, r8
 80033c2:	6923      	ldr	r3, [r4, #16]
 80033c4:	47d0      	blx	sl
 80033c6:	3001      	adds	r0, #1
 80033c8:	d0ab      	beq.n	8003322 <_printf_i+0x166>
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	079b      	lsls	r3, r3, #30
 80033ce:	d413      	bmi.n	80033f8 <_printf_i+0x23c>
 80033d0:	68e0      	ldr	r0, [r4, #12]
 80033d2:	9b03      	ldr	r3, [sp, #12]
 80033d4:	4298      	cmp	r0, r3
 80033d6:	bfb8      	it	lt
 80033d8:	4618      	movlt	r0, r3
 80033da:	e7a4      	b.n	8003326 <_printf_i+0x16a>
 80033dc:	2301      	movs	r3, #1
 80033de:	4632      	mov	r2, r6
 80033e0:	4649      	mov	r1, r9
 80033e2:	4640      	mov	r0, r8
 80033e4:	47d0      	blx	sl
 80033e6:	3001      	adds	r0, #1
 80033e8:	d09b      	beq.n	8003322 <_printf_i+0x166>
 80033ea:	3501      	adds	r5, #1
 80033ec:	68e3      	ldr	r3, [r4, #12]
 80033ee:	9903      	ldr	r1, [sp, #12]
 80033f0:	1a5b      	subs	r3, r3, r1
 80033f2:	42ab      	cmp	r3, r5
 80033f4:	dcf2      	bgt.n	80033dc <_printf_i+0x220>
 80033f6:	e7eb      	b.n	80033d0 <_printf_i+0x214>
 80033f8:	2500      	movs	r5, #0
 80033fa:	f104 0619 	add.w	r6, r4, #25
 80033fe:	e7f5      	b.n	80033ec <_printf_i+0x230>
 8003400:	08003ac1 	.word	0x08003ac1
 8003404:	08003ad2 	.word	0x08003ad2

08003408 <_sbrk_r>:
 8003408:	b538      	push	{r3, r4, r5, lr}
 800340a:	2300      	movs	r3, #0
 800340c:	4d05      	ldr	r5, [pc, #20]	; (8003424 <_sbrk_r+0x1c>)
 800340e:	4604      	mov	r4, r0
 8003410:	4608      	mov	r0, r1
 8003412:	602b      	str	r3, [r5, #0]
 8003414:	f7fd faec 	bl	80009f0 <_sbrk>
 8003418:	1c43      	adds	r3, r0, #1
 800341a:	d102      	bne.n	8003422 <_sbrk_r+0x1a>
 800341c:	682b      	ldr	r3, [r5, #0]
 800341e:	b103      	cbz	r3, 8003422 <_sbrk_r+0x1a>
 8003420:	6023      	str	r3, [r4, #0]
 8003422:	bd38      	pop	{r3, r4, r5, pc}
 8003424:	20000188 	.word	0x20000188

08003428 <__sread>:
 8003428:	b510      	push	{r4, lr}
 800342a:	460c      	mov	r4, r1
 800342c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003430:	f000 fab8 	bl	80039a4 <_read_r>
 8003434:	2800      	cmp	r0, #0
 8003436:	bfab      	itete	ge
 8003438:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800343a:	89a3      	ldrhlt	r3, [r4, #12]
 800343c:	181b      	addge	r3, r3, r0
 800343e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003442:	bfac      	ite	ge
 8003444:	6563      	strge	r3, [r4, #84]	; 0x54
 8003446:	81a3      	strhlt	r3, [r4, #12]
 8003448:	bd10      	pop	{r4, pc}

0800344a <__swrite>:
 800344a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800344e:	461f      	mov	r7, r3
 8003450:	898b      	ldrh	r3, [r1, #12]
 8003452:	4605      	mov	r5, r0
 8003454:	05db      	lsls	r3, r3, #23
 8003456:	460c      	mov	r4, r1
 8003458:	4616      	mov	r6, r2
 800345a:	d505      	bpl.n	8003468 <__swrite+0x1e>
 800345c:	2302      	movs	r3, #2
 800345e:	2200      	movs	r2, #0
 8003460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003464:	f000 f9c4 	bl	80037f0 <_lseek_r>
 8003468:	89a3      	ldrh	r3, [r4, #12]
 800346a:	4632      	mov	r2, r6
 800346c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003470:	81a3      	strh	r3, [r4, #12]
 8003472:	4628      	mov	r0, r5
 8003474:	463b      	mov	r3, r7
 8003476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800347a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800347e:	f000 b869 	b.w	8003554 <_write_r>

08003482 <__sseek>:
 8003482:	b510      	push	{r4, lr}
 8003484:	460c      	mov	r4, r1
 8003486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800348a:	f000 f9b1 	bl	80037f0 <_lseek_r>
 800348e:	1c43      	adds	r3, r0, #1
 8003490:	89a3      	ldrh	r3, [r4, #12]
 8003492:	bf15      	itete	ne
 8003494:	6560      	strne	r0, [r4, #84]	; 0x54
 8003496:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800349a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800349e:	81a3      	strheq	r3, [r4, #12]
 80034a0:	bf18      	it	ne
 80034a2:	81a3      	strhne	r3, [r4, #12]
 80034a4:	bd10      	pop	{r4, pc}

080034a6 <__sclose>:
 80034a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034aa:	f000 b8d3 	b.w	8003654 <_close_r>
	...

080034b0 <__swbuf_r>:
 80034b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b2:	460e      	mov	r6, r1
 80034b4:	4614      	mov	r4, r2
 80034b6:	4605      	mov	r5, r0
 80034b8:	b118      	cbz	r0, 80034c2 <__swbuf_r+0x12>
 80034ba:	6983      	ldr	r3, [r0, #24]
 80034bc:	b90b      	cbnz	r3, 80034c2 <__swbuf_r+0x12>
 80034be:	f7ff fb81 	bl	8002bc4 <__sinit>
 80034c2:	4b21      	ldr	r3, [pc, #132]	; (8003548 <__swbuf_r+0x98>)
 80034c4:	429c      	cmp	r4, r3
 80034c6:	d12b      	bne.n	8003520 <__swbuf_r+0x70>
 80034c8:	686c      	ldr	r4, [r5, #4]
 80034ca:	69a3      	ldr	r3, [r4, #24]
 80034cc:	60a3      	str	r3, [r4, #8]
 80034ce:	89a3      	ldrh	r3, [r4, #12]
 80034d0:	071a      	lsls	r2, r3, #28
 80034d2:	d52f      	bpl.n	8003534 <__swbuf_r+0x84>
 80034d4:	6923      	ldr	r3, [r4, #16]
 80034d6:	b36b      	cbz	r3, 8003534 <__swbuf_r+0x84>
 80034d8:	6923      	ldr	r3, [r4, #16]
 80034da:	6820      	ldr	r0, [r4, #0]
 80034dc:	b2f6      	uxtb	r6, r6
 80034de:	1ac0      	subs	r0, r0, r3
 80034e0:	6963      	ldr	r3, [r4, #20]
 80034e2:	4637      	mov	r7, r6
 80034e4:	4283      	cmp	r3, r0
 80034e6:	dc04      	bgt.n	80034f2 <__swbuf_r+0x42>
 80034e8:	4621      	mov	r1, r4
 80034ea:	4628      	mov	r0, r5
 80034ec:	f000 f944 	bl	8003778 <_fflush_r>
 80034f0:	bb30      	cbnz	r0, 8003540 <__swbuf_r+0x90>
 80034f2:	68a3      	ldr	r3, [r4, #8]
 80034f4:	3001      	adds	r0, #1
 80034f6:	3b01      	subs	r3, #1
 80034f8:	60a3      	str	r3, [r4, #8]
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	6022      	str	r2, [r4, #0]
 8003500:	701e      	strb	r6, [r3, #0]
 8003502:	6963      	ldr	r3, [r4, #20]
 8003504:	4283      	cmp	r3, r0
 8003506:	d004      	beq.n	8003512 <__swbuf_r+0x62>
 8003508:	89a3      	ldrh	r3, [r4, #12]
 800350a:	07db      	lsls	r3, r3, #31
 800350c:	d506      	bpl.n	800351c <__swbuf_r+0x6c>
 800350e:	2e0a      	cmp	r6, #10
 8003510:	d104      	bne.n	800351c <__swbuf_r+0x6c>
 8003512:	4621      	mov	r1, r4
 8003514:	4628      	mov	r0, r5
 8003516:	f000 f92f 	bl	8003778 <_fflush_r>
 800351a:	b988      	cbnz	r0, 8003540 <__swbuf_r+0x90>
 800351c:	4638      	mov	r0, r7
 800351e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <__swbuf_r+0x9c>)
 8003522:	429c      	cmp	r4, r3
 8003524:	d101      	bne.n	800352a <__swbuf_r+0x7a>
 8003526:	68ac      	ldr	r4, [r5, #8]
 8003528:	e7cf      	b.n	80034ca <__swbuf_r+0x1a>
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <__swbuf_r+0xa0>)
 800352c:	429c      	cmp	r4, r3
 800352e:	bf08      	it	eq
 8003530:	68ec      	ldreq	r4, [r5, #12]
 8003532:	e7ca      	b.n	80034ca <__swbuf_r+0x1a>
 8003534:	4621      	mov	r1, r4
 8003536:	4628      	mov	r0, r5
 8003538:	f000 f81e 	bl	8003578 <__swsetup_r>
 800353c:	2800      	cmp	r0, #0
 800353e:	d0cb      	beq.n	80034d8 <__swbuf_r+0x28>
 8003540:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003544:	e7ea      	b.n	800351c <__swbuf_r+0x6c>
 8003546:	bf00      	nop
 8003548:	08003a70 	.word	0x08003a70
 800354c:	08003a90 	.word	0x08003a90
 8003550:	08003a50 	.word	0x08003a50

08003554 <_write_r>:
 8003554:	b538      	push	{r3, r4, r5, lr}
 8003556:	4604      	mov	r4, r0
 8003558:	4608      	mov	r0, r1
 800355a:	4611      	mov	r1, r2
 800355c:	2200      	movs	r2, #0
 800355e:	4d05      	ldr	r5, [pc, #20]	; (8003574 <_write_r+0x20>)
 8003560:	602a      	str	r2, [r5, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	f7fd f9f7 	bl	8000956 <_write>
 8003568:	1c43      	adds	r3, r0, #1
 800356a:	d102      	bne.n	8003572 <_write_r+0x1e>
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	b103      	cbz	r3, 8003572 <_write_r+0x1e>
 8003570:	6023      	str	r3, [r4, #0]
 8003572:	bd38      	pop	{r3, r4, r5, pc}
 8003574:	20000188 	.word	0x20000188

08003578 <__swsetup_r>:
 8003578:	4b32      	ldr	r3, [pc, #200]	; (8003644 <__swsetup_r+0xcc>)
 800357a:	b570      	push	{r4, r5, r6, lr}
 800357c:	681d      	ldr	r5, [r3, #0]
 800357e:	4606      	mov	r6, r0
 8003580:	460c      	mov	r4, r1
 8003582:	b125      	cbz	r5, 800358e <__swsetup_r+0x16>
 8003584:	69ab      	ldr	r3, [r5, #24]
 8003586:	b913      	cbnz	r3, 800358e <__swsetup_r+0x16>
 8003588:	4628      	mov	r0, r5
 800358a:	f7ff fb1b 	bl	8002bc4 <__sinit>
 800358e:	4b2e      	ldr	r3, [pc, #184]	; (8003648 <__swsetup_r+0xd0>)
 8003590:	429c      	cmp	r4, r3
 8003592:	d10f      	bne.n	80035b4 <__swsetup_r+0x3c>
 8003594:	686c      	ldr	r4, [r5, #4]
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800359c:	0719      	lsls	r1, r3, #28
 800359e:	d42c      	bmi.n	80035fa <__swsetup_r+0x82>
 80035a0:	06dd      	lsls	r5, r3, #27
 80035a2:	d411      	bmi.n	80035c8 <__swsetup_r+0x50>
 80035a4:	2309      	movs	r3, #9
 80035a6:	6033      	str	r3, [r6, #0]
 80035a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80035ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035b0:	81a3      	strh	r3, [r4, #12]
 80035b2:	e03e      	b.n	8003632 <__swsetup_r+0xba>
 80035b4:	4b25      	ldr	r3, [pc, #148]	; (800364c <__swsetup_r+0xd4>)
 80035b6:	429c      	cmp	r4, r3
 80035b8:	d101      	bne.n	80035be <__swsetup_r+0x46>
 80035ba:	68ac      	ldr	r4, [r5, #8]
 80035bc:	e7eb      	b.n	8003596 <__swsetup_r+0x1e>
 80035be:	4b24      	ldr	r3, [pc, #144]	; (8003650 <__swsetup_r+0xd8>)
 80035c0:	429c      	cmp	r4, r3
 80035c2:	bf08      	it	eq
 80035c4:	68ec      	ldreq	r4, [r5, #12]
 80035c6:	e7e6      	b.n	8003596 <__swsetup_r+0x1e>
 80035c8:	0758      	lsls	r0, r3, #29
 80035ca:	d512      	bpl.n	80035f2 <__swsetup_r+0x7a>
 80035cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035ce:	b141      	cbz	r1, 80035e2 <__swsetup_r+0x6a>
 80035d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035d4:	4299      	cmp	r1, r3
 80035d6:	d002      	beq.n	80035de <__swsetup_r+0x66>
 80035d8:	4630      	mov	r0, r6
 80035da:	f000 f99b 	bl	8003914 <_free_r>
 80035de:	2300      	movs	r3, #0
 80035e0:	6363      	str	r3, [r4, #52]	; 0x34
 80035e2:	89a3      	ldrh	r3, [r4, #12]
 80035e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035e8:	81a3      	strh	r3, [r4, #12]
 80035ea:	2300      	movs	r3, #0
 80035ec:	6063      	str	r3, [r4, #4]
 80035ee:	6923      	ldr	r3, [r4, #16]
 80035f0:	6023      	str	r3, [r4, #0]
 80035f2:	89a3      	ldrh	r3, [r4, #12]
 80035f4:	f043 0308 	orr.w	r3, r3, #8
 80035f8:	81a3      	strh	r3, [r4, #12]
 80035fa:	6923      	ldr	r3, [r4, #16]
 80035fc:	b94b      	cbnz	r3, 8003612 <__swsetup_r+0x9a>
 80035fe:	89a3      	ldrh	r3, [r4, #12]
 8003600:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003608:	d003      	beq.n	8003612 <__swsetup_r+0x9a>
 800360a:	4621      	mov	r1, r4
 800360c:	4630      	mov	r0, r6
 800360e:	f000 f927 	bl	8003860 <__smakebuf_r>
 8003612:	89a0      	ldrh	r0, [r4, #12]
 8003614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003618:	f010 0301 	ands.w	r3, r0, #1
 800361c:	d00a      	beq.n	8003634 <__swsetup_r+0xbc>
 800361e:	2300      	movs	r3, #0
 8003620:	60a3      	str	r3, [r4, #8]
 8003622:	6963      	ldr	r3, [r4, #20]
 8003624:	425b      	negs	r3, r3
 8003626:	61a3      	str	r3, [r4, #24]
 8003628:	6923      	ldr	r3, [r4, #16]
 800362a:	b943      	cbnz	r3, 800363e <__swsetup_r+0xc6>
 800362c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003630:	d1ba      	bne.n	80035a8 <__swsetup_r+0x30>
 8003632:	bd70      	pop	{r4, r5, r6, pc}
 8003634:	0781      	lsls	r1, r0, #30
 8003636:	bf58      	it	pl
 8003638:	6963      	ldrpl	r3, [r4, #20]
 800363a:	60a3      	str	r3, [r4, #8]
 800363c:	e7f4      	b.n	8003628 <__swsetup_r+0xb0>
 800363e:	2000      	movs	r0, #0
 8003640:	e7f7      	b.n	8003632 <__swsetup_r+0xba>
 8003642:	bf00      	nop
 8003644:	2000000c 	.word	0x2000000c
 8003648:	08003a70 	.word	0x08003a70
 800364c:	08003a90 	.word	0x08003a90
 8003650:	08003a50 	.word	0x08003a50

08003654 <_close_r>:
 8003654:	b538      	push	{r3, r4, r5, lr}
 8003656:	2300      	movs	r3, #0
 8003658:	4d05      	ldr	r5, [pc, #20]	; (8003670 <_close_r+0x1c>)
 800365a:	4604      	mov	r4, r0
 800365c:	4608      	mov	r0, r1
 800365e:	602b      	str	r3, [r5, #0]
 8003660:	f7fd f995 	bl	800098e <_close>
 8003664:	1c43      	adds	r3, r0, #1
 8003666:	d102      	bne.n	800366e <_close_r+0x1a>
 8003668:	682b      	ldr	r3, [r5, #0]
 800366a:	b103      	cbz	r3, 800366e <_close_r+0x1a>
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	bd38      	pop	{r3, r4, r5, pc}
 8003670:	20000188 	.word	0x20000188

08003674 <__sflush_r>:
 8003674:	898a      	ldrh	r2, [r1, #12]
 8003676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003678:	4605      	mov	r5, r0
 800367a:	0710      	lsls	r0, r2, #28
 800367c:	460c      	mov	r4, r1
 800367e:	d457      	bmi.n	8003730 <__sflush_r+0xbc>
 8003680:	684b      	ldr	r3, [r1, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	dc04      	bgt.n	8003690 <__sflush_r+0x1c>
 8003686:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	dc01      	bgt.n	8003690 <__sflush_r+0x1c>
 800368c:	2000      	movs	r0, #0
 800368e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003692:	2e00      	cmp	r6, #0
 8003694:	d0fa      	beq.n	800368c <__sflush_r+0x18>
 8003696:	2300      	movs	r3, #0
 8003698:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800369c:	682f      	ldr	r7, [r5, #0]
 800369e:	602b      	str	r3, [r5, #0]
 80036a0:	d032      	beq.n	8003708 <__sflush_r+0x94>
 80036a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	075a      	lsls	r2, r3, #29
 80036a8:	d505      	bpl.n	80036b6 <__sflush_r+0x42>
 80036aa:	6863      	ldr	r3, [r4, #4]
 80036ac:	1ac0      	subs	r0, r0, r3
 80036ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036b0:	b10b      	cbz	r3, 80036b6 <__sflush_r+0x42>
 80036b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036b4:	1ac0      	subs	r0, r0, r3
 80036b6:	2300      	movs	r3, #0
 80036b8:	4602      	mov	r2, r0
 80036ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036bc:	4628      	mov	r0, r5
 80036be:	6a21      	ldr	r1, [r4, #32]
 80036c0:	47b0      	blx	r6
 80036c2:	1c43      	adds	r3, r0, #1
 80036c4:	89a3      	ldrh	r3, [r4, #12]
 80036c6:	d106      	bne.n	80036d6 <__sflush_r+0x62>
 80036c8:	6829      	ldr	r1, [r5, #0]
 80036ca:	291d      	cmp	r1, #29
 80036cc:	d82c      	bhi.n	8003728 <__sflush_r+0xb4>
 80036ce:	4a29      	ldr	r2, [pc, #164]	; (8003774 <__sflush_r+0x100>)
 80036d0:	40ca      	lsrs	r2, r1
 80036d2:	07d6      	lsls	r6, r2, #31
 80036d4:	d528      	bpl.n	8003728 <__sflush_r+0xb4>
 80036d6:	2200      	movs	r2, #0
 80036d8:	6062      	str	r2, [r4, #4]
 80036da:	6922      	ldr	r2, [r4, #16]
 80036dc:	04d9      	lsls	r1, r3, #19
 80036de:	6022      	str	r2, [r4, #0]
 80036e0:	d504      	bpl.n	80036ec <__sflush_r+0x78>
 80036e2:	1c42      	adds	r2, r0, #1
 80036e4:	d101      	bne.n	80036ea <__sflush_r+0x76>
 80036e6:	682b      	ldr	r3, [r5, #0]
 80036e8:	b903      	cbnz	r3, 80036ec <__sflush_r+0x78>
 80036ea:	6560      	str	r0, [r4, #84]	; 0x54
 80036ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036ee:	602f      	str	r7, [r5, #0]
 80036f0:	2900      	cmp	r1, #0
 80036f2:	d0cb      	beq.n	800368c <__sflush_r+0x18>
 80036f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036f8:	4299      	cmp	r1, r3
 80036fa:	d002      	beq.n	8003702 <__sflush_r+0x8e>
 80036fc:	4628      	mov	r0, r5
 80036fe:	f000 f909 	bl	8003914 <_free_r>
 8003702:	2000      	movs	r0, #0
 8003704:	6360      	str	r0, [r4, #52]	; 0x34
 8003706:	e7c2      	b.n	800368e <__sflush_r+0x1a>
 8003708:	6a21      	ldr	r1, [r4, #32]
 800370a:	2301      	movs	r3, #1
 800370c:	4628      	mov	r0, r5
 800370e:	47b0      	blx	r6
 8003710:	1c41      	adds	r1, r0, #1
 8003712:	d1c7      	bne.n	80036a4 <__sflush_r+0x30>
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0c4      	beq.n	80036a4 <__sflush_r+0x30>
 800371a:	2b1d      	cmp	r3, #29
 800371c:	d001      	beq.n	8003722 <__sflush_r+0xae>
 800371e:	2b16      	cmp	r3, #22
 8003720:	d101      	bne.n	8003726 <__sflush_r+0xb2>
 8003722:	602f      	str	r7, [r5, #0]
 8003724:	e7b2      	b.n	800368c <__sflush_r+0x18>
 8003726:	89a3      	ldrh	r3, [r4, #12]
 8003728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800372c:	81a3      	strh	r3, [r4, #12]
 800372e:	e7ae      	b.n	800368e <__sflush_r+0x1a>
 8003730:	690f      	ldr	r7, [r1, #16]
 8003732:	2f00      	cmp	r7, #0
 8003734:	d0aa      	beq.n	800368c <__sflush_r+0x18>
 8003736:	0793      	lsls	r3, r2, #30
 8003738:	bf18      	it	ne
 800373a:	2300      	movne	r3, #0
 800373c:	680e      	ldr	r6, [r1, #0]
 800373e:	bf08      	it	eq
 8003740:	694b      	ldreq	r3, [r1, #20]
 8003742:	1bf6      	subs	r6, r6, r7
 8003744:	600f      	str	r7, [r1, #0]
 8003746:	608b      	str	r3, [r1, #8]
 8003748:	2e00      	cmp	r6, #0
 800374a:	dd9f      	ble.n	800368c <__sflush_r+0x18>
 800374c:	4633      	mov	r3, r6
 800374e:	463a      	mov	r2, r7
 8003750:	4628      	mov	r0, r5
 8003752:	6a21      	ldr	r1, [r4, #32]
 8003754:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003758:	47e0      	blx	ip
 800375a:	2800      	cmp	r0, #0
 800375c:	dc06      	bgt.n	800376c <__sflush_r+0xf8>
 800375e:	89a3      	ldrh	r3, [r4, #12]
 8003760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003768:	81a3      	strh	r3, [r4, #12]
 800376a:	e790      	b.n	800368e <__sflush_r+0x1a>
 800376c:	4407      	add	r7, r0
 800376e:	1a36      	subs	r6, r6, r0
 8003770:	e7ea      	b.n	8003748 <__sflush_r+0xd4>
 8003772:	bf00      	nop
 8003774:	20400001 	.word	0x20400001

08003778 <_fflush_r>:
 8003778:	b538      	push	{r3, r4, r5, lr}
 800377a:	690b      	ldr	r3, [r1, #16]
 800377c:	4605      	mov	r5, r0
 800377e:	460c      	mov	r4, r1
 8003780:	b913      	cbnz	r3, 8003788 <_fflush_r+0x10>
 8003782:	2500      	movs	r5, #0
 8003784:	4628      	mov	r0, r5
 8003786:	bd38      	pop	{r3, r4, r5, pc}
 8003788:	b118      	cbz	r0, 8003792 <_fflush_r+0x1a>
 800378a:	6983      	ldr	r3, [r0, #24]
 800378c:	b90b      	cbnz	r3, 8003792 <_fflush_r+0x1a>
 800378e:	f7ff fa19 	bl	8002bc4 <__sinit>
 8003792:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <_fflush_r+0x6c>)
 8003794:	429c      	cmp	r4, r3
 8003796:	d11b      	bne.n	80037d0 <_fflush_r+0x58>
 8003798:	686c      	ldr	r4, [r5, #4]
 800379a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0ef      	beq.n	8003782 <_fflush_r+0xa>
 80037a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037a4:	07d0      	lsls	r0, r2, #31
 80037a6:	d404      	bmi.n	80037b2 <_fflush_r+0x3a>
 80037a8:	0599      	lsls	r1, r3, #22
 80037aa:	d402      	bmi.n	80037b2 <_fflush_r+0x3a>
 80037ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037ae:	f7ff faa7 	bl	8002d00 <__retarget_lock_acquire_recursive>
 80037b2:	4628      	mov	r0, r5
 80037b4:	4621      	mov	r1, r4
 80037b6:	f7ff ff5d 	bl	8003674 <__sflush_r>
 80037ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037bc:	4605      	mov	r5, r0
 80037be:	07da      	lsls	r2, r3, #31
 80037c0:	d4e0      	bmi.n	8003784 <_fflush_r+0xc>
 80037c2:	89a3      	ldrh	r3, [r4, #12]
 80037c4:	059b      	lsls	r3, r3, #22
 80037c6:	d4dd      	bmi.n	8003784 <_fflush_r+0xc>
 80037c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037ca:	f7ff fa9a 	bl	8002d02 <__retarget_lock_release_recursive>
 80037ce:	e7d9      	b.n	8003784 <_fflush_r+0xc>
 80037d0:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <_fflush_r+0x70>)
 80037d2:	429c      	cmp	r4, r3
 80037d4:	d101      	bne.n	80037da <_fflush_r+0x62>
 80037d6:	68ac      	ldr	r4, [r5, #8]
 80037d8:	e7df      	b.n	800379a <_fflush_r+0x22>
 80037da:	4b04      	ldr	r3, [pc, #16]	; (80037ec <_fflush_r+0x74>)
 80037dc:	429c      	cmp	r4, r3
 80037de:	bf08      	it	eq
 80037e0:	68ec      	ldreq	r4, [r5, #12]
 80037e2:	e7da      	b.n	800379a <_fflush_r+0x22>
 80037e4:	08003a70 	.word	0x08003a70
 80037e8:	08003a90 	.word	0x08003a90
 80037ec:	08003a50 	.word	0x08003a50

080037f0 <_lseek_r>:
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	4604      	mov	r4, r0
 80037f4:	4608      	mov	r0, r1
 80037f6:	4611      	mov	r1, r2
 80037f8:	2200      	movs	r2, #0
 80037fa:	4d05      	ldr	r5, [pc, #20]	; (8003810 <_lseek_r+0x20>)
 80037fc:	602a      	str	r2, [r5, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	f7fd f8e9 	bl	80009d6 <_lseek>
 8003804:	1c43      	adds	r3, r0, #1
 8003806:	d102      	bne.n	800380e <_lseek_r+0x1e>
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	b103      	cbz	r3, 800380e <_lseek_r+0x1e>
 800380c:	6023      	str	r3, [r4, #0]
 800380e:	bd38      	pop	{r3, r4, r5, pc}
 8003810:	20000188 	.word	0x20000188

08003814 <__swhatbuf_r>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	460e      	mov	r6, r1
 8003818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800381c:	4614      	mov	r4, r2
 800381e:	2900      	cmp	r1, #0
 8003820:	461d      	mov	r5, r3
 8003822:	b096      	sub	sp, #88	; 0x58
 8003824:	da08      	bge.n	8003838 <__swhatbuf_r+0x24>
 8003826:	2200      	movs	r2, #0
 8003828:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800382c:	602a      	str	r2, [r5, #0]
 800382e:	061a      	lsls	r2, r3, #24
 8003830:	d410      	bmi.n	8003854 <__swhatbuf_r+0x40>
 8003832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003836:	e00e      	b.n	8003856 <__swhatbuf_r+0x42>
 8003838:	466a      	mov	r2, sp
 800383a:	f000 f8c5 	bl	80039c8 <_fstat_r>
 800383e:	2800      	cmp	r0, #0
 8003840:	dbf1      	blt.n	8003826 <__swhatbuf_r+0x12>
 8003842:	9a01      	ldr	r2, [sp, #4]
 8003844:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003848:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800384c:	425a      	negs	r2, r3
 800384e:	415a      	adcs	r2, r3
 8003850:	602a      	str	r2, [r5, #0]
 8003852:	e7ee      	b.n	8003832 <__swhatbuf_r+0x1e>
 8003854:	2340      	movs	r3, #64	; 0x40
 8003856:	2000      	movs	r0, #0
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	b016      	add	sp, #88	; 0x58
 800385c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003860 <__smakebuf_r>:
 8003860:	898b      	ldrh	r3, [r1, #12]
 8003862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003864:	079d      	lsls	r5, r3, #30
 8003866:	4606      	mov	r6, r0
 8003868:	460c      	mov	r4, r1
 800386a:	d507      	bpl.n	800387c <__smakebuf_r+0x1c>
 800386c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003870:	6023      	str	r3, [r4, #0]
 8003872:	6123      	str	r3, [r4, #16]
 8003874:	2301      	movs	r3, #1
 8003876:	6163      	str	r3, [r4, #20]
 8003878:	b002      	add	sp, #8
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	466a      	mov	r2, sp
 800387e:	ab01      	add	r3, sp, #4
 8003880:	f7ff ffc8 	bl	8003814 <__swhatbuf_r>
 8003884:	9900      	ldr	r1, [sp, #0]
 8003886:	4605      	mov	r5, r0
 8003888:	4630      	mov	r0, r6
 800388a:	f7ff fa5b 	bl	8002d44 <_malloc_r>
 800388e:	b948      	cbnz	r0, 80038a4 <__smakebuf_r+0x44>
 8003890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003894:	059a      	lsls	r2, r3, #22
 8003896:	d4ef      	bmi.n	8003878 <__smakebuf_r+0x18>
 8003898:	f023 0303 	bic.w	r3, r3, #3
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	81a3      	strh	r3, [r4, #12]
 80038a2:	e7e3      	b.n	800386c <__smakebuf_r+0xc>
 80038a4:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <__smakebuf_r+0x7c>)
 80038a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80038a8:	89a3      	ldrh	r3, [r4, #12]
 80038aa:	6020      	str	r0, [r4, #0]
 80038ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b0:	81a3      	strh	r3, [r4, #12]
 80038b2:	9b00      	ldr	r3, [sp, #0]
 80038b4:	6120      	str	r0, [r4, #16]
 80038b6:	6163      	str	r3, [r4, #20]
 80038b8:	9b01      	ldr	r3, [sp, #4]
 80038ba:	b15b      	cbz	r3, 80038d4 <__smakebuf_r+0x74>
 80038bc:	4630      	mov	r0, r6
 80038be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038c2:	f000 f893 	bl	80039ec <_isatty_r>
 80038c6:	b128      	cbz	r0, 80038d4 <__smakebuf_r+0x74>
 80038c8:	89a3      	ldrh	r3, [r4, #12]
 80038ca:	f023 0303 	bic.w	r3, r3, #3
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	81a3      	strh	r3, [r4, #12]
 80038d4:	89a0      	ldrh	r0, [r4, #12]
 80038d6:	4305      	orrs	r5, r0
 80038d8:	81a5      	strh	r5, [r4, #12]
 80038da:	e7cd      	b.n	8003878 <__smakebuf_r+0x18>
 80038dc:	08002b5d 	.word	0x08002b5d

080038e0 <memchr>:
 80038e0:	4603      	mov	r3, r0
 80038e2:	b510      	push	{r4, lr}
 80038e4:	b2c9      	uxtb	r1, r1
 80038e6:	4402      	add	r2, r0
 80038e8:	4293      	cmp	r3, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	d101      	bne.n	80038f2 <memchr+0x12>
 80038ee:	2000      	movs	r0, #0
 80038f0:	e003      	b.n	80038fa <memchr+0x1a>
 80038f2:	7804      	ldrb	r4, [r0, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	428c      	cmp	r4, r1
 80038f8:	d1f6      	bne.n	80038e8 <memchr+0x8>
 80038fa:	bd10      	pop	{r4, pc}

080038fc <__malloc_lock>:
 80038fc:	4801      	ldr	r0, [pc, #4]	; (8003904 <__malloc_lock+0x8>)
 80038fe:	f7ff b9ff 	b.w	8002d00 <__retarget_lock_acquire_recursive>
 8003902:	bf00      	nop
 8003904:	2000017c 	.word	0x2000017c

08003908 <__malloc_unlock>:
 8003908:	4801      	ldr	r0, [pc, #4]	; (8003910 <__malloc_unlock+0x8>)
 800390a:	f7ff b9fa 	b.w	8002d02 <__retarget_lock_release_recursive>
 800390e:	bf00      	nop
 8003910:	2000017c 	.word	0x2000017c

08003914 <_free_r>:
 8003914:	b538      	push	{r3, r4, r5, lr}
 8003916:	4605      	mov	r5, r0
 8003918:	2900      	cmp	r1, #0
 800391a:	d040      	beq.n	800399e <_free_r+0x8a>
 800391c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003920:	1f0c      	subs	r4, r1, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	bfb8      	it	lt
 8003926:	18e4      	addlt	r4, r4, r3
 8003928:	f7ff ffe8 	bl	80038fc <__malloc_lock>
 800392c:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <_free_r+0x8c>)
 800392e:	6813      	ldr	r3, [r2, #0]
 8003930:	b933      	cbnz	r3, 8003940 <_free_r+0x2c>
 8003932:	6063      	str	r3, [r4, #4]
 8003934:	6014      	str	r4, [r2, #0]
 8003936:	4628      	mov	r0, r5
 8003938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800393c:	f7ff bfe4 	b.w	8003908 <__malloc_unlock>
 8003940:	42a3      	cmp	r3, r4
 8003942:	d908      	bls.n	8003956 <_free_r+0x42>
 8003944:	6820      	ldr	r0, [r4, #0]
 8003946:	1821      	adds	r1, r4, r0
 8003948:	428b      	cmp	r3, r1
 800394a:	bf01      	itttt	eq
 800394c:	6819      	ldreq	r1, [r3, #0]
 800394e:	685b      	ldreq	r3, [r3, #4]
 8003950:	1809      	addeq	r1, r1, r0
 8003952:	6021      	streq	r1, [r4, #0]
 8003954:	e7ed      	b.n	8003932 <_free_r+0x1e>
 8003956:	461a      	mov	r2, r3
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	b10b      	cbz	r3, 8003960 <_free_r+0x4c>
 800395c:	42a3      	cmp	r3, r4
 800395e:	d9fa      	bls.n	8003956 <_free_r+0x42>
 8003960:	6811      	ldr	r1, [r2, #0]
 8003962:	1850      	adds	r0, r2, r1
 8003964:	42a0      	cmp	r0, r4
 8003966:	d10b      	bne.n	8003980 <_free_r+0x6c>
 8003968:	6820      	ldr	r0, [r4, #0]
 800396a:	4401      	add	r1, r0
 800396c:	1850      	adds	r0, r2, r1
 800396e:	4283      	cmp	r3, r0
 8003970:	6011      	str	r1, [r2, #0]
 8003972:	d1e0      	bne.n	8003936 <_free_r+0x22>
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4401      	add	r1, r0
 800397a:	6011      	str	r1, [r2, #0]
 800397c:	6053      	str	r3, [r2, #4]
 800397e:	e7da      	b.n	8003936 <_free_r+0x22>
 8003980:	d902      	bls.n	8003988 <_free_r+0x74>
 8003982:	230c      	movs	r3, #12
 8003984:	602b      	str	r3, [r5, #0]
 8003986:	e7d6      	b.n	8003936 <_free_r+0x22>
 8003988:	6820      	ldr	r0, [r4, #0]
 800398a:	1821      	adds	r1, r4, r0
 800398c:	428b      	cmp	r3, r1
 800398e:	bf01      	itttt	eq
 8003990:	6819      	ldreq	r1, [r3, #0]
 8003992:	685b      	ldreq	r3, [r3, #4]
 8003994:	1809      	addeq	r1, r1, r0
 8003996:	6021      	streq	r1, [r4, #0]
 8003998:	6063      	str	r3, [r4, #4]
 800399a:	6054      	str	r4, [r2, #4]
 800399c:	e7cb      	b.n	8003936 <_free_r+0x22>
 800399e:	bd38      	pop	{r3, r4, r5, pc}
 80039a0:	20000180 	.word	0x20000180

080039a4 <_read_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	4604      	mov	r4, r0
 80039a8:	4608      	mov	r0, r1
 80039aa:	4611      	mov	r1, r2
 80039ac:	2200      	movs	r2, #0
 80039ae:	4d05      	ldr	r5, [pc, #20]	; (80039c4 <_read_r+0x20>)
 80039b0:	602a      	str	r2, [r5, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	f7fc ffb2 	bl	800091c <_read>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d102      	bne.n	80039c2 <_read_r+0x1e>
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	b103      	cbz	r3, 80039c2 <_read_r+0x1e>
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	bd38      	pop	{r3, r4, r5, pc}
 80039c4:	20000188 	.word	0x20000188

080039c8 <_fstat_r>:
 80039c8:	b538      	push	{r3, r4, r5, lr}
 80039ca:	2300      	movs	r3, #0
 80039cc:	4d06      	ldr	r5, [pc, #24]	; (80039e8 <_fstat_r+0x20>)
 80039ce:	4604      	mov	r4, r0
 80039d0:	4608      	mov	r0, r1
 80039d2:	4611      	mov	r1, r2
 80039d4:	602b      	str	r3, [r5, #0]
 80039d6:	f7fc ffe5 	bl	80009a4 <_fstat>
 80039da:	1c43      	adds	r3, r0, #1
 80039dc:	d102      	bne.n	80039e4 <_fstat_r+0x1c>
 80039de:	682b      	ldr	r3, [r5, #0]
 80039e0:	b103      	cbz	r3, 80039e4 <_fstat_r+0x1c>
 80039e2:	6023      	str	r3, [r4, #0]
 80039e4:	bd38      	pop	{r3, r4, r5, pc}
 80039e6:	bf00      	nop
 80039e8:	20000188 	.word	0x20000188

080039ec <_isatty_r>:
 80039ec:	b538      	push	{r3, r4, r5, lr}
 80039ee:	2300      	movs	r3, #0
 80039f0:	4d05      	ldr	r5, [pc, #20]	; (8003a08 <_isatty_r+0x1c>)
 80039f2:	4604      	mov	r4, r0
 80039f4:	4608      	mov	r0, r1
 80039f6:	602b      	str	r3, [r5, #0]
 80039f8:	f7fc ffe3 	bl	80009c2 <_isatty>
 80039fc:	1c43      	adds	r3, r0, #1
 80039fe:	d102      	bne.n	8003a06 <_isatty_r+0x1a>
 8003a00:	682b      	ldr	r3, [r5, #0]
 8003a02:	b103      	cbz	r3, 8003a06 <_isatty_r+0x1a>
 8003a04:	6023      	str	r3, [r4, #0]
 8003a06:	bd38      	pop	{r3, r4, r5, pc}
 8003a08:	20000188 	.word	0x20000188

08003a0c <_init>:
 8003a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0e:	bf00      	nop
 8003a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a12:	bc08      	pop	{r3}
 8003a14:	469e      	mov	lr, r3
 8003a16:	4770      	bx	lr

08003a18 <_fini>:
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	bf00      	nop
 8003a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1e:	bc08      	pop	{r3}
 8003a20:	469e      	mov	lr, r3
 8003a22:	4770      	bx	lr
