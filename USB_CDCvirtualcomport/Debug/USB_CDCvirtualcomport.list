
USB_CDCvirtualcomport.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008524  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08008660  08008660  00018660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008770  08008770  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008770  08008770  00018770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008778  08008778  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008778  08008778  00018778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800877c  0800877c  0001877c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e0  200001e4  08008964  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013c4  08008964  000213c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c60f  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000285c  00000000  00000000  0002c81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002f078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002fb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018309  00000000  00000000  00030460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d965  00000000  00000000  00048769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085409  00000000  00000000  000560ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db4d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030ec  00000000  00000000  000db528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e4 	.word	0x200001e4
 8000158:	00000000 	.word	0x00000000
 800015c:	08008648 	.word	0x08008648

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e8 	.word	0x200001e8
 8000178:	08008648 	.word	0x08008648

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800019c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b598      	push	{r3, r4, r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000498:	f000 f9c3 	bl	8000822 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049c:	f000 f820 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a0:	f000 f86a 	bl	8000578 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004a4:	f006 fc5a 	bl	8006d5c <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //CDC_Transmit_FS(data, strlen(data));
	  CDC_Transmit_FS((uint8_t*) data, strlen(data));
 80004a8:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <main+0x44>)
 80004aa:	681c      	ldr	r4, [r3, #0]
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <main+0x44>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff fe63 	bl	800017c <strlen>
 80004b6:	4603      	mov	r3, r0
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	4619      	mov	r1, r3
 80004bc:	4620      	mov	r0, r4
 80004be:	f006 fd0b 	bl	8006ed8 <CDC_Transmit_FS>
	 	  HAL_Delay (1000);
 80004c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c6:	f000 fa1b 	bl	8000900 <HAL_Delay>
	 	  printf("%d",data);
 80004ca:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <main+0x44>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4619      	mov	r1, r3
 80004d0:	4802      	ldr	r0, [pc, #8]	; (80004dc <main+0x48>)
 80004d2:	f007 f925 	bl	8007720 <iprintf>
	  CDC_Transmit_FS((uint8_t*) data, strlen(data));
 80004d6:	e7e7      	b.n	80004a8 <main+0x14>
 80004d8:	20000000 	.word	0x20000000
 80004dc:	08008670 	.word	0x08008670

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b092      	sub	sp, #72	; 0x48
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	2234      	movs	r2, #52	; 0x34
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f007 f90e 	bl	8007710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f4:	463b      	mov	r3, r7
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <SystemClock_Config+0x94>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800050a:	4a1a      	ldr	r2, [pc, #104]	; (8000574 <SystemClock_Config+0x94>)
 800050c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000510:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000512:	2301      	movs	r3, #1
 8000514:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000516:	2301      	movs	r3, #1
 8000518:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051a:	2302      	movs	r3, #2
 800051c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000522:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000524:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000528:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800052a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800052e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	4618      	mov	r0, r3
 8000536:	f001 ffe9 	bl	800250c <HAL_RCC_OscConfig>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000540:	f000 f83c 	bl	80005bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	230f      	movs	r3, #15
 8000546:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000548:	2303      	movs	r3, #3
 800054a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	2101      	movs	r1, #1
 800055c:	4618      	mov	r0, r3
 800055e:	f002 fb05 	bl	8002b6c <HAL_RCC_ClockConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000568:	f000 f828 	bl	80005bc <Error_Handler>
  }
}
 800056c:	bf00      	nop
 800056e:	3748      	adds	r7, #72	; 0x48
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40007000 	.word	0x40007000

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_GPIO_Init+0x40>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <MX_GPIO_Init+0x40>)
 8000584:	f043 0320 	orr.w	r3, r3, #32
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <MX_GPIO_Init+0x40>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 0320 	and.w	r3, r3, #32
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <MX_GPIO_Init+0x40>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <MX_GPIO_Init+0x40>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	61d3      	str	r3, [r2, #28]
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <MX_GPIO_Init+0x40>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]

}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	40023800 	.word	0x40023800

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <Error_Handler+0x8>
	...

080005c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <HAL_MspInit+0x5c>)
 80005d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d2:	4a14      	ldr	r2, [pc, #80]	; (8000624 <HAL_MspInit+0x5c>)
 80005d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005d8:	6253      	str	r3, [r2, #36]	; 0x24
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <HAL_MspInit+0x5c>)
 80005dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <HAL_MspInit+0x5c>)
 80005e8:	6a1b      	ldr	r3, [r3, #32]
 80005ea:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <HAL_MspInit+0x5c>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6213      	str	r3, [r2, #32]
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <HAL_MspInit+0x5c>)
 80005f4:	6a1b      	ldr	r3, [r3, #32]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <HAL_MspInit+0x5c>)
 8000600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000602:	4a08      	ldr	r2, [pc, #32]	; (8000624 <HAL_MspInit+0x5c>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000608:	6253      	str	r3, [r2, #36]	; 0x24
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_MspInit+0x5c>)
 800060c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000616:	2007      	movs	r0, #7
 8000618:	f000 fa60 	bl	8000adc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800062c:	e7fe      	b.n	800062c <NMI_Handler+0x4>

0800062e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <HardFault_Handler+0x4>

08000634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <MemManage_Handler+0x4>

0800063a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063e:	e7fe      	b.n	800063e <BusFault_Handler+0x4>

08000640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000644:	e7fe      	b.n	8000644 <UsageFault_Handler+0x4>

08000646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066e:	f000 f92b 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <USB_LP_IRQHandler+0x10>)
 800067e:	f000 fb66 	bl	8000d4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000ea8 	.word	0x20000ea8

0800068c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	e00a      	b.n	80006b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800069e:	f3af 8000 	nop.w
 80006a2:	4601      	mov	r1, r0
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	60ba      	str	r2, [r7, #8]
 80006aa:	b2ca      	uxtb	r2, r1
 80006ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	3301      	adds	r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697a      	ldr	r2, [r7, #20]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbf0      	blt.n	800069e <_read+0x12>
  }

  return len;
 80006bc:	687b      	ldr	r3, [r7, #4]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b086      	sub	sp, #24
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	60f8      	str	r0, [r7, #12]
 80006ce:	60b9      	str	r1, [r7, #8]
 80006d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	e009      	b.n	80006ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	1c5a      	adds	r2, r3, #1
 80006dc:	60ba      	str	r2, [r7, #8]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	3301      	adds	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697a      	ldr	r2, [r7, #20]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	dbf1      	blt.n	80006d8 <_write+0x12>
  }
  return len;
 80006f4:	687b      	ldr	r3, [r7, #4]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_close>:

int _close(int file)
{
 80006fe:	b480      	push	{r7}
 8000700:	b083      	sub	sp, #12
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000724:	605a      	str	r2, [r3, #4]
  return 0;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <_isatty>:

int _isatty(int file)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800073a:	2301      	movs	r3, #1
}
 800073c:	4618      	mov	r0, r3
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000746:	b480      	push	{r7}
 8000748:	b085      	sub	sp, #20
 800074a:	af00      	add	r7, sp, #0
 800074c:	60f8      	str	r0, [r7, #12]
 800074e:	60b9      	str	r1, [r7, #8]
 8000750:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000752:	2300      	movs	r3, #0
}
 8000754:	4618      	mov	r0, r3
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
	...

08000760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000768:	4a14      	ldr	r2, [pc, #80]	; (80007bc <_sbrk+0x5c>)
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <_sbrk+0x60>)
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d102      	bne.n	8000782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <_sbrk+0x64>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <_sbrk+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <_sbrk+0x64>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	429a      	cmp	r2, r3
 800078e:	d207      	bcs.n	80007a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000790:	f006 ff94 	bl	80076bc <__errno>
 8000794:	4603      	mov	r3, r0
 8000796:	220c      	movs	r2, #12
 8000798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800079e:	e009      	b.n	80007b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <_sbrk+0x64>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	4a05      	ldr	r2, [pc, #20]	; (80007c4 <_sbrk+0x64>)
 80007b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007b2:	68fb      	ldr	r3, [r7, #12]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20008000 	.word	0x20008000
 80007c0:	00000400 	.word	0x00000400
 80007c4:	20000200 	.word	0x20000200
 80007c8:	200013c8 	.word	0x200013c8

080007cc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d8:	f7ff fff8 	bl	80007cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007de:	490c      	ldr	r1, [pc, #48]	; (8000810 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007e0:	4a0c      	ldr	r2, [pc, #48]	; (8000814 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a09      	ldr	r2, [pc, #36]	; (8000818 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007f4:	4c09      	ldr	r4, [pc, #36]	; (800081c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000802:	f006 ff61 	bl	80076c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000806:	f7ff fe45 	bl	8000494 <main>
  bx lr
 800080a:	4770      	bx	lr
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000814:	08008780 	.word	0x08008780
  ldr r2, =_sbss
 8000818:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800081c:	200013c4 	.word	0x200013c4

08000820 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_IRQHandler>

08000822 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000828:	2300      	movs	r3, #0
 800082a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 f955 	bl	8000adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000832:	2000      	movs	r0, #0
 8000834:	f000 f80e 	bl	8000854 <HAL_InitTick>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	71fb      	strb	r3, [r7, #7]
 8000842:	e001      	b.n	8000848 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000844:	f7ff fec0 	bl	80005c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000848:	79fb      	ldrb	r3, [r7, #7]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <HAL_InitTick+0x68>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d022      	beq.n	80008ae <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <HAL_InitTick+0x6c>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <HAL_InitTick+0x68>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000874:	fbb1 f3f3 	udiv	r3, r1, r3
 8000878:	fbb2 f3f3 	udiv	r3, r2, r3
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f962 	bl	8000b46 <HAL_SYSTICK_Config>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10f      	bne.n	80008a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b0f      	cmp	r3, #15
 800088c:	d809      	bhi.n	80008a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088e:	2200      	movs	r2, #0
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000896:	f000 f92c 	bl	8000af2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <HAL_InitTick+0x70>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	e007      	b.n	80008b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]
 80008a6:	e004      	b.n	80008b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e001      	b.n	80008b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000000c 	.word	0x2000000c
 80008c0:	20000004 	.word	0x20000004
 80008c4:	20000008 	.word	0x20000008

080008c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x1c>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_IncTick+0x20>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a03      	ldr	r2, [pc, #12]	; (80008e4 <HAL_IncTick+0x1c>)
 80008d8:	6013      	str	r3, [r2, #0]
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000204 	.word	0x20000204
 80008e8:	2000000c 	.word	0x2000000c

080008ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b02      	ldr	r3, [pc, #8]	; (80008fc <HAL_GetTick+0x10>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	20000204 	.word	0x20000204

08000900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000908:	f7ff fff0 	bl	80008ec <HAL_GetTick>
 800090c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000918:	d004      	beq.n	8000924 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_Delay+0x40>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	4413      	add	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000924:	bf00      	nop
 8000926:	f7ff ffe1 	bl	80008ec <HAL_GetTick>
 800092a:	4602      	mov	r2, r0
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	429a      	cmp	r2, r3
 8000934:	d8f7      	bhi.n	8000926 <HAL_Delay+0x26>
  {
  }
}
 8000936:	bf00      	nop
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000000c 	.word	0x2000000c

08000944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800096c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	60d3      	str	r3, [r2, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	f003 0307 	and.w	r3, r3, #7
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	db0b      	blt.n	80009d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 021f 	and.w	r2, r3, #31
 80009c0:	4906      	ldr	r1, [pc, #24]	; (80009dc <__NVIC_EnableIRQ+0x34>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	2001      	movs	r0, #1
 80009ca:	fa00 f202 	lsl.w	r2, r0, r2
 80009ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100

080009e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	db0a      	blt.n	8000a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	490c      	ldr	r1, [pc, #48]	; (8000a2c <__NVIC_SetPriority+0x4c>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	0112      	lsls	r2, r2, #4
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	440b      	add	r3, r1
 8000a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a08:	e00a      	b.n	8000a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4908      	ldr	r1, [pc, #32]	; (8000a30 <__NVIC_SetPriority+0x50>)
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	3b04      	subs	r3, #4
 8000a18:	0112      	lsls	r2, r2, #4
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	761a      	strb	r2, [r3, #24]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b089      	sub	sp, #36	; 0x24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f1c3 0307 	rsb	r3, r3, #7
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	bf28      	it	cs
 8000a52:	2304      	movcs	r3, #4
 8000a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d902      	bls.n	8000a64 <NVIC_EncodePriority+0x30>
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3b03      	subs	r3, #3
 8000a62:	e000      	b.n	8000a66 <NVIC_EncodePriority+0x32>
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	401a      	ands	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43d9      	mvns	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	4313      	orrs	r3, r2
         );
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3724      	adds	r7, #36	; 0x24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa8:	d301      	bcc.n	8000aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00f      	b.n	8000ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <SysTick_Config+0x40>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab6:	210f      	movs	r1, #15
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000abc:	f7ff ff90 	bl	80009e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac8:	2207      	movs	r2, #7
 8000aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	e000e010 	.word	0xe000e010

08000adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ff2d 	bl	8000944 <__NVIC_SetPriorityGrouping>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b04:	f7ff ff42 	bl	800098c <__NVIC_GetPriorityGrouping>
 8000b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	6978      	ldr	r0, [r7, #20]
 8000b10:	f7ff ff90 	bl	8000a34 <NVIC_EncodePriority>
 8000b14:	4602      	mov	r2, r0
 8000b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff5f 	bl	80009e0 <__NVIC_SetPriority>
}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff35 	bl	80009a8 <__NVIC_EnableIRQ>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffa2 	bl	8000a98 <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b60:	b08b      	sub	sp, #44	; 0x2c
 8000b62:	af06      	add	r7, sp, #24
 8000b64:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d101      	bne.n	8000b70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e0c4      	b.n	8000cfa <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d106      	bne.n	8000b8a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f006 faf9 	bl	800717c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 fa92 	bl	80030c0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]
 8000ba0:	e040      	b.n	8000c24 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	440b      	add	r3, r1
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	1c5a      	adds	r2, r3, #1
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	440b      	add	r3, r1
 8000bc8:	7bfa      	ldrb	r2, [r7, #15]
 8000bca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	1c5a      	adds	r2, r3, #1
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	440b      	add	r3, r1
 8000bdc:	3303      	adds	r3, #3
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000be2:	7bfa      	ldrb	r2, [r7, #15]
 8000be4:	6879      	ldr	r1, [r7, #4]
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	440b      	add	r3, r1
 8000bf0:	3338      	adds	r3, #56	; 0x38
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bf6:	7bfa      	ldrb	r2, [r7, #15]
 8000bf8:	6879      	ldr	r1, [r7, #4]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	440b      	add	r3, r1
 8000c04:	333c      	adds	r3, #60	; 0x3c
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c0a:	7bfa      	ldrb	r2, [r7, #15]
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3340      	adds	r3, #64	; 0x40
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	3301      	adds	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
 8000c24:	7bfa      	ldrb	r2, [r7, #15]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d3b9      	bcc.n	8000ba2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	73fb      	strb	r3, [r7, #15]
 8000c32:	e044      	b.n	8000cbe <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c34:	7bfa      	ldrb	r2, [r7, #15]
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	440b      	add	r3, r1
 8000c42:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c4a:	7bfa      	ldrb	r2, [r7, #15]
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	440b      	add	r3, r1
 8000c58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c5c:	7bfa      	ldrb	r2, [r7, #15]
 8000c5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	4613      	mov	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	440b      	add	r3, r1
 8000c6e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c76:	7bfa      	ldrb	r2, [r7, #15]
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	440b      	add	r3, r1
 8000c84:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c8c:	7bfa      	ldrb	r2, [r7, #15]
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	440b      	add	r3, r1
 8000c9a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ca2:	7bfa      	ldrb	r2, [r7, #15]
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	440b      	add	r3, r1
 8000cb0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d3b5      	bcc.n	8000c34 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	687e      	ldr	r6, [r7, #4]
 8000cd0:	466d      	mov	r5, sp
 8000cd2:	f106 0410 	add.w	r4, r6, #16
 8000cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cda:	6823      	ldr	r3, [r4, #0]
 8000cdc:	602b      	str	r3, [r5, #0]
 8000cde:	1d33      	adds	r3, r6, #4
 8000ce0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ce2:	6838      	ldr	r0, [r7, #0]
 8000ce4:	f002 fa06 	bl	80030f4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d101      	bne.n	8000d18 <HAL_PCD_Start+0x16>
 8000d14:	2302      	movs	r3, #2
 8000d16:	e016      	b.n	8000d46 <HAL_PCD_Start+0x44>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f002 f9b5 	bl	8003094 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f006 fa07 	bl	8007140 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f004 fc69 	bl	800560e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f004 fc61 	bl	8005622 <USB_ReadInterrupts>
 8000d60:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f000 fab1 	bl	80012d4 <PCD_EP_ISR_Handler>

    return;
 8000d72:	e0bd      	b.n	8000ef0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d013      	beq.n	8000da6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d90:	b292      	uxth	r2, r2
 8000d92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f006 fa6b 	bl	8007272 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 f8a9 	bl	8000ef6 <HAL_PCD_SetAddress>

    return;
 8000da4:	e0a4      	b.n	8000ef0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d00c      	beq.n	8000dca <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000dc2:	b292      	uxth	r2, r2
 8000dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000dc8:	e092      	b.n	8000ef0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d00c      	beq.n	8000dee <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000de6:	b292      	uxth	r2, r2
 8000de8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000dec:	e080      	b.n	8000ef0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d027      	beq.n	8000e48 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0204 	bic.w	r2, r2, #4
 8000e0a:	b292      	uxth	r2, r2
 8000e0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0208 	bic.w	r2, r2, #8
 8000e22:	b292      	uxth	r2, r2
 8000e24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f006 fa5b 	bl	80072e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e40:	b292      	uxth	r2, r2
 8000e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000e46:	e053      	b.n	8000ef0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d027      	beq.n	8000ea2 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f042 0208 	orr.w	r2, r2, #8
 8000e64:	b292      	uxth	r2, r2
 8000e66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e7c:	b292      	uxth	r2, r2
 8000e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f042 0204 	orr.w	r2, r2, #4
 8000e94:	b292      	uxth	r2, r2
 8000e96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f006 fa08 	bl	80072b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ea0:	e026      	b.n	8000ef0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00f      	beq.n	8000ecc <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f006 f9c6 	bl	8007256 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000eca:	e011      	b.n	8000ef0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00c      	beq.n	8000ef0 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ee8:	b292      	uxth	r2, r2
 8000eea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000eee:	bf00      	nop
  }
}
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	460b      	mov	r3, r1
 8000f00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d101      	bne.n	8000f10 <HAL_PCD_SetAddress+0x1a>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	e013      	b.n	8000f38 <HAL_PCD_SetAddress+0x42>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	78fa      	ldrb	r2, [r7, #3]
 8000f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	78fa      	ldrb	r2, [r7, #3]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 fb5d 	bl	80055e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	4608      	mov	r0, r1
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4603      	mov	r3, r0
 8000f50:	70fb      	strb	r3, [r7, #3]
 8000f52:	460b      	mov	r3, r1
 8000f54:	803b      	strh	r3, [r7, #0]
 8000f56:	4613      	mov	r3, r2
 8000f58:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	da0e      	bge.n	8000f84 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	705a      	strb	r2, [r3, #1]
 8000f82:	e00e      	b.n	8000fa2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	f003 0207 	and.w	r2, r3, #7
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000fae:	883a      	ldrh	r2, [r7, #0]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	78ba      	ldrb	r2, [r7, #2]
 8000fb8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000fba:	78bb      	ldrb	r3, [r7, #2]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d102      	bne.n	8000fc6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d101      	bne.n	8000fd4 <HAL_PCD_EP_Open+0x94>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e00e      	b.n	8000ff2 <HAL_PCD_EP_Open+0xb2>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68f9      	ldr	r1, [r7, #12]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 f8a6 	bl	8003134 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000ff0:	7afb      	ldrb	r3, [r7, #11]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800100a:	2b00      	cmp	r3, #0
 800100c:	da0e      	bge.n	800102c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	1c5a      	adds	r2, r3, #1
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2201      	movs	r2, #1
 8001028:	705a      	strb	r2, [r3, #1]
 800102a:	e00e      	b.n	800104a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	f003 0207 	and.w	r2, r3, #7
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2200      	movs	r2, #0
 8001048:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	b2da      	uxtb	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800105c:	2b01      	cmp	r3, #1
 800105e:	d101      	bne.n	8001064 <HAL_PCD_EP_Close+0x6a>
 8001060:	2302      	movs	r3, #2
 8001062:	e00e      	b.n	8001082 <HAL_PCD_EP_Close+0x88>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2201      	movs	r2, #1
 8001068:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68f9      	ldr	r1, [r7, #12]
 8001072:	4618      	mov	r0, r3
 8001074:	f002 fc1e 	bl	80038b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	460b      	mov	r3, r1
 8001098:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800109a:	7afb      	ldrb	r3, [r7, #11]
 800109c:	f003 0207 	and.w	r2, r3, #7
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2200      	movs	r2, #0
 80010c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	2200      	movs	r2, #0
 80010c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010ca:	7afb      	ldrb	r3, [r7, #11]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6979      	ldr	r1, [r7, #20]
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 fdd5 	bl	8003c8c <USB_EPStartXfer>

  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	f003 0207 	and.w	r2, r3, #7
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	440b      	add	r3, r1
 800110a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	460b      	mov	r3, r1
 8001128:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800112a:	7afb      	ldrb	r3, [r7, #11]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4413      	add	r3, r2
 800113e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2201      	movs	r2, #1
 8001164:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001166:	7afb      	ldrb	r3, [r7, #11]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	b2da      	uxtb	r2, r3
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6979      	ldr	r1, [r7, #20]
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fd87 	bl	8003c8c <USB_EPStartXfer>

  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	f003 0207 	and.w	r2, r3, #7
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d901      	bls.n	80011a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e03e      	b.n	8001224 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80011a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	da0e      	bge.n	80011cc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	4613      	mov	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2201      	movs	r2, #1
 80011c8:	705a      	strb	r2, [r3, #1]
 80011ca:	e00c      	b.n	80011e6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80011cc:	78fa      	ldrb	r2, [r7, #3]
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2200      	movs	r2, #0
 80011e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2201      	movs	r2, #1
 80011ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_PCD_EP_SetStall+0x7e>
 8001202:	2302      	movs	r3, #2
 8001204:	e00e      	b.n	8001224 <HAL_PCD_EP_SetStall+0x9c>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68f9      	ldr	r1, [r7, #12]
 8001214:	4618      	mov	r0, r3
 8001216:	f004 f8ea 	bl	80053ee <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	f003 020f 	and.w	r2, r3, #15
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	429a      	cmp	r2, r3
 8001244:	d901      	bls.n	800124a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e040      	b.n	80012cc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800124a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800124e:	2b00      	cmp	r3, #0
 8001250:	da0e      	bge.n	8001270 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2201      	movs	r2, #1
 800126c:	705a      	strb	r2, [r3, #1]
 800126e:	e00e      	b.n	800128e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	f003 0207 	and.w	r2, r3, #7
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2200      	movs	r2, #0
 800128c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	b2da      	uxtb	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d101      	bne.n	80012ae <HAL_PCD_EP_ClrStall+0x82>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e00e      	b.n	80012cc <HAL_PCD_EP_ClrStall+0xa0>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68f9      	ldr	r1, [r7, #12]
 80012bc:	4618      	mov	r0, r3
 80012be:	f004 f8e6 	bl	800548e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b096      	sub	sp, #88	; 0x58
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80012dc:	e3bf      	b.n	8001a5e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80012ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80012f8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f040 8179 	bne.w	80015f4 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001302:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	2b00      	cmp	r3, #0
 800130c:	d152      	bne.n	80013b4 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	b29b      	uxth	r3, r3
 8001316:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800131a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800131e:	81fb      	strh	r3, [r7, #14]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	89fb      	ldrh	r3, [r7, #14]
 8001326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800132a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800132e:	b29b      	uxth	r3, r3
 8001330:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3328      	adds	r3, #40	; 0x28
 8001336:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001340:	b29b      	uxth	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	4413      	add	r3, r2
 800134c:	3302      	adds	r3, #2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	4413      	add	r3, r2
 8001356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001362:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001366:	695a      	ldr	r2, [r3, #20]
 8001368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	441a      	add	r2, r3
 800136e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001370:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001372:	2100      	movs	r1, #0
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f005 ff54 	bl	8007222 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 836b 	beq.w	8001a5e <PCD_EP_ISR_Handler+0x78a>
 8001388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	2b00      	cmp	r3, #0
 800138e:	f040 8366 	bne.w	8001a5e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001398:	b2db      	uxtb	r3, r3
 800139a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	b292      	uxth	r2, r2
 80013a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80013b2:	e354      	b.n	8001a5e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ba:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80013c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80013ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d034      	beq.n	800143c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013da:	b29b      	uxth	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4413      	add	r3, r2
 80013e6:	3306      	adds	r3, #6
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80013fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013fc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800140a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800140c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800140e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001410:	b29b      	uxth	r3, r3
 8001412:	f004 f95a 	bl	80056ca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b29a      	uxth	r2, r3
 800141e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001422:	4013      	ands	r3, r2
 8001424:	823b      	strh	r3, [r7, #16]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	8a3a      	ldrh	r2, [r7, #16]
 800142c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001430:	b292      	uxth	r2, r2
 8001432:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f005 fec7 	bl	80071c8 <HAL_PCD_SetupStageCallback>
 800143a:	e310      	b.n	8001a5e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800143c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001440:	2b00      	cmp	r3, #0
 8001442:	f280 830c 	bge.w	8001a5e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	b29a      	uxth	r2, r3
 800144e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001452:	4013      	ands	r3, r2
 8001454:	83fb      	strh	r3, [r7, #30]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	8bfa      	ldrh	r2, [r7, #30]
 800145c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001460:	b292      	uxth	r2, r2
 8001462:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800146c:	b29b      	uxth	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	3306      	adds	r3, #6
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	4413      	add	r3, r2
 8001482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800148c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800148e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d019      	beq.n	80014cc <PCD_EP_ISR_Handler+0x1f8>
 8001498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d015      	beq.n	80014cc <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014a6:	6959      	ldr	r1, [r3, #20]
 80014a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014aa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80014ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ae:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	f004 f90a 	bl	80056ca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80014b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	441a      	add	r2, r3
 80014c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80014c4:	2100      	movs	r1, #0
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f005 fe90 	bl	80071ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80014d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80014da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f040 82bd 	bne.w	8001a5e <PCD_EP_ISR_Handler+0x78a>
 80014e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80014e8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80014ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80014f0:	f000 82b5 	beq.w	8001a5e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001502:	b29b      	uxth	r3, r3
 8001504:	461a      	mov	r2, r3
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	4413      	add	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	b29b      	uxth	r3, r3
 800151a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800151e:	b29a      	uxth	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	801a      	strh	r2, [r3, #0]
 8001524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	2b3e      	cmp	r3, #62	; 0x3e
 800152a:	d91d      	bls.n	8001568 <PCD_EP_ISR_Handler+0x294>
 800152c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	095b      	lsrs	r3, r3, #5
 8001532:	647b      	str	r3, [r7, #68]	; 0x44
 8001534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <PCD_EP_ISR_Handler+0x272>
 8001540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001542:	3b01      	subs	r3, #1
 8001544:	647b      	str	r3, [r7, #68]	; 0x44
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b29a      	uxth	r2, r3
 800154c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800154e:	b29b      	uxth	r3, r3
 8001550:	029b      	lsls	r3, r3, #10
 8001552:	b29b      	uxth	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b29b      	uxth	r3, r3
 8001558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800155c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001560:	b29a      	uxth	r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	801a      	strh	r2, [r3, #0]
 8001566:	e026      	b.n	80015b6 <PCD_EP_ISR_Handler+0x2e2>
 8001568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10a      	bne.n	8001586 <PCD_EP_ISR_Handler+0x2b2>
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	b29b      	uxth	r3, r3
 8001576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800157a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800157e:	b29a      	uxth	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	801a      	strh	r2, [r3, #0]
 8001584:	e017      	b.n	80015b6 <PCD_EP_ISR_Handler+0x2e2>
 8001586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	085b      	lsrs	r3, r3, #1
 800158c:	647b      	str	r3, [r7, #68]	; 0x44
 800158e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <PCD_EP_ISR_Handler+0x2cc>
 800159a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800159c:	3301      	adds	r3, #1
 800159e:	647b      	str	r3, [r7, #68]	; 0x44
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	029b      	lsls	r3, r3, #10
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015c6:	827b      	strh	r3, [r7, #18]
 80015c8:	8a7b      	ldrh	r3, [r7, #18]
 80015ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80015ce:	827b      	strh	r3, [r7, #18]
 80015d0:	8a7b      	ldrh	r3, [r7, #18]
 80015d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80015d6:	827b      	strh	r3, [r7, #18]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	8a7b      	ldrh	r3, [r7, #18]
 80015de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80015e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80015e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	8013      	strh	r3, [r2, #0]
 80015f2:	e234      	b.n	8001a5e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001608:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800160c:	2b00      	cmp	r3, #0
 800160e:	f280 80fc 	bge.w	800180a <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	b29a      	uxth	r2, r3
 8001624:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001628:	4013      	ands	r3, r2
 800162a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001640:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001644:	b292      	uxth	r2, r2
 8001646:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001648:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800165e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001660:	7b1b      	ldrb	r3, [r3, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d125      	bne.n	80016b2 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800166e:	b29b      	uxth	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4413      	add	r3, r2
 800167a:	3306      	adds	r3, #6
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	4413      	add	r3, r2
 8001684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800168e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001692:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 8092 	beq.w	80017c0 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a2:	6959      	ldr	r1, [r3, #20]
 80016a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a6:	88da      	ldrh	r2, [r3, #6]
 80016a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80016ac:	f004 f80d 	bl	80056ca <USB_ReadPMA>
 80016b0:	e086      	b.n	80017c0 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80016b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b4:	78db      	ldrb	r3, [r3, #3]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d10a      	bne.n	80016d0 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80016ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80016be:	461a      	mov	r2, r3
 80016c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f9d9 	bl	8001a7a <HAL_PCD_EP_DB_Receive>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80016ce:	e077      	b.n	80017c0 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016ea:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	441a      	add	r2, r3
 80016fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800170c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001710:	b29b      	uxth	r3, r3
 8001712:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	b29b      	uxth	r3, r3
 8001726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d024      	beq.n	8001778 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001736:	b29b      	uxth	r3, r3
 8001738:	461a      	mov	r2, r3
 800173a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4413      	add	r3, r2
 8001742:	3302      	adds	r3, #2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	4413      	add	r3, r2
 800174c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001756:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800175a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800175e:	2b00      	cmp	r3, #0
 8001760:	d02e      	beq.n	80017c0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001768:	6959      	ldr	r1, [r3, #20]
 800176a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800176c:	891a      	ldrh	r2, [r3, #8]
 800176e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001772:	f003 ffaa 	bl	80056ca <USB_ReadPMA>
 8001776:	e023      	b.n	80017c0 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001780:	b29b      	uxth	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4413      	add	r3, r2
 800178c:	3306      	adds	r3, #6
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017a0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80017a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d009      	beq.n	80017c0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b2:	6959      	ldr	r1, [r3, #20]
 80017b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b6:	895a      	ldrh	r2, [r3, #10]
 80017b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80017bc:	f003 ff85 	bl	80056ca <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80017c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c2:	69da      	ldr	r2, [r3, #28]
 80017c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80017c8:	441a      	add	r2, r3
 80017ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80017ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80017d6:	441a      	add	r2, r3
 80017d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017da:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80017dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <PCD_EP_ISR_Handler+0x51c>
 80017e4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80017e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d206      	bcs.n	80017fe <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80017f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f005 fcf8 	bl	80071ec <HAL_PCD_DataOutStageCallback>
 80017fc:	e005      	b.n	800180a <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001804:	4618      	mov	r0, r3
 8001806:	f002 fa41 	bl	8003c8c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800180a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800180e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8123 	beq.w	8001a5e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001818:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	b29b      	uxth	r3, r3
 800183e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001846:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	441a      	add	r2, r3
 8001858:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800185c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001864:	b29b      	uxth	r3, r3
 8001866:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186a:	78db      	ldrb	r3, [r3, #3]
 800186c:	2b01      	cmp	r3, #1
 800186e:	f040 80a2 	bne.w	80019b6 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800187a:	7b1b      	ldrb	r3, [r3, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 8093 	beq.w	80019a8 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001882:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188a:	2b00      	cmp	r3, #0
 800188c:	d046      	beq.n	800191c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800188e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001890:	785b      	ldrb	r3, [r3, #1]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d126      	bne.n	80018e4 <PCD_EP_ISR_Handler+0x610>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	4413      	add	r3, r2
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
 80018ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	011a      	lsls	r2, r3, #4
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	4413      	add	r3, r2
 80018b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80018bc:	623b      	str	r3, [r7, #32]
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	801a      	strh	r2, [r3, #0]
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018dc:	b29a      	uxth	r2, r3
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	801a      	strh	r2, [r3, #0]
 80018e2:	e061      	b.n	80019a8 <PCD_EP_ISR_Handler+0x6d4>
 80018e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e6:	785b      	ldrb	r3, [r3, #1]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d15d      	bne.n	80019a8 <PCD_EP_ISR_Handler+0x6d4>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001900:	4413      	add	r3, r2
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	011a      	lsls	r2, r3, #4
 800190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190c:	4413      	add	r3, r2
 800190e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
 8001914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001916:	2200      	movs	r2, #0
 8001918:	801a      	strh	r2, [r3, #0]
 800191a:	e045      	b.n	80019a8 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001924:	785b      	ldrb	r3, [r3, #1]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d126      	bne.n	8001978 <PCD_EP_ISR_Handler+0x6a4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001938:	b29b      	uxth	r3, r3
 800193a:	461a      	mov	r2, r3
 800193c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193e:	4413      	add	r3, r2
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
 8001942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	011a      	lsls	r2, r3, #4
 8001948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194a:	4413      	add	r3, r2
 800194c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001950:	633b      	str	r3, [r7, #48]	; 0x30
 8001952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	b29b      	uxth	r3, r3
 8001958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800195c:	b29a      	uxth	r2, r3
 800195e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001960:	801a      	strh	r2, [r3, #0]
 8001962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800196c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001970:	b29a      	uxth	r2, r3
 8001972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001974:	801a      	strh	r2, [r3, #0]
 8001976:	e017      	b.n	80019a8 <PCD_EP_ISR_Handler+0x6d4>
 8001978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800197a:	785b      	ldrb	r3, [r3, #1]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d113      	bne.n	80019a8 <PCD_EP_ISR_Handler+0x6d4>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001988:	b29b      	uxth	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800198e:	4413      	add	r3, r2
 8001990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	011a      	lsls	r2, r3, #4
 8001998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800199a:	4413      	add	r3, r2
 800199c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80019a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80019a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a4:	2200      	movs	r2, #0
 80019a6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f005 fc37 	bl	8007222 <HAL_PCD_DataInStageCallback>
 80019b4:	e053      	b.n	8001a5e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80019b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d146      	bne.n	8001a50 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4413      	add	r3, r2
 80019d6:	3302      	adds	r3, #2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80019ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d907      	bls.n	8001a0a <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80019fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019fc:	699a      	ldr	r2, [r3, #24]
 80019fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a06:	619a      	str	r2, [r3, #24]
 8001a08:	e002      	b.n	8001a10 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d106      	bne.n	8001a26 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f005 fbff 	bl	8007222 <HAL_PCD_DataInStageCallback>
 8001a24:	e01b      	b.n	8001a5e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001a2e:	441a      	add	r2, r3
 8001a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a32:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a36:	69da      	ldr	r2, [r3, #28]
 8001a38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001a3c:	441a      	add	r2, r3
 8001a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a40:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f002 f91f 	bl	8003c8c <USB_EPStartXfer>
 8001a4e:	e006      	b.n	8001a5e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001a50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a54:	461a      	mov	r2, r3
 8001a56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f91b 	bl	8001c94 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f6ff ac37 	blt.w	80012de <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3758      	adds	r7, #88	; 0x58
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b088      	sub	sp, #32
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	4613      	mov	r3, r2
 8001a86:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d07e      	beq.n	8001b90 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	699a      	ldr	r2, [r3, #24]
 8001ac0:	8b7b      	ldrh	r3, [r7, #26]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d306      	bcc.n	8001ad4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	699a      	ldr	r2, [r3, #24]
 8001aca:	8b7b      	ldrh	r3, [r7, #26]
 8001acc:	1ad2      	subs	r2, r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	619a      	str	r2, [r3, #24]
 8001ad2:	e002      	b.n	8001ada <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d123      	bne.n	8001b2a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001afc:	833b      	strh	r3, [r7, #24]
 8001afe:	8b3b      	ldrh	r3, [r7, #24]
 8001b00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b04:	833b      	strh	r3, [r7, #24]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	441a      	add	r2, r3
 8001b14:	8b3b      	ldrh	r3, [r7, #24]
 8001b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01f      	beq.n	8001b74 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b4e:	82fb      	strh	r3, [r7, #22]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	441a      	add	r2, r3
 8001b5e:	8afb      	ldrh	r3, [r7, #22]
 8001b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b74:	8b7b      	ldrh	r3, [r7, #26]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8087 	beq.w	8001c8a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	6959      	ldr	r1, [r3, #20]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	891a      	ldrh	r2, [r3, #8]
 8001b88:	8b7b      	ldrh	r3, [r7, #26]
 8001b8a:	f003 fd9e 	bl	80056ca <USB_ReadPMA>
 8001b8e:	e07c      	b.n	8001c8a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3306      	adds	r3, #6
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	4413      	add	r3, r2
 8001bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bb8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	8b7b      	ldrh	r3, [r7, #26]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d306      	bcc.n	8001bd2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	699a      	ldr	r2, [r3, #24]
 8001bc8:	8b7b      	ldrh	r3, [r7, #26]
 8001bca:	1ad2      	subs	r2, r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	619a      	str	r2, [r3, #24]
 8001bd0:	e002      	b.n	8001bd8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d123      	bne.n	8001c28 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bfa:	83fb      	strh	r3, [r7, #30]
 8001bfc:	8bfb      	ldrh	r3, [r7, #30]
 8001bfe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c02:	83fb      	strh	r3, [r7, #30]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	441a      	add	r2, r3
 8001c12:	8bfb      	ldrh	r3, [r7, #30]
 8001c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d11f      	bne.n	8001c72 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c4c:	83bb      	strh	r3, [r7, #28]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	441a      	add	r2, r3
 8001c5c:	8bbb      	ldrh	r3, [r7, #28]
 8001c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c72:	8b7b      	ldrh	r3, [r7, #26]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d008      	beq.n	8001c8a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	6959      	ldr	r1, [r3, #20]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	895a      	ldrh	r2, [r3, #10]
 8001c84:	8b7b      	ldrh	r3, [r7, #26]
 8001c86:	f003 fd20 	bl	80056ca <USB_ReadPMA>
    }
  }

  return count;
 8001c8a:	8b7b      	ldrh	r3, [r7, #26]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b0a4      	sub	sp, #144	; 0x90
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 81dd 	beq.w	8002068 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	461a      	mov	r2, r3
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cd6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	699a      	ldr	r2, [r3, #24]
 8001cde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d907      	bls.n	8001cf6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	699a      	ldr	r2, [r3, #24]
 8001cea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001cee:	1ad2      	subs	r2, r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	619a      	str	r2, [r3, #24]
 8001cf4:	e002      	b.n	8001cfc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f040 80b9 	bne.w	8001e78 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	785b      	ldrb	r3, [r3, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d126      	bne.n	8001d5c <HAL_PCD_EP_DB_Transmit+0xc8>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d22:	4413      	add	r3, r2
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	011a      	lsls	r2, r3, #4
 8001d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2e:	4413      	add	r3, r2
 8001d30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d44:	801a      	strh	r2, [r3, #0]
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d58:	801a      	strh	r2, [r3, #0]
 8001d5a:	e01a      	b.n	8001d92 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	785b      	ldrb	r3, [r3, #1]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d116      	bne.n	8001d92 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d78:	4413      	add	r3, r2
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	011a      	lsls	r2, r3, #4
 8001d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d84:	4413      	add	r3, r2
 8001d86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8e:	2200      	movs	r2, #0
 8001d90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	785b      	ldrb	r3, [r3, #1]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d126      	bne.n	8001dee <HAL_PCD_EP_DB_Transmit+0x15a>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	4413      	add	r3, r2
 8001db6:	61fb      	str	r3, [r7, #28]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	011a      	lsls	r2, r3, #4
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	801a      	strh	r2, [r3, #0]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	801a      	strh	r2, [r3, #0]
 8001dec:	e017      	b.n	8001e1e <HAL_PCD_EP_DB_Transmit+0x18a>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	785b      	ldrb	r3, [r3, #1]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d113      	bne.n	8001e1e <HAL_PCD_EP_DB_Transmit+0x18a>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	4413      	add	r3, r2
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	011a      	lsls	r2, r3, #4
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	4413      	add	r3, r2
 8001e12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e16:	623b      	str	r3, [r7, #32]
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	4619      	mov	r1, r3
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f005 f9fc 	bl	8007222 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 82fc 	beq.w	800242e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e50:	82fb      	strh	r3, [r7, #22]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	441a      	add	r2, r3
 8001e60:	8afb      	ldrh	r3, [r7, #22]
 8001e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	8013      	strh	r3, [r2, #0]
 8001e76:	e2da      	b.n	800242e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d021      	beq.n	8001ec6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e9c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	441a      	add	r2, r3
 8001eae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	f040 82ae 	bne.w	800242e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001eda:	441a      	add	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	69da      	ldr	r2, [r3, #28]
 8001ee4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ee8:	441a      	add	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	6a1a      	ldr	r2, [r3, #32]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d30b      	bcc.n	8001f12 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	6a1a      	ldr	r2, [r3, #32]
 8001f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f0a:	1ad2      	subs	r2, r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	621a      	str	r2, [r3, #32]
 8001f10:	e017      	b.n	8001f42 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d108      	bne.n	8001f2c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8001f1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f2a:	e00a      	b.n	8001f42 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	785b      	ldrb	r3, [r3, #1]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d165      	bne.n	8002016 <HAL_PCD_EP_DB_Transmit+0x382>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f5e:	4413      	add	r3, r2
 8001f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	011a      	lsls	r2, r3, #4
 8001f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f70:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f80:	801a      	strh	r2, [r3, #0]
 8001f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f86:	2b3e      	cmp	r3, #62	; 0x3e
 8001f88:	d91d      	bls.n	8001fc6 <HAL_PCD_EP_DB_Transmit+0x332>
 8001f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <HAL_PCD_EP_DB_Transmit+0x310>
 8001f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	029b      	lsls	r3, r3, #10
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc2:	801a      	strh	r2, [r3, #0]
 8001fc4:	e044      	b.n	8002050 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10a      	bne.n	8001fe4 <HAL_PCD_EP_DB_Transmit+0x350>
 8001fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe0:	801a      	strh	r2, [r3, #0]
 8001fe2:	e035      	b.n	8002050 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <HAL_PCD_EP_DB_Transmit+0x36a>
 8001ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b29a      	uxth	r2, r3
 8002004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002006:	b29b      	uxth	r3, r3
 8002008:	029b      	lsls	r3, r3, #10
 800200a:	b29b      	uxth	r3, r3
 800200c:	4313      	orrs	r3, r2
 800200e:	b29a      	uxth	r2, r3
 8002010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002012:	801a      	strh	r2, [r3, #0]
 8002014:	e01c      	b.n	8002050 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	785b      	ldrb	r3, [r3, #1]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d118      	bne.n	8002050 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	647b      	str	r3, [r7, #68]	; 0x44
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800202c:	b29b      	uxth	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002032:	4413      	add	r3, r2
 8002034:	647b      	str	r3, [r7, #68]	; 0x44
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	011a      	lsls	r2, r3, #4
 800203c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800203e:	4413      	add	r3, r2
 8002040:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002044:	643b      	str	r3, [r7, #64]	; 0x40
 8002046:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800204a:	b29a      	uxth	r2, r3
 800204c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800204e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	6959      	ldr	r1, [r3, #20]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	891a      	ldrh	r2, [r3, #8]
 800205c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002060:	b29b      	uxth	r3, r3
 8002062:	f003 faed 	bl	8005640 <USB_WritePMA>
 8002066:	e1e2      	b.n	800242e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002070:	b29b      	uxth	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	3306      	adds	r3, #6
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	4413      	add	r3, r2
 8002086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002090:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800209c:	429a      	cmp	r2, r3
 800209e:	d307      	bcc.n	80020b0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	699a      	ldr	r2, [r3, #24]
 80020a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80020a8:	1ad2      	subs	r2, r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	619a      	str	r2, [r3, #24]
 80020ae:	e002      	b.n	80020b6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 80c0 	bne.w	8002240 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	785b      	ldrb	r3, [r3, #1]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d126      	bne.n	8002116 <HAL_PCD_EP_DB_Transmit+0x482>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020dc:	4413      	add	r3, r2
 80020de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	011a      	lsls	r2, r3, #4
 80020e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020e8:	4413      	add	r3, r2
 80020ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80020f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020fe:	801a      	strh	r2, [r3, #0]
 8002100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	b29b      	uxth	r3, r3
 8002106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800210a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800210e:	b29a      	uxth	r2, r3
 8002110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002112:	801a      	strh	r2, [r3, #0]
 8002114:	e01a      	b.n	800214c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	785b      	ldrb	r3, [r3, #1]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d116      	bne.n	800214c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	667b      	str	r3, [r7, #100]	; 0x64
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800212c:	b29b      	uxth	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002132:	4413      	add	r3, r2
 8002134:	667b      	str	r3, [r7, #100]	; 0x64
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	011a      	lsls	r2, r3, #4
 800213c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800213e:	4413      	add	r3, r2
 8002140:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002144:	663b      	str	r3, [r7, #96]	; 0x60
 8002146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002148:	2200      	movs	r2, #0
 800214a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	677b      	str	r3, [r7, #116]	; 0x74
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	785b      	ldrb	r3, [r3, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d12b      	bne.n	80021b2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002168:	b29b      	uxth	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216e:	4413      	add	r3, r2
 8002170:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	011a      	lsls	r2, r3, #4
 8002178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217a:	4413      	add	r3, r2
 800217c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002184:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002190:	b29a      	uxth	r2, r3
 8002192:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002196:	801a      	strh	r2, [r3, #0]
 8002198:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021ae:	801a      	strh	r2, [r3, #0]
 80021b0:	e017      	b.n	80021e2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	785b      	ldrb	r3, [r3, #1]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d113      	bne.n	80021e2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021c8:	4413      	add	r3, r2
 80021ca:	677b      	str	r3, [r7, #116]	; 0x74
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	011a      	lsls	r2, r3, #4
 80021d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021d4:	4413      	add	r3, r2
 80021d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021da:	673b      	str	r3, [r7, #112]	; 0x70
 80021dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021de:	2200      	movs	r2, #0
 80021e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	4619      	mov	r1, r3
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f005 f81a 	bl	8007222 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f040 811a 	bne.w	800242e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002214:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	441a      	add	r2, r3
 8002226:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800222a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800222e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002232:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800223a:	b29b      	uxth	r3, r3
 800223c:	8013      	strh	r3, [r2, #0]
 800223e:	e0f6      	b.n	800242e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d121      	bne.n	800228e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002264:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	441a      	add	r2, r3
 8002276:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800227a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800227e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002282:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228a:	b29b      	uxth	r3, r3
 800228c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002294:	2b01      	cmp	r3, #1
 8002296:	f040 80ca 	bne.w	800242e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022a2:	441a      	add	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022b0:	441a      	add	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	6a1a      	ldr	r2, [r3, #32]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d30b      	bcc.n	80022da <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	6a1a      	ldr	r2, [r3, #32]
 80022ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d2:	1ad2      	subs	r2, r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	621a      	str	r2, [r3, #32]
 80022d8:	e017      	b.n	800230a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d108      	bne.n	80022f4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80022e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022f2:	e00a      	b.n	800230a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2200      	movs	r2, #0
 8002300:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	657b      	str	r3, [r7, #84]	; 0x54
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	785b      	ldrb	r3, [r3, #1]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d165      	bne.n	80023e4 <HAL_PCD_EP_DB_Transmit+0x750>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002326:	b29b      	uxth	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800232c:	4413      	add	r3, r2
 800232e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	011a      	lsls	r2, r3, #4
 8002336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002338:	4413      	add	r3, r2
 800233a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800233e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800234a:	b29a      	uxth	r2, r3
 800234c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800234e:	801a      	strh	r2, [r3, #0]
 8002350:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002354:	2b3e      	cmp	r3, #62	; 0x3e
 8002356:	d91d      	bls.n	8002394 <HAL_PCD_EP_DB_Transmit+0x700>
 8002358:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002360:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	2b00      	cmp	r3, #0
 800236a:	d102      	bne.n	8002372 <HAL_PCD_EP_DB_Transmit+0x6de>
 800236c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800236e:	3b01      	subs	r3, #1
 8002370:	66bb      	str	r3, [r7, #104]	; 0x68
 8002372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b29a      	uxth	r2, r3
 8002378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800237a:	b29b      	uxth	r3, r3
 800237c:	029b      	lsls	r3, r3, #10
 800237e:	b29b      	uxth	r3, r3
 8002380:	4313      	orrs	r3, r2
 8002382:	b29b      	uxth	r3, r3
 8002384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800238c:	b29a      	uxth	r2, r3
 800238e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002390:	801a      	strh	r2, [r3, #0]
 8002392:	e041      	b.n	8002418 <HAL_PCD_EP_DB_Transmit+0x784>
 8002394:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <HAL_PCD_EP_DB_Transmit+0x71e>
 800239c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ae:	801a      	strh	r2, [r3, #0]
 80023b0:	e032      	b.n	8002418 <HAL_PCD_EP_DB_Transmit+0x784>
 80023b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80023ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_PCD_EP_DB_Transmit+0x738>
 80023c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023c8:	3301      	adds	r3, #1
 80023ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80023cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	029b      	lsls	r3, r3, #10
 80023d8:	b29b      	uxth	r3, r3
 80023da:	4313      	orrs	r3, r2
 80023dc:	b29a      	uxth	r2, r3
 80023de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e0:	801a      	strh	r2, [r3, #0]
 80023e2:	e019      	b.n	8002418 <HAL_PCD_EP_DB_Transmit+0x784>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	785b      	ldrb	r3, [r3, #1]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d115      	bne.n	8002418 <HAL_PCD_EP_DB_Transmit+0x784>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023fa:	4413      	add	r3, r2
 80023fc:	657b      	str	r3, [r7, #84]	; 0x54
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	011a      	lsls	r2, r3, #4
 8002404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002406:	4413      	add	r3, r2
 8002408:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800240c:	653b      	str	r3, [r7, #80]	; 0x50
 800240e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002412:	b29a      	uxth	r2, r3
 8002414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002416:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	6959      	ldr	r1, [r3, #20]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	895a      	ldrh	r2, [r3, #10]
 8002424:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002428:	b29b      	uxth	r3, r3
 800242a:	f003 f909 	bl	8005640 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002448:	82bb      	strh	r3, [r7, #20]
 800244a:	8abb      	ldrh	r3, [r7, #20]
 800244c:	f083 0310 	eor.w	r3, r3, #16
 8002450:	82bb      	strh	r3, [r7, #20]
 8002452:	8abb      	ldrh	r3, [r7, #20]
 8002454:	f083 0320 	eor.w	r3, r3, #32
 8002458:	82bb      	strh	r3, [r7, #20]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	441a      	add	r2, r3
 8002468:	8abb      	ldrh	r3, [r7, #20]
 800246a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800246e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800247a:	b29b      	uxth	r3, r3
 800247c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3790      	adds	r7, #144	; 0x90
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	460b      	mov	r3, r1
 8002494:	817b      	strh	r3, [r7, #10]
 8002496:	4613      	mov	r3, r2
 8002498:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800249a:	897b      	ldrh	r3, [r7, #10]
 800249c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a6:	897b      	ldrh	r3, [r7, #10]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4413      	add	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	e009      	b.n	80024d2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024be:	897a      	ldrh	r2, [r7, #10]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4413      	add	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80024d2:	893b      	ldrh	r3, [r7, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d107      	bne.n	80024e8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2200      	movs	r2, #0
 80024dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	80da      	strh	r2, [r3, #6]
 80024e6:	e00b      	b.n	8002500 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2201      	movs	r2, #1
 80024ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	371c      	adds	r7, #28
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e31d      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251e:	4b94      	ldr	r3, [pc, #592]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002528:	4b91      	ldr	r3, [pc, #580]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002530:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d07b      	beq.n	8002636 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2b08      	cmp	r3, #8
 8002542:	d006      	beq.n	8002552 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d10f      	bne.n	800256a <HAL_RCC_OscConfig+0x5e>
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002550:	d10b      	bne.n	800256a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002552:	4b87      	ldr	r3, [pc, #540]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d06a      	beq.n	8002634 <HAL_RCC_OscConfig+0x128>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d166      	bne.n	8002634 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e2f7      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d106      	bne.n	8002580 <HAL_RCC_OscConfig+0x74>
 8002572:	4b7f      	ldr	r3, [pc, #508]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a7e      	ldr	r2, [pc, #504]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e02d      	b.n	80025dc <HAL_RCC_OscConfig+0xd0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10c      	bne.n	80025a2 <HAL_RCC_OscConfig+0x96>
 8002588:	4b79      	ldr	r3, [pc, #484]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a78      	ldr	r2, [pc, #480]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 800258e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	4b76      	ldr	r3, [pc, #472]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a75      	ldr	r2, [pc, #468]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 800259a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	e01c      	b.n	80025dc <HAL_RCC_OscConfig+0xd0>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b05      	cmp	r3, #5
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0xb8>
 80025aa:	4b71      	ldr	r3, [pc, #452]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a70      	ldr	r2, [pc, #448]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 80025b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b6e      	ldr	r3, [pc, #440]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a6d      	ldr	r2, [pc, #436]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0xd0>
 80025c4:	4b6a      	ldr	r3, [pc, #424]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a69      	ldr	r2, [pc, #420]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 80025ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b67      	ldr	r3, [pc, #412]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a66      	ldr	r2, [pc, #408]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 80025d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe f982 	bl	80008ec <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe f97e 	bl	80008ec <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e2ad      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025fe:	4b5c      	ldr	r3, [pc, #368]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0xe0>
 800260a:	e014      	b.n	8002636 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe f96e 	bl	80008ec <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002614:	f7fe f96a 	bl	80008ec <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	; 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e299      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002626:	4b52      	ldr	r3, [pc, #328]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x108>
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d05a      	beq.n	80026f8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	2b04      	cmp	r3, #4
 8002646:	d005      	beq.n	8002654 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	2b0c      	cmp	r3, #12
 800264c:	d119      	bne.n	8002682 <HAL_RCC_OscConfig+0x176>
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d116      	bne.n	8002682 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002654:	4b46      	ldr	r3, [pc, #280]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_OscConfig+0x160>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d001      	beq.n	800266c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e276      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266c:	4b40      	ldr	r3, [pc, #256]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	493d      	ldr	r1, [pc, #244]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002680:	e03a      	b.n	80026f8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d020      	beq.n	80026cc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800268a:	4b3a      	ldr	r3, [pc, #232]	; (8002774 <HAL_RCC_OscConfig+0x268>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7fe f92c 	bl	80008ec <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002698:	f7fe f928 	bl	80008ec <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e257      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026aa:	4b31      	ldr	r3, [pc, #196]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b6:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	492a      	ldr	r1, [pc, #168]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
 80026ca:	e015      	b.n	80026f8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026cc:	4b29      	ldr	r3, [pc, #164]	; (8002774 <HAL_RCC_OscConfig+0x268>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7fe f90b 	bl	80008ec <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026da:	f7fe f907 	bl	80008ec <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e236      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026ec:	4b20      	ldr	r3, [pc, #128]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f0      	bne.n	80026da <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80b8 	beq.w	8002876 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d170      	bne.n	80027ee <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800270c:	4b18      	ldr	r3, [pc, #96]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_OscConfig+0x218>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e21a      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1a      	ldr	r2, [r3, #32]
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002730:	429a      	cmp	r2, r3
 8002732:	d921      	bls.n	8002778 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fc4b 	bl	8002fd4 <RCC_SetFlashLatencyFromMSIRange>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e208      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4906      	ldr	r1, [pc, #24]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	061b      	lsls	r3, r3, #24
 8002768:	4901      	ldr	r1, [pc, #4]	; (8002770 <HAL_RCC_OscConfig+0x264>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
 800276e:	e020      	b.n	80027b2 <HAL_RCC_OscConfig+0x2a6>
 8002770:	40023800 	.word	0x40023800
 8002774:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002778:	4b99      	ldr	r3, [pc, #612]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	4996      	ldr	r1, [pc, #600]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800278a:	4b95      	ldr	r3, [pc, #596]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	061b      	lsls	r3, r3, #24
 8002798:	4991      	ldr	r1, [pc, #580]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fc16 	bl	8002fd4 <RCC_SetFlashLatencyFromMSIRange>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e1d3      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	0b5b      	lsrs	r3, r3, #13
 80027b8:	3301      	adds	r3, #1
 80027ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80027c2:	4a87      	ldr	r2, [pc, #540]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 80027c4:	6892      	ldr	r2, [r2, #8]
 80027c6:	0912      	lsrs	r2, r2, #4
 80027c8:	f002 020f 	and.w	r2, r2, #15
 80027cc:	4985      	ldr	r1, [pc, #532]	; (80029e4 <HAL_RCC_OscConfig+0x4d8>)
 80027ce:	5c8a      	ldrb	r2, [r1, r2]
 80027d0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80027d2:	4a85      	ldr	r2, [pc, #532]	; (80029e8 <HAL_RCC_OscConfig+0x4dc>)
 80027d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027d6:	4b85      	ldr	r3, [pc, #532]	; (80029ec <HAL_RCC_OscConfig+0x4e0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe f83a 	bl	8000854 <HAL_InitTick>
 80027e0:	4603      	mov	r3, r0
 80027e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d045      	beq.n	8002876 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	e1b5      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d029      	beq.n	800284a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027f6:	4b7e      	ldr	r3, [pc, #504]	; (80029f0 <HAL_RCC_OscConfig+0x4e4>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7fe f876 	bl	80008ec <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002804:	f7fe f872 	bl	80008ec <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e1a1      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002816:	4b72      	ldr	r3, [pc, #456]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002822:	4b6f      	ldr	r3, [pc, #444]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	496c      	ldr	r1, [pc, #432]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002834:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	4967      	ldr	r1, [pc, #412]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
 8002848:	e015      	b.n	8002876 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800284a:	4b69      	ldr	r3, [pc, #420]	; (80029f0 <HAL_RCC_OscConfig+0x4e4>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe f84c 	bl	80008ec <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002858:	f7fe f848 	bl	80008ec <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e177      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800286a:	4b5d      	ldr	r3, [pc, #372]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d030      	beq.n	80028e4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d016      	beq.n	80028b8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800288a:	4b5a      	ldr	r3, [pc, #360]	; (80029f4 <HAL_RCC_OscConfig+0x4e8>)
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002890:	f7fe f82c 	bl	80008ec <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002898:	f7fe f828 	bl	80008ec <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e157      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028aa:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 80028ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x38c>
 80028b6:	e015      	b.n	80028e4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028b8:	4b4e      	ldr	r3, [pc, #312]	; (80029f4 <HAL_RCC_OscConfig+0x4e8>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028be:	f7fe f815 	bl	80008ec <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c6:	f7fe f811 	bl	80008ec <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e140      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028d8:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80b5 	beq.w	8002a5c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f6:	4b3a      	ldr	r3, [pc, #232]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10d      	bne.n	800291e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	4b37      	ldr	r3, [pc, #220]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	4a36      	ldr	r2, [pc, #216]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290c:	6253      	str	r3, [r2, #36]	; 0x24
 800290e:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291a:	2301      	movs	r3, #1
 800291c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291e:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <HAL_RCC_OscConfig+0x4ec>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d118      	bne.n	800295c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292a:	4b33      	ldr	r3, [pc, #204]	; (80029f8 <HAL_RCC_OscConfig+0x4ec>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a32      	ldr	r2, [pc, #200]	; (80029f8 <HAL_RCC_OscConfig+0x4ec>)
 8002930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002936:	f7fd ffd9 	bl	80008ec <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293e:	f7fd ffd5 	bl	80008ec <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b64      	cmp	r3, #100	; 0x64
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e104      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <HAL_RCC_OscConfig+0x4ec>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x466>
 8002964:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 8002966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002968:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 800296a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296e:	6353      	str	r3, [r2, #52]	; 0x34
 8002970:	e02d      	b.n	80029ce <HAL_RCC_OscConfig+0x4c2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0x488>
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 800297c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297e:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 8002980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002984:	6353      	str	r3, [r2, #52]	; 0x34
 8002986:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 8002988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298a:	4a15      	ldr	r2, [pc, #84]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 800298c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002990:	6353      	str	r3, [r2, #52]	; 0x34
 8002992:	e01c      	b.n	80029ce <HAL_RCC_OscConfig+0x4c2>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b05      	cmp	r3, #5
 800299a:	d10c      	bne.n	80029b6 <HAL_RCC_OscConfig+0x4aa>
 800299c:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 800299e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a0:	4a0f      	ldr	r2, [pc, #60]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 80029a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029a6:	6353      	str	r3, [r2, #52]	; 0x34
 80029a8:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 80029aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ac:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 80029ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b2:	6353      	str	r3, [r2, #52]	; 0x34
 80029b4:	e00b      	b.n	80029ce <HAL_RCC_OscConfig+0x4c2>
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 80029b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ba:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 80029bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029c0:	6353      	str	r3, [r2, #52]	; 0x34
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	4a06      	ldr	r2, [pc, #24]	; (80029e0 <HAL_RCC_OscConfig+0x4d4>)
 80029c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029cc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d024      	beq.n	8002a20 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d6:	f7fd ff89 	bl	80008ec <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029dc:	e019      	b.n	8002a12 <HAL_RCC_OscConfig+0x506>
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	080086c8 	.word	0x080086c8
 80029e8:	20000004 	.word	0x20000004
 80029ec:	20000008 	.word	0x20000008
 80029f0:	42470020 	.word	0x42470020
 80029f4:	42470680 	.word	0x42470680
 80029f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fc:	f7fd ff76 	bl	80008ec <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0a3      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a12:	4b54      	ldr	r3, [pc, #336]	; (8002b64 <HAL_RCC_OscConfig+0x658>)
 8002a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ee      	beq.n	80029fc <HAL_RCC_OscConfig+0x4f0>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a20:	f7fd ff64 	bl	80008ec <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a28:	f7fd ff60 	bl	80008ec <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e08d      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a3e:	4b49      	ldr	r3, [pc, #292]	; (8002b64 <HAL_RCC_OscConfig+0x658>)
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1ee      	bne.n	8002a28 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a4a:	7ffb      	ldrb	r3, [r7, #31]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a50:	4b44      	ldr	r3, [pc, #272]	; (8002b64 <HAL_RCC_OscConfig+0x658>)
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	4a43      	ldr	r2, [pc, #268]	; (8002b64 <HAL_RCC_OscConfig+0x658>)
 8002a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d079      	beq.n	8002b58 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b0c      	cmp	r3, #12
 8002a68:	d056      	beq.n	8002b18 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d13b      	bne.n	8002aea <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a72:	4b3d      	ldr	r3, [pc, #244]	; (8002b68 <HAL_RCC_OscConfig+0x65c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7fd ff38 	bl	80008ec <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fd ff34 	bl	80008ec <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e063      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a92:	4b34      	ldr	r3, [pc, #208]	; (8002b64 <HAL_RCC_OscConfig+0x658>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a9e:	4b31      	ldr	r3, [pc, #196]	; (8002b64 <HAL_RCC_OscConfig+0x658>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	4319      	orrs	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	492b      	ldr	r1, [pc, #172]	; (8002b64 <HAL_RCC_OscConfig+0x658>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abc:	4b2a      	ldr	r3, [pc, #168]	; (8002b68 <HAL_RCC_OscConfig+0x65c>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fd ff13 	bl	80008ec <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fd ff0f 	bl	80008ec <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e03e      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002adc:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <HAL_RCC_OscConfig+0x658>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x5be>
 8002ae8:	e036      	b.n	8002b58 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aea:	4b1f      	ldr	r3, [pc, #124]	; (8002b68 <HAL_RCC_OscConfig+0x65c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fd fefc 	bl	80008ec <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fd fef8 	bl	80008ec <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e027      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_RCC_OscConfig+0x658>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x5ec>
 8002b16:	e01f      	b.n	8002b58 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e01a      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_RCC_OscConfig+0x658>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d10d      	bne.n	8002b54 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d106      	bne.n	8002b54 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3720      	adds	r7, #32
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800
 8002b68:	42470060 	.word	0x42470060

08002b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e11a      	b.n	8002db6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b80:	4b8f      	ldr	r3, [pc, #572]	; (8002dc0 <HAL_RCC_ClockConfig+0x254>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d919      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x34>
 8002b94:	4b8a      	ldr	r3, [pc, #552]	; (8002dc0 <HAL_RCC_ClockConfig+0x254>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a89      	ldr	r2, [pc, #548]	; (8002dc0 <HAL_RCC_ClockConfig+0x254>)
 8002b9a:	f043 0304 	orr.w	r3, r3, #4
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b87      	ldr	r3, [pc, #540]	; (8002dc0 <HAL_RCC_ClockConfig+0x254>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 0201 	bic.w	r2, r3, #1
 8002ba8:	4985      	ldr	r1, [pc, #532]	; (8002dc0 <HAL_RCC_ClockConfig+0x254>)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb0:	4b83      	ldr	r3, [pc, #524]	; (8002dc0 <HAL_RCC_ClockConfig+0x254>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0f9      	b.n	8002db6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d008      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bce:	4b7d      	ldr	r3, [pc, #500]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	497a      	ldr	r1, [pc, #488]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 808e 	beq.w	8002d0a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bf6:	4b73      	ldr	r3, [pc, #460]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d121      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e0d7      	b.n	8002db6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c0e:	4b6d      	ldr	r3, [pc, #436]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d115      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e0cb      	b.n	8002db6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c26:	4b67      	ldr	r3, [pc, #412]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0bf      	b.n	8002db6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c36:	4b63      	ldr	r3, [pc, #396]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0b7      	b.n	8002db6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c46:	4b5f      	ldr	r3, [pc, #380]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f023 0203 	bic.w	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	495c      	ldr	r1, [pc, #368]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c58:	f7fd fe48 	bl	80008ec <HAL_GetTick>
 8002c5c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d112      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c68:	f7fd fe40 	bl	80008ec <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e09b      	b.n	8002db6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c7e:	4b51      	ldr	r3, [pc, #324]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d1ee      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xfc>
 8002c8a:	e03e      	b.n	8002d0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d112      	bne.n	8002cba <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c94:	e00a      	b.n	8002cac <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c96:	f7fd fe29 	bl	80008ec <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e084      	b.n	8002db6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cac:	4b45      	ldr	r3, [pc, #276]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b0c      	cmp	r3, #12
 8002cb6:	d1ee      	bne.n	8002c96 <HAL_RCC_ClockConfig+0x12a>
 8002cb8:	e027      	b.n	8002d0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d11d      	bne.n	8002cfe <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fd fe12 	bl	80008ec <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e06d      	b.n	8002db6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cda:	4b3a      	ldr	r3, [pc, #232]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d1ee      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x158>
 8002ce6:	e010      	b.n	8002d0a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce8:	f7fd fe00 	bl	80008ec <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e05b      	b.n	8002db6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002cfe:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ee      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d0a:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <HAL_RCC_ClockConfig+0x254>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d219      	bcs.n	8002d4c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d105      	bne.n	8002d2a <HAL_RCC_ClockConfig+0x1be>
 8002d1e:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <HAL_RCC_ClockConfig+0x254>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <HAL_RCC_ClockConfig+0x254>)
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <HAL_RCC_ClockConfig+0x254>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 0201 	bic.w	r2, r3, #1
 8002d32:	4923      	ldr	r1, [pc, #140]	; (8002dc0 <HAL_RCC_ClockConfig+0x254>)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <HAL_RCC_ClockConfig+0x254>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e034      	b.n	8002db6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d58:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4917      	ldr	r1, [pc, #92]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d76:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	490f      	ldr	r1, [pc, #60]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d8a:	f000 f823 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <HAL_RCC_ClockConfig+0x258>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	490b      	ldr	r1, [pc, #44]	; (8002dc8 <HAL_RCC_ClockConfig+0x25c>)
 8002d9c:	5ccb      	ldrb	r3, [r1, r3]
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <HAL_RCC_ClockConfig+0x260>)
 8002da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fd52 	bl	8000854 <HAL_InitTick>
 8002db0:	4603      	mov	r3, r0
 8002db2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002db4:	7afb      	ldrb	r3, [r7, #11]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023c00 	.word	0x40023c00
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	080086c8 	.word	0x080086c8
 8002dcc:	20000004 	.word	0x20000004
 8002dd0:	20000008 	.word	0x20000008

08002dd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd8:	b092      	sub	sp, #72	; 0x48
 8002dda:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002ddc:	4b79      	ldr	r3, [pc, #484]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b0c      	cmp	r3, #12
 8002dea:	d00d      	beq.n	8002e08 <HAL_RCC_GetSysClockFreq+0x34>
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	f200 80d5 	bhi.w	8002f9c <HAL_RCC_GetSysClockFreq+0x1c8>
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d002      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0x28>
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d003      	beq.n	8002e02 <HAL_RCC_GetSysClockFreq+0x2e>
 8002dfa:	e0cf      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dfc:	4b72      	ldr	r3, [pc, #456]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002dfe:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002e00:	e0da      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e02:	4b72      	ldr	r3, [pc, #456]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002e04:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002e06:	e0d7      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0a:	0c9b      	lsrs	r3, r3, #18
 8002e0c:	f003 020f 	and.w	r2, r3, #15
 8002e10:	4b6f      	ldr	r3, [pc, #444]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002e12:	5c9b      	ldrb	r3, [r3, r2]
 8002e14:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e18:	0d9b      	lsrs	r3, r3, #22
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e22:	4b68      	ldr	r3, [pc, #416]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d05d      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	2200      	movs	r2, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	4611      	mov	r1, r2
 8002e36:	4604      	mov	r4, r0
 8002e38:	460d      	mov	r5, r1
 8002e3a:	4622      	mov	r2, r4
 8002e3c:	462b      	mov	r3, r5
 8002e3e:	f04f 0000 	mov.w	r0, #0
 8002e42:	f04f 0100 	mov.w	r1, #0
 8002e46:	0159      	lsls	r1, r3, #5
 8002e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e4c:	0150      	lsls	r0, r2, #5
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4621      	mov	r1, r4
 8002e54:	1a51      	subs	r1, r2, r1
 8002e56:	6139      	str	r1, [r7, #16]
 8002e58:	4629      	mov	r1, r5
 8002e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e6c:	4659      	mov	r1, fp
 8002e6e:	018b      	lsls	r3, r1, #6
 8002e70:	4651      	mov	r1, sl
 8002e72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e76:	4651      	mov	r1, sl
 8002e78:	018a      	lsls	r2, r1, #6
 8002e7a:	46d4      	mov	ip, sl
 8002e7c:	ebb2 080c 	subs.w	r8, r2, ip
 8002e80:	4659      	mov	r1, fp
 8002e82:	eb63 0901 	sbc.w	r9, r3, r1
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e9a:	4690      	mov	r8, r2
 8002e9c:	4699      	mov	r9, r3
 8002e9e:	4623      	mov	r3, r4
 8002ea0:	eb18 0303 	adds.w	r3, r8, r3
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	462b      	mov	r3, r5
 8002ea8:	eb49 0303 	adc.w	r3, r9, r3
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002eba:	4629      	mov	r1, r5
 8002ebc:	024b      	lsls	r3, r1, #9
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002ec8:	4601      	mov	r1, r0
 8002eca:	024a      	lsls	r2, r1, #9
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ed8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002edc:	f7fd f956 	bl	800018c <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ee8:	e055      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eec:	2200      	movs	r2, #0
 8002eee:	623b      	str	r3, [r7, #32]
 8002ef0:	627a      	str	r2, [r7, #36]	; 0x24
 8002ef2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ef6:	4642      	mov	r2, r8
 8002ef8:	464b      	mov	r3, r9
 8002efa:	f04f 0000 	mov.w	r0, #0
 8002efe:	f04f 0100 	mov.w	r1, #0
 8002f02:	0159      	lsls	r1, r3, #5
 8002f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f08:	0150      	lsls	r0, r2, #5
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	46c4      	mov	ip, r8
 8002f10:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002f14:	4640      	mov	r0, r8
 8002f16:	4649      	mov	r1, r9
 8002f18:	468c      	mov	ip, r1
 8002f1a:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f2a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f2e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f32:	ebb2 040a 	subs.w	r4, r2, sl
 8002f36:	eb63 050b 	sbc.w	r5, r3, fp
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	00eb      	lsls	r3, r5, #3
 8002f44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f48:	00e2      	lsls	r2, r4, #3
 8002f4a:	4614      	mov	r4, r2
 8002f4c:	461d      	mov	r5, r3
 8002f4e:	4603      	mov	r3, r0
 8002f50:	18e3      	adds	r3, r4, r3
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	460b      	mov	r3, r1
 8002f56:	eb45 0303 	adc.w	r3, r5, r3
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f68:	4629      	mov	r1, r5
 8002f6a:	028b      	lsls	r3, r1, #10
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	4629      	mov	r1, r5
 8002f70:	4604      	mov	r4, r0
 8002f72:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002f76:	4601      	mov	r1, r0
 8002f78:	028a      	lsls	r2, r1, #10
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f80:	2200      	movs	r2, #0
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	61fa      	str	r2, [r7, #28]
 8002f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f8a:	f7fd f8ff 	bl	800018c <__aeabi_uldivmod>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4613      	mov	r3, r2
 8002f94:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8002f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f98:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002f9a:	e00d      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f9c:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	0b5b      	lsrs	r3, r3, #13
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	3301      	adds	r3, #1
 8002fac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002fb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3748      	adds	r7, #72	; 0x48
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	00f42400 	.word	0x00f42400
 8002fcc:	007a1200 	.word	0x007a1200
 8002fd0:	080086bc 	.word	0x080086bc

08002fd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fdc:	2300      	movs	r3, #0
 8002fde:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002fe0:	4b29      	ldr	r3, [pc, #164]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d12c      	bne.n	8003046 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fec:	4b26      	ldr	r3, [pc, #152]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	e016      	b.n	8003032 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003004:	4b20      	ldr	r3, [pc, #128]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800300a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300e:	6253      	str	r3, [r2, #36]	; 0x24
 8003010:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003024:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003026:	4b18      	ldr	r3, [pc, #96]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	4a17      	ldr	r2, [pc, #92]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800302c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003030:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003038:	d105      	bne.n	8003046 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003040:	d101      	bne.n	8003046 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003042:	2301      	movs	r3, #1
 8003044:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d105      	bne.n	8003058 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800304c:	4b10      	ldr	r3, [pc, #64]	; (8003090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a0f      	ldr	r2, [pc, #60]	; (8003090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003052:	f043 0304 	orr.w	r3, r3, #4
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f023 0201 	bic.w	r2, r3, #1
 8003060:	490b      	ldr	r1, [pc, #44]	; (8003090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	429a      	cmp	r2, r3
 8003074:	d001      	beq.n	800307a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	371c      	adds	r7, #28
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800
 800308c:	40007000 	.word	0x40007000
 8003090:	40023c00 	.word	0x40023c00

08003094 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80030a4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80030a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80030c8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80030cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	b29b      	uxth	r3, r3
 80030de:	4013      	ands	r3, r2
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80030f4:	b084      	sub	sp, #16
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	f107 0014 	add.w	r0, r7, #20
 8003102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	b004      	add	sp, #16
 8003132:	4770      	bx	lr

08003134 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003134:	b480      	push	{r7}
 8003136:	b09d      	sub	sp, #116	; 0x74
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	b29b      	uxth	r3, r3
 8003152:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	78db      	ldrb	r3, [r3, #3]
 8003162:	2b03      	cmp	r3, #3
 8003164:	d81f      	bhi.n	80031a6 <USB_ActivateEndpoint+0x72>
 8003166:	a201      	add	r2, pc, #4	; (adr r2, 800316c <USB_ActivateEndpoint+0x38>)
 8003168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316c:	0800317d 	.word	0x0800317d
 8003170:	08003199 	.word	0x08003199
 8003174:	080031af 	.word	0x080031af
 8003178:	0800318b 	.word	0x0800318b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800317c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003184:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003188:	e012      	b.n	80031b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800318a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800318e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003192:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003196:	e00b      	b.n	80031b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003198:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800319c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80031a4:	e004      	b.n	80031b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80031ac:	e000      	b.n	80031b0 <USB_ActivateEndpoint+0x7c>
      break;
 80031ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	441a      	add	r2, r3
 80031ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80031be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	441a      	add	r2, r3
 8003200:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003214:	b29b      	uxth	r3, r3
 8003216:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	7b1b      	ldrb	r3, [r3, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f040 8178 	bne.w	8003512 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	785b      	ldrb	r3, [r3, #1]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 8084 	beq.w	8003334 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	61bb      	str	r3, [r7, #24]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003236:	b29b      	uxth	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	4413      	add	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	011a      	lsls	r2, r3, #4
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	88db      	ldrh	r3, [r3, #6]
 8003254:	085b      	lsrs	r3, r3, #1
 8003256:	b29b      	uxth	r3, r3
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	827b      	strh	r3, [r7, #18]
 800326e:	8a7b      	ldrh	r3, [r7, #18]
 8003270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01b      	beq.n	80032b0 <USB_ActivateEndpoint+0x17c>
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	b29b      	uxth	r3, r3
 8003286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800328a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328e:	823b      	strh	r3, [r7, #16]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	441a      	add	r2, r3
 800329a:	8a3b      	ldrh	r3, [r7, #16]
 800329c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	78db      	ldrb	r3, [r3, #3]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d020      	beq.n	80032fa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ce:	81bb      	strh	r3, [r7, #12]
 80032d0:	89bb      	ldrh	r3, [r7, #12]
 80032d2:	f083 0320 	eor.w	r3, r3, #32
 80032d6:	81bb      	strh	r3, [r7, #12]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	441a      	add	r2, r3
 80032e2:	89bb      	ldrh	r3, [r7, #12]
 80032e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	8013      	strh	r3, [r2, #0]
 80032f8:	e2d5      	b.n	80038a6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	b29b      	uxth	r3, r3
 8003308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800330c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003310:	81fb      	strh	r3, [r7, #14]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	441a      	add	r2, r3
 800331c:	89fb      	ldrh	r3, [r7, #14]
 800331e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800332a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800332e:	b29b      	uxth	r3, r3
 8003330:	8013      	strh	r3, [r2, #0]
 8003332:	e2b8      	b.n	80038a6 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	633b      	str	r3, [r7, #48]	; 0x30
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800333e:	b29b      	uxth	r3, r3
 8003340:	461a      	mov	r2, r3
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	4413      	add	r3, r2
 8003346:	633b      	str	r3, [r7, #48]	; 0x30
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	011a      	lsls	r2, r3, #4
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	4413      	add	r3, r2
 8003352:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	88db      	ldrh	r3, [r3, #6]
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	b29b      	uxth	r3, r3
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003366:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003372:	b29b      	uxth	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	4413      	add	r3, r2
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	011a      	lsls	r2, r3, #4
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	4413      	add	r3, r2
 8003386:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	b29b      	uxth	r3, r3
 8003392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003396:	b29a      	uxth	r2, r3
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	801a      	strh	r2, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b3e      	cmp	r3, #62	; 0x3e
 80033a2:	d91d      	bls.n	80033e0 <USB_ActivateEndpoint+0x2ac>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <USB_ActivateEndpoint+0x28a>
 80033b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ba:	3b01      	subs	r3, #1
 80033bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	029b      	lsls	r3, r3, #10
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	4313      	orrs	r3, r2
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033d8:	b29a      	uxth	r2, r3
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	801a      	strh	r2, [r3, #0]
 80033de:	e026      	b.n	800342e <USB_ActivateEndpoint+0x2fa>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10a      	bne.n	80033fe <USB_ActivateEndpoint+0x2ca>
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	801a      	strh	r2, [r3, #0]
 80033fc:	e017      	b.n	800342e <USB_ActivateEndpoint+0x2fa>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	085b      	lsrs	r3, r3, #1
 8003404:	66bb      	str	r3, [r7, #104]	; 0x68
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <USB_ActivateEndpoint+0x2e4>
 8003412:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003414:	3301      	adds	r3, #1
 8003416:	66bb      	str	r3, [r7, #104]	; 0x68
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	b29a      	uxth	r2, r3
 800341e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003420:	b29b      	uxth	r3, r3
 8003422:	029b      	lsls	r3, r3, #10
 8003424:	b29b      	uxth	r3, r3
 8003426:	4313      	orrs	r3, r2
 8003428:	b29a      	uxth	r2, r3
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	847b      	strh	r3, [r7, #34]	; 0x22
 800343c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800343e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d01b      	beq.n	800347e <USB_ActivateEndpoint+0x34a>
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345c:	843b      	strh	r3, [r7, #32]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	441a      	add	r2, r3
 8003468:	8c3b      	ldrh	r3, [r7, #32]
 800346a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800346e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800347a:	b29b      	uxth	r3, r3
 800347c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d124      	bne.n	80034d0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349c:	83bb      	strh	r3, [r7, #28]
 800349e:	8bbb      	ldrh	r3, [r7, #28]
 80034a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80034a4:	83bb      	strh	r3, [r7, #28]
 80034a6:	8bbb      	ldrh	r3, [r7, #28]
 80034a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034ac:	83bb      	strh	r3, [r7, #28]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	441a      	add	r2, r3
 80034b8:	8bbb      	ldrh	r3, [r7, #28]
 80034ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	8013      	strh	r3, [r2, #0]
 80034ce:	e1ea      	b.n	80038a6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e6:	83fb      	strh	r3, [r7, #30]
 80034e8:	8bfb      	ldrh	r3, [r7, #30]
 80034ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034ee:	83fb      	strh	r3, [r7, #30]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	441a      	add	r2, r3
 80034fa:	8bfb      	ldrh	r3, [r7, #30]
 80034fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350c:	b29b      	uxth	r3, r3
 800350e:	8013      	strh	r3, [r2, #0]
 8003510:	e1c9      	b.n	80038a6 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	78db      	ldrb	r3, [r3, #3]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d11e      	bne.n	8003558 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800352c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003530:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	441a      	add	r2, r3
 800353e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800354a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800354e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003552:	b29b      	uxth	r3, r3
 8003554:	8013      	strh	r3, [r2, #0]
 8003556:	e01d      	b.n	8003594 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	b29b      	uxth	r3, r3
 8003566:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800356a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	441a      	add	r2, r3
 800357c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800358c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003590:	b29b      	uxth	r3, r3
 8003592:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800359e:	b29b      	uxth	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a4:	4413      	add	r3, r2
 80035a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	011a      	lsls	r2, r3, #4
 80035ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	891b      	ldrh	r3, [r3, #8]
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	b29b      	uxth	r3, r3
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035c6:	801a      	strh	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	657b      	str	r3, [r7, #84]	; 0x54
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d8:	4413      	add	r3, r2
 80035da:	657b      	str	r3, [r7, #84]	; 0x54
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	011a      	lsls	r2, r3, #4
 80035e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80035ea:	653b      	str	r3, [r7, #80]	; 0x50
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	895b      	ldrh	r3, [r3, #10]
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	785b      	ldrb	r3, [r3, #1]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f040 8093 	bne.w	800372c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003616:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800361a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d01b      	beq.n	800365a <USB_ActivateEndpoint+0x526>
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003638:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	441a      	add	r2, r3
 8003644:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800364a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800364e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003656:	b29b      	uxth	r3, r3
 8003658:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003668:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d01b      	beq.n	80036aa <USB_ActivateEndpoint+0x576>
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	b29b      	uxth	r3, r3
 8003680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003688:	877b      	strh	r3, [r7, #58]	; 0x3a
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	441a      	add	r2, r3
 8003694:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800369a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800369e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c0:	873b      	strh	r3, [r7, #56]	; 0x38
 80036c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80036c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80036c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80036ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80036cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	441a      	add	r2, r3
 80036dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80036de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003708:	86fb      	strh	r3, [r7, #54]	; 0x36
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	441a      	add	r2, r3
 8003714:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800371a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800371e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003726:	b29b      	uxth	r3, r3
 8003728:	8013      	strh	r3, [r2, #0]
 800372a:	e0bc      	b.n	80038a6 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800373c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01d      	beq.n	8003784 <USB_ActivateEndpoint+0x650>
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	b29b      	uxth	r3, r3
 8003756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	441a      	add	r2, r3
 800376c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800377c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003780:	b29b      	uxth	r3, r3
 8003782:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003794:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01d      	beq.n	80037dc <USB_ActivateEndpoint+0x6a8>
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	441a      	add	r2, r3
 80037c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80037c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037d8:	b29b      	uxth	r3, r3
 80037da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	78db      	ldrb	r3, [r3, #3]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d024      	beq.n	800382e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80037fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003802:	f083 0320 	eor.w	r3, r3, #32
 8003806:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	441a      	add	r2, r3
 8003814:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800381c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003828:	b29b      	uxth	r3, r3
 800382a:	8013      	strh	r3, [r2, #0]
 800382c:	e01d      	b.n	800386a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	b29b      	uxth	r3, r3
 800383c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003844:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	441a      	add	r2, r3
 8003852:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800385a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800385e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003866:	b29b      	uxth	r3, r3
 8003868:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	b29b      	uxth	r3, r3
 8003878:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800387c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003880:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	441a      	add	r2, r3
 800388e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800389a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800389e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80038a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3774      	adds	r7, #116	; 0x74
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b08d      	sub	sp, #52	; 0x34
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	7b1b      	ldrb	r3, [r3, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f040 808e 	bne.w	80039e4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	785b      	ldrb	r3, [r3, #1]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d044      	beq.n	800395a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	81bb      	strh	r3, [r7, #12]
 80038de:	89bb      	ldrh	r3, [r7, #12]
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01b      	beq.n	8003920 <USB_DeactivateEndpoint+0x6c>
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	817b      	strh	r3, [r7, #10]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	441a      	add	r2, r3
 800390a:	897b      	ldrh	r3, [r7, #10]
 800390c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003918:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800391c:	b29b      	uxth	r3, r3
 800391e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	b29b      	uxth	r3, r3
 800392e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003936:	813b      	strh	r3, [r7, #8]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	441a      	add	r2, r3
 8003942:	893b      	ldrh	r3, [r7, #8]
 8003944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800394c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003954:	b29b      	uxth	r3, r3
 8003956:	8013      	strh	r3, [r2, #0]
 8003958:	e192      	b.n	8003c80 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	827b      	strh	r3, [r7, #18]
 8003968:	8a7b      	ldrh	r3, [r7, #18]
 800396a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d01b      	beq.n	80039aa <USB_DeactivateEndpoint+0xf6>
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003988:	823b      	strh	r3, [r7, #16]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	441a      	add	r2, r3
 8003994:	8a3b      	ldrh	r3, [r7, #16]
 8003996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800399a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800399e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c0:	81fb      	strh	r3, [r7, #14]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	441a      	add	r2, r3
 80039cc:	89fb      	ldrh	r3, [r7, #14]
 80039ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039de:	b29b      	uxth	r3, r3
 80039e0:	8013      	strh	r3, [r2, #0]
 80039e2:	e14d      	b.n	8003c80 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	785b      	ldrb	r3, [r3, #1]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f040 80a5 	bne.w	8003b38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	843b      	strh	r3, [r7, #32]
 80039fc:	8c3b      	ldrh	r3, [r7, #32]
 80039fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d01b      	beq.n	8003a3e <USB_DeactivateEndpoint+0x18a>
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1c:	83fb      	strh	r3, [r7, #30]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	441a      	add	r2, r3
 8003a28:	8bfb      	ldrh	r3, [r7, #30]
 8003a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	83bb      	strh	r3, [r7, #28]
 8003a4c:	8bbb      	ldrh	r3, [r7, #28]
 8003a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d01b      	beq.n	8003a8e <USB_DeactivateEndpoint+0x1da>
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6c:	837b      	strh	r3, [r7, #26]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	441a      	add	r2, r3
 8003a78:	8b7b      	ldrh	r3, [r7, #26]
 8003a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa4:	833b      	strh	r3, [r7, #24]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	441a      	add	r2, r3
 8003ab0:	8b3b      	ldrh	r3, [r7, #24]
 8003ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003abe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003adc:	82fb      	strh	r3, [r7, #22]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	441a      	add	r2, r3
 8003ae8:	8afb      	ldrh	r3, [r7, #22]
 8003aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b14:	82bb      	strh	r3, [r7, #20]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	441a      	add	r2, r3
 8003b20:	8abb      	ldrh	r3, [r7, #20]
 8003b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	8013      	strh	r3, [r2, #0]
 8003b36:	e0a3      	b.n	8003c80 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003b46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01b      	beq.n	8003b88 <USB_DeactivateEndpoint+0x2d4>
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	441a      	add	r2, r3
 8003b72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003b96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01b      	beq.n	8003bd8 <USB_DeactivateEndpoint+0x324>
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb6:	853b      	strh	r3, [r7, #40]	; 0x28
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	441a      	add	r2, r3
 8003bc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	441a      	add	r2, r3
 8003bfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c26:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	441a      	add	r2, r3
 8003c32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	441a      	add	r2, r3
 8003c6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3734      	adds	r7, #52	; 0x34
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b0c2      	sub	sp, #264	; 0x108
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c9a:	6018      	str	r0, [r3, #0]
 8003c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ca4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	785b      	ldrb	r3, [r3, #1]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	f040 86b7 	bne.w	8004a26 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699a      	ldr	r2, [r3, #24]
 8003cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d908      	bls.n	8003ce6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ce4:	e007      	b.n	8003cf6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	7b1b      	ldrb	r3, [r3, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d13a      	bne.n	8003d7c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6959      	ldr	r1, [r3, #20]
 8003d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	88da      	ldrh	r2, [r3, #6]
 8003d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003d28:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003d2c:	6800      	ldr	r0, [r0, #0]
 8003d2e:	f001 fc87 	bl	8005640 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4413      	add	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	011a      	lsls	r2, r3, #4
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4413      	add	r3, r2
 8003d68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	801a      	strh	r2, [r3, #0]
 8003d78:	f000 be1f 	b.w	80049ba <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	78db      	ldrb	r3, [r3, #3]
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	f040 8462 	bne.w	8004652 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6a1a      	ldr	r2, [r3, #32]
 8003d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	f240 83df 	bls.w	800456a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003db0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	441a      	add	r2, r3
 8003df0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dfc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6a1a      	ldr	r2, [r3, #32]
 8003e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e18:	1ad2      	subs	r2, r2, r3
 8003e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 81c7 	beq.w	80041dc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	633b      	str	r3, [r7, #48]	; 0x30
 8003e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	785b      	ldrb	r3, [r3, #1]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d177      	bne.n	8003f5a <USB_EPStartXfer+0x2ce>
 8003e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	4413      	add	r3, r2
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	011a      	lsls	r2, r3, #4
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	801a      	strh	r2, [r3, #0]
 8003eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eba:	2b3e      	cmp	r3, #62	; 0x3e
 8003ebc:	d921      	bls.n	8003f02 <USB_EPStartXfer+0x276>
 8003ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d104      	bne.n	8003ede <USB_EPStartXfer+0x252>
 8003ed4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	029b      	lsls	r3, r3, #10
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	801a      	strh	r2, [r3, #0]
 8003f00:	e050      	b.n	8003fa4 <USB_EPStartXfer+0x318>
 8003f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <USB_EPStartXfer+0x294>
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	801a      	strh	r2, [r3, #0]
 8003f1e:	e041      	b.n	8003fa4 <USB_EPStartXfer+0x318>
 8003f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f24:	085b      	lsrs	r3, r3, #1
 8003f26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d004      	beq.n	8003f40 <USB_EPStartXfer+0x2b4>
 8003f36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	029b      	lsls	r3, r3, #10
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	4313      	orrs	r3, r2
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	801a      	strh	r2, [r3, #0]
 8003f58:	e024      	b.n	8003fa4 <USB_EPStartXfer+0x318>
 8003f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	785b      	ldrb	r3, [r3, #1]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d11c      	bne.n	8003fa4 <USB_EPStartXfer+0x318>
 8003f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	4413      	add	r3, r2
 8003f80:	633b      	str	r3, [r7, #48]	; 0x30
 8003f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	011a      	lsls	r2, r3, #4
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	4413      	add	r3, r2
 8003f94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	895b      	ldrh	r3, [r3, #10]
 8003fb0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6959      	ldr	r1, [r3, #20]
 8003fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003fca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003fce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003fd2:	6800      	ldr	r0, [r0, #0]
 8003fd4:	f001 fb34 	bl	8005640 <USB_WritePMA>
            ep->xfer_buff += len;
 8003fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fe8:	441a      	add	r2, r3
 8003fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6a1a      	ldr	r2, [r3, #32]
 8004002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	429a      	cmp	r2, r3
 8004010:	d90f      	bls.n	8004032 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6a1a      	ldr	r2, [r3, #32]
 800401e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004022:	1ad2      	subs	r2, r2, r3
 8004024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	621a      	str	r2, [r3, #32]
 8004030:	e00e      	b.n	8004050 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2200      	movs	r2, #0
 800404e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	785b      	ldrb	r3, [r3, #1]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d177      	bne.n	8004150 <USB_EPStartXfer+0x4c4>
 8004060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004064:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004070:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800407a:	b29b      	uxth	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	4413      	add	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	011a      	lsls	r2, r3, #4
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	4413      	add	r3, r2
 8004096:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	801a      	strh	r2, [r3, #0]
 80040ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040b0:	2b3e      	cmp	r3, #62	; 0x3e
 80040b2:	d921      	bls.n	80040f8 <USB_EPStartXfer+0x46c>
 80040b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80040be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040c2:	f003 031f 	and.w	r3, r3, #31
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d104      	bne.n	80040d4 <USB_EPStartXfer+0x448>
 80040ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ce:	3b01      	subs	r3, #1
 80040d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b29a      	uxth	r2, r3
 80040da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040de:	b29b      	uxth	r3, r3
 80040e0:	029b      	lsls	r3, r3, #10
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	4313      	orrs	r3, r2
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	801a      	strh	r2, [r3, #0]
 80040f6:	e056      	b.n	80041a6 <USB_EPStartXfer+0x51a>
 80040f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10a      	bne.n	8004116 <USB_EPStartXfer+0x48a>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800410a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800410e:	b29a      	uxth	r2, r3
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	801a      	strh	r2, [r3, #0]
 8004114:	e047      	b.n	80041a6 <USB_EPStartXfer+0x51a>
 8004116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800411a:	085b      	lsrs	r3, r3, #1
 800411c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d004      	beq.n	8004136 <USB_EPStartXfer+0x4aa>
 800412c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004130:	3301      	adds	r3, #1
 8004132:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b29a      	uxth	r2, r3
 800413c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004140:	b29b      	uxth	r3, r3
 8004142:	029b      	lsls	r3, r3, #10
 8004144:	b29b      	uxth	r3, r3
 8004146:	4313      	orrs	r3, r2
 8004148:	b29a      	uxth	r2, r3
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	801a      	strh	r2, [r3, #0]
 800414e:	e02a      	b.n	80041a6 <USB_EPStartXfer+0x51a>
 8004150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d122      	bne.n	80041a6 <USB_EPStartXfer+0x51a>
 8004160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	623b      	str	r3, [r7, #32]
 800416c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800417a:	b29b      	uxth	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	4413      	add	r3, r2
 8004182:	623b      	str	r3, [r7, #32]
 8004184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	011a      	lsls	r2, r3, #4
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	4413      	add	r3, r2
 8004196:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80041a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	891b      	ldrh	r3, [r3, #8]
 80041b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6959      	ldr	r1, [r3, #20]
 80041c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80041cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80041d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80041d4:	6800      	ldr	r0, [r0, #0]
 80041d6:	f001 fa33 	bl	8005640 <USB_WritePMA>
 80041da:	e3ee      	b.n	80049ba <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80041dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	785b      	ldrb	r3, [r3, #1]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d177      	bne.n	80042dc <USB_EPStartXfer+0x650>
 80041ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80041f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004206:	b29b      	uxth	r3, r3
 8004208:	461a      	mov	r2, r3
 800420a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800420c:	4413      	add	r3, r2
 800420e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	011a      	lsls	r2, r3, #4
 800421e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004220:	4413      	add	r3, r2
 8004222:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004226:	647b      	str	r3, [r7, #68]	; 0x44
 8004228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b29b      	uxth	r3, r3
 800422e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004232:	b29a      	uxth	r2, r3
 8004234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004236:	801a      	strh	r2, [r3, #0]
 8004238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800423c:	2b3e      	cmp	r3, #62	; 0x3e
 800423e:	d921      	bls.n	8004284 <USB_EPStartXfer+0x5f8>
 8004240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800424a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	2b00      	cmp	r3, #0
 8004254:	d104      	bne.n	8004260 <USB_EPStartXfer+0x5d4>
 8004256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800425a:	3b01      	subs	r3, #1
 800425c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29a      	uxth	r2, r3
 8004266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800426a:	b29b      	uxth	r3, r3
 800426c:	029b      	lsls	r3, r3, #10
 800426e:	b29b      	uxth	r3, r3
 8004270:	4313      	orrs	r3, r2
 8004272:	b29b      	uxth	r3, r3
 8004274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800427c:	b29a      	uxth	r2, r3
 800427e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004280:	801a      	strh	r2, [r3, #0]
 8004282:	e056      	b.n	8004332 <USB_EPStartXfer+0x6a6>
 8004284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <USB_EPStartXfer+0x616>
 800428c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b29b      	uxth	r3, r3
 8004292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800429a:	b29a      	uxth	r2, r3
 800429c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429e:	801a      	strh	r2, [r3, #0]
 80042a0:	e047      	b.n	8004332 <USB_EPStartXfer+0x6a6>
 80042a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80042ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d004      	beq.n	80042c2 <USB_EPStartXfer+0x636>
 80042b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042bc:	3301      	adds	r3, #1
 80042be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80042c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	029b      	lsls	r3, r3, #10
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	4313      	orrs	r3, r2
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d8:	801a      	strh	r2, [r3, #0]
 80042da:	e02a      	b.n	8004332 <USB_EPStartXfer+0x6a6>
 80042dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	785b      	ldrb	r3, [r3, #1]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d122      	bne.n	8004332 <USB_EPStartXfer+0x6a6>
 80042ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	653b      	str	r3, [r7, #80]	; 0x50
 80042f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004306:	b29b      	uxth	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800430c:	4413      	add	r3, r2
 800430e:	653b      	str	r3, [r7, #80]	; 0x50
 8004310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	011a      	lsls	r2, r3, #4
 800431e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004320:	4413      	add	r3, r2
 8004322:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800432c:	b29a      	uxth	r2, r3
 800432e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004330:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	891b      	ldrh	r3, [r3, #8]
 800433e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6959      	ldr	r1, [r3, #20]
 800434e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004352:	b29b      	uxth	r3, r3
 8004354:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004358:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800435c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004360:	6800      	ldr	r0, [r0, #0]
 8004362:	f001 f96d 	bl	8005640 <USB_WritePMA>
            ep->xfer_buff += len;
 8004366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800436a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004376:	441a      	add	r2, r3
 8004378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800437c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6a1a      	ldr	r2, [r3, #32]
 8004390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	429a      	cmp	r2, r3
 800439e:	d90f      	bls.n	80043c0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80043a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6a1a      	ldr	r2, [r3, #32]
 80043ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043b0:	1ad2      	subs	r2, r2, r3
 80043b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	621a      	str	r2, [r3, #32]
 80043be:	e00e      	b.n	80043de <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80043c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80043d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2200      	movs	r2, #0
 80043dc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80043de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	643b      	str	r3, [r7, #64]	; 0x40
 80043ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d177      	bne.n	80044ea <USB_EPStartXfer+0x85e>
 80043fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	63bb      	str	r3, [r7, #56]	; 0x38
 8004406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800440a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004414:	b29b      	uxth	r3, r3
 8004416:	461a      	mov	r2, r3
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	4413      	add	r3, r2
 800441c:	63bb      	str	r3, [r7, #56]	; 0x38
 800441e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	011a      	lsls	r2, r3, #4
 800442c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442e:	4413      	add	r3, r2
 8004430:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004434:	637b      	str	r3, [r7, #52]	; 0x34
 8004436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	b29b      	uxth	r3, r3
 800443c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004440:	b29a      	uxth	r2, r3
 8004442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004444:	801a      	strh	r2, [r3, #0]
 8004446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800444a:	2b3e      	cmp	r3, #62	; 0x3e
 800444c:	d921      	bls.n	8004492 <USB_EPStartXfer+0x806>
 800444e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	2b00      	cmp	r3, #0
 8004462:	d104      	bne.n	800446e <USB_EPStartXfer+0x7e2>
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	3b01      	subs	r3, #1
 800446a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29a      	uxth	r2, r3
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004478:	b29b      	uxth	r3, r3
 800447a:	029b      	lsls	r3, r3, #10
 800447c:	b29b      	uxth	r3, r3
 800447e:	4313      	orrs	r3, r2
 8004480:	b29b      	uxth	r3, r3
 8004482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800448a:	b29a      	uxth	r2, r3
 800448c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	e050      	b.n	8004534 <USB_EPStartXfer+0x8a8>
 8004492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <USB_EPStartXfer+0x824>
 800449a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ac:	801a      	strh	r2, [r3, #0]
 80044ae:	e041      	b.n	8004534 <USB_EPStartXfer+0x8a8>
 80044b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80044ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d004      	beq.n	80044d0 <USB_EPStartXfer+0x844>
 80044c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ca:	3301      	adds	r3, #1
 80044cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80044d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044da:	b29b      	uxth	r3, r3
 80044dc:	029b      	lsls	r3, r3, #10
 80044de:	b29b      	uxth	r3, r3
 80044e0:	4313      	orrs	r3, r2
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e6:	801a      	strh	r2, [r3, #0]
 80044e8:	e024      	b.n	8004534 <USB_EPStartXfer+0x8a8>
 80044ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	785b      	ldrb	r3, [r3, #1]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d11c      	bne.n	8004534 <USB_EPStartXfer+0x8a8>
 80044fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004508:	b29b      	uxth	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800450e:	4413      	add	r3, r2
 8004510:	643b      	str	r3, [r7, #64]	; 0x40
 8004512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	011a      	lsls	r2, r3, #4
 8004520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004522:	4413      	add	r3, r2
 8004524:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800452a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800452e:	b29a      	uxth	r2, r3
 8004530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004532:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	895b      	ldrh	r3, [r3, #10]
 8004540:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6959      	ldr	r1, [r3, #20]
 8004550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004554:	b29b      	uxth	r3, r3
 8004556:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800455a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800455e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004562:	6800      	ldr	r0, [r0, #0]
 8004564:	f001 f86c 	bl	8005640 <USB_WritePMA>
 8004568:	e227      	b.n	80049ba <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800456a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800456e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800457a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800457e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800459c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80045a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	441a      	add	r2, r3
 80045be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80045c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80045d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	461a      	mov	r2, r3
 80045f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045f6:	4413      	add	r3, r2
 80045f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	011a      	lsls	r2, r3, #4
 8004608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800460a:	4413      	add	r3, r2
 800460c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004610:	65bb      	str	r3, [r7, #88]	; 0x58
 8004612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004616:	b29a      	uxth	r2, r3
 8004618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800461a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800461c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	891b      	ldrh	r3, [r3, #8]
 8004628:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800462c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6959      	ldr	r1, [r3, #20]
 8004638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800463c:	b29b      	uxth	r3, r3
 800463e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004642:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004646:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800464a:	6800      	ldr	r0, [r0, #0]
 800464c:	f000 fff8 	bl	8005640 <USB_WritePMA>
 8004650:	e1b3      	b.n	80049ba <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6a1a      	ldr	r2, [r3, #32]
 800465e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004662:	1ad2      	subs	r2, r2, r3
 8004664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004674:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800467e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80c6 	beq.w	8004824 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800469c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	673b      	str	r3, [r7, #112]	; 0x70
 80046a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	785b      	ldrb	r3, [r3, #1]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d177      	bne.n	80047a4 <USB_EPStartXfer+0xb18>
 80046b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	66bb      	str	r3, [r7, #104]	; 0x68
 80046c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046d4:	4413      	add	r3, r2
 80046d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80046d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	011a      	lsls	r2, r3, #4
 80046e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046e8:	4413      	add	r3, r2
 80046ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046ee:	667b      	str	r3, [r7, #100]	; 0x64
 80046f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046fe:	801a      	strh	r2, [r3, #0]
 8004700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004704:	2b3e      	cmp	r3, #62	; 0x3e
 8004706:	d921      	bls.n	800474c <USB_EPStartXfer+0xac0>
 8004708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	2b00      	cmp	r3, #0
 800471c:	d104      	bne.n	8004728 <USB_EPStartXfer+0xa9c>
 800471e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004722:	3b01      	subs	r3, #1
 8004724:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29a      	uxth	r2, r3
 800472e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004732:	b29b      	uxth	r3, r3
 8004734:	029b      	lsls	r3, r3, #10
 8004736:	b29b      	uxth	r3, r3
 8004738:	4313      	orrs	r3, r2
 800473a:	b29b      	uxth	r3, r3
 800473c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004744:	b29a      	uxth	r2, r3
 8004746:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004748:	801a      	strh	r2, [r3, #0]
 800474a:	e050      	b.n	80047ee <USB_EPStartXfer+0xb62>
 800474c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <USB_EPStartXfer+0xade>
 8004754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800475e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004762:	b29a      	uxth	r2, r3
 8004764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004766:	801a      	strh	r2, [r3, #0]
 8004768:	e041      	b.n	80047ee <USB_EPStartXfer+0xb62>
 800476a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <USB_EPStartXfer+0xafe>
 8004780:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004784:	3301      	adds	r3, #1
 8004786:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800478a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29a      	uxth	r2, r3
 8004790:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004794:	b29b      	uxth	r3, r3
 8004796:	029b      	lsls	r3, r3, #10
 8004798:	b29b      	uxth	r3, r3
 800479a:	4313      	orrs	r3, r2
 800479c:	b29a      	uxth	r2, r3
 800479e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047a0:	801a      	strh	r2, [r3, #0]
 80047a2:	e024      	b.n	80047ee <USB_EPStartXfer+0xb62>
 80047a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	785b      	ldrb	r3, [r3, #1]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d11c      	bne.n	80047ee <USB_EPStartXfer+0xb62>
 80047b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047c8:	4413      	add	r3, r2
 80047ca:	673b      	str	r3, [r7, #112]	; 0x70
 80047cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	011a      	lsls	r2, r3, #4
 80047da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047dc:	4413      	add	r3, r2
 80047de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80047ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	895b      	ldrh	r3, [r3, #10]
 80047fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6959      	ldr	r1, [r3, #20]
 800480a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800480e:	b29b      	uxth	r3, r3
 8004810:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004814:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004818:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800481c:	6800      	ldr	r0, [r0, #0]
 800481e:	f000 ff0f 	bl	8005640 <USB_WritePMA>
 8004822:	e0ca      	b.n	80049ba <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	785b      	ldrb	r3, [r3, #1]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d177      	bne.n	8004924 <USB_EPStartXfer+0xc98>
 8004834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004838:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484e:	b29b      	uxth	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004854:	4413      	add	r3, r2
 8004856:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800485c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	011a      	lsls	r2, r3, #4
 8004866:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004868:	4413      	add	r3, r2
 800486a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800486e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	b29b      	uxth	r3, r3
 8004876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800487a:	b29a      	uxth	r2, r3
 800487c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800487e:	801a      	strh	r2, [r3, #0]
 8004880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004884:	2b3e      	cmp	r3, #62	; 0x3e
 8004886:	d921      	bls.n	80048cc <USB_EPStartXfer+0xc40>
 8004888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	2b00      	cmp	r3, #0
 800489c:	d104      	bne.n	80048a8 <USB_EPStartXfer+0xc1c>
 800489e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048a2:	3b01      	subs	r3, #1
 80048a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80048a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	029b      	lsls	r3, r3, #10
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	4313      	orrs	r3, r2
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048c8:	801a      	strh	r2, [r3, #0]
 80048ca:	e05c      	b.n	8004986 <USB_EPStartXfer+0xcfa>
 80048cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <USB_EPStartXfer+0xc5e>
 80048d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	e04d      	b.n	8004986 <USB_EPStartXfer+0xcfa>
 80048ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048ee:	085b      	lsrs	r3, r3, #1
 80048f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80048f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d004      	beq.n	800490a <USB_EPStartXfer+0xc7e>
 8004900:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004904:	3301      	adds	r3, #1
 8004906:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800490a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	b29a      	uxth	r2, r3
 8004910:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004914:	b29b      	uxth	r3, r3
 8004916:	029b      	lsls	r3, r3, #10
 8004918:	b29b      	uxth	r3, r3
 800491a:	4313      	orrs	r3, r2
 800491c:	b29a      	uxth	r2, r3
 800491e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004920:	801a      	strh	r2, [r3, #0]
 8004922:	e030      	b.n	8004986 <USB_EPStartXfer+0xcfa>
 8004924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d128      	bne.n	8004986 <USB_EPStartXfer+0xcfa>
 8004934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004950:	b29b      	uxth	r3, r3
 8004952:	461a      	mov	r2, r3
 8004954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004958:	4413      	add	r3, r2
 800495a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800495e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	011a      	lsls	r2, r3, #4
 800496c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004970:	4413      	add	r3, r2
 8004972:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004976:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800497a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800497e:	b29a      	uxth	r2, r3
 8004980:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004984:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800498a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	891b      	ldrh	r3, [r3, #8]
 8004992:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800499a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6959      	ldr	r1, [r3, #20]
 80049a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80049ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80049b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80049b4:	6800      	ldr	r0, [r0, #0]
 80049b6:	f000 fe43 	bl	8005640 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80049ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e0:	817b      	strh	r3, [r7, #10]
 80049e2:	897b      	ldrh	r3, [r7, #10]
 80049e4:	f083 0310 	eor.w	r3, r3, #16
 80049e8:	817b      	strh	r3, [r7, #10]
 80049ea:	897b      	ldrh	r3, [r7, #10]
 80049ec:	f083 0320 	eor.w	r3, r3, #32
 80049f0:	817b      	strh	r3, [r7, #10]
 80049f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	441a      	add	r2, r3
 8004a0c:	897b      	ldrh	r3, [r7, #10]
 8004a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	8013      	strh	r3, [r2, #0]
 8004a22:	f000 bcde 	b.w	80053e2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	7b1b      	ldrb	r3, [r3, #12]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f040 80bb 	bne.w	8004bae <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699a      	ldr	r2, [r3, #24]
 8004a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d917      	bls.n	8004a84 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8004a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699a      	ldr	r2, [r3, #24]
 8004a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a74:	1ad2      	subs	r2, r2, r3
 8004a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	619a      	str	r2, [r3, #24]
 8004a82:	e00e      	b.n	8004aa2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8004a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	011a      	lsls	r2, r3, #4
 8004ada:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ade:	4413      	add	r3, r2
 8004ae0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ae4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004afa:	801a      	strh	r2, [r3, #0]
 8004afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b00:	2b3e      	cmp	r3, #62	; 0x3e
 8004b02:	d924      	bls.n	8004b4e <USB_EPStartXfer+0xec2>
 8004b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d104      	bne.n	8004b24 <USB_EPStartXfer+0xe98>
 8004b1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	029b      	lsls	r3, r3, #10
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	4313      	orrs	r3, r2
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b48:	801a      	strh	r2, [r3, #0]
 8004b4a:	f000 bc10 	b.w	800536e <USB_EPStartXfer+0x16e2>
 8004b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10c      	bne.n	8004b70 <USB_EPStartXfer+0xee4>
 8004b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b6c:	801a      	strh	r2, [r3, #0]
 8004b6e:	e3fe      	b.n	800536e <USB_EPStartXfer+0x16e2>
 8004b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b74:	085b      	lsrs	r3, r3, #1
 8004b76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d004      	beq.n	8004b90 <USB_EPStartXfer+0xf04>
 8004b86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	029b      	lsls	r3, r3, #10
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004baa:	801a      	strh	r2, [r3, #0]
 8004bac:	e3df      	b.n	800536e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	78db      	ldrb	r3, [r3, #3]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	f040 8218 	bne.w	8004ff0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	785b      	ldrb	r3, [r3, #1]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f040 809d 	bne.w	8004d0c <USB_EPStartXfer+0x1080>
 8004bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004be4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	011a      	lsls	r2, r3, #4
 8004c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c0e:	4413      	add	r3, r2
 8004c10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c2a:	801a      	strh	r2, [r3, #0]
 8004c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	2b3e      	cmp	r3, #62	; 0x3e
 8004c3a:	d92b      	bls.n	8004c94 <USB_EPStartXfer+0x1008>
 8004c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	095b      	lsrs	r3, r3, #5
 8004c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d104      	bne.n	8004c6c <USB_EPStartXfer+0xfe0>
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c66:	3b01      	subs	r3, #1
 8004c68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	029b      	lsls	r3, r3, #10
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c90:	801a      	strh	r2, [r3, #0]
 8004c92:	e070      	b.n	8004d76 <USB_EPStartXfer+0x10ea>
 8004c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10c      	bne.n	8004cbe <USB_EPStartXfer+0x1032>
 8004ca4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cba:	801a      	strh	r2, [r3, #0]
 8004cbc:	e05b      	b.n	8004d76 <USB_EPStartXfer+0x10ea>
 8004cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d004      	beq.n	8004cee <USB_EPStartXfer+0x1062>
 8004ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce8:	3301      	adds	r3, #1
 8004cea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	029b      	lsls	r3, r3, #10
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	4313      	orrs	r3, r2
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d08:	801a      	strh	r2, [r3, #0]
 8004d0a:	e034      	b.n	8004d76 <USB_EPStartXfer+0x10ea>
 8004d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d12c      	bne.n	8004d76 <USB_EPStartXfer+0x10ea>
 8004d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d40:	4413      	add	r3, r2
 8004d42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	011a      	lsls	r2, r3, #4
 8004d54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d58:	4413      	add	r3, r2
 8004d5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f040 809d 	bne.w	8004ed0 <USB_EPStartXfer+0x1244>
 8004d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004da8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dba:	4413      	add	r3, r2
 8004dbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	011a      	lsls	r2, r3, #4
 8004dce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b3e      	cmp	r3, #62	; 0x3e
 8004dfe:	d92b      	bls.n	8004e58 <USB_EPStartXfer+0x11cc>
 8004e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d104      	bne.n	8004e30 <USB_EPStartXfer+0x11a4>
 8004e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	029b      	lsls	r3, r3, #10
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	4313      	orrs	r3, r2
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	e069      	b.n	8004f2c <USB_EPStartXfer+0x12a0>
 8004e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10c      	bne.n	8004e82 <USB_EPStartXfer+0x11f6>
 8004e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e7e:	801a      	strh	r2, [r3, #0]
 8004e80:	e054      	b.n	8004f2c <USB_EPStartXfer+0x12a0>
 8004e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	085b      	lsrs	r3, r3, #1
 8004e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d004      	beq.n	8004eb2 <USB_EPStartXfer+0x1226>
 8004ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eac:	3301      	adds	r3, #1
 8004eae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004eb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	029b      	lsls	r3, r3, #10
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ecc:	801a      	strh	r2, [r3, #0]
 8004ece:	e02d      	b.n	8004f2c <USB_EPStartXfer+0x12a0>
 8004ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d125      	bne.n	8004f2c <USB_EPStartXfer+0x12a0>
 8004ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	011a      	lsls	r2, r3, #4
 8004f0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f0e:	4413      	add	r3, r2
 8004f10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f2a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8218 	beq.w	800536e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f5e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d005      	beq.n	8004f76 <USB_EPStartXfer+0x12ea>
 8004f6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10d      	bne.n	8004f92 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f040 81f5 	bne.w	800536e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f040 81ee 	bne.w	800536e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	441a      	add	r2, r3
 8004fd6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	8013      	strh	r3, [r2, #0]
 8004fee:	e1be      	b.n	800536e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	78db      	ldrb	r3, [r3, #3]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	f040 81b4 	bne.w	800536a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	429a      	cmp	r2, r3
 800501c:	d917      	bls.n	800504e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800501e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800502e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699a      	ldr	r2, [r3, #24]
 800503a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800503e:	1ad2      	subs	r2, r2, r3
 8005040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	619a      	str	r2, [r3, #24]
 800504c:	e00e      	b.n	800506c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800504e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800505e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2200      	movs	r2, #0
 800506a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800506c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	2b00      	cmp	r3, #0
 800507a:	f040 8085 	bne.w	8005188 <USB_EPStartXfer+0x14fc>
 800507e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800508c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005090:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800509a:	b29b      	uxth	r3, r3
 800509c:	461a      	mov	r2, r3
 800509e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050a2:	4413      	add	r3, r2
 80050a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	011a      	lsls	r2, r3, #4
 80050b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050ba:	4413      	add	r3, r2
 80050bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050d6:	801a      	strh	r2, [r3, #0]
 80050d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050dc:	2b3e      	cmp	r3, #62	; 0x3e
 80050de:	d923      	bls.n	8005128 <USB_EPStartXfer+0x149c>
 80050e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80050ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d104      	bne.n	8005100 <USB_EPStartXfer+0x1474>
 80050f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050fa:	3b01      	subs	r3, #1
 80050fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005100:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	b29a      	uxth	r2, r3
 8005108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800510c:	b29b      	uxth	r3, r3
 800510e:	029b      	lsls	r3, r3, #10
 8005110:	b29b      	uxth	r3, r3
 8005112:	4313      	orrs	r3, r2
 8005114:	b29b      	uxth	r3, r3
 8005116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800511a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800511e:	b29a      	uxth	r2, r3
 8005120:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005124:	801a      	strh	r2, [r3, #0]
 8005126:	e060      	b.n	80051ea <USB_EPStartXfer+0x155e>
 8005128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10c      	bne.n	800514a <USB_EPStartXfer+0x14be>
 8005130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800513c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005140:	b29a      	uxth	r2, r3
 8005142:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005146:	801a      	strh	r2, [r3, #0]
 8005148:	e04f      	b.n	80051ea <USB_EPStartXfer+0x155e>
 800514a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <USB_EPStartXfer+0x14de>
 8005160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005164:	3301      	adds	r3, #1
 8005166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800516a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	b29a      	uxth	r2, r3
 8005172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005176:	b29b      	uxth	r3, r3
 8005178:	029b      	lsls	r3, r3, #10
 800517a:	b29b      	uxth	r3, r3
 800517c:	4313      	orrs	r3, r2
 800517e:	b29a      	uxth	r2, r3
 8005180:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005184:	801a      	strh	r2, [r3, #0]
 8005186:	e030      	b.n	80051ea <USB_EPStartXfer+0x155e>
 8005188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800518c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	785b      	ldrb	r3, [r3, #1]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d128      	bne.n	80051ea <USB_EPStartXfer+0x155e>
 8005198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80051a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051bc:	4413      	add	r3, r2
 80051be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80051c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	011a      	lsls	r2, r3, #4
 80051d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051d4:	4413      	add	r3, r2
 80051d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80051e8:	801a      	strh	r2, [r3, #0]
 80051ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f040 8085 	bne.w	8005314 <USB_EPStartXfer+0x1688>
 800520a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005226:	b29b      	uxth	r3, r3
 8005228:	461a      	mov	r2, r3
 800522a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800522e:	4413      	add	r3, r2
 8005230:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	011a      	lsls	r2, r3, #4
 8005242:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005246:	4413      	add	r3, r2
 8005248:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800524c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005250:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	b29b      	uxth	r3, r3
 8005258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800525c:	b29a      	uxth	r2, r3
 800525e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005262:	801a      	strh	r2, [r3, #0]
 8005264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005268:	2b3e      	cmp	r3, #62	; 0x3e
 800526a:	d923      	bls.n	80052b4 <USB_EPStartXfer+0x1628>
 800526c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005270:	095b      	lsrs	r3, r3, #5
 8005272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800527a:	f003 031f 	and.w	r3, r3, #31
 800527e:	2b00      	cmp	r3, #0
 8005280:	d104      	bne.n	800528c <USB_EPStartXfer+0x1600>
 8005282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005286:	3b01      	subs	r3, #1
 8005288:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800528c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29a      	uxth	r2, r3
 8005294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005298:	b29b      	uxth	r3, r3
 800529a:	029b      	lsls	r3, r3, #10
 800529c:	b29b      	uxth	r3, r3
 800529e:	4313      	orrs	r3, r2
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052b0:	801a      	strh	r2, [r3, #0]
 80052b2:	e05c      	b.n	800536e <USB_EPStartXfer+0x16e2>
 80052b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10c      	bne.n	80052d6 <USB_EPStartXfer+0x164a>
 80052bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052d2:	801a      	strh	r2, [r3, #0]
 80052d4:	e04b      	b.n	800536e <USB_EPStartXfer+0x16e2>
 80052d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052da:	085b      	lsrs	r3, r3, #1
 80052dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d004      	beq.n	80052f6 <USB_EPStartXfer+0x166a>
 80052ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052f0:	3301      	adds	r3, #1
 80052f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005302:	b29b      	uxth	r3, r3
 8005304:	029b      	lsls	r3, r3, #10
 8005306:	b29b      	uxth	r3, r3
 8005308:	4313      	orrs	r3, r2
 800530a:	b29a      	uxth	r2, r3
 800530c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	e02c      	b.n	800536e <USB_EPStartXfer+0x16e2>
 8005314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	785b      	ldrb	r3, [r3, #1]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d124      	bne.n	800536e <USB_EPStartXfer+0x16e2>
 8005324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005328:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005332:	b29b      	uxth	r3, r3
 8005334:	461a      	mov	r2, r3
 8005336:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800533a:	4413      	add	r3, r2
 800533c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	011a      	lsls	r2, r3, #4
 800534e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005352:	4413      	add	r3, r2
 8005354:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800535c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005360:	b29a      	uxth	r2, r3
 8005362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005366:	801a      	strh	r2, [r3, #0]
 8005368:	e001      	b.n	800536e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e03a      	b.n	80053e4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800536e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800537c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	b29b      	uxth	r3, r3
 800538c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005394:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005398:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800539c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80053a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80053a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80053b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	441a      	add	r2, r3
 80053ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80053ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053de:	b29b      	uxth	r3, r3
 80053e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b085      	sub	sp, #20
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d020      	beq.n	8005442 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	b29b      	uxth	r3, r3
 800540e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005416:	81bb      	strh	r3, [r7, #12]
 8005418:	89bb      	ldrh	r3, [r7, #12]
 800541a:	f083 0310 	eor.w	r3, r3, #16
 800541e:	81bb      	strh	r3, [r7, #12]
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	441a      	add	r2, r3
 800542a:	89bb      	ldrh	r3, [r7, #12]
 800542c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543c:	b29b      	uxth	r3, r3
 800543e:	8013      	strh	r3, [r2, #0]
 8005440:	e01f      	b.n	8005482 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005458:	81fb      	strh	r3, [r7, #14]
 800545a:	89fb      	ldrh	r3, [r7, #14]
 800545c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005460:	81fb      	strh	r3, [r7, #14]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	441a      	add	r2, r3
 800546c:	89fb      	ldrh	r3, [r7, #14]
 800546e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800547a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547e:	b29b      	uxth	r3, r3
 8005480:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr

0800548e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800548e:	b480      	push	{r7}
 8005490:	b087      	sub	sp, #28
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	7b1b      	ldrb	r3, [r3, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	f040 809d 	bne.w	80055dc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	785b      	ldrb	r3, [r3, #1]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d04c      	beq.n	8005544 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	823b      	strh	r3, [r7, #16]
 80054b8:	8a3b      	ldrh	r3, [r7, #16]
 80054ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d01b      	beq.n	80054fa <USB_EPClearStall+0x6c>
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d8:	81fb      	strh	r3, [r7, #14]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	441a      	add	r2, r3
 80054e4:	89fb      	ldrh	r3, [r7, #14]
 80054e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	78db      	ldrb	r3, [r3, #3]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d06c      	beq.n	80055dc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005518:	81bb      	strh	r3, [r7, #12]
 800551a:	89bb      	ldrh	r3, [r7, #12]
 800551c:	f083 0320 	eor.w	r3, r3, #32
 8005520:	81bb      	strh	r3, [r7, #12]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	441a      	add	r2, r3
 800552c:	89bb      	ldrh	r3, [r7, #12]
 800552e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553e:	b29b      	uxth	r3, r3
 8005540:	8013      	strh	r3, [r2, #0]
 8005542:	e04b      	b.n	80055dc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	82fb      	strh	r3, [r7, #22]
 8005552:	8afb      	ldrh	r3, [r7, #22]
 8005554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01b      	beq.n	8005594 <USB_EPClearStall+0x106>
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	82bb      	strh	r3, [r7, #20]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	441a      	add	r2, r3
 800557e:	8abb      	ldrh	r3, [r7, #20]
 8005580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800558c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005590:	b29b      	uxth	r3, r3
 8005592:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	827b      	strh	r3, [r7, #18]
 80055ac:	8a7b      	ldrh	r3, [r7, #18]
 80055ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055b2:	827b      	strh	r3, [r7, #18]
 80055b4:	8a7b      	ldrh	r3, [r7, #18]
 80055b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055ba:	827b      	strh	r3, [r7, #18]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	441a      	add	r2, r3
 80055c6:	8a7b      	ldrh	r3, [r7, #18]
 80055c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d8:	b29b      	uxth	r3, r3
 80055da:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bc80      	pop	{r7}
 80055e6:	4770      	bx	lr

080055e8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80055f4:	78fb      	ldrb	r3, [r7, #3]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d103      	bne.n	8005602 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2280      	movs	r2, #128	; 0x80
 80055fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	bc80      	pop	{r7}
 800560c:	4770      	bx	lr

0800560e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr

08005622 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005622:	b480      	push	{r7}
 8005624:	b085      	sub	sp, #20
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005630:	b29b      	uxth	r3, r3
 8005632:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005634:	68fb      	ldr	r3, [r7, #12]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr

08005640 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005640:	b480      	push	{r7}
 8005642:	b08b      	sub	sp, #44	; 0x2c
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	4611      	mov	r1, r2
 800564c:	461a      	mov	r2, r3
 800564e:	460b      	mov	r3, r1
 8005650:	80fb      	strh	r3, [r7, #6]
 8005652:	4613      	mov	r3, r2
 8005654:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005656:	88bb      	ldrh	r3, [r7, #4]
 8005658:	3301      	adds	r3, #1
 800565a:	085b      	lsrs	r3, r3, #1
 800565c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005666:	88fb      	ldrh	r3, [r7, #6]
 8005668:	005a      	lsls	r2, r3, #1
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005672:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
 8005678:	e01e      	b.n	80056b8 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	3301      	adds	r3, #1
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	b21a      	sxth	r2, r3
 800568a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800568e:	4313      	orrs	r3, r2
 8005690:	b21b      	sxth	r3, r3
 8005692:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	8a7a      	ldrh	r2, [r7, #18]
 8005698:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	3302      	adds	r3, #2
 800569e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	3302      	adds	r3, #2
 80056a4:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	3301      	adds	r3, #1
 80056aa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	3301      	adds	r3, #1
 80056b0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	3b01      	subs	r3, #1
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1dd      	bne.n	800567a <USB_WritePMA+0x3a>
  }
}
 80056be:	bf00      	nop
 80056c0:	bf00      	nop
 80056c2:	372c      	adds	r7, #44	; 0x2c
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr

080056ca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b08b      	sub	sp, #44	; 0x2c
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	4611      	mov	r1, r2
 80056d6:	461a      	mov	r2, r3
 80056d8:	460b      	mov	r3, r1
 80056da:	80fb      	strh	r3, [r7, #6]
 80056dc:	4613      	mov	r3, r2
 80056de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80056e0:	88bb      	ldrh	r3, [r7, #4]
 80056e2:	085b      	lsrs	r3, r3, #1
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056f0:	88fb      	ldrh	r3, [r7, #6]
 80056f2:	005a      	lsls	r2, r3, #1
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056fc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
 8005702:	e01b      	b.n	800573c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	3302      	adds	r3, #2
 8005710:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	b2da      	uxtb	r2, r3
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	3301      	adds	r3, #1
 800571e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	0a1b      	lsrs	r3, r3, #8
 8005724:	b2da      	uxtb	r2, r3
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	3301      	adds	r3, #1
 800572e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	3302      	adds	r3, #2
 8005734:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	3b01      	subs	r3, #1
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e0      	bne.n	8005704 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005742:	88bb      	ldrh	r3, [r7, #4]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d007      	beq.n	800575e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b29b      	uxth	r3, r3
 8005754:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	b2da      	uxtb	r2, r3
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	701a      	strb	r2, [r3, #0]
  }
}
 800575e:	bf00      	nop
 8005760:	372c      	adds	r7, #44	; 0x2c
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr

08005768 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	7c1b      	ldrb	r3, [r3, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d115      	bne.n	80057ac <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005784:	2202      	movs	r2, #2
 8005786:	2181      	movs	r1, #129	; 0x81
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f001 fe2e 	bl	80073ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005798:	2202      	movs	r2, #2
 800579a:	2101      	movs	r1, #1
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f001 fe24 	bl	80073ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80057aa:	e012      	b.n	80057d2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057ac:	2340      	movs	r3, #64	; 0x40
 80057ae:	2202      	movs	r2, #2
 80057b0:	2181      	movs	r1, #129	; 0x81
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f001 fe19 	bl	80073ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057be:	2340      	movs	r3, #64	; 0x40
 80057c0:	2202      	movs	r2, #2
 80057c2:	2101      	movs	r1, #1
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f001 fe10 	bl	80073ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057d2:	2308      	movs	r3, #8
 80057d4:	2203      	movs	r2, #3
 80057d6:	2182      	movs	r1, #130	; 0x82
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 fe06 	bl	80073ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80057e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80057e8:	f001 ff26 	bl	8007638 <USBD_static_malloc>
 80057ec:	4602      	mov	r2, r0
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80057fe:	2301      	movs	r3, #1
 8005800:	73fb      	strb	r3, [r7, #15]
 8005802:	e026      	b.n	8005852 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800580a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2200      	movs	r2, #0
 800581a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2200      	movs	r2, #0
 8005822:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	7c1b      	ldrb	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005838:	2101      	movs	r1, #1
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f001 fec6 	bl	80075cc <USBD_LL_PrepareReceive>
 8005840:	e007      	b.n	8005852 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005848:	2340      	movs	r3, #64	; 0x40
 800584a:	2101      	movs	r1, #1
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f001 febd 	bl	80075cc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005852:	7bfb      	ldrb	r3, [r7, #15]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	460b      	mov	r3, r1
 8005866:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800586c:	2181      	movs	r1, #129	; 0x81
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f001 fde1 	bl	8007436 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800587a:	2101      	movs	r1, #1
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f001 fdda 	bl	8007436 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800588a:	2182      	movs	r1, #130	; 0x82
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f001 fdd2 	bl	8007436 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00e      	beq.n	80058c0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80058b2:	4618      	mov	r0, r3
 80058b4:	f001 fecc 	bl	8007650 <USBD_static_free>
    pdev->pClassData = NULL;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b086      	sub	sp, #24
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80058da:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d039      	beq.n	8005968 <USBD_CDC_Setup+0x9e>
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d17f      	bne.n	80059f8 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	88db      	ldrh	r3, [r3, #6]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d029      	beq.n	8005954 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	b25b      	sxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	da11      	bge.n	800592e <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8005916:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	88d2      	ldrh	r2, [r2, #6]
 800591c:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800591e:	6939      	ldr	r1, [r7, #16]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	88db      	ldrh	r3, [r3, #6]
 8005924:	461a      	mov	r2, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f001 f993 	bl	8006c52 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800592c:	e06b      	b.n	8005a06 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	785a      	ldrb	r2, [r3, #1]
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	88db      	ldrh	r3, [r3, #6]
 800593c:	b2da      	uxtb	r2, r3
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005944:	6939      	ldr	r1, [r7, #16]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	88db      	ldrh	r3, [r3, #6]
 800594a:	461a      	mov	r2, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f001 f9ae 	bl	8006cae <USBD_CtlPrepareRx>
    break;
 8005952:	e058      	b.n	8005a06 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	7850      	ldrb	r0, [r2, #1]
 8005960:	2200      	movs	r2, #0
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	4798      	blx	r3
    break;
 8005966:	e04e      	b.n	8005a06 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	785b      	ldrb	r3, [r3, #1]
 800596c:	2b0b      	cmp	r3, #11
 800596e:	d02e      	beq.n	80059ce <USBD_CDC_Setup+0x104>
 8005970:	2b0b      	cmp	r3, #11
 8005972:	dc38      	bgt.n	80059e6 <USBD_CDC_Setup+0x11c>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <USBD_CDC_Setup+0xb4>
 8005978:	2b0a      	cmp	r3, #10
 800597a:	d014      	beq.n	80059a6 <USBD_CDC_Setup+0xdc>
 800597c:	e033      	b.n	80059e6 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005984:	2b03      	cmp	r3, #3
 8005986:	d107      	bne.n	8005998 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8005988:	f107 030c 	add.w	r3, r7, #12
 800598c:	2202      	movs	r2, #2
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 f95e 	bl	8006c52 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005996:	e02e      	b.n	80059f6 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8005998:	6839      	ldr	r1, [r7, #0]
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 f8ef 	bl	8006b7e <USBD_CtlError>
			  ret = USBD_FAIL;
 80059a0:	2302      	movs	r3, #2
 80059a2:	75fb      	strb	r3, [r7, #23]
      break;
 80059a4:	e027      	b.n	80059f6 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d107      	bne.n	80059c0 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80059b0:	f107 030f 	add.w	r3, r7, #15
 80059b4:	2201      	movs	r2, #1
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f001 f94a 	bl	8006c52 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80059be:	e01a      	b.n	80059f6 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f001 f8db 	bl	8006b7e <USBD_CtlError>
			  ret = USBD_FAIL;
 80059c8:	2302      	movs	r3, #2
 80059ca:	75fb      	strb	r3, [r7, #23]
      break;
 80059cc:	e013      	b.n	80059f6 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d00d      	beq.n	80059f4 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f001 f8cf 	bl	8006b7e <USBD_CtlError>
			  ret = USBD_FAIL;
 80059e0:	2302      	movs	r3, #2
 80059e2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80059e4:	e006      	b.n	80059f4 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 f8c8 	bl	8006b7e <USBD_CtlError>
      ret = USBD_FAIL;
 80059ee:	2302      	movs	r3, #2
 80059f0:	75fb      	strb	r3, [r7, #23]
      break;
 80059f2:	e000      	b.n	80059f6 <USBD_CDC_Setup+0x12c>
      break;
 80059f4:	bf00      	nop
    }
    break;
 80059f6:	e006      	b.n	8005a06 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f001 f8bf 	bl	8006b7e <USBD_CtlError>
    ret = USBD_FAIL;
 8005a00:	2302      	movs	r3, #2
 8005a02:	75fb      	strb	r3, [r7, #23]
    break;
 8005a04:	bf00      	nop
  }

  return ret;
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005a22:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005a2a:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d03a      	beq.n	8005aac <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005a36:	78fa      	ldrb	r2, [r7, #3]
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	331c      	adds	r3, #28
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d029      	beq.n	8005aa0 <USBD_CDC_DataIn+0x90>
 8005a4c:	78fa      	ldrb	r2, [r7, #3]
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	331c      	adds	r3, #28
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	78f9      	ldrb	r1, [r7, #3]
 8005a60:	68b8      	ldr	r0, [r7, #8]
 8005a62:	460b      	mov	r3, r1
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4403      	add	r3, r0
 8005a6c:	3338      	adds	r3, #56	; 0x38
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a74:	fb01 f303 	mul.w	r3, r1, r3
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d110      	bne.n	8005aa0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005a7e:	78fa      	ldrb	r2, [r7, #3]
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	331c      	adds	r3, #28
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005a92:	78f9      	ldrb	r1, [r7, #3]
 8005a94:	2300      	movs	r3, #0
 8005a96:	2200      	movs	r2, #0
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f001 fd74 	bl	8007586 <USBD_LL_Transmit>
 8005a9e:	e003      	b.n	8005aa8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	e000      	b.n	8005aae <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005aac:	2302      	movs	r3, #2
  }
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f001 fd9f 	bl	8007612 <USBD_LL_GetRxDataSize>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00d      	beq.n	8005b02 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005afa:	4611      	mov	r1, r2
 8005afc:	4798      	blx	r3

    return USBD_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	e000      	b.n	8005b04 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005b02:	2302      	movs	r3, #2
  }
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005b1a:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d015      	beq.n	8005b52 <USBD_CDC_EP0_RxReady+0x46>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b2c:	2bff      	cmp	r3, #255	; 0xff
 8005b2e:	d010      	beq.n	8005b52 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005b3e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b46:	b292      	uxth	r2, r2
 8005b48:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	22ff      	movs	r2, #255	; 0xff
 8005b4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2243      	movs	r2, #67	; 0x43
 8005b68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005b6a:	4b03      	ldr	r3, [pc, #12]	; (8005b78 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	20000098 	.word	0x20000098

08005b7c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2243      	movs	r2, #67	; 0x43
 8005b88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005b8a:	4b03      	ldr	r3, [pc, #12]	; (8005b98 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bc80      	pop	{r7}
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	20000054 	.word	0x20000054

08005b9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2243      	movs	r2, #67	; 0x43
 8005ba8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005baa:	4b03      	ldr	r3, [pc, #12]	; (8005bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bc80      	pop	{r7}
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	200000dc 	.word	0x200000dc

08005bbc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	220a      	movs	r2, #10
 8005bc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005bca:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	20000010 	.word	0x20000010

08005bdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005be6:	2302      	movs	r3, #2
 8005be8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc80      	pop	{r7}
 8005c06:	4770      	bx	lr

08005c08 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	4613      	mov	r3, r2
 8005c14:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005c1c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005c26:	88fa      	ldrh	r2, [r7, #6]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc80      	pop	{r7}
 8005c38:	4770      	bx	lr

08005c3a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005c4a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr

08005c60 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005c6e:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01c      	beq.n	8005cb4 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d115      	bne.n	8005cb0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2181      	movs	r1, #129	; 0x81
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f001 fc6d 	bl	8007586 <USBD_LL_Transmit>

      return USBD_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e002      	b.n	8005cb6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e000      	b.n	8005cb6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005cb4:	2302      	movs	r3, #2
  }
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d017      	beq.n	8005d08 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	7c1b      	ldrb	r3, [r3, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d109      	bne.n	8005cf4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cea:	2101      	movs	r1, #1
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 fc6d 	bl	80075cc <USBD_LL_PrepareReceive>
 8005cf2:	e007      	b.n	8005d04 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cfa:	2340      	movs	r3, #64	; 0x40
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f001 fc64 	bl	80075cc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e000      	b.n	8005d0a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005d08:	2302      	movs	r3, #2
  }
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	60b9      	str	r1, [r7, #8]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d26:	2302      	movs	r3, #2
 8005d28:	e01a      	b.n	8005d60 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	79fa      	ldrb	r2, [r7, #7]
 8005d56:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f001 fad1 	bl	8007300 <USBD_LL_Init>

  return USBD_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d006      	beq.n	8005d8a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	73fb      	strb	r3, [r7, #15]
 8005d88:	e001      	b.n	8005d8e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr

08005d9a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f001 fb06 	bl	80073b4 <USBD_LL_Start>

  return USBD_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bc80      	pop	{r7}
 8005dc4:	4770      	bx	lr

08005dc6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00c      	beq.n	8005dfa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	78fa      	ldrb	r2, [r7, #3]
 8005dea:	4611      	mov	r1, r2
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	4798      	blx	r3
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	78fa      	ldrb	r2, [r7, #3]
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	4798      	blx	r3
  return USBD_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005e3a:	6839      	ldr	r1, [r7, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fe62 	bl	8006b06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8005e50:	461a      	mov	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8005e5e:	f003 031f 	and.w	r3, r3, #31
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d016      	beq.n	8005e94 <USBD_LL_SetupStage+0x6a>
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d81c      	bhi.n	8005ea4 <USBD_LL_SetupStage+0x7a>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <USBD_LL_SetupStage+0x4a>
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d008      	beq.n	8005e84 <USBD_LL_SetupStage+0x5a>
 8005e72:	e017      	b.n	8005ea4 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f9c5 	bl	800620c <USBD_StdDevReq>
    break;
 8005e82:	e01a      	b.n	8005eba <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fa27 	bl	80062e0 <USBD_StdItfReq>
    break;
 8005e92:	e012      	b.n	8005eba <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fa67 	bl	8006370 <USBD_StdEPReq>
    break;
 8005ea2:	e00a      	b.n	8005eba <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8005eaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 fade 	bl	8007474 <USBD_LL_StallEP>
    break;
 8005eb8:	bf00      	nop
  }

  return USBD_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8005ed2:	7afb      	ldrb	r3, [r7, #11]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d14b      	bne.n	8005f70 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005ede:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d134      	bne.n	8005f54 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d919      	bls.n	8005f2a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	1ad2      	subs	r2, r2, r3
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d203      	bcs.n	8005f18 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	e002      	b.n	8005f1e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 fee1 	bl	8006cea <USBD_CtlContinueRx>
 8005f28:	e038      	b.n	8005f9c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d105      	bne.n	8005f4c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 fede 	bl	8006d0e <USBD_CtlSendStatus>
 8005f52:	e023      	b.n	8005f9c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005f5a:	2b05      	cmp	r3, #5
 8005f5c:	d11e      	bne.n	8005f9c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8005f66:	2100      	movs	r1, #0
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f001 fa83 	bl	8007474 <USBD_LL_StallEP>
 8005f6e:	e015      	b.n	8005f9c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00d      	beq.n	8005f98 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d108      	bne.n	8005f98 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	7afa      	ldrb	r2, [r7, #11]
 8005f90:	4611      	mov	r1, r2
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	4798      	blx	r3
 8005f96:	e001      	b.n	8005f9c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e000      	b.n	8005f9e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b086      	sub	sp, #24
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	607a      	str	r2, [r7, #4]
 8005fb2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8005fb4:	7afb      	ldrb	r3, [r7, #11]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d17f      	bne.n	80060ba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3314      	adds	r3, #20
 8005fbe:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d15c      	bne.n	8006084 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d915      	bls.n	8006002 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	1ad2      	subs	r2, r2, r3
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fe4b 	bl	8006c8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f001 fae6 	bl	80075cc <USBD_LL_PrepareReceive>
 8006000:	e04e      	b.n	80060a0 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	6912      	ldr	r2, [r2, #16]
 800600a:	fbb3 f1f2 	udiv	r1, r3, r2
 800600e:	fb01 f202 	mul.w	r2, r1, r2
 8006012:	1a9b      	subs	r3, r3, r2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d11c      	bne.n	8006052 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006020:	429a      	cmp	r2, r3
 8006022:	d316      	bcc.n	8006052 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800602e:	429a      	cmp	r2, r3
 8006030:	d20f      	bcs.n	8006052 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006032:	2200      	movs	r2, #0
 8006034:	2100      	movs	r1, #0
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 fe27 	bl	8006c8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006044:	2300      	movs	r3, #0
 8006046:	2200      	movs	r2, #0
 8006048:	2100      	movs	r1, #0
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f001 fabe 	bl	80075cc <USBD_LL_PrepareReceive>
 8006050:	e026      	b.n	80060a0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006064:	2b03      	cmp	r3, #3
 8006066:	d105      	bne.n	8006074 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006074:	2180      	movs	r1, #128	; 0x80
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f001 f9fc 	bl	8007474 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 fe59 	bl	8006d34 <USBD_CtlReceiveStatus>
 8006082:	e00d      	b.n	80060a0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800608a:	2b04      	cmp	r3, #4
 800608c:	d004      	beq.n	8006098 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006094:	2b00      	cmp	r3, #0
 8006096:	d103      	bne.n	80060a0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006098:	2180      	movs	r1, #128	; 0x80
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f001 f9ea 	bl	8007474 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d11d      	bne.n	80060e6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f7ff fe81 	bl	8005db2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80060b8:	e015      	b.n	80060e6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00d      	beq.n	80060e2 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80060cc:	2b03      	cmp	r3, #3
 80060ce:	d108      	bne.n	80060e2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	7afa      	ldrb	r2, [r7, #11]
 80060da:	4611      	mov	r1, r2
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	4798      	blx	r3
 80060e0:	e001      	b.n	80060e6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80060e2:	2302      	movs	r3, #2
 80060e4:	e000      	b.n	80060e8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060f8:	2340      	movs	r3, #64	; 0x40
 80060fa:	2200      	movs	r2, #0
 80060fc:	2100      	movs	r1, #0
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f001 f973 	bl	80073ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2240      	movs	r2, #64	; 0x40
 8006110:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006114:	2340      	movs	r3, #64	; 0x40
 8006116:	2200      	movs	r2, #0
 8006118:	2180      	movs	r1, #128	; 0x80
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 f965 	bl	80073ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2240      	movs	r2, #64	; 0x40
 800612a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006150:	2b00      	cmp	r3, #0
 8006152:	d009      	beq.n	8006168 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6852      	ldr	r2, [r2, #4]
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	4611      	mov	r1, r2
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	4798      	blx	r3
  }

  return USBD_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	460b      	mov	r3, r1
 800617c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	78fa      	ldrb	r2, [r7, #3]
 8006182:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr

08006190 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2204      	movs	r2, #4
 80061a8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bc80      	pop	{r7}
 80061b6:	4770      	bx	lr

080061b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bc80      	pop	{r7}
 80061d6:	4770      	bx	lr

080061d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d10b      	bne.n	8006202 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d005      	beq.n	8006202 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006222:	2b40      	cmp	r3, #64	; 0x40
 8006224:	d005      	beq.n	8006232 <USBD_StdDevReq+0x26>
 8006226:	2b40      	cmp	r3, #64	; 0x40
 8006228:	d84f      	bhi.n	80062ca <USBD_StdDevReq+0xbe>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d009      	beq.n	8006242 <USBD_StdDevReq+0x36>
 800622e:	2b20      	cmp	r3, #32
 8006230:	d14b      	bne.n	80062ca <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	4798      	blx	r3
    break;
 8006240:	e048      	b.n	80062d4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	2b09      	cmp	r3, #9
 8006248:	d839      	bhi.n	80062be <USBD_StdDevReq+0xb2>
 800624a:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <USBD_StdDevReq+0x44>)
 800624c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006250:	080062a1 	.word	0x080062a1
 8006254:	080062b5 	.word	0x080062b5
 8006258:	080062bf 	.word	0x080062bf
 800625c:	080062ab 	.word	0x080062ab
 8006260:	080062bf 	.word	0x080062bf
 8006264:	08006283 	.word	0x08006283
 8006268:	08006279 	.word	0x08006279
 800626c:	080062bf 	.word	0x080062bf
 8006270:	08006297 	.word	0x08006297
 8006274:	0800628d 	.word	0x0800628d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f9da 	bl	8006634 <USBD_GetDescriptor>
      break;
 8006280:	e022      	b.n	80062c8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 facf 	bl	8006828 <USBD_SetAddress>
      break;
 800628a:	e01d      	b.n	80062c8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fb0e 	bl	80068b0 <USBD_SetConfig>
      break;
 8006294:	e018      	b.n	80062c8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fb97 	bl	80069cc <USBD_GetConfig>
      break;
 800629e:	e013      	b.n	80062c8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fbc7 	bl	8006a36 <USBD_GetStatus>
      break;
 80062a8:	e00e      	b.n	80062c8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fbf5 	bl	8006a9c <USBD_SetFeature>
      break;
 80062b2:	e009      	b.n	80062c8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fc04 	bl	8006ac4 <USBD_ClrFeature>
      break;
 80062bc:	e004      	b.n	80062c8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fc5c 	bl	8006b7e <USBD_CtlError>
      break;
 80062c6:	bf00      	nop
    }
    break;
 80062c8:	e004      	b.n	80062d4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fc56 	bl	8006b7e <USBD_CtlError>
    break;
 80062d2:	bf00      	nop
  }

  return ret;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop

080062e0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	d005      	beq.n	8006306 <USBD_StdItfReq+0x26>
 80062fa:	2b40      	cmp	r3, #64	; 0x40
 80062fc:	d82e      	bhi.n	800635c <USBD_StdItfReq+0x7c>
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <USBD_StdItfReq+0x26>
 8006302:	2b20      	cmp	r3, #32
 8006304:	d12a      	bne.n	800635c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800630c:	3b01      	subs	r3, #1
 800630e:	2b02      	cmp	r3, #2
 8006310:	d81d      	bhi.n	800634e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	889b      	ldrh	r3, [r3, #4]
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b01      	cmp	r3, #1
 800631a:	d813      	bhi.n	8006344 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	4798      	blx	r3
 800632a:	4603      	mov	r3, r0
 800632c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	88db      	ldrh	r3, [r3, #6]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d110      	bne.n	8006358 <USBD_StdItfReq+0x78>
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10d      	bne.n	8006358 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fce6 	bl	8006d0e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006342:	e009      	b.n	8006358 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fc19 	bl	8006b7e <USBD_CtlError>
      break;
 800634c:	e004      	b.n	8006358 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fc14 	bl	8006b7e <USBD_CtlError>
      break;
 8006356:	e000      	b.n	800635a <USBD_StdItfReq+0x7a>
      break;
 8006358:	bf00      	nop
    }
    break;
 800635a:	e004      	b.n	8006366 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fc0d 	bl	8006b7e <USBD_CtlError>
    break;
 8006364:	bf00      	nop
  }

  return USBD_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	889b      	ldrh	r3, [r3, #4]
 8006382:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800638c:	2b40      	cmp	r3, #64	; 0x40
 800638e:	d007      	beq.n	80063a0 <USBD_StdEPReq+0x30>
 8006390:	2b40      	cmp	r3, #64	; 0x40
 8006392:	f200 8144 	bhi.w	800661e <USBD_StdEPReq+0x2ae>
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <USBD_StdEPReq+0x40>
 800639a:	2b20      	cmp	r3, #32
 800639c:	f040 813f 	bne.w	800661e <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	4798      	blx	r3
    break;
 80063ae:	e13b      	b.n	8006628 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d10a      	bne.n	80063d2 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	4798      	blx	r3
 80063ca:	4603      	mov	r3, r0
 80063cc:	73fb      	strb	r3, [r7, #15]

      return ret;
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	e12b      	b.n	800662a <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	785b      	ldrb	r3, [r3, #1]
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d007      	beq.n	80063ea <USBD_StdEPReq+0x7a>
 80063da:	2b03      	cmp	r3, #3
 80063dc:	f300 8119 	bgt.w	8006612 <USBD_StdEPReq+0x2a2>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d072      	beq.n	80064ca <USBD_StdEPReq+0x15a>
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d03a      	beq.n	800645e <USBD_StdEPReq+0xee>
 80063e8:	e113      	b.n	8006612 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d002      	beq.n	80063fa <USBD_StdEPReq+0x8a>
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d015      	beq.n	8006424 <USBD_StdEPReq+0xb4>
 80063f8:	e02b      	b.n	8006452 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063fa:	7bbb      	ldrb	r3, [r7, #14]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00c      	beq.n	800641a <USBD_StdEPReq+0xaa>
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	2b80      	cmp	r3, #128	; 0x80
 8006404:	d009      	beq.n	800641a <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006406:	7bbb      	ldrb	r3, [r7, #14]
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 f832 	bl	8007474 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006410:	2180      	movs	r1, #128	; 0x80
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 f82e 	bl	8007474 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006418:	e020      	b.n	800645c <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fbae 	bl	8006b7e <USBD_CtlError>
        break;
 8006422:	e01b      	b.n	800645c <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	885b      	ldrh	r3, [r3, #2]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10e      	bne.n	800644a <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00b      	beq.n	800644a <USBD_StdEPReq+0xda>
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	2b80      	cmp	r3, #128	; 0x80
 8006436:	d008      	beq.n	800644a <USBD_StdEPReq+0xda>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	88db      	ldrh	r3, [r3, #6]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d104      	bne.n	800644a <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006440:	7bbb      	ldrb	r3, [r7, #14]
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 f815 	bl	8007474 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fc5f 	bl	8006d0e <USBD_CtlSendStatus>

        break;
 8006450:	e004      	b.n	800645c <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fb92 	bl	8006b7e <USBD_CtlError>
        break;
 800645a:	bf00      	nop
      }
      break;
 800645c:	e0de      	b.n	800661c <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006464:	2b02      	cmp	r3, #2
 8006466:	d002      	beq.n	800646e <USBD_StdEPReq+0xfe>
 8006468:	2b03      	cmp	r3, #3
 800646a:	d015      	beq.n	8006498 <USBD_StdEPReq+0x128>
 800646c:	e026      	b.n	80064bc <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800646e:	7bbb      	ldrb	r3, [r7, #14]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00c      	beq.n	800648e <USBD_StdEPReq+0x11e>
 8006474:	7bbb      	ldrb	r3, [r7, #14]
 8006476:	2b80      	cmp	r3, #128	; 0x80
 8006478:	d009      	beq.n	800648e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800647a:	7bbb      	ldrb	r3, [r7, #14]
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fff8 	bl	8007474 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006484:	2180      	movs	r1, #128	; 0x80
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fff4 	bl	8007474 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800648c:	e01c      	b.n	80064c8 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fb74 	bl	8006b7e <USBD_CtlError>
        break;
 8006496:	e017      	b.n	80064c8 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	885b      	ldrh	r3, [r3, #2]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d112      	bne.n	80064c6 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80064a0:	7bbb      	ldrb	r3, [r7, #14]
 80064a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d004      	beq.n	80064b4 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80064aa:	7bbb      	ldrb	r3, [r7, #14]
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 ffff 	bl	80074b2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fc2a 	bl	8006d0e <USBD_CtlSendStatus>
        }
        break;
 80064ba:	e004      	b.n	80064c6 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fb5d 	bl	8006b7e <USBD_CtlError>
        break;
 80064c4:	e000      	b.n	80064c8 <USBD_StdEPReq+0x158>
        break;
 80064c6:	bf00      	nop
      }
      break;
 80064c8:	e0a8      	b.n	800661c <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d002      	beq.n	80064da <USBD_StdEPReq+0x16a>
 80064d4:	2b03      	cmp	r3, #3
 80064d6:	d031      	beq.n	800653c <USBD_StdEPReq+0x1cc>
 80064d8:	e095      	b.n	8006606 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064da:	7bbb      	ldrb	r3, [r7, #14]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d007      	beq.n	80064f0 <USBD_StdEPReq+0x180>
 80064e0:	7bbb      	ldrb	r3, [r7, #14]
 80064e2:	2b80      	cmp	r3, #128	; 0x80
 80064e4:	d004      	beq.n	80064f0 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fb48 	bl	8006b7e <USBD_CtlError>
          break;
 80064ee:	e08f      	b.n	8006610 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80064f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	da0b      	bge.n	8006510 <USBD_StdEPReq+0x1a0>
 80064f8:	7bbb      	ldrb	r3, [r7, #14]
 80064fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	3310      	adds	r3, #16
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	4413      	add	r3, r2
 800650c:	3304      	adds	r3, #4
 800650e:	e00a      	b.n	8006526 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006510:	7bbb      	ldrb	r3, [r7, #14]
 8006512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	4413      	add	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2202      	movs	r2, #2
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fb8c 	bl	8006c52 <USBD_CtlSendData>
          break;
 800653a:	e069      	b.n	8006610 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800653c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006540:	2b00      	cmp	r3, #0
 8006542:	da11      	bge.n	8006568 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006544:	7bbb      	ldrb	r3, [r7, #14]
 8006546:	f003 020f 	and.w	r2, r3, #15
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	440b      	add	r3, r1
 8006556:	3318      	adds	r3, #24
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d117      	bne.n	800658e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fb0c 	bl	8006b7e <USBD_CtlError>
            break;
 8006566:	e053      	b.n	8006610 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	f003 020f 	and.w	r2, r3, #15
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	440b      	add	r3, r1
 800657a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 faf9 	bl	8006b7e <USBD_CtlError>
            break;
 800658c:	e040      	b.n	8006610 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800658e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006592:	2b00      	cmp	r3, #0
 8006594:	da0b      	bge.n	80065ae <USBD_StdEPReq+0x23e>
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	3310      	adds	r3, #16
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	4413      	add	r3, r2
 80065aa:	3304      	adds	r3, #4
 80065ac:	e00a      	b.n	80065c4 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 80065ae:	7bbb      	ldrb	r3, [r7, #14]
 80065b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80065b4:	4613      	mov	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	4413      	add	r3, r2
 80065c4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065c6:	7bbb      	ldrb	r3, [r7, #14]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <USBD_StdEPReq+0x262>
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
 80065ce:	2b80      	cmp	r3, #128	; 0x80
 80065d0:	d103      	bne.n	80065da <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	e00e      	b.n	80065f8 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	4619      	mov	r1, r3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 ff86 	bl	80074f0 <USBD_LL_IsStallEP>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2201      	movs	r2, #1
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	e002      	b.n	80065f8 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2200      	movs	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2202      	movs	r2, #2
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fb27 	bl	8006c52 <USBD_CtlSendData>
          break;
 8006604:	e004      	b.n	8006610 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fab8 	bl	8006b7e <USBD_CtlError>
        break;
 800660e:	bf00      	nop
      }
      break;
 8006610:	e004      	b.n	800661c <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fab2 	bl	8006b7e <USBD_CtlError>
      break;
 800661a:	bf00      	nop
    }
    break;
 800661c:	e004      	b.n	8006628 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 faac 	bl	8006b7e <USBD_CtlError>
    break;
 8006626:	bf00      	nop
  }

  return ret;
 8006628:	7bfb      	ldrb	r3, [r7, #15]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	885b      	ldrh	r3, [r3, #2]
 8006642:	0a1b      	lsrs	r3, r3, #8
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	2b06      	cmp	r3, #6
 800664a:	f200 80c9 	bhi.w	80067e0 <USBD_GetDescriptor+0x1ac>
 800664e:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <USBD_GetDescriptor+0x20>)
 8006650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006654:	08006671 	.word	0x08006671
 8006658:	08006689 	.word	0x08006689
 800665c:	080066c9 	.word	0x080066c9
 8006660:	080067e1 	.word	0x080067e1
 8006664:	080067e1 	.word	0x080067e1
 8006668:	0800678d 	.word	0x0800678d
 800666c:	080067b3 	.word	0x080067b3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	7c12      	ldrb	r2, [r2, #16]
 800667c:	f107 010a 	add.w	r1, r7, #10
 8006680:	4610      	mov	r0, r2
 8006682:	4798      	blx	r3
 8006684:	60f8      	str	r0, [r7, #12]
    break;
 8006686:	e0b0      	b.n	80067ea <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	7c1b      	ldrb	r3, [r3, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10d      	bne.n	80066ac <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006698:	f107 020a 	add.w	r2, r7, #10
 800669c:	4610      	mov	r0, r2
 800669e:	4798      	blx	r3
 80066a0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3301      	adds	r3, #1
 80066a6:	2202      	movs	r2, #2
 80066a8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80066aa:	e09e      	b.n	80067ea <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80066b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b4:	f107 020a 	add.w	r2, r7, #10
 80066b8:	4610      	mov	r0, r2
 80066ba:	4798      	blx	r3
 80066bc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3301      	adds	r3, #1
 80066c2:	2202      	movs	r2, #2
 80066c4:	701a      	strb	r2, [r3, #0]
    break;
 80066c6:	e090      	b.n	80067ea <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	885b      	ldrh	r3, [r3, #2]
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b05      	cmp	r3, #5
 80066d0:	d856      	bhi.n	8006780 <USBD_GetDescriptor+0x14c>
 80066d2:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <USBD_GetDescriptor+0xa4>)
 80066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d8:	080066f1 	.word	0x080066f1
 80066dc:	08006709 	.word	0x08006709
 80066e0:	08006721 	.word	0x08006721
 80066e4:	08006739 	.word	0x08006739
 80066e8:	08006751 	.word	0x08006751
 80066ec:	08006769 	.word	0x08006769
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	7c12      	ldrb	r2, [r2, #16]
 80066fc:	f107 010a 	add.w	r1, r7, #10
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
 8006704:	60f8      	str	r0, [r7, #12]
      break;
 8006706:	e040      	b.n	800678a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	7c12      	ldrb	r2, [r2, #16]
 8006714:	f107 010a 	add.w	r1, r7, #10
 8006718:	4610      	mov	r0, r2
 800671a:	4798      	blx	r3
 800671c:	60f8      	str	r0, [r7, #12]
      break;
 800671e:	e034      	b.n	800678a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	7c12      	ldrb	r2, [r2, #16]
 800672c:	f107 010a 	add.w	r1, r7, #10
 8006730:	4610      	mov	r0, r2
 8006732:	4798      	blx	r3
 8006734:	60f8      	str	r0, [r7, #12]
      break;
 8006736:	e028      	b.n	800678a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	7c12      	ldrb	r2, [r2, #16]
 8006744:	f107 010a 	add.w	r1, r7, #10
 8006748:	4610      	mov	r0, r2
 800674a:	4798      	blx	r3
 800674c:	60f8      	str	r0, [r7, #12]
      break;
 800674e:	e01c      	b.n	800678a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	7c12      	ldrb	r2, [r2, #16]
 800675c:	f107 010a 	add.w	r1, r7, #10
 8006760:	4610      	mov	r0, r2
 8006762:	4798      	blx	r3
 8006764:	60f8      	str	r0, [r7, #12]
      break;
 8006766:	e010      	b.n	800678a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	7c12      	ldrb	r2, [r2, #16]
 8006774:	f107 010a 	add.w	r1, r7, #10
 8006778:	4610      	mov	r0, r2
 800677a:	4798      	blx	r3
 800677c:	60f8      	str	r0, [r7, #12]
      break;
 800677e:	e004      	b.n	800678a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f9fb 	bl	8006b7e <USBD_CtlError>
      return;
 8006788:	e04b      	b.n	8006822 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800678a:	e02e      	b.n	80067ea <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	7c1b      	ldrb	r3, [r3, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d109      	bne.n	80067a8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800679a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679c:	f107 020a 	add.w	r2, r7, #10
 80067a0:	4610      	mov	r0, r2
 80067a2:	4798      	blx	r3
 80067a4:	60f8      	str	r0, [r7, #12]
      break;
 80067a6:	e020      	b.n	80067ea <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f9e7 	bl	8006b7e <USBD_CtlError>
      return;
 80067b0:	e037      	b.n	8006822 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	7c1b      	ldrb	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10d      	bne.n	80067d6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	f107 020a 	add.w	r2, r7, #10
 80067c6:	4610      	mov	r0, r2
 80067c8:	4798      	blx	r3
 80067ca:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3301      	adds	r3, #1
 80067d0:	2207      	movs	r2, #7
 80067d2:	701a      	strb	r2, [r3, #0]
      break;
 80067d4:	e009      	b.n	80067ea <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f9d0 	bl	8006b7e <USBD_CtlError>
      return;
 80067de:	e020      	b.n	8006822 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f9cb 	bl	8006b7e <USBD_CtlError>
    return;
 80067e8:	e01b      	b.n	8006822 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80067ea:	897b      	ldrh	r3, [r7, #10]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d011      	beq.n	8006814 <USBD_GetDescriptor+0x1e0>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	88db      	ldrh	r3, [r3, #6]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00d      	beq.n	8006814 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	88da      	ldrh	r2, [r3, #6]
 80067fc:	897b      	ldrh	r3, [r7, #10]
 80067fe:	4293      	cmp	r3, r2
 8006800:	bf28      	it	cs
 8006802:	4613      	movcs	r3, r2
 8006804:	b29b      	uxth	r3, r3
 8006806:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8006808:	897b      	ldrh	r3, [r7, #10]
 800680a:	461a      	mov	r2, r3
 800680c:	68f9      	ldr	r1, [r7, #12]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fa1f 	bl	8006c52 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	88db      	ldrh	r3, [r3, #6]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d102      	bne.n	8006822 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fa76 	bl	8006d0e <USBD_CtlSendStatus>
  }
}
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	889b      	ldrh	r3, [r3, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d130      	bne.n	800689c <USBD_SetAddress+0x74>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	88db      	ldrh	r3, [r3, #6]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d12c      	bne.n	800689c <USBD_SetAddress+0x74>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	885b      	ldrh	r3, [r3, #2]
 8006846:	2b7f      	cmp	r3, #127	; 0x7f
 8006848:	d828      	bhi.n	800689c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	885b      	ldrh	r3, [r3, #2]
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006854:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800685c:	2b03      	cmp	r3, #3
 800685e:	d104      	bne.n	800686a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f98b 	bl	8006b7e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006868:	e01d      	b.n	80068a6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	7bfa      	ldrb	r2, [r7, #15]
 800686e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fe66 	bl	8007548 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fa46 	bl	8006d0e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006882:	7bfb      	ldrb	r3, [r7, #15]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006890:	e009      	b.n	80068a6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800689a:	e004      	b.n	80068a6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f96d 	bl	8006b7e <USBD_CtlError>
  }
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	885b      	ldrh	r3, [r3, #2]
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	4b41      	ldr	r3, [pc, #260]	; (80069c8 <USBD_SetConfig+0x118>)
 80068c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068c4:	4b40      	ldr	r3, [pc, #256]	; (80069c8 <USBD_SetConfig+0x118>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d904      	bls.n	80068d6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f955 	bl	8006b7e <USBD_CtlError>
 80068d4:	e075      	b.n	80069c2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d002      	beq.n	80068e6 <USBD_SetConfig+0x36>
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d023      	beq.n	800692c <USBD_SetConfig+0x7c>
 80068e4:	e062      	b.n	80069ac <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80068e6:	4b38      	ldr	r3, [pc, #224]	; (80069c8 <USBD_SetConfig+0x118>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d01a      	beq.n	8006924 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80068ee:	4b36      	ldr	r3, [pc, #216]	; (80069c8 <USBD_SetConfig+0x118>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2203      	movs	r2, #3
 80068fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006900:	4b31      	ldr	r3, [pc, #196]	; (80069c8 <USBD_SetConfig+0x118>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff fa5d 	bl	8005dc6 <USBD_SetClassConfig>
 800690c:	4603      	mov	r3, r0
 800690e:	2b02      	cmp	r3, #2
 8006910:	d104      	bne.n	800691c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f932 	bl	8006b7e <USBD_CtlError>
          return;
 800691a:	e052      	b.n	80069c2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f9f6 	bl	8006d0e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006922:	e04e      	b.n	80069c2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f9f2 	bl	8006d0e <USBD_CtlSendStatus>
      break;
 800692a:	e04a      	b.n	80069c2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800692c:	4b26      	ldr	r3, [pc, #152]	; (80069c8 <USBD_SetConfig+0x118>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d112      	bne.n	800695a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800693c:	4b22      	ldr	r3, [pc, #136]	; (80069c8 <USBD_SetConfig+0x118>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8006946:	4b20      	ldr	r3, [pc, #128]	; (80069c8 <USBD_SetConfig+0x118>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff fa59 	bl	8005e04 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f9db 	bl	8006d0e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006958:	e033      	b.n	80069c2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800695a:	4b1b      	ldr	r3, [pc, #108]	; (80069c8 <USBD_SetConfig+0x118>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	429a      	cmp	r2, r3
 8006966:	d01d      	beq.n	80069a4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff fa47 	bl	8005e04 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006976:	4b14      	ldr	r3, [pc, #80]	; (80069c8 <USBD_SetConfig+0x118>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006980:	4b11      	ldr	r3, [pc, #68]	; (80069c8 <USBD_SetConfig+0x118>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7ff fa1d 	bl	8005dc6 <USBD_SetClassConfig>
 800698c:	4603      	mov	r3, r0
 800698e:	2b02      	cmp	r3, #2
 8006990:	d104      	bne.n	800699c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f8f2 	bl	8006b7e <USBD_CtlError>
          return;
 800699a:	e012      	b.n	80069c2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f9b6 	bl	8006d0e <USBD_CtlSendStatus>
      break;
 80069a2:	e00e      	b.n	80069c2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f9b2 	bl	8006d0e <USBD_CtlSendStatus>
      break;
 80069aa:	e00a      	b.n	80069c2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f8e5 	bl	8006b7e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80069b4:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <USBD_SetConfig+0x118>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff fa22 	bl	8005e04 <USBD_ClrClassConfig>
      break;
 80069c0:	bf00      	nop
    }
  }
}
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20000208 	.word	0x20000208

080069cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	88db      	ldrh	r3, [r3, #6]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d004      	beq.n	80069e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f8cc 	bl	8006b7e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80069e6:	e022      	b.n	8006a2e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	dc02      	bgt.n	80069f8 <USBD_GetConfig+0x2c>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	dc03      	bgt.n	80069fe <USBD_GetConfig+0x32>
 80069f6:	e015      	b.n	8006a24 <USBD_GetConfig+0x58>
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d00b      	beq.n	8006a14 <USBD_GetConfig+0x48>
 80069fc:	e012      	b.n	8006a24 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3308      	adds	r3, #8
 8006a08:	2201      	movs	r2, #1
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f920 	bl	8006c52 <USBD_CtlSendData>
      break;
 8006a12:	e00c      	b.n	8006a2e <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3304      	adds	r3, #4
 8006a18:	2201      	movs	r2, #1
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f918 	bl	8006c52 <USBD_CtlSendData>
      break;
 8006a22:	e004      	b.n	8006a2e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f8a9 	bl	8006b7e <USBD_CtlError>
      break;
 8006a2c:	bf00      	nop
}
 8006a2e:	bf00      	nop
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b082      	sub	sp, #8
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a46:	3b01      	subs	r3, #1
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d81e      	bhi.n	8006a8a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	88db      	ldrh	r3, [r3, #6]
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d004      	beq.n	8006a5e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f891 	bl	8006b7e <USBD_CtlError>
      break;
 8006a5c:	e01a      	b.n	8006a94 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d005      	beq.n	8006a7a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f043 0202 	orr.w	r2, r3, #2
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	2202      	movs	r2, #2
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f8e5 	bl	8006c52 <USBD_CtlSendData>
    break;
 8006a88:	e004      	b.n	8006a94 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f876 	bl	8006b7e <USBD_CtlError>
    break;
 8006a92:	bf00      	nop
  }
}
 8006a94:	bf00      	nop
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	885b      	ldrh	r3, [r3, #2]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d106      	bne.n	8006abc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f929 	bl	8006d0e <USBD_CtlSendStatus>
  }

}
 8006abc:	bf00      	nop
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d80b      	bhi.n	8006af2 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	885b      	ldrh	r3, [r3, #2]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d10c      	bne.n	8006afc <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f90f 	bl	8006d0e <USBD_CtlSendStatus>
    }
    break;
 8006af0:	e004      	b.n	8006afc <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f842 	bl	8006b7e <USBD_CtlError>
    break;
 8006afa:	e000      	b.n	8006afe <USBD_ClrFeature+0x3a>
    break;
 8006afc:	bf00      	nop
  }
}
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b083      	sub	sp, #12
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781a      	ldrb	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	785a      	ldrb	r2, [r3, #1]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	3302      	adds	r3, #2
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	3303      	adds	r3, #3
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	021b      	lsls	r3, r3, #8
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	4413      	add	r3, r2
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	3305      	adds	r3, #5
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	4413      	add	r3, r2
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	3306      	adds	r3, #6
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	3307      	adds	r3, #7
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	021b      	lsls	r3, r3, #8
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	4413      	add	r3, r2
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	80da      	strh	r2, [r3, #6]

}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr

08006b7e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8006b88:	2180      	movs	r1, #128	; 0x80
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fc72 	bl	8007474 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006b90:	2100      	movs	r1, #0
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fc6e 	bl	8007474 <USBD_LL_StallEP>
}
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d032      	beq.n	8006c1c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 f834 	bl	8006c24 <USBD_GetLen>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	75fa      	strb	r2, [r7, #23]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	7812      	ldrb	r2, [r2, #0]
 8006bda:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	75fa      	strb	r2, [r7, #23]
 8006be2:	461a      	mov	r2, r3
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4413      	add	r3, r2
 8006be8:	2203      	movs	r2, #3
 8006bea:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006bec:	e012      	b.n	8006c14 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	60fa      	str	r2, [r7, #12]
 8006bf4:	7dfa      	ldrb	r2, [r7, #23]
 8006bf6:	1c51      	adds	r1, r2, #1
 8006bf8:	75f9      	strb	r1, [r7, #23]
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	440a      	add	r2, r1
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	75fa      	strb	r2, [r7, #23]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4413      	add	r3, r2
 8006c10:	2200      	movs	r2, #0
 8006c12:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e8      	bne.n	8006bee <USBD_GetString+0x4e>
    }
  }
}
 8006c1c:	bf00      	nop
 8006c1e:	3718      	adds	r7, #24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8006c30:	e005      	b.n	8006c3e <USBD_GetLen+0x1a>
    {
        len++;
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	3301      	adds	r3, #1
 8006c36:	73fb      	strb	r3, [r7, #15]
        buf++;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1f5      	bne.n	8006c32 <USBD_GetLen+0xe>
    }

    return len;
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bc80      	pop	{r7}
 8006c50:	4770      	bx	lr

08006c52 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8006c68:	88fa      	ldrh	r2, [r7, #6]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006c6e:	88fa      	ldrh	r2, [r7, #6]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	2100      	movs	r1, #0
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 fc83 	bl	8007586 <USBD_LL_Transmit>

  return USBD_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	4613      	mov	r3, r2
 8006c96:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006c98:	88fb      	ldrh	r3, [r7, #6]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 fc71 	bl	8007586 <USBD_LL_Transmit>

  return USBD_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2203      	movs	r2, #3
 8006cc0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8006cc4:	88fa      	ldrh	r2, [r7, #6]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8006ccc:	88fa      	ldrh	r2, [r7, #6]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006cd4:	88fb      	ldrh	r3, [r7, #6]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	2100      	movs	r1, #0
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 fc76 	bl	80075cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	60f8      	str	r0, [r7, #12]
 8006cf2:	60b9      	str	r1, [r7, #8]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cf8:	88fb      	ldrh	r3, [r7, #6]
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 fc64 	bl	80075cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2204      	movs	r2, #4
 8006d1a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	2200      	movs	r2, #0
 8006d22:	2100      	movs	r1, #0
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fc2e 	bl	8007586 <USBD_LL_Transmit>

  return USBD_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2205      	movs	r2, #5
 8006d40:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006d44:	2300      	movs	r3, #0
 8006d46:	2200      	movs	r2, #0
 8006d48:	2100      	movs	r1, #0
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fc3e 	bl	80075cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d60:	2200      	movs	r2, #0
 8006d62:	4912      	ldr	r1, [pc, #72]	; (8006dac <MX_USB_DEVICE_Init+0x50>)
 8006d64:	4812      	ldr	r0, [pc, #72]	; (8006db0 <MX_USB_DEVICE_Init+0x54>)
 8006d66:	f7fe ffd4 	bl	8005d12 <USBD_Init>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d70:	f7f9 fc24 	bl	80005bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d74:	490f      	ldr	r1, [pc, #60]	; (8006db4 <MX_USB_DEVICE_Init+0x58>)
 8006d76:	480e      	ldr	r0, [pc, #56]	; (8006db0 <MX_USB_DEVICE_Init+0x54>)
 8006d78:	f7fe fff6 	bl	8005d68 <USBD_RegisterClass>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d82:	f7f9 fc1b 	bl	80005bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d86:	490c      	ldr	r1, [pc, #48]	; (8006db8 <MX_USB_DEVICE_Init+0x5c>)
 8006d88:	4809      	ldr	r0, [pc, #36]	; (8006db0 <MX_USB_DEVICE_Init+0x54>)
 8006d8a:	f7fe ff27 	bl	8005bdc <USBD_CDC_RegisterInterface>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006d94:	f7f9 fc12 	bl	80005bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d98:	4805      	ldr	r0, [pc, #20]	; (8006db0 <MX_USB_DEVICE_Init+0x54>)
 8006d9a:	f7fe fffe 	bl	8005d9a <USBD_Start>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006da4:	f7f9 fc0a 	bl	80005bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006da8:	bf00      	nop
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000130 	.word	0x20000130
 8006db0:	2000020c 	.word	0x2000020c
 8006db4:	2000001c 	.word	0x2000001c
 8006db8:	20000120 	.word	0x20000120

08006dbc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	4905      	ldr	r1, [pc, #20]	; (8006dd8 <CDC_Init_FS+0x1c>)
 8006dc4:	4805      	ldr	r0, [pc, #20]	; (8006ddc <CDC_Init_FS+0x20>)
 8006dc6:	f7fe ff1f 	bl	8005c08 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006dca:	4905      	ldr	r1, [pc, #20]	; (8006de0 <CDC_Init_FS+0x24>)
 8006dcc:	4803      	ldr	r0, [pc, #12]	; (8006ddc <CDC_Init_FS+0x20>)
 8006dce:	f7fe ff34 	bl	8005c3a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006dd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	200008a8 	.word	0x200008a8
 8006ddc:	2000020c 	.word	0x2000020c
 8006de0:	200004a8 	.word	0x200004a8

08006de4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006de8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr
	...

08006df4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	6039      	str	r1, [r7, #0]
 8006dfe:	71fb      	strb	r3, [r7, #7]
 8006e00:	4613      	mov	r3, r2
 8006e02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e04:	79fb      	ldrb	r3, [r7, #7]
 8006e06:	2b23      	cmp	r3, #35	; 0x23
 8006e08:	d84a      	bhi.n	8006ea0 <CDC_Control_FS+0xac>
 8006e0a:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <CDC_Control_FS+0x1c>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006ea1 	.word	0x08006ea1
 8006e14:	08006ea1 	.word	0x08006ea1
 8006e18:	08006ea1 	.word	0x08006ea1
 8006e1c:	08006ea1 	.word	0x08006ea1
 8006e20:	08006ea1 	.word	0x08006ea1
 8006e24:	08006ea1 	.word	0x08006ea1
 8006e28:	08006ea1 	.word	0x08006ea1
 8006e2c:	08006ea1 	.word	0x08006ea1
 8006e30:	08006ea1 	.word	0x08006ea1
 8006e34:	08006ea1 	.word	0x08006ea1
 8006e38:	08006ea1 	.word	0x08006ea1
 8006e3c:	08006ea1 	.word	0x08006ea1
 8006e40:	08006ea1 	.word	0x08006ea1
 8006e44:	08006ea1 	.word	0x08006ea1
 8006e48:	08006ea1 	.word	0x08006ea1
 8006e4c:	08006ea1 	.word	0x08006ea1
 8006e50:	08006ea1 	.word	0x08006ea1
 8006e54:	08006ea1 	.word	0x08006ea1
 8006e58:	08006ea1 	.word	0x08006ea1
 8006e5c:	08006ea1 	.word	0x08006ea1
 8006e60:	08006ea1 	.word	0x08006ea1
 8006e64:	08006ea1 	.word	0x08006ea1
 8006e68:	08006ea1 	.word	0x08006ea1
 8006e6c:	08006ea1 	.word	0x08006ea1
 8006e70:	08006ea1 	.word	0x08006ea1
 8006e74:	08006ea1 	.word	0x08006ea1
 8006e78:	08006ea1 	.word	0x08006ea1
 8006e7c:	08006ea1 	.word	0x08006ea1
 8006e80:	08006ea1 	.word	0x08006ea1
 8006e84:	08006ea1 	.word	0x08006ea1
 8006e88:	08006ea1 	.word	0x08006ea1
 8006e8c:	08006ea1 	.word	0x08006ea1
 8006e90:	08006ea1 	.word	0x08006ea1
 8006e94:	08006ea1 	.word	0x08006ea1
 8006e98:	08006ea1 	.word	0x08006ea1
 8006e9c:	08006ea1 	.word	0x08006ea1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ea0:	bf00      	nop
  }

  return (USBD_OK);
 8006ea2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop

08006eb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	4805      	ldr	r0, [pc, #20]	; (8006ed4 <CDC_Receive_FS+0x24>)
 8006ebe:	f7fe febc 	bl	8005c3a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006ec2:	4804      	ldr	r0, [pc, #16]	; (8006ed4 <CDC_Receive_FS+0x24>)
 8006ec4:	f7fe fefb 	bl	8005cbe <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006ec8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	2000020c 	.word	0x2000020c

08006ed8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006ee8:	4b0d      	ldr	r3, [pc, #52]	; (8006f20 <CDC_Transmit_FS+0x48>)
 8006eea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006eee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e00b      	b.n	8006f16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006efe:	887b      	ldrh	r3, [r7, #2]
 8006f00:	461a      	mov	r2, r3
 8006f02:	6879      	ldr	r1, [r7, #4]
 8006f04:	4806      	ldr	r0, [pc, #24]	; (8006f20 <CDC_Transmit_FS+0x48>)
 8006f06:	f7fe fe7f 	bl	8005c08 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006f0a:	4805      	ldr	r0, [pc, #20]	; (8006f20 <CDC_Transmit_FS+0x48>)
 8006f0c:	f7fe fea8 	bl	8005c60 <USBD_CDC_TransmitPacket>
 8006f10:	4603      	mov	r3, r0
 8006f12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	2000020c 	.word	0x2000020c

08006f24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	6039      	str	r1, [r7, #0]
 8006f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2212      	movs	r2, #18
 8006f34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f36:	4b03      	ldr	r3, [pc, #12]	; (8006f44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bc80      	pop	{r7}
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	2000014c 	.word	0x2000014c

08006f48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	6039      	str	r1, [r7, #0]
 8006f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2204      	movs	r2, #4
 8006f58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f5a:	4b03      	ldr	r3, [pc, #12]	; (8006f68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bc80      	pop	{r7}
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	20000160 	.word	0x20000160

08006f6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	6039      	str	r1, [r7, #0]
 8006f76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d105      	bne.n	8006f8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	4907      	ldr	r1, [pc, #28]	; (8006fa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f82:	4808      	ldr	r0, [pc, #32]	; (8006fa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f84:	f7ff fe0c 	bl	8006ba0 <USBD_GetString>
 8006f88:	e004      	b.n	8006f94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	4904      	ldr	r1, [pc, #16]	; (8006fa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f8e:	4805      	ldr	r0, [pc, #20]	; (8006fa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f90:	f7ff fe06 	bl	8006ba0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f94:	4b02      	ldr	r3, [pc, #8]	; (8006fa0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000ca8 	.word	0x20000ca8
 8006fa4:	08008674 	.word	0x08008674

08006fa8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	6039      	str	r1, [r7, #0]
 8006fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	4904      	ldr	r1, [pc, #16]	; (8006fc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006fb8:	4804      	ldr	r0, [pc, #16]	; (8006fcc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006fba:	f7ff fdf1 	bl	8006ba0 <USBD_GetString>
  return USBD_StrDesc;
 8006fbe:	4b02      	ldr	r3, [pc, #8]	; (8006fc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000ca8 	.word	0x20000ca8
 8006fcc:	0800868c 	.word	0x0800868c

08006fd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	6039      	str	r1, [r7, #0]
 8006fda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	221a      	movs	r2, #26
 8006fe0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006fe2:	f000 f843 	bl	800706c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006fe6:	4b02      	ldr	r3, [pc, #8]	; (8006ff0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20000164 	.word	0x20000164

08006ff4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	6039      	str	r1, [r7, #0]
 8006ffe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d105      	bne.n	8007012 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	4907      	ldr	r1, [pc, #28]	; (8007028 <USBD_FS_ConfigStrDescriptor+0x34>)
 800700a:	4808      	ldr	r0, [pc, #32]	; (800702c <USBD_FS_ConfigStrDescriptor+0x38>)
 800700c:	f7ff fdc8 	bl	8006ba0 <USBD_GetString>
 8007010:	e004      	b.n	800701c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	4904      	ldr	r1, [pc, #16]	; (8007028 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007016:	4805      	ldr	r0, [pc, #20]	; (800702c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007018:	f7ff fdc2 	bl	8006ba0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800701c:	4b02      	ldr	r3, [pc, #8]	; (8007028 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20000ca8 	.word	0x20000ca8
 800702c:	080086a0 	.word	0x080086a0

08007030 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	6039      	str	r1, [r7, #0]
 800703a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d105      	bne.n	800704e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	4907      	ldr	r1, [pc, #28]	; (8007064 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007046:	4808      	ldr	r0, [pc, #32]	; (8007068 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007048:	f7ff fdaa 	bl	8006ba0 <USBD_GetString>
 800704c:	e004      	b.n	8007058 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	4904      	ldr	r1, [pc, #16]	; (8007064 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007052:	4805      	ldr	r0, [pc, #20]	; (8007068 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007054:	f7ff fda4 	bl	8006ba0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007058:	4b02      	ldr	r3, [pc, #8]	; (8007064 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000ca8 	.word	0x20000ca8
 8007068:	080086ac 	.word	0x080086ac

0800706c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007072:	4b0f      	ldr	r3, [pc, #60]	; (80070b0 <Get_SerialNum+0x44>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007078:	4b0e      	ldr	r3, [pc, #56]	; (80070b4 <Get_SerialNum+0x48>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800707e:	4b0e      	ldr	r3, [pc, #56]	; (80070b8 <Get_SerialNum+0x4c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4413      	add	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d009      	beq.n	80070a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007092:	2208      	movs	r2, #8
 8007094:	4909      	ldr	r1, [pc, #36]	; (80070bc <Get_SerialNum+0x50>)
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f814 	bl	80070c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800709c:	2204      	movs	r2, #4
 800709e:	4908      	ldr	r1, [pc, #32]	; (80070c0 <Get_SerialNum+0x54>)
 80070a0:	68b8      	ldr	r0, [r7, #8]
 80070a2:	f000 f80f 	bl	80070c4 <IntToUnicode>
  }
}
 80070a6:	bf00      	nop
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	1ff800d0 	.word	0x1ff800d0
 80070b4:	1ff800d4 	.word	0x1ff800d4
 80070b8:	1ff800d8 	.word	0x1ff800d8
 80070bc:	20000166 	.word	0x20000166
 80070c0:	20000176 	.word	0x20000176

080070c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	4613      	mov	r3, r2
 80070d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80070d6:	2300      	movs	r3, #0
 80070d8:	75fb      	strb	r3, [r7, #23]
 80070da:	e027      	b.n	800712c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	0f1b      	lsrs	r3, r3, #28
 80070e0:	2b09      	cmp	r3, #9
 80070e2:	d80b      	bhi.n	80070fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	0f1b      	lsrs	r3, r3, #28
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	4619      	mov	r1, r3
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	440b      	add	r3, r1
 80070f4:	3230      	adds	r2, #48	; 0x30
 80070f6:	b2d2      	uxtb	r2, r2
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	e00a      	b.n	8007112 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	0f1b      	lsrs	r3, r3, #28
 8007100:	b2da      	uxtb	r2, r3
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	4619      	mov	r1, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	440b      	add	r3, r1
 800710c:	3237      	adds	r2, #55	; 0x37
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007118:	7dfb      	ldrb	r3, [r7, #23]
 800711a:	005b      	lsls	r3, r3, #1
 800711c:	3301      	adds	r3, #1
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	4413      	add	r3, r2
 8007122:	2200      	movs	r2, #0
 8007124:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007126:	7dfb      	ldrb	r3, [r7, #23]
 8007128:	3301      	adds	r3, #1
 800712a:	75fb      	strb	r3, [r7, #23]
 800712c:	7dfa      	ldrb	r2, [r7, #23]
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	429a      	cmp	r2, r3
 8007132:	d3d3      	bcc.n	80070dc <IntToUnicode+0x18>
  }
}
 8007134:	bf00      	nop
 8007136:	bf00      	nop
 8007138:	371c      	adds	r7, #28
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr

08007140 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d106      	bne.n	8007160 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8007152:	4b09      	ldr	r3, [pc, #36]	; (8007178 <HAL_PCDEx_SetConnectionState+0x38>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	4a08      	ldr	r2, [pc, #32]	; (8007178 <HAL_PCDEx_SetConnectionState+0x38>)
 8007158:	f043 0301 	orr.w	r3, r3, #1
 800715c:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800715e:	e005      	b.n	800716c <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8007160:	4b05      	ldr	r3, [pc, #20]	; (8007178 <HAL_PCDEx_SetConnectionState+0x38>)
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	4a04      	ldr	r2, [pc, #16]	; (8007178 <HAL_PCDEx_SetConnectionState+0x38>)
 8007166:	f023 0301 	bic.w	r3, r3, #1
 800716a:	6053      	str	r3, [r2, #4]
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	bc80      	pop	{r7}
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40010000 	.word	0x40010000

0800717c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a0d      	ldr	r2, [pc, #52]	; (80071c0 <HAL_PCD_MspInit+0x44>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d113      	bne.n	80071b6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800718e:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <HAL_PCD_MspInit+0x48>)
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	4a0c      	ldr	r2, [pc, #48]	; (80071c4 <HAL_PCD_MspInit+0x48>)
 8007194:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007198:	6253      	str	r3, [r2, #36]	; 0x24
 800719a:	4b0a      	ldr	r3, [pc, #40]	; (80071c4 <HAL_PCD_MspInit+0x48>)
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80071a6:	2200      	movs	r2, #0
 80071a8:	2100      	movs	r1, #0
 80071aa:	2014      	movs	r0, #20
 80071ac:	f7f9 fca1 	bl	8000af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80071b0:	2014      	movs	r0, #20
 80071b2:	f7f9 fcba 	bl	8000b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80071b6:	bf00      	nop
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	40005c00 	.word	0x40005c00
 80071c4:	40023800 	.word	0x40023800

080071c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80071dc:	4619      	mov	r1, r3
 80071de:	4610      	mov	r0, r2
 80071e0:	f7fe fe23 	bl	8005e2a <USBD_LL_SetupStage>
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	460b      	mov	r3, r1
 80071f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80071fe:	78fa      	ldrb	r2, [r7, #3]
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	4613      	mov	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	00db      	lsls	r3, r3, #3
 800720a:	440b      	add	r3, r1
 800720c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	4619      	mov	r1, r3
 8007216:	f7fe fe55 	bl	8005ec4 <USBD_LL_DataOutStage>
}
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	460b      	mov	r3, r1
 800722c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007234:	78fa      	ldrb	r2, [r7, #3]
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	4613      	mov	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	440b      	add	r3, r1
 8007242:	333c      	adds	r3, #60	; 0x3c
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	78fb      	ldrb	r3, [r7, #3]
 8007248:	4619      	mov	r1, r3
 800724a:	f7fe feac 	bl	8005fa6 <USBD_LL_DataInStage>
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007264:	4618      	mov	r0, r3
 8007266:	f7fe ffb7 	bl	80061d8 <USBD_LL_SOF>
}
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800727a:	2301      	movs	r3, #1
 800727c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	2b02      	cmp	r3, #2
 8007284:	d001      	beq.n	800728a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007286:	f7f9 f999 	bl	80005bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007290:	7bfa      	ldrb	r2, [r7, #15]
 8007292:	4611      	mov	r1, r2
 8007294:	4618      	mov	r0, r3
 8007296:	f7fe ff6c 	bl	8006172 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fe ff25 	bl	80060f0 <USBD_LL_Reset>
}
 80072a6:	bf00      	nop
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
	...

080072b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fe ff66 	bl	8006190 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d005      	beq.n	80072d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80072cc:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <HAL_PCD_SuspendCallback+0x30>)
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	4a03      	ldr	r2, [pc, #12]	; (80072e0 <HAL_PCD_SuspendCallback+0x30>)
 80072d2:	f043 0306 	orr.w	r3, r3, #6
 80072d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80072d8:	bf00      	nop
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	e000ed00 	.word	0xe000ed00

080072e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fe ff60 	bl	80061b8 <USBD_LL_Resume>
}
 80072f8:	bf00      	nop
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007308:	4a28      	ldr	r2, [pc, #160]	; (80073ac <USBD_LL_Init+0xac>)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a26      	ldr	r2, [pc, #152]	; (80073ac <USBD_LL_Init+0xac>)
 8007314:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8007318:	4b24      	ldr	r3, [pc, #144]	; (80073ac <USBD_LL_Init+0xac>)
 800731a:	4a25      	ldr	r2, [pc, #148]	; (80073b0 <USBD_LL_Init+0xb0>)
 800731c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800731e:	4b23      	ldr	r3, [pc, #140]	; (80073ac <USBD_LL_Init+0xac>)
 8007320:	2208      	movs	r2, #8
 8007322:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007324:	4b21      	ldr	r3, [pc, #132]	; (80073ac <USBD_LL_Init+0xac>)
 8007326:	2202      	movs	r2, #2
 8007328:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800732a:	4b20      	ldr	r3, [pc, #128]	; (80073ac <USBD_LL_Init+0xac>)
 800732c:	2202      	movs	r2, #2
 800732e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007330:	4b1e      	ldr	r3, [pc, #120]	; (80073ac <USBD_LL_Init+0xac>)
 8007332:	2200      	movs	r2, #0
 8007334:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007336:	4b1d      	ldr	r3, [pc, #116]	; (80073ac <USBD_LL_Init+0xac>)
 8007338:	2200      	movs	r2, #0
 800733a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800733c:	481b      	ldr	r0, [pc, #108]	; (80073ac <USBD_LL_Init+0xac>)
 800733e:	f7f9 fc0e 	bl	8000b5e <HAL_PCD_Init>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007348:	f7f9 f938 	bl	80005bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007352:	2318      	movs	r3, #24
 8007354:	2200      	movs	r2, #0
 8007356:	2100      	movs	r1, #0
 8007358:	f7fb f896 	bl	8002488 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007362:	2358      	movs	r3, #88	; 0x58
 8007364:	2200      	movs	r2, #0
 8007366:	2180      	movs	r1, #128	; 0x80
 8007368:	f7fb f88e 	bl	8002488 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007372:	23c0      	movs	r3, #192	; 0xc0
 8007374:	2200      	movs	r2, #0
 8007376:	2181      	movs	r1, #129	; 0x81
 8007378:	f7fb f886 	bl	8002488 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007382:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007386:	2200      	movs	r2, #0
 8007388:	2101      	movs	r1, #1
 800738a:	f7fb f87d 	bl	8002488 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007398:	2200      	movs	r2, #0
 800739a:	2182      	movs	r1, #130	; 0x82
 800739c:	f7fb f874 	bl	8002488 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20000ea8 	.word	0x20000ea8
 80073b0:	40005c00 	.word	0x40005c00

080073b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7f9 fc99 	bl	8000d02 <HAL_PCD_Start>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 f944 	bl	8007664 <USBD_Get_USB_Status>
 80073dc:	4603      	mov	r3, r0
 80073de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	4608      	mov	r0, r1
 80073f4:	4611      	mov	r1, r2
 80073f6:	461a      	mov	r2, r3
 80073f8:	4603      	mov	r3, r0
 80073fa:	70fb      	strb	r3, [r7, #3]
 80073fc:	460b      	mov	r3, r1
 80073fe:	70bb      	strb	r3, [r7, #2]
 8007400:	4613      	mov	r3, r2
 8007402:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007412:	78bb      	ldrb	r3, [r7, #2]
 8007414:	883a      	ldrh	r2, [r7, #0]
 8007416:	78f9      	ldrb	r1, [r7, #3]
 8007418:	f7f9 fd92 	bl	8000f40 <HAL_PCD_EP_Open>
 800741c:	4603      	mov	r3, r0
 800741e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007420:	7bfb      	ldrb	r3, [r7, #15]
 8007422:	4618      	mov	r0, r3
 8007424:	f000 f91e 	bl	8007664 <USBD_Get_USB_Status>
 8007428:	4603      	mov	r3, r0
 800742a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800742c:	7bbb      	ldrb	r3, [r7, #14]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	460b      	mov	r3, r1
 8007440:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007450:	78fa      	ldrb	r2, [r7, #3]
 8007452:	4611      	mov	r1, r2
 8007454:	4618      	mov	r0, r3
 8007456:	f7f9 fdd0 	bl	8000ffa <HAL_PCD_EP_Close>
 800745a:	4603      	mov	r3, r0
 800745c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	4618      	mov	r0, r3
 8007462:	f000 f8ff 	bl	8007664 <USBD_Get_USB_Status>
 8007466:	4603      	mov	r3, r0
 8007468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800746a:	7bbb      	ldrb	r3, [r7, #14]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	460b      	mov	r3, r1
 800747e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800748e:	78fa      	ldrb	r2, [r7, #3]
 8007490:	4611      	mov	r1, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f7f9 fe78 	bl	8001188 <HAL_PCD_EP_SetStall>
 8007498:	4603      	mov	r3, r0
 800749a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 f8e0 	bl	8007664 <USBD_Get_USB_Status>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	460b      	mov	r3, r1
 80074bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80074cc:	78fa      	ldrb	r2, [r7, #3]
 80074ce:	4611      	mov	r1, r2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7f9 feab 	bl	800122c <HAL_PCD_EP_ClrStall>
 80074d6:	4603      	mov	r3, r0
 80074d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 f8c1 	bl	8007664 <USBD_Get_USB_Status>
 80074e2:	4603      	mov	r3, r0
 80074e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007502:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007504:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007508:	2b00      	cmp	r3, #0
 800750a:	da0c      	bge.n	8007526 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800750c:	78fb      	ldrb	r3, [r7, #3]
 800750e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007512:	68f9      	ldr	r1, [r7, #12]
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	4613      	mov	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	440b      	add	r3, r1
 8007520:	3302      	adds	r3, #2
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	e00b      	b.n	800753e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007526:	78fb      	ldrb	r3, [r7, #3]
 8007528:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800752c:	68f9      	ldr	r1, [r7, #12]
 800752e:	4613      	mov	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	440b      	add	r3, r1
 8007538:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800753c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	bc80      	pop	{r7}
 8007546:	4770      	bx	lr

08007548 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f7f9 fcc5 	bl	8000ef6 <HAL_PCD_SetAddress>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	4618      	mov	r0, r3
 8007574:	f000 f876 	bl	8007664 <USBD_Get_USB_Status>
 8007578:	4603      	mov	r3, r0
 800757a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800757c:	7bbb      	ldrb	r3, [r7, #14]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b086      	sub	sp, #24
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	461a      	mov	r2, r3
 8007592:	460b      	mov	r3, r1
 8007594:	72fb      	strb	r3, [r7, #11]
 8007596:	4613      	mov	r3, r2
 8007598:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80075a8:	893b      	ldrh	r3, [r7, #8]
 80075aa:	7af9      	ldrb	r1, [r7, #11]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	f7f9 fdb4 	bl	800111a <HAL_PCD_EP_Transmit>
 80075b2:	4603      	mov	r3, r0
 80075b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 f853 	bl	8007664 <USBD_Get_USB_Status>
 80075be:	4603      	mov	r3, r0
 80075c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	607a      	str	r2, [r7, #4]
 80075d6:	461a      	mov	r2, r3
 80075d8:	460b      	mov	r3, r1
 80075da:	72fb      	strb	r3, [r7, #11]
 80075dc:	4613      	mov	r3, r2
 80075de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80075ee:	893b      	ldrh	r3, [r7, #8]
 80075f0:	7af9      	ldrb	r1, [r7, #11]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	f7f9 fd49 	bl	800108a <HAL_PCD_EP_Receive>
 80075f8:	4603      	mov	r3, r0
 80075fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 f830 	bl	8007664 <USBD_Get_USB_Status>
 8007604:	4603      	mov	r3, r0
 8007606:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007608:	7dbb      	ldrb	r3, [r7, #22]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b082      	sub	sp, #8
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	460b      	mov	r3, r1
 800761c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007624:	78fa      	ldrb	r2, [r7, #3]
 8007626:	4611      	mov	r1, r2
 8007628:	4618      	mov	r0, r3
 800762a:	f7f9 fd5f 	bl	80010ec <HAL_PCD_EP_GetRxCount>
 800762e:	4603      	mov	r3, r0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007640:	4b02      	ldr	r3, [pc, #8]	; (800764c <USBD_static_malloc+0x14>)
}
 8007642:	4618      	mov	r0, r3
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	bc80      	pop	{r7}
 800764a:	4770      	bx	lr
 800764c:	20001194 	.word	0x20001194

08007650 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]

}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	bc80      	pop	{r7}
 8007660:	4770      	bx	lr
	...

08007664 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	4603      	mov	r3, r0
 800766c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007672:	79fb      	ldrb	r3, [r7, #7]
 8007674:	2b03      	cmp	r3, #3
 8007676:	d817      	bhi.n	80076a8 <USBD_Get_USB_Status+0x44>
 8007678:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <USBD_Get_USB_Status+0x1c>)
 800767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767e:	bf00      	nop
 8007680:	08007691 	.word	0x08007691
 8007684:	08007697 	.word	0x08007697
 8007688:	0800769d 	.word	0x0800769d
 800768c:	080076a3 	.word	0x080076a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
    break;
 8007694:	e00b      	b.n	80076ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007696:	2302      	movs	r3, #2
 8007698:	73fb      	strb	r3, [r7, #15]
    break;
 800769a:	e008      	b.n	80076ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800769c:	2301      	movs	r3, #1
 800769e:	73fb      	strb	r3, [r7, #15]
    break;
 80076a0:	e005      	b.n	80076ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076a2:	2302      	movs	r3, #2
 80076a4:	73fb      	strb	r3, [r7, #15]
    break;
 80076a6:	e002      	b.n	80076ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80076a8:	2302      	movs	r3, #2
 80076aa:	73fb      	strb	r3, [r7, #15]
    break;
 80076ac:	bf00      	nop
  }
  return usb_status;
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bc80      	pop	{r7}
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop

080076bc <__errno>:
 80076bc:	4b01      	ldr	r3, [pc, #4]	; (80076c4 <__errno+0x8>)
 80076be:	6818      	ldr	r0, [r3, #0]
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	20000180 	.word	0x20000180

080076c8 <__libc_init_array>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	2600      	movs	r6, #0
 80076cc:	4d0c      	ldr	r5, [pc, #48]	; (8007700 <__libc_init_array+0x38>)
 80076ce:	4c0d      	ldr	r4, [pc, #52]	; (8007704 <__libc_init_array+0x3c>)
 80076d0:	1b64      	subs	r4, r4, r5
 80076d2:	10a4      	asrs	r4, r4, #2
 80076d4:	42a6      	cmp	r6, r4
 80076d6:	d109      	bne.n	80076ec <__libc_init_array+0x24>
 80076d8:	f000 ffb6 	bl	8008648 <_init>
 80076dc:	2600      	movs	r6, #0
 80076de:	4d0a      	ldr	r5, [pc, #40]	; (8007708 <__libc_init_array+0x40>)
 80076e0:	4c0a      	ldr	r4, [pc, #40]	; (800770c <__libc_init_array+0x44>)
 80076e2:	1b64      	subs	r4, r4, r5
 80076e4:	10a4      	asrs	r4, r4, #2
 80076e6:	42a6      	cmp	r6, r4
 80076e8:	d105      	bne.n	80076f6 <__libc_init_array+0x2e>
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f0:	4798      	blx	r3
 80076f2:	3601      	adds	r6, #1
 80076f4:	e7ee      	b.n	80076d4 <__libc_init_array+0xc>
 80076f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076fa:	4798      	blx	r3
 80076fc:	3601      	adds	r6, #1
 80076fe:	e7f2      	b.n	80076e6 <__libc_init_array+0x1e>
 8007700:	08008778 	.word	0x08008778
 8007704:	08008778 	.word	0x08008778
 8007708:	08008778 	.word	0x08008778
 800770c:	0800877c 	.word	0x0800877c

08007710 <memset>:
 8007710:	4603      	mov	r3, r0
 8007712:	4402      	add	r2, r0
 8007714:	4293      	cmp	r3, r2
 8007716:	d100      	bne.n	800771a <memset+0xa>
 8007718:	4770      	bx	lr
 800771a:	f803 1b01 	strb.w	r1, [r3], #1
 800771e:	e7f9      	b.n	8007714 <memset+0x4>

08007720 <iprintf>:
 8007720:	b40f      	push	{r0, r1, r2, r3}
 8007722:	4b0a      	ldr	r3, [pc, #40]	; (800774c <iprintf+0x2c>)
 8007724:	b513      	push	{r0, r1, r4, lr}
 8007726:	681c      	ldr	r4, [r3, #0]
 8007728:	b124      	cbz	r4, 8007734 <iprintf+0x14>
 800772a:	69a3      	ldr	r3, [r4, #24]
 800772c:	b913      	cbnz	r3, 8007734 <iprintf+0x14>
 800772e:	4620      	mov	r0, r4
 8007730:	f000 f866 	bl	8007800 <__sinit>
 8007734:	ab05      	add	r3, sp, #20
 8007736:	4620      	mov	r0, r4
 8007738:	9a04      	ldr	r2, [sp, #16]
 800773a:	68a1      	ldr	r1, [r4, #8]
 800773c:	9301      	str	r3, [sp, #4]
 800773e:	f000 f9bb 	bl	8007ab8 <_vfiprintf_r>
 8007742:	b002      	add	sp, #8
 8007744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007748:	b004      	add	sp, #16
 800774a:	4770      	bx	lr
 800774c:	20000180 	.word	0x20000180

08007750 <std>:
 8007750:	2300      	movs	r3, #0
 8007752:	b510      	push	{r4, lr}
 8007754:	4604      	mov	r4, r0
 8007756:	e9c0 3300 	strd	r3, r3, [r0]
 800775a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800775e:	6083      	str	r3, [r0, #8]
 8007760:	8181      	strh	r1, [r0, #12]
 8007762:	6643      	str	r3, [r0, #100]	; 0x64
 8007764:	81c2      	strh	r2, [r0, #14]
 8007766:	6183      	str	r3, [r0, #24]
 8007768:	4619      	mov	r1, r3
 800776a:	2208      	movs	r2, #8
 800776c:	305c      	adds	r0, #92	; 0x5c
 800776e:	f7ff ffcf 	bl	8007710 <memset>
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <std+0x38>)
 8007774:	6224      	str	r4, [r4, #32]
 8007776:	6263      	str	r3, [r4, #36]	; 0x24
 8007778:	4b04      	ldr	r3, [pc, #16]	; (800778c <std+0x3c>)
 800777a:	62a3      	str	r3, [r4, #40]	; 0x28
 800777c:	4b04      	ldr	r3, [pc, #16]	; (8007790 <std+0x40>)
 800777e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007780:	4b04      	ldr	r3, [pc, #16]	; (8007794 <std+0x44>)
 8007782:	6323      	str	r3, [r4, #48]	; 0x30
 8007784:	bd10      	pop	{r4, pc}
 8007786:	bf00      	nop
 8007788:	08008065 	.word	0x08008065
 800778c:	08008087 	.word	0x08008087
 8007790:	080080bf 	.word	0x080080bf
 8007794:	080080e3 	.word	0x080080e3

08007798 <_cleanup_r>:
 8007798:	4901      	ldr	r1, [pc, #4]	; (80077a0 <_cleanup_r+0x8>)
 800779a:	f000 b8af 	b.w	80078fc <_fwalk_reent>
 800779e:	bf00      	nop
 80077a0:	080083b5 	.word	0x080083b5

080077a4 <__sfmoreglue>:
 80077a4:	2268      	movs	r2, #104	; 0x68
 80077a6:	b570      	push	{r4, r5, r6, lr}
 80077a8:	1e4d      	subs	r5, r1, #1
 80077aa:	4355      	muls	r5, r2
 80077ac:	460e      	mov	r6, r1
 80077ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077b2:	f000 f8e5 	bl	8007980 <_malloc_r>
 80077b6:	4604      	mov	r4, r0
 80077b8:	b140      	cbz	r0, 80077cc <__sfmoreglue+0x28>
 80077ba:	2100      	movs	r1, #0
 80077bc:	e9c0 1600 	strd	r1, r6, [r0]
 80077c0:	300c      	adds	r0, #12
 80077c2:	60a0      	str	r0, [r4, #8]
 80077c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077c8:	f7ff ffa2 	bl	8007710 <memset>
 80077cc:	4620      	mov	r0, r4
 80077ce:	bd70      	pop	{r4, r5, r6, pc}

080077d0 <__sfp_lock_acquire>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__sfp_lock_acquire+0x8>)
 80077d2:	f000 b8b3 	b.w	800793c <__retarget_lock_acquire_recursive>
 80077d6:	bf00      	nop
 80077d8:	200013b5 	.word	0x200013b5

080077dc <__sfp_lock_release>:
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <__sfp_lock_release+0x8>)
 80077de:	f000 b8ae 	b.w	800793e <__retarget_lock_release_recursive>
 80077e2:	bf00      	nop
 80077e4:	200013b5 	.word	0x200013b5

080077e8 <__sinit_lock_acquire>:
 80077e8:	4801      	ldr	r0, [pc, #4]	; (80077f0 <__sinit_lock_acquire+0x8>)
 80077ea:	f000 b8a7 	b.w	800793c <__retarget_lock_acquire_recursive>
 80077ee:	bf00      	nop
 80077f0:	200013b6 	.word	0x200013b6

080077f4 <__sinit_lock_release>:
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <__sinit_lock_release+0x8>)
 80077f6:	f000 b8a2 	b.w	800793e <__retarget_lock_release_recursive>
 80077fa:	bf00      	nop
 80077fc:	200013b6 	.word	0x200013b6

08007800 <__sinit>:
 8007800:	b510      	push	{r4, lr}
 8007802:	4604      	mov	r4, r0
 8007804:	f7ff fff0 	bl	80077e8 <__sinit_lock_acquire>
 8007808:	69a3      	ldr	r3, [r4, #24]
 800780a:	b11b      	cbz	r3, 8007814 <__sinit+0x14>
 800780c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007810:	f7ff bff0 	b.w	80077f4 <__sinit_lock_release>
 8007814:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007818:	6523      	str	r3, [r4, #80]	; 0x50
 800781a:	4b13      	ldr	r3, [pc, #76]	; (8007868 <__sinit+0x68>)
 800781c:	4a13      	ldr	r2, [pc, #76]	; (800786c <__sinit+0x6c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	62a2      	str	r2, [r4, #40]	; 0x28
 8007822:	42a3      	cmp	r3, r4
 8007824:	bf08      	it	eq
 8007826:	2301      	moveq	r3, #1
 8007828:	4620      	mov	r0, r4
 800782a:	bf08      	it	eq
 800782c:	61a3      	streq	r3, [r4, #24]
 800782e:	f000 f81f 	bl	8007870 <__sfp>
 8007832:	6060      	str	r0, [r4, #4]
 8007834:	4620      	mov	r0, r4
 8007836:	f000 f81b 	bl	8007870 <__sfp>
 800783a:	60a0      	str	r0, [r4, #8]
 800783c:	4620      	mov	r0, r4
 800783e:	f000 f817 	bl	8007870 <__sfp>
 8007842:	2200      	movs	r2, #0
 8007844:	2104      	movs	r1, #4
 8007846:	60e0      	str	r0, [r4, #12]
 8007848:	6860      	ldr	r0, [r4, #4]
 800784a:	f7ff ff81 	bl	8007750 <std>
 800784e:	2201      	movs	r2, #1
 8007850:	2109      	movs	r1, #9
 8007852:	68a0      	ldr	r0, [r4, #8]
 8007854:	f7ff ff7c 	bl	8007750 <std>
 8007858:	2202      	movs	r2, #2
 800785a:	2112      	movs	r1, #18
 800785c:	68e0      	ldr	r0, [r4, #12]
 800785e:	f7ff ff77 	bl	8007750 <std>
 8007862:	2301      	movs	r3, #1
 8007864:	61a3      	str	r3, [r4, #24]
 8007866:	e7d1      	b.n	800780c <__sinit+0xc>
 8007868:	080086d8 	.word	0x080086d8
 800786c:	08007799 	.word	0x08007799

08007870 <__sfp>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	4607      	mov	r7, r0
 8007874:	f7ff ffac 	bl	80077d0 <__sfp_lock_acquire>
 8007878:	4b1e      	ldr	r3, [pc, #120]	; (80078f4 <__sfp+0x84>)
 800787a:	681e      	ldr	r6, [r3, #0]
 800787c:	69b3      	ldr	r3, [r6, #24]
 800787e:	b913      	cbnz	r3, 8007886 <__sfp+0x16>
 8007880:	4630      	mov	r0, r6
 8007882:	f7ff ffbd 	bl	8007800 <__sinit>
 8007886:	3648      	adds	r6, #72	; 0x48
 8007888:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800788c:	3b01      	subs	r3, #1
 800788e:	d503      	bpl.n	8007898 <__sfp+0x28>
 8007890:	6833      	ldr	r3, [r6, #0]
 8007892:	b30b      	cbz	r3, 80078d8 <__sfp+0x68>
 8007894:	6836      	ldr	r6, [r6, #0]
 8007896:	e7f7      	b.n	8007888 <__sfp+0x18>
 8007898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800789c:	b9d5      	cbnz	r5, 80078d4 <__sfp+0x64>
 800789e:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <__sfp+0x88>)
 80078a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078a4:	60e3      	str	r3, [r4, #12]
 80078a6:	6665      	str	r5, [r4, #100]	; 0x64
 80078a8:	f000 f847 	bl	800793a <__retarget_lock_init_recursive>
 80078ac:	f7ff ff96 	bl	80077dc <__sfp_lock_release>
 80078b0:	2208      	movs	r2, #8
 80078b2:	4629      	mov	r1, r5
 80078b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078bc:	6025      	str	r5, [r4, #0]
 80078be:	61a5      	str	r5, [r4, #24]
 80078c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078c4:	f7ff ff24 	bl	8007710 <memset>
 80078c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078d0:	4620      	mov	r0, r4
 80078d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d4:	3468      	adds	r4, #104	; 0x68
 80078d6:	e7d9      	b.n	800788c <__sfp+0x1c>
 80078d8:	2104      	movs	r1, #4
 80078da:	4638      	mov	r0, r7
 80078dc:	f7ff ff62 	bl	80077a4 <__sfmoreglue>
 80078e0:	4604      	mov	r4, r0
 80078e2:	6030      	str	r0, [r6, #0]
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d1d5      	bne.n	8007894 <__sfp+0x24>
 80078e8:	f7ff ff78 	bl	80077dc <__sfp_lock_release>
 80078ec:	230c      	movs	r3, #12
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	e7ee      	b.n	80078d0 <__sfp+0x60>
 80078f2:	bf00      	nop
 80078f4:	080086d8 	.word	0x080086d8
 80078f8:	ffff0001 	.word	0xffff0001

080078fc <_fwalk_reent>:
 80078fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007900:	4606      	mov	r6, r0
 8007902:	4688      	mov	r8, r1
 8007904:	2700      	movs	r7, #0
 8007906:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800790a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800790e:	f1b9 0901 	subs.w	r9, r9, #1
 8007912:	d505      	bpl.n	8007920 <_fwalk_reent+0x24>
 8007914:	6824      	ldr	r4, [r4, #0]
 8007916:	2c00      	cmp	r4, #0
 8007918:	d1f7      	bne.n	800790a <_fwalk_reent+0xe>
 800791a:	4638      	mov	r0, r7
 800791c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007920:	89ab      	ldrh	r3, [r5, #12]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d907      	bls.n	8007936 <_fwalk_reent+0x3a>
 8007926:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800792a:	3301      	adds	r3, #1
 800792c:	d003      	beq.n	8007936 <_fwalk_reent+0x3a>
 800792e:	4629      	mov	r1, r5
 8007930:	4630      	mov	r0, r6
 8007932:	47c0      	blx	r8
 8007934:	4307      	orrs	r7, r0
 8007936:	3568      	adds	r5, #104	; 0x68
 8007938:	e7e9      	b.n	800790e <_fwalk_reent+0x12>

0800793a <__retarget_lock_init_recursive>:
 800793a:	4770      	bx	lr

0800793c <__retarget_lock_acquire_recursive>:
 800793c:	4770      	bx	lr

0800793e <__retarget_lock_release_recursive>:
 800793e:	4770      	bx	lr

08007940 <sbrk_aligned>:
 8007940:	b570      	push	{r4, r5, r6, lr}
 8007942:	4e0e      	ldr	r6, [pc, #56]	; (800797c <sbrk_aligned+0x3c>)
 8007944:	460c      	mov	r4, r1
 8007946:	6831      	ldr	r1, [r6, #0]
 8007948:	4605      	mov	r5, r0
 800794a:	b911      	cbnz	r1, 8007952 <sbrk_aligned+0x12>
 800794c:	f000 fb7a 	bl	8008044 <_sbrk_r>
 8007950:	6030      	str	r0, [r6, #0]
 8007952:	4621      	mov	r1, r4
 8007954:	4628      	mov	r0, r5
 8007956:	f000 fb75 	bl	8008044 <_sbrk_r>
 800795a:	1c43      	adds	r3, r0, #1
 800795c:	d00a      	beq.n	8007974 <sbrk_aligned+0x34>
 800795e:	1cc4      	adds	r4, r0, #3
 8007960:	f024 0403 	bic.w	r4, r4, #3
 8007964:	42a0      	cmp	r0, r4
 8007966:	d007      	beq.n	8007978 <sbrk_aligned+0x38>
 8007968:	1a21      	subs	r1, r4, r0
 800796a:	4628      	mov	r0, r5
 800796c:	f000 fb6a 	bl	8008044 <_sbrk_r>
 8007970:	3001      	adds	r0, #1
 8007972:	d101      	bne.n	8007978 <sbrk_aligned+0x38>
 8007974:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007978:	4620      	mov	r0, r4
 800797a:	bd70      	pop	{r4, r5, r6, pc}
 800797c:	200013bc 	.word	0x200013bc

08007980 <_malloc_r>:
 8007980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007984:	1ccd      	adds	r5, r1, #3
 8007986:	f025 0503 	bic.w	r5, r5, #3
 800798a:	3508      	adds	r5, #8
 800798c:	2d0c      	cmp	r5, #12
 800798e:	bf38      	it	cc
 8007990:	250c      	movcc	r5, #12
 8007992:	2d00      	cmp	r5, #0
 8007994:	4607      	mov	r7, r0
 8007996:	db01      	blt.n	800799c <_malloc_r+0x1c>
 8007998:	42a9      	cmp	r1, r5
 800799a:	d905      	bls.n	80079a8 <_malloc_r+0x28>
 800799c:	230c      	movs	r3, #12
 800799e:	2600      	movs	r6, #0
 80079a0:	603b      	str	r3, [r7, #0]
 80079a2:	4630      	mov	r0, r6
 80079a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a8:	4e2e      	ldr	r6, [pc, #184]	; (8007a64 <_malloc_r+0xe4>)
 80079aa:	f000 fdc5 	bl	8008538 <__malloc_lock>
 80079ae:	6833      	ldr	r3, [r6, #0]
 80079b0:	461c      	mov	r4, r3
 80079b2:	bb34      	cbnz	r4, 8007a02 <_malloc_r+0x82>
 80079b4:	4629      	mov	r1, r5
 80079b6:	4638      	mov	r0, r7
 80079b8:	f7ff ffc2 	bl	8007940 <sbrk_aligned>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	4604      	mov	r4, r0
 80079c0:	d14d      	bne.n	8007a5e <_malloc_r+0xde>
 80079c2:	6834      	ldr	r4, [r6, #0]
 80079c4:	4626      	mov	r6, r4
 80079c6:	2e00      	cmp	r6, #0
 80079c8:	d140      	bne.n	8007a4c <_malloc_r+0xcc>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	4631      	mov	r1, r6
 80079ce:	4638      	mov	r0, r7
 80079d0:	eb04 0803 	add.w	r8, r4, r3
 80079d4:	f000 fb36 	bl	8008044 <_sbrk_r>
 80079d8:	4580      	cmp	r8, r0
 80079da:	d13a      	bne.n	8007a52 <_malloc_r+0xd2>
 80079dc:	6821      	ldr	r1, [r4, #0]
 80079de:	3503      	adds	r5, #3
 80079e0:	1a6d      	subs	r5, r5, r1
 80079e2:	f025 0503 	bic.w	r5, r5, #3
 80079e6:	3508      	adds	r5, #8
 80079e8:	2d0c      	cmp	r5, #12
 80079ea:	bf38      	it	cc
 80079ec:	250c      	movcc	r5, #12
 80079ee:	4638      	mov	r0, r7
 80079f0:	4629      	mov	r1, r5
 80079f2:	f7ff ffa5 	bl	8007940 <sbrk_aligned>
 80079f6:	3001      	adds	r0, #1
 80079f8:	d02b      	beq.n	8007a52 <_malloc_r+0xd2>
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	442b      	add	r3, r5
 80079fe:	6023      	str	r3, [r4, #0]
 8007a00:	e00e      	b.n	8007a20 <_malloc_r+0xa0>
 8007a02:	6822      	ldr	r2, [r4, #0]
 8007a04:	1b52      	subs	r2, r2, r5
 8007a06:	d41e      	bmi.n	8007a46 <_malloc_r+0xc6>
 8007a08:	2a0b      	cmp	r2, #11
 8007a0a:	d916      	bls.n	8007a3a <_malloc_r+0xba>
 8007a0c:	1961      	adds	r1, r4, r5
 8007a0e:	42a3      	cmp	r3, r4
 8007a10:	6025      	str	r5, [r4, #0]
 8007a12:	bf18      	it	ne
 8007a14:	6059      	strne	r1, [r3, #4]
 8007a16:	6863      	ldr	r3, [r4, #4]
 8007a18:	bf08      	it	eq
 8007a1a:	6031      	streq	r1, [r6, #0]
 8007a1c:	5162      	str	r2, [r4, r5]
 8007a1e:	604b      	str	r3, [r1, #4]
 8007a20:	4638      	mov	r0, r7
 8007a22:	f104 060b 	add.w	r6, r4, #11
 8007a26:	f000 fd8d 	bl	8008544 <__malloc_unlock>
 8007a2a:	f026 0607 	bic.w	r6, r6, #7
 8007a2e:	1d23      	adds	r3, r4, #4
 8007a30:	1af2      	subs	r2, r6, r3
 8007a32:	d0b6      	beq.n	80079a2 <_malloc_r+0x22>
 8007a34:	1b9b      	subs	r3, r3, r6
 8007a36:	50a3      	str	r3, [r4, r2]
 8007a38:	e7b3      	b.n	80079a2 <_malloc_r+0x22>
 8007a3a:	6862      	ldr	r2, [r4, #4]
 8007a3c:	42a3      	cmp	r3, r4
 8007a3e:	bf0c      	ite	eq
 8007a40:	6032      	streq	r2, [r6, #0]
 8007a42:	605a      	strne	r2, [r3, #4]
 8007a44:	e7ec      	b.n	8007a20 <_malloc_r+0xa0>
 8007a46:	4623      	mov	r3, r4
 8007a48:	6864      	ldr	r4, [r4, #4]
 8007a4a:	e7b2      	b.n	80079b2 <_malloc_r+0x32>
 8007a4c:	4634      	mov	r4, r6
 8007a4e:	6876      	ldr	r6, [r6, #4]
 8007a50:	e7b9      	b.n	80079c6 <_malloc_r+0x46>
 8007a52:	230c      	movs	r3, #12
 8007a54:	4638      	mov	r0, r7
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	f000 fd74 	bl	8008544 <__malloc_unlock>
 8007a5c:	e7a1      	b.n	80079a2 <_malloc_r+0x22>
 8007a5e:	6025      	str	r5, [r4, #0]
 8007a60:	e7de      	b.n	8007a20 <_malloc_r+0xa0>
 8007a62:	bf00      	nop
 8007a64:	200013b8 	.word	0x200013b8

08007a68 <__sfputc_r>:
 8007a68:	6893      	ldr	r3, [r2, #8]
 8007a6a:	b410      	push	{r4}
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	6093      	str	r3, [r2, #8]
 8007a72:	da07      	bge.n	8007a84 <__sfputc_r+0x1c>
 8007a74:	6994      	ldr	r4, [r2, #24]
 8007a76:	42a3      	cmp	r3, r4
 8007a78:	db01      	blt.n	8007a7e <__sfputc_r+0x16>
 8007a7a:	290a      	cmp	r1, #10
 8007a7c:	d102      	bne.n	8007a84 <__sfputc_r+0x1c>
 8007a7e:	bc10      	pop	{r4}
 8007a80:	f000 bb34 	b.w	80080ec <__swbuf_r>
 8007a84:	6813      	ldr	r3, [r2, #0]
 8007a86:	1c58      	adds	r0, r3, #1
 8007a88:	6010      	str	r0, [r2, #0]
 8007a8a:	7019      	strb	r1, [r3, #0]
 8007a8c:	4608      	mov	r0, r1
 8007a8e:	bc10      	pop	{r4}
 8007a90:	4770      	bx	lr

08007a92 <__sfputs_r>:
 8007a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a94:	4606      	mov	r6, r0
 8007a96:	460f      	mov	r7, r1
 8007a98:	4614      	mov	r4, r2
 8007a9a:	18d5      	adds	r5, r2, r3
 8007a9c:	42ac      	cmp	r4, r5
 8007a9e:	d101      	bne.n	8007aa4 <__sfputs_r+0x12>
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	e007      	b.n	8007ab4 <__sfputs_r+0x22>
 8007aa4:	463a      	mov	r2, r7
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aac:	f7ff ffdc 	bl	8007a68 <__sfputc_r>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d1f3      	bne.n	8007a9c <__sfputs_r+0xa>
 8007ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ab8 <_vfiprintf_r>:
 8007ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	460d      	mov	r5, r1
 8007abe:	4614      	mov	r4, r2
 8007ac0:	4698      	mov	r8, r3
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	b09d      	sub	sp, #116	; 0x74
 8007ac6:	b118      	cbz	r0, 8007ad0 <_vfiprintf_r+0x18>
 8007ac8:	6983      	ldr	r3, [r0, #24]
 8007aca:	b90b      	cbnz	r3, 8007ad0 <_vfiprintf_r+0x18>
 8007acc:	f7ff fe98 	bl	8007800 <__sinit>
 8007ad0:	4b89      	ldr	r3, [pc, #548]	; (8007cf8 <_vfiprintf_r+0x240>)
 8007ad2:	429d      	cmp	r5, r3
 8007ad4:	d11b      	bne.n	8007b0e <_vfiprintf_r+0x56>
 8007ad6:	6875      	ldr	r5, [r6, #4]
 8007ad8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ada:	07d9      	lsls	r1, r3, #31
 8007adc:	d405      	bmi.n	8007aea <_vfiprintf_r+0x32>
 8007ade:	89ab      	ldrh	r3, [r5, #12]
 8007ae0:	059a      	lsls	r2, r3, #22
 8007ae2:	d402      	bmi.n	8007aea <_vfiprintf_r+0x32>
 8007ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ae6:	f7ff ff29 	bl	800793c <__retarget_lock_acquire_recursive>
 8007aea:	89ab      	ldrh	r3, [r5, #12]
 8007aec:	071b      	lsls	r3, r3, #28
 8007aee:	d501      	bpl.n	8007af4 <_vfiprintf_r+0x3c>
 8007af0:	692b      	ldr	r3, [r5, #16]
 8007af2:	b9eb      	cbnz	r3, 8007b30 <_vfiprintf_r+0x78>
 8007af4:	4629      	mov	r1, r5
 8007af6:	4630      	mov	r0, r6
 8007af8:	f000 fb5c 	bl	80081b4 <__swsetup_r>
 8007afc:	b1c0      	cbz	r0, 8007b30 <_vfiprintf_r+0x78>
 8007afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b00:	07dc      	lsls	r4, r3, #31
 8007b02:	d50e      	bpl.n	8007b22 <_vfiprintf_r+0x6a>
 8007b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b08:	b01d      	add	sp, #116	; 0x74
 8007b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0e:	4b7b      	ldr	r3, [pc, #492]	; (8007cfc <_vfiprintf_r+0x244>)
 8007b10:	429d      	cmp	r5, r3
 8007b12:	d101      	bne.n	8007b18 <_vfiprintf_r+0x60>
 8007b14:	68b5      	ldr	r5, [r6, #8]
 8007b16:	e7df      	b.n	8007ad8 <_vfiprintf_r+0x20>
 8007b18:	4b79      	ldr	r3, [pc, #484]	; (8007d00 <_vfiprintf_r+0x248>)
 8007b1a:	429d      	cmp	r5, r3
 8007b1c:	bf08      	it	eq
 8007b1e:	68f5      	ldreq	r5, [r6, #12]
 8007b20:	e7da      	b.n	8007ad8 <_vfiprintf_r+0x20>
 8007b22:	89ab      	ldrh	r3, [r5, #12]
 8007b24:	0598      	lsls	r0, r3, #22
 8007b26:	d4ed      	bmi.n	8007b04 <_vfiprintf_r+0x4c>
 8007b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b2a:	f7ff ff08 	bl	800793e <__retarget_lock_release_recursive>
 8007b2e:	e7e9      	b.n	8007b04 <_vfiprintf_r+0x4c>
 8007b30:	2300      	movs	r3, #0
 8007b32:	9309      	str	r3, [sp, #36]	; 0x24
 8007b34:	2320      	movs	r3, #32
 8007b36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b3a:	2330      	movs	r3, #48	; 0x30
 8007b3c:	f04f 0901 	mov.w	r9, #1
 8007b40:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b44:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007d04 <_vfiprintf_r+0x24c>
 8007b48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b4c:	4623      	mov	r3, r4
 8007b4e:	469a      	mov	sl, r3
 8007b50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b54:	b10a      	cbz	r2, 8007b5a <_vfiprintf_r+0xa2>
 8007b56:	2a25      	cmp	r2, #37	; 0x25
 8007b58:	d1f9      	bne.n	8007b4e <_vfiprintf_r+0x96>
 8007b5a:	ebba 0b04 	subs.w	fp, sl, r4
 8007b5e:	d00b      	beq.n	8007b78 <_vfiprintf_r+0xc0>
 8007b60:	465b      	mov	r3, fp
 8007b62:	4622      	mov	r2, r4
 8007b64:	4629      	mov	r1, r5
 8007b66:	4630      	mov	r0, r6
 8007b68:	f7ff ff93 	bl	8007a92 <__sfputs_r>
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	f000 80aa 	beq.w	8007cc6 <_vfiprintf_r+0x20e>
 8007b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b74:	445a      	add	r2, fp
 8007b76:	9209      	str	r2, [sp, #36]	; 0x24
 8007b78:	f89a 3000 	ldrb.w	r3, [sl]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80a2 	beq.w	8007cc6 <_vfiprintf_r+0x20e>
 8007b82:	2300      	movs	r3, #0
 8007b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b8c:	f10a 0a01 	add.w	sl, sl, #1
 8007b90:	9304      	str	r3, [sp, #16]
 8007b92:	9307      	str	r3, [sp, #28]
 8007b94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b98:	931a      	str	r3, [sp, #104]	; 0x68
 8007b9a:	4654      	mov	r4, sl
 8007b9c:	2205      	movs	r2, #5
 8007b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba2:	4858      	ldr	r0, [pc, #352]	; (8007d04 <_vfiprintf_r+0x24c>)
 8007ba4:	f000 fcba 	bl	800851c <memchr>
 8007ba8:	9a04      	ldr	r2, [sp, #16]
 8007baa:	b9d8      	cbnz	r0, 8007be4 <_vfiprintf_r+0x12c>
 8007bac:	06d1      	lsls	r1, r2, #27
 8007bae:	bf44      	itt	mi
 8007bb0:	2320      	movmi	r3, #32
 8007bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bb6:	0713      	lsls	r3, r2, #28
 8007bb8:	bf44      	itt	mi
 8007bba:	232b      	movmi	r3, #43	; 0x2b
 8007bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8007bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc6:	d015      	beq.n	8007bf4 <_vfiprintf_r+0x13c>
 8007bc8:	4654      	mov	r4, sl
 8007bca:	2000      	movs	r0, #0
 8007bcc:	f04f 0c0a 	mov.w	ip, #10
 8007bd0:	9a07      	ldr	r2, [sp, #28]
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bd8:	3b30      	subs	r3, #48	; 0x30
 8007bda:	2b09      	cmp	r3, #9
 8007bdc:	d94e      	bls.n	8007c7c <_vfiprintf_r+0x1c4>
 8007bde:	b1b0      	cbz	r0, 8007c0e <_vfiprintf_r+0x156>
 8007be0:	9207      	str	r2, [sp, #28]
 8007be2:	e014      	b.n	8007c0e <_vfiprintf_r+0x156>
 8007be4:	eba0 0308 	sub.w	r3, r0, r8
 8007be8:	fa09 f303 	lsl.w	r3, r9, r3
 8007bec:	4313      	orrs	r3, r2
 8007bee:	46a2      	mov	sl, r4
 8007bf0:	9304      	str	r3, [sp, #16]
 8007bf2:	e7d2      	b.n	8007b9a <_vfiprintf_r+0xe2>
 8007bf4:	9b03      	ldr	r3, [sp, #12]
 8007bf6:	1d19      	adds	r1, r3, #4
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	9103      	str	r1, [sp, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	bfbb      	ittet	lt
 8007c00:	425b      	neglt	r3, r3
 8007c02:	f042 0202 	orrlt.w	r2, r2, #2
 8007c06:	9307      	strge	r3, [sp, #28]
 8007c08:	9307      	strlt	r3, [sp, #28]
 8007c0a:	bfb8      	it	lt
 8007c0c:	9204      	strlt	r2, [sp, #16]
 8007c0e:	7823      	ldrb	r3, [r4, #0]
 8007c10:	2b2e      	cmp	r3, #46	; 0x2e
 8007c12:	d10c      	bne.n	8007c2e <_vfiprintf_r+0x176>
 8007c14:	7863      	ldrb	r3, [r4, #1]
 8007c16:	2b2a      	cmp	r3, #42	; 0x2a
 8007c18:	d135      	bne.n	8007c86 <_vfiprintf_r+0x1ce>
 8007c1a:	9b03      	ldr	r3, [sp, #12]
 8007c1c:	3402      	adds	r4, #2
 8007c1e:	1d1a      	adds	r2, r3, #4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	9203      	str	r2, [sp, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	bfb8      	it	lt
 8007c28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c2c:	9305      	str	r3, [sp, #20]
 8007c2e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007d08 <_vfiprintf_r+0x250>
 8007c32:	2203      	movs	r2, #3
 8007c34:	4650      	mov	r0, sl
 8007c36:	7821      	ldrb	r1, [r4, #0]
 8007c38:	f000 fc70 	bl	800851c <memchr>
 8007c3c:	b140      	cbz	r0, 8007c50 <_vfiprintf_r+0x198>
 8007c3e:	2340      	movs	r3, #64	; 0x40
 8007c40:	eba0 000a 	sub.w	r0, r0, sl
 8007c44:	fa03 f000 	lsl.w	r0, r3, r0
 8007c48:	9b04      	ldr	r3, [sp, #16]
 8007c4a:	3401      	adds	r4, #1
 8007c4c:	4303      	orrs	r3, r0
 8007c4e:	9304      	str	r3, [sp, #16]
 8007c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c54:	2206      	movs	r2, #6
 8007c56:	482d      	ldr	r0, [pc, #180]	; (8007d0c <_vfiprintf_r+0x254>)
 8007c58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c5c:	f000 fc5e 	bl	800851c <memchr>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d03f      	beq.n	8007ce4 <_vfiprintf_r+0x22c>
 8007c64:	4b2a      	ldr	r3, [pc, #168]	; (8007d10 <_vfiprintf_r+0x258>)
 8007c66:	bb1b      	cbnz	r3, 8007cb0 <_vfiprintf_r+0x1f8>
 8007c68:	9b03      	ldr	r3, [sp, #12]
 8007c6a:	3307      	adds	r3, #7
 8007c6c:	f023 0307 	bic.w	r3, r3, #7
 8007c70:	3308      	adds	r3, #8
 8007c72:	9303      	str	r3, [sp, #12]
 8007c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c76:	443b      	add	r3, r7
 8007c78:	9309      	str	r3, [sp, #36]	; 0x24
 8007c7a:	e767      	b.n	8007b4c <_vfiprintf_r+0x94>
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	2001      	movs	r0, #1
 8007c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c84:	e7a5      	b.n	8007bd2 <_vfiprintf_r+0x11a>
 8007c86:	2300      	movs	r3, #0
 8007c88:	f04f 0c0a 	mov.w	ip, #10
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	3401      	adds	r4, #1
 8007c90:	9305      	str	r3, [sp, #20]
 8007c92:	4620      	mov	r0, r4
 8007c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c98:	3a30      	subs	r2, #48	; 0x30
 8007c9a:	2a09      	cmp	r2, #9
 8007c9c:	d903      	bls.n	8007ca6 <_vfiprintf_r+0x1ee>
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0c5      	beq.n	8007c2e <_vfiprintf_r+0x176>
 8007ca2:	9105      	str	r1, [sp, #20]
 8007ca4:	e7c3      	b.n	8007c2e <_vfiprintf_r+0x176>
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	2301      	movs	r3, #1
 8007caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cae:	e7f0      	b.n	8007c92 <_vfiprintf_r+0x1da>
 8007cb0:	ab03      	add	r3, sp, #12
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	462a      	mov	r2, r5
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	4b16      	ldr	r3, [pc, #88]	; (8007d14 <_vfiprintf_r+0x25c>)
 8007cba:	a904      	add	r1, sp, #16
 8007cbc:	f3af 8000 	nop.w
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	1c78      	adds	r0, r7, #1
 8007cc4:	d1d6      	bne.n	8007c74 <_vfiprintf_r+0x1bc>
 8007cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cc8:	07d9      	lsls	r1, r3, #31
 8007cca:	d405      	bmi.n	8007cd8 <_vfiprintf_r+0x220>
 8007ccc:	89ab      	ldrh	r3, [r5, #12]
 8007cce:	059a      	lsls	r2, r3, #22
 8007cd0:	d402      	bmi.n	8007cd8 <_vfiprintf_r+0x220>
 8007cd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cd4:	f7ff fe33 	bl	800793e <__retarget_lock_release_recursive>
 8007cd8:	89ab      	ldrh	r3, [r5, #12]
 8007cda:	065b      	lsls	r3, r3, #25
 8007cdc:	f53f af12 	bmi.w	8007b04 <_vfiprintf_r+0x4c>
 8007ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ce2:	e711      	b.n	8007b08 <_vfiprintf_r+0x50>
 8007ce4:	ab03      	add	r3, sp, #12
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	462a      	mov	r2, r5
 8007cea:	4630      	mov	r0, r6
 8007cec:	4b09      	ldr	r3, [pc, #36]	; (8007d14 <_vfiprintf_r+0x25c>)
 8007cee:	a904      	add	r1, sp, #16
 8007cf0:	f000 f882 	bl	8007df8 <_printf_i>
 8007cf4:	e7e4      	b.n	8007cc0 <_vfiprintf_r+0x208>
 8007cf6:	bf00      	nop
 8007cf8:	080086fc 	.word	0x080086fc
 8007cfc:	0800871c 	.word	0x0800871c
 8007d00:	080086dc 	.word	0x080086dc
 8007d04:	0800873c 	.word	0x0800873c
 8007d08:	08008742 	.word	0x08008742
 8007d0c:	08008746 	.word	0x08008746
 8007d10:	00000000 	.word	0x00000000
 8007d14:	08007a93 	.word	0x08007a93

08007d18 <_printf_common>:
 8007d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d1c:	4616      	mov	r6, r2
 8007d1e:	4699      	mov	r9, r3
 8007d20:	688a      	ldr	r2, [r1, #8]
 8007d22:	690b      	ldr	r3, [r1, #16]
 8007d24:	4607      	mov	r7, r0
 8007d26:	4293      	cmp	r3, r2
 8007d28:	bfb8      	it	lt
 8007d2a:	4613      	movlt	r3, r2
 8007d2c:	6033      	str	r3, [r6, #0]
 8007d2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d32:	460c      	mov	r4, r1
 8007d34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d38:	b10a      	cbz	r2, 8007d3e <_printf_common+0x26>
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	6033      	str	r3, [r6, #0]
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	0699      	lsls	r1, r3, #26
 8007d42:	bf42      	ittt	mi
 8007d44:	6833      	ldrmi	r3, [r6, #0]
 8007d46:	3302      	addmi	r3, #2
 8007d48:	6033      	strmi	r3, [r6, #0]
 8007d4a:	6825      	ldr	r5, [r4, #0]
 8007d4c:	f015 0506 	ands.w	r5, r5, #6
 8007d50:	d106      	bne.n	8007d60 <_printf_common+0x48>
 8007d52:	f104 0a19 	add.w	sl, r4, #25
 8007d56:	68e3      	ldr	r3, [r4, #12]
 8007d58:	6832      	ldr	r2, [r6, #0]
 8007d5a:	1a9b      	subs	r3, r3, r2
 8007d5c:	42ab      	cmp	r3, r5
 8007d5e:	dc28      	bgt.n	8007db2 <_printf_common+0x9a>
 8007d60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d64:	1e13      	subs	r3, r2, #0
 8007d66:	6822      	ldr	r2, [r4, #0]
 8007d68:	bf18      	it	ne
 8007d6a:	2301      	movne	r3, #1
 8007d6c:	0692      	lsls	r2, r2, #26
 8007d6e:	d42d      	bmi.n	8007dcc <_printf_common+0xb4>
 8007d70:	4649      	mov	r1, r9
 8007d72:	4638      	mov	r0, r7
 8007d74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d78:	47c0      	blx	r8
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d020      	beq.n	8007dc0 <_printf_common+0xa8>
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	68e5      	ldr	r5, [r4, #12]
 8007d82:	f003 0306 	and.w	r3, r3, #6
 8007d86:	2b04      	cmp	r3, #4
 8007d88:	bf18      	it	ne
 8007d8a:	2500      	movne	r5, #0
 8007d8c:	6832      	ldr	r2, [r6, #0]
 8007d8e:	f04f 0600 	mov.w	r6, #0
 8007d92:	68a3      	ldr	r3, [r4, #8]
 8007d94:	bf08      	it	eq
 8007d96:	1aad      	subeq	r5, r5, r2
 8007d98:	6922      	ldr	r2, [r4, #16]
 8007d9a:	bf08      	it	eq
 8007d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007da0:	4293      	cmp	r3, r2
 8007da2:	bfc4      	itt	gt
 8007da4:	1a9b      	subgt	r3, r3, r2
 8007da6:	18ed      	addgt	r5, r5, r3
 8007da8:	341a      	adds	r4, #26
 8007daa:	42b5      	cmp	r5, r6
 8007dac:	d11a      	bne.n	8007de4 <_printf_common+0xcc>
 8007dae:	2000      	movs	r0, #0
 8007db0:	e008      	b.n	8007dc4 <_printf_common+0xac>
 8007db2:	2301      	movs	r3, #1
 8007db4:	4652      	mov	r2, sl
 8007db6:	4649      	mov	r1, r9
 8007db8:	4638      	mov	r0, r7
 8007dba:	47c0      	blx	r8
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d103      	bne.n	8007dc8 <_printf_common+0xb0>
 8007dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc8:	3501      	adds	r5, #1
 8007dca:	e7c4      	b.n	8007d56 <_printf_common+0x3e>
 8007dcc:	2030      	movs	r0, #48	; 0x30
 8007dce:	18e1      	adds	r1, r4, r3
 8007dd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dda:	4422      	add	r2, r4
 8007ddc:	3302      	adds	r3, #2
 8007dde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007de2:	e7c5      	b.n	8007d70 <_printf_common+0x58>
 8007de4:	2301      	movs	r3, #1
 8007de6:	4622      	mov	r2, r4
 8007de8:	4649      	mov	r1, r9
 8007dea:	4638      	mov	r0, r7
 8007dec:	47c0      	blx	r8
 8007dee:	3001      	adds	r0, #1
 8007df0:	d0e6      	beq.n	8007dc0 <_printf_common+0xa8>
 8007df2:	3601      	adds	r6, #1
 8007df4:	e7d9      	b.n	8007daa <_printf_common+0x92>
	...

08007df8 <_printf_i>:
 8007df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dfc:	7e0f      	ldrb	r7, [r1, #24]
 8007dfe:	4691      	mov	r9, r2
 8007e00:	2f78      	cmp	r7, #120	; 0x78
 8007e02:	4680      	mov	r8, r0
 8007e04:	460c      	mov	r4, r1
 8007e06:	469a      	mov	sl, r3
 8007e08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e0e:	d807      	bhi.n	8007e20 <_printf_i+0x28>
 8007e10:	2f62      	cmp	r7, #98	; 0x62
 8007e12:	d80a      	bhi.n	8007e2a <_printf_i+0x32>
 8007e14:	2f00      	cmp	r7, #0
 8007e16:	f000 80d9 	beq.w	8007fcc <_printf_i+0x1d4>
 8007e1a:	2f58      	cmp	r7, #88	; 0x58
 8007e1c:	f000 80a4 	beq.w	8007f68 <_printf_i+0x170>
 8007e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e28:	e03a      	b.n	8007ea0 <_printf_i+0xa8>
 8007e2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e2e:	2b15      	cmp	r3, #21
 8007e30:	d8f6      	bhi.n	8007e20 <_printf_i+0x28>
 8007e32:	a101      	add	r1, pc, #4	; (adr r1, 8007e38 <_printf_i+0x40>)
 8007e34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e38:	08007e91 	.word	0x08007e91
 8007e3c:	08007ea5 	.word	0x08007ea5
 8007e40:	08007e21 	.word	0x08007e21
 8007e44:	08007e21 	.word	0x08007e21
 8007e48:	08007e21 	.word	0x08007e21
 8007e4c:	08007e21 	.word	0x08007e21
 8007e50:	08007ea5 	.word	0x08007ea5
 8007e54:	08007e21 	.word	0x08007e21
 8007e58:	08007e21 	.word	0x08007e21
 8007e5c:	08007e21 	.word	0x08007e21
 8007e60:	08007e21 	.word	0x08007e21
 8007e64:	08007fb3 	.word	0x08007fb3
 8007e68:	08007ed5 	.word	0x08007ed5
 8007e6c:	08007f95 	.word	0x08007f95
 8007e70:	08007e21 	.word	0x08007e21
 8007e74:	08007e21 	.word	0x08007e21
 8007e78:	08007fd5 	.word	0x08007fd5
 8007e7c:	08007e21 	.word	0x08007e21
 8007e80:	08007ed5 	.word	0x08007ed5
 8007e84:	08007e21 	.word	0x08007e21
 8007e88:	08007e21 	.word	0x08007e21
 8007e8c:	08007f9d 	.word	0x08007f9d
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	1d1a      	adds	r2, r3, #4
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	602a      	str	r2, [r5, #0]
 8007e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e0a4      	b.n	8007fee <_printf_i+0x1f6>
 8007ea4:	6820      	ldr	r0, [r4, #0]
 8007ea6:	6829      	ldr	r1, [r5, #0]
 8007ea8:	0606      	lsls	r6, r0, #24
 8007eaa:	f101 0304 	add.w	r3, r1, #4
 8007eae:	d50a      	bpl.n	8007ec6 <_printf_i+0xce>
 8007eb0:	680e      	ldr	r6, [r1, #0]
 8007eb2:	602b      	str	r3, [r5, #0]
 8007eb4:	2e00      	cmp	r6, #0
 8007eb6:	da03      	bge.n	8007ec0 <_printf_i+0xc8>
 8007eb8:	232d      	movs	r3, #45	; 0x2d
 8007eba:	4276      	negs	r6, r6
 8007ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ec0:	230a      	movs	r3, #10
 8007ec2:	485e      	ldr	r0, [pc, #376]	; (800803c <_printf_i+0x244>)
 8007ec4:	e019      	b.n	8007efa <_printf_i+0x102>
 8007ec6:	680e      	ldr	r6, [r1, #0]
 8007ec8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ecc:	602b      	str	r3, [r5, #0]
 8007ece:	bf18      	it	ne
 8007ed0:	b236      	sxthne	r6, r6
 8007ed2:	e7ef      	b.n	8007eb4 <_printf_i+0xbc>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	6820      	ldr	r0, [r4, #0]
 8007ed8:	1d19      	adds	r1, r3, #4
 8007eda:	6029      	str	r1, [r5, #0]
 8007edc:	0601      	lsls	r1, r0, #24
 8007ede:	d501      	bpl.n	8007ee4 <_printf_i+0xec>
 8007ee0:	681e      	ldr	r6, [r3, #0]
 8007ee2:	e002      	b.n	8007eea <_printf_i+0xf2>
 8007ee4:	0646      	lsls	r6, r0, #25
 8007ee6:	d5fb      	bpl.n	8007ee0 <_printf_i+0xe8>
 8007ee8:	881e      	ldrh	r6, [r3, #0]
 8007eea:	2f6f      	cmp	r7, #111	; 0x6f
 8007eec:	bf0c      	ite	eq
 8007eee:	2308      	moveq	r3, #8
 8007ef0:	230a      	movne	r3, #10
 8007ef2:	4852      	ldr	r0, [pc, #328]	; (800803c <_printf_i+0x244>)
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007efa:	6865      	ldr	r5, [r4, #4]
 8007efc:	2d00      	cmp	r5, #0
 8007efe:	bfa8      	it	ge
 8007f00:	6821      	ldrge	r1, [r4, #0]
 8007f02:	60a5      	str	r5, [r4, #8]
 8007f04:	bfa4      	itt	ge
 8007f06:	f021 0104 	bicge.w	r1, r1, #4
 8007f0a:	6021      	strge	r1, [r4, #0]
 8007f0c:	b90e      	cbnz	r6, 8007f12 <_printf_i+0x11a>
 8007f0e:	2d00      	cmp	r5, #0
 8007f10:	d04d      	beq.n	8007fae <_printf_i+0x1b6>
 8007f12:	4615      	mov	r5, r2
 8007f14:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f18:	fb03 6711 	mls	r7, r3, r1, r6
 8007f1c:	5dc7      	ldrb	r7, [r0, r7]
 8007f1e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f22:	4637      	mov	r7, r6
 8007f24:	42bb      	cmp	r3, r7
 8007f26:	460e      	mov	r6, r1
 8007f28:	d9f4      	bls.n	8007f14 <_printf_i+0x11c>
 8007f2a:	2b08      	cmp	r3, #8
 8007f2c:	d10b      	bne.n	8007f46 <_printf_i+0x14e>
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	07de      	lsls	r6, r3, #31
 8007f32:	d508      	bpl.n	8007f46 <_printf_i+0x14e>
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	6861      	ldr	r1, [r4, #4]
 8007f38:	4299      	cmp	r1, r3
 8007f3a:	bfde      	ittt	le
 8007f3c:	2330      	movle	r3, #48	; 0x30
 8007f3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f42:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007f46:	1b52      	subs	r2, r2, r5
 8007f48:	6122      	str	r2, [r4, #16]
 8007f4a:	464b      	mov	r3, r9
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	4640      	mov	r0, r8
 8007f50:	f8cd a000 	str.w	sl, [sp]
 8007f54:	aa03      	add	r2, sp, #12
 8007f56:	f7ff fedf 	bl	8007d18 <_printf_common>
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d14c      	bne.n	8007ff8 <_printf_i+0x200>
 8007f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f62:	b004      	add	sp, #16
 8007f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f68:	4834      	ldr	r0, [pc, #208]	; (800803c <_printf_i+0x244>)
 8007f6a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f6e:	6829      	ldr	r1, [r5, #0]
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f76:	6029      	str	r1, [r5, #0]
 8007f78:	061d      	lsls	r5, r3, #24
 8007f7a:	d514      	bpl.n	8007fa6 <_printf_i+0x1ae>
 8007f7c:	07df      	lsls	r7, r3, #31
 8007f7e:	bf44      	itt	mi
 8007f80:	f043 0320 	orrmi.w	r3, r3, #32
 8007f84:	6023      	strmi	r3, [r4, #0]
 8007f86:	b91e      	cbnz	r6, 8007f90 <_printf_i+0x198>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	f023 0320 	bic.w	r3, r3, #32
 8007f8e:	6023      	str	r3, [r4, #0]
 8007f90:	2310      	movs	r3, #16
 8007f92:	e7af      	b.n	8007ef4 <_printf_i+0xfc>
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	f043 0320 	orr.w	r3, r3, #32
 8007f9a:	6023      	str	r3, [r4, #0]
 8007f9c:	2378      	movs	r3, #120	; 0x78
 8007f9e:	4828      	ldr	r0, [pc, #160]	; (8008040 <_printf_i+0x248>)
 8007fa0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fa4:	e7e3      	b.n	8007f6e <_printf_i+0x176>
 8007fa6:	0659      	lsls	r1, r3, #25
 8007fa8:	bf48      	it	mi
 8007faa:	b2b6      	uxthmi	r6, r6
 8007fac:	e7e6      	b.n	8007f7c <_printf_i+0x184>
 8007fae:	4615      	mov	r5, r2
 8007fb0:	e7bb      	b.n	8007f2a <_printf_i+0x132>
 8007fb2:	682b      	ldr	r3, [r5, #0]
 8007fb4:	6826      	ldr	r6, [r4, #0]
 8007fb6:	1d18      	adds	r0, r3, #4
 8007fb8:	6961      	ldr	r1, [r4, #20]
 8007fba:	6028      	str	r0, [r5, #0]
 8007fbc:	0635      	lsls	r5, r6, #24
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	d501      	bpl.n	8007fc6 <_printf_i+0x1ce>
 8007fc2:	6019      	str	r1, [r3, #0]
 8007fc4:	e002      	b.n	8007fcc <_printf_i+0x1d4>
 8007fc6:	0670      	lsls	r0, r6, #25
 8007fc8:	d5fb      	bpl.n	8007fc2 <_printf_i+0x1ca>
 8007fca:	8019      	strh	r1, [r3, #0]
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4615      	mov	r5, r2
 8007fd0:	6123      	str	r3, [r4, #16]
 8007fd2:	e7ba      	b.n	8007f4a <_printf_i+0x152>
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	1d1a      	adds	r2, r3, #4
 8007fda:	602a      	str	r2, [r5, #0]
 8007fdc:	681d      	ldr	r5, [r3, #0]
 8007fde:	6862      	ldr	r2, [r4, #4]
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f000 fa9b 	bl	800851c <memchr>
 8007fe6:	b108      	cbz	r0, 8007fec <_printf_i+0x1f4>
 8007fe8:	1b40      	subs	r0, r0, r5
 8007fea:	6060      	str	r0, [r4, #4]
 8007fec:	6863      	ldr	r3, [r4, #4]
 8007fee:	6123      	str	r3, [r4, #16]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ff6:	e7a8      	b.n	8007f4a <_printf_i+0x152>
 8007ff8:	462a      	mov	r2, r5
 8007ffa:	4649      	mov	r1, r9
 8007ffc:	4640      	mov	r0, r8
 8007ffe:	6923      	ldr	r3, [r4, #16]
 8008000:	47d0      	blx	sl
 8008002:	3001      	adds	r0, #1
 8008004:	d0ab      	beq.n	8007f5e <_printf_i+0x166>
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	079b      	lsls	r3, r3, #30
 800800a:	d413      	bmi.n	8008034 <_printf_i+0x23c>
 800800c:	68e0      	ldr	r0, [r4, #12]
 800800e:	9b03      	ldr	r3, [sp, #12]
 8008010:	4298      	cmp	r0, r3
 8008012:	bfb8      	it	lt
 8008014:	4618      	movlt	r0, r3
 8008016:	e7a4      	b.n	8007f62 <_printf_i+0x16a>
 8008018:	2301      	movs	r3, #1
 800801a:	4632      	mov	r2, r6
 800801c:	4649      	mov	r1, r9
 800801e:	4640      	mov	r0, r8
 8008020:	47d0      	blx	sl
 8008022:	3001      	adds	r0, #1
 8008024:	d09b      	beq.n	8007f5e <_printf_i+0x166>
 8008026:	3501      	adds	r5, #1
 8008028:	68e3      	ldr	r3, [r4, #12]
 800802a:	9903      	ldr	r1, [sp, #12]
 800802c:	1a5b      	subs	r3, r3, r1
 800802e:	42ab      	cmp	r3, r5
 8008030:	dcf2      	bgt.n	8008018 <_printf_i+0x220>
 8008032:	e7eb      	b.n	800800c <_printf_i+0x214>
 8008034:	2500      	movs	r5, #0
 8008036:	f104 0619 	add.w	r6, r4, #25
 800803a:	e7f5      	b.n	8008028 <_printf_i+0x230>
 800803c:	0800874d 	.word	0x0800874d
 8008040:	0800875e 	.word	0x0800875e

08008044 <_sbrk_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	2300      	movs	r3, #0
 8008048:	4d05      	ldr	r5, [pc, #20]	; (8008060 <_sbrk_r+0x1c>)
 800804a:	4604      	mov	r4, r0
 800804c:	4608      	mov	r0, r1
 800804e:	602b      	str	r3, [r5, #0]
 8008050:	f7f8 fb86 	bl	8000760 <_sbrk>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d102      	bne.n	800805e <_sbrk_r+0x1a>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	b103      	cbz	r3, 800805e <_sbrk_r+0x1a>
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	200013c0 	.word	0x200013c0

08008064 <__sread>:
 8008064:	b510      	push	{r4, lr}
 8008066:	460c      	mov	r4, r1
 8008068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800806c:	f000 fab8 	bl	80085e0 <_read_r>
 8008070:	2800      	cmp	r0, #0
 8008072:	bfab      	itete	ge
 8008074:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008076:	89a3      	ldrhlt	r3, [r4, #12]
 8008078:	181b      	addge	r3, r3, r0
 800807a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800807e:	bfac      	ite	ge
 8008080:	6563      	strge	r3, [r4, #84]	; 0x54
 8008082:	81a3      	strhlt	r3, [r4, #12]
 8008084:	bd10      	pop	{r4, pc}

08008086 <__swrite>:
 8008086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800808a:	461f      	mov	r7, r3
 800808c:	898b      	ldrh	r3, [r1, #12]
 800808e:	4605      	mov	r5, r0
 8008090:	05db      	lsls	r3, r3, #23
 8008092:	460c      	mov	r4, r1
 8008094:	4616      	mov	r6, r2
 8008096:	d505      	bpl.n	80080a4 <__swrite+0x1e>
 8008098:	2302      	movs	r3, #2
 800809a:	2200      	movs	r2, #0
 800809c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a0:	f000 f9c4 	bl	800842c <_lseek_r>
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	4632      	mov	r2, r6
 80080a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080ac:	81a3      	strh	r3, [r4, #12]
 80080ae:	4628      	mov	r0, r5
 80080b0:	463b      	mov	r3, r7
 80080b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ba:	f000 b869 	b.w	8008190 <_write_r>

080080be <__sseek>:
 80080be:	b510      	push	{r4, lr}
 80080c0:	460c      	mov	r4, r1
 80080c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c6:	f000 f9b1 	bl	800842c <_lseek_r>
 80080ca:	1c43      	adds	r3, r0, #1
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	bf15      	itete	ne
 80080d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80080d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080da:	81a3      	strheq	r3, [r4, #12]
 80080dc:	bf18      	it	ne
 80080de:	81a3      	strhne	r3, [r4, #12]
 80080e0:	bd10      	pop	{r4, pc}

080080e2 <__sclose>:
 80080e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e6:	f000 b8d3 	b.w	8008290 <_close_r>
	...

080080ec <__swbuf_r>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	460e      	mov	r6, r1
 80080f0:	4614      	mov	r4, r2
 80080f2:	4605      	mov	r5, r0
 80080f4:	b118      	cbz	r0, 80080fe <__swbuf_r+0x12>
 80080f6:	6983      	ldr	r3, [r0, #24]
 80080f8:	b90b      	cbnz	r3, 80080fe <__swbuf_r+0x12>
 80080fa:	f7ff fb81 	bl	8007800 <__sinit>
 80080fe:	4b21      	ldr	r3, [pc, #132]	; (8008184 <__swbuf_r+0x98>)
 8008100:	429c      	cmp	r4, r3
 8008102:	d12b      	bne.n	800815c <__swbuf_r+0x70>
 8008104:	686c      	ldr	r4, [r5, #4]
 8008106:	69a3      	ldr	r3, [r4, #24]
 8008108:	60a3      	str	r3, [r4, #8]
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	071a      	lsls	r2, r3, #28
 800810e:	d52f      	bpl.n	8008170 <__swbuf_r+0x84>
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	b36b      	cbz	r3, 8008170 <__swbuf_r+0x84>
 8008114:	6923      	ldr	r3, [r4, #16]
 8008116:	6820      	ldr	r0, [r4, #0]
 8008118:	b2f6      	uxtb	r6, r6
 800811a:	1ac0      	subs	r0, r0, r3
 800811c:	6963      	ldr	r3, [r4, #20]
 800811e:	4637      	mov	r7, r6
 8008120:	4283      	cmp	r3, r0
 8008122:	dc04      	bgt.n	800812e <__swbuf_r+0x42>
 8008124:	4621      	mov	r1, r4
 8008126:	4628      	mov	r0, r5
 8008128:	f000 f944 	bl	80083b4 <_fflush_r>
 800812c:	bb30      	cbnz	r0, 800817c <__swbuf_r+0x90>
 800812e:	68a3      	ldr	r3, [r4, #8]
 8008130:	3001      	adds	r0, #1
 8008132:	3b01      	subs	r3, #1
 8008134:	60a3      	str	r3, [r4, #8]
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	6022      	str	r2, [r4, #0]
 800813c:	701e      	strb	r6, [r3, #0]
 800813e:	6963      	ldr	r3, [r4, #20]
 8008140:	4283      	cmp	r3, r0
 8008142:	d004      	beq.n	800814e <__swbuf_r+0x62>
 8008144:	89a3      	ldrh	r3, [r4, #12]
 8008146:	07db      	lsls	r3, r3, #31
 8008148:	d506      	bpl.n	8008158 <__swbuf_r+0x6c>
 800814a:	2e0a      	cmp	r6, #10
 800814c:	d104      	bne.n	8008158 <__swbuf_r+0x6c>
 800814e:	4621      	mov	r1, r4
 8008150:	4628      	mov	r0, r5
 8008152:	f000 f92f 	bl	80083b4 <_fflush_r>
 8008156:	b988      	cbnz	r0, 800817c <__swbuf_r+0x90>
 8008158:	4638      	mov	r0, r7
 800815a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800815c:	4b0a      	ldr	r3, [pc, #40]	; (8008188 <__swbuf_r+0x9c>)
 800815e:	429c      	cmp	r4, r3
 8008160:	d101      	bne.n	8008166 <__swbuf_r+0x7a>
 8008162:	68ac      	ldr	r4, [r5, #8]
 8008164:	e7cf      	b.n	8008106 <__swbuf_r+0x1a>
 8008166:	4b09      	ldr	r3, [pc, #36]	; (800818c <__swbuf_r+0xa0>)
 8008168:	429c      	cmp	r4, r3
 800816a:	bf08      	it	eq
 800816c:	68ec      	ldreq	r4, [r5, #12]
 800816e:	e7ca      	b.n	8008106 <__swbuf_r+0x1a>
 8008170:	4621      	mov	r1, r4
 8008172:	4628      	mov	r0, r5
 8008174:	f000 f81e 	bl	80081b4 <__swsetup_r>
 8008178:	2800      	cmp	r0, #0
 800817a:	d0cb      	beq.n	8008114 <__swbuf_r+0x28>
 800817c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008180:	e7ea      	b.n	8008158 <__swbuf_r+0x6c>
 8008182:	bf00      	nop
 8008184:	080086fc 	.word	0x080086fc
 8008188:	0800871c 	.word	0x0800871c
 800818c:	080086dc 	.word	0x080086dc

08008190 <_write_r>:
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	4611      	mov	r1, r2
 8008198:	2200      	movs	r2, #0
 800819a:	4d05      	ldr	r5, [pc, #20]	; (80081b0 <_write_r+0x20>)
 800819c:	602a      	str	r2, [r5, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	f7f8 fa91 	bl	80006c6 <_write>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d102      	bne.n	80081ae <_write_r+0x1e>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	b103      	cbz	r3, 80081ae <_write_r+0x1e>
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	200013c0 	.word	0x200013c0

080081b4 <__swsetup_r>:
 80081b4:	4b32      	ldr	r3, [pc, #200]	; (8008280 <__swsetup_r+0xcc>)
 80081b6:	b570      	push	{r4, r5, r6, lr}
 80081b8:	681d      	ldr	r5, [r3, #0]
 80081ba:	4606      	mov	r6, r0
 80081bc:	460c      	mov	r4, r1
 80081be:	b125      	cbz	r5, 80081ca <__swsetup_r+0x16>
 80081c0:	69ab      	ldr	r3, [r5, #24]
 80081c2:	b913      	cbnz	r3, 80081ca <__swsetup_r+0x16>
 80081c4:	4628      	mov	r0, r5
 80081c6:	f7ff fb1b 	bl	8007800 <__sinit>
 80081ca:	4b2e      	ldr	r3, [pc, #184]	; (8008284 <__swsetup_r+0xd0>)
 80081cc:	429c      	cmp	r4, r3
 80081ce:	d10f      	bne.n	80081f0 <__swsetup_r+0x3c>
 80081d0:	686c      	ldr	r4, [r5, #4]
 80081d2:	89a3      	ldrh	r3, [r4, #12]
 80081d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081d8:	0719      	lsls	r1, r3, #28
 80081da:	d42c      	bmi.n	8008236 <__swsetup_r+0x82>
 80081dc:	06dd      	lsls	r5, r3, #27
 80081de:	d411      	bmi.n	8008204 <__swsetup_r+0x50>
 80081e0:	2309      	movs	r3, #9
 80081e2:	6033      	str	r3, [r6, #0]
 80081e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081ec:	81a3      	strh	r3, [r4, #12]
 80081ee:	e03e      	b.n	800826e <__swsetup_r+0xba>
 80081f0:	4b25      	ldr	r3, [pc, #148]	; (8008288 <__swsetup_r+0xd4>)
 80081f2:	429c      	cmp	r4, r3
 80081f4:	d101      	bne.n	80081fa <__swsetup_r+0x46>
 80081f6:	68ac      	ldr	r4, [r5, #8]
 80081f8:	e7eb      	b.n	80081d2 <__swsetup_r+0x1e>
 80081fa:	4b24      	ldr	r3, [pc, #144]	; (800828c <__swsetup_r+0xd8>)
 80081fc:	429c      	cmp	r4, r3
 80081fe:	bf08      	it	eq
 8008200:	68ec      	ldreq	r4, [r5, #12]
 8008202:	e7e6      	b.n	80081d2 <__swsetup_r+0x1e>
 8008204:	0758      	lsls	r0, r3, #29
 8008206:	d512      	bpl.n	800822e <__swsetup_r+0x7a>
 8008208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800820a:	b141      	cbz	r1, 800821e <__swsetup_r+0x6a>
 800820c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008210:	4299      	cmp	r1, r3
 8008212:	d002      	beq.n	800821a <__swsetup_r+0x66>
 8008214:	4630      	mov	r0, r6
 8008216:	f000 f99b 	bl	8008550 <_free_r>
 800821a:	2300      	movs	r3, #0
 800821c:	6363      	str	r3, [r4, #52]	; 0x34
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008224:	81a3      	strh	r3, [r4, #12]
 8008226:	2300      	movs	r3, #0
 8008228:	6063      	str	r3, [r4, #4]
 800822a:	6923      	ldr	r3, [r4, #16]
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	89a3      	ldrh	r3, [r4, #12]
 8008230:	f043 0308 	orr.w	r3, r3, #8
 8008234:	81a3      	strh	r3, [r4, #12]
 8008236:	6923      	ldr	r3, [r4, #16]
 8008238:	b94b      	cbnz	r3, 800824e <__swsetup_r+0x9a>
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008244:	d003      	beq.n	800824e <__swsetup_r+0x9a>
 8008246:	4621      	mov	r1, r4
 8008248:	4630      	mov	r0, r6
 800824a:	f000 f927 	bl	800849c <__smakebuf_r>
 800824e:	89a0      	ldrh	r0, [r4, #12]
 8008250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008254:	f010 0301 	ands.w	r3, r0, #1
 8008258:	d00a      	beq.n	8008270 <__swsetup_r+0xbc>
 800825a:	2300      	movs	r3, #0
 800825c:	60a3      	str	r3, [r4, #8]
 800825e:	6963      	ldr	r3, [r4, #20]
 8008260:	425b      	negs	r3, r3
 8008262:	61a3      	str	r3, [r4, #24]
 8008264:	6923      	ldr	r3, [r4, #16]
 8008266:	b943      	cbnz	r3, 800827a <__swsetup_r+0xc6>
 8008268:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800826c:	d1ba      	bne.n	80081e4 <__swsetup_r+0x30>
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	0781      	lsls	r1, r0, #30
 8008272:	bf58      	it	pl
 8008274:	6963      	ldrpl	r3, [r4, #20]
 8008276:	60a3      	str	r3, [r4, #8]
 8008278:	e7f4      	b.n	8008264 <__swsetup_r+0xb0>
 800827a:	2000      	movs	r0, #0
 800827c:	e7f7      	b.n	800826e <__swsetup_r+0xba>
 800827e:	bf00      	nop
 8008280:	20000180 	.word	0x20000180
 8008284:	080086fc 	.word	0x080086fc
 8008288:	0800871c 	.word	0x0800871c
 800828c:	080086dc 	.word	0x080086dc

08008290 <_close_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	2300      	movs	r3, #0
 8008294:	4d05      	ldr	r5, [pc, #20]	; (80082ac <_close_r+0x1c>)
 8008296:	4604      	mov	r4, r0
 8008298:	4608      	mov	r0, r1
 800829a:	602b      	str	r3, [r5, #0]
 800829c:	f7f8 fa2f 	bl	80006fe <_close>
 80082a0:	1c43      	adds	r3, r0, #1
 80082a2:	d102      	bne.n	80082aa <_close_r+0x1a>
 80082a4:	682b      	ldr	r3, [r5, #0]
 80082a6:	b103      	cbz	r3, 80082aa <_close_r+0x1a>
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	bd38      	pop	{r3, r4, r5, pc}
 80082ac:	200013c0 	.word	0x200013c0

080082b0 <__sflush_r>:
 80082b0:	898a      	ldrh	r2, [r1, #12]
 80082b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b4:	4605      	mov	r5, r0
 80082b6:	0710      	lsls	r0, r2, #28
 80082b8:	460c      	mov	r4, r1
 80082ba:	d457      	bmi.n	800836c <__sflush_r+0xbc>
 80082bc:	684b      	ldr	r3, [r1, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	dc04      	bgt.n	80082cc <__sflush_r+0x1c>
 80082c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	dc01      	bgt.n	80082cc <__sflush_r+0x1c>
 80082c8:	2000      	movs	r0, #0
 80082ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082ce:	2e00      	cmp	r6, #0
 80082d0:	d0fa      	beq.n	80082c8 <__sflush_r+0x18>
 80082d2:	2300      	movs	r3, #0
 80082d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082d8:	682f      	ldr	r7, [r5, #0]
 80082da:	602b      	str	r3, [r5, #0]
 80082dc:	d032      	beq.n	8008344 <__sflush_r+0x94>
 80082de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	075a      	lsls	r2, r3, #29
 80082e4:	d505      	bpl.n	80082f2 <__sflush_r+0x42>
 80082e6:	6863      	ldr	r3, [r4, #4]
 80082e8:	1ac0      	subs	r0, r0, r3
 80082ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082ec:	b10b      	cbz	r3, 80082f2 <__sflush_r+0x42>
 80082ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082f0:	1ac0      	subs	r0, r0, r3
 80082f2:	2300      	movs	r3, #0
 80082f4:	4602      	mov	r2, r0
 80082f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082f8:	4628      	mov	r0, r5
 80082fa:	6a21      	ldr	r1, [r4, #32]
 80082fc:	47b0      	blx	r6
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	d106      	bne.n	8008312 <__sflush_r+0x62>
 8008304:	6829      	ldr	r1, [r5, #0]
 8008306:	291d      	cmp	r1, #29
 8008308:	d82c      	bhi.n	8008364 <__sflush_r+0xb4>
 800830a:	4a29      	ldr	r2, [pc, #164]	; (80083b0 <__sflush_r+0x100>)
 800830c:	40ca      	lsrs	r2, r1
 800830e:	07d6      	lsls	r6, r2, #31
 8008310:	d528      	bpl.n	8008364 <__sflush_r+0xb4>
 8008312:	2200      	movs	r2, #0
 8008314:	6062      	str	r2, [r4, #4]
 8008316:	6922      	ldr	r2, [r4, #16]
 8008318:	04d9      	lsls	r1, r3, #19
 800831a:	6022      	str	r2, [r4, #0]
 800831c:	d504      	bpl.n	8008328 <__sflush_r+0x78>
 800831e:	1c42      	adds	r2, r0, #1
 8008320:	d101      	bne.n	8008326 <__sflush_r+0x76>
 8008322:	682b      	ldr	r3, [r5, #0]
 8008324:	b903      	cbnz	r3, 8008328 <__sflush_r+0x78>
 8008326:	6560      	str	r0, [r4, #84]	; 0x54
 8008328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800832a:	602f      	str	r7, [r5, #0]
 800832c:	2900      	cmp	r1, #0
 800832e:	d0cb      	beq.n	80082c8 <__sflush_r+0x18>
 8008330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008334:	4299      	cmp	r1, r3
 8008336:	d002      	beq.n	800833e <__sflush_r+0x8e>
 8008338:	4628      	mov	r0, r5
 800833a:	f000 f909 	bl	8008550 <_free_r>
 800833e:	2000      	movs	r0, #0
 8008340:	6360      	str	r0, [r4, #52]	; 0x34
 8008342:	e7c2      	b.n	80082ca <__sflush_r+0x1a>
 8008344:	6a21      	ldr	r1, [r4, #32]
 8008346:	2301      	movs	r3, #1
 8008348:	4628      	mov	r0, r5
 800834a:	47b0      	blx	r6
 800834c:	1c41      	adds	r1, r0, #1
 800834e:	d1c7      	bne.n	80082e0 <__sflush_r+0x30>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0c4      	beq.n	80082e0 <__sflush_r+0x30>
 8008356:	2b1d      	cmp	r3, #29
 8008358:	d001      	beq.n	800835e <__sflush_r+0xae>
 800835a:	2b16      	cmp	r3, #22
 800835c:	d101      	bne.n	8008362 <__sflush_r+0xb2>
 800835e:	602f      	str	r7, [r5, #0]
 8008360:	e7b2      	b.n	80082c8 <__sflush_r+0x18>
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008368:	81a3      	strh	r3, [r4, #12]
 800836a:	e7ae      	b.n	80082ca <__sflush_r+0x1a>
 800836c:	690f      	ldr	r7, [r1, #16]
 800836e:	2f00      	cmp	r7, #0
 8008370:	d0aa      	beq.n	80082c8 <__sflush_r+0x18>
 8008372:	0793      	lsls	r3, r2, #30
 8008374:	bf18      	it	ne
 8008376:	2300      	movne	r3, #0
 8008378:	680e      	ldr	r6, [r1, #0]
 800837a:	bf08      	it	eq
 800837c:	694b      	ldreq	r3, [r1, #20]
 800837e:	1bf6      	subs	r6, r6, r7
 8008380:	600f      	str	r7, [r1, #0]
 8008382:	608b      	str	r3, [r1, #8]
 8008384:	2e00      	cmp	r6, #0
 8008386:	dd9f      	ble.n	80082c8 <__sflush_r+0x18>
 8008388:	4633      	mov	r3, r6
 800838a:	463a      	mov	r2, r7
 800838c:	4628      	mov	r0, r5
 800838e:	6a21      	ldr	r1, [r4, #32]
 8008390:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008394:	47e0      	blx	ip
 8008396:	2800      	cmp	r0, #0
 8008398:	dc06      	bgt.n	80083a8 <__sflush_r+0xf8>
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a4:	81a3      	strh	r3, [r4, #12]
 80083a6:	e790      	b.n	80082ca <__sflush_r+0x1a>
 80083a8:	4407      	add	r7, r0
 80083aa:	1a36      	subs	r6, r6, r0
 80083ac:	e7ea      	b.n	8008384 <__sflush_r+0xd4>
 80083ae:	bf00      	nop
 80083b0:	20400001 	.word	0x20400001

080083b4 <_fflush_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	690b      	ldr	r3, [r1, #16]
 80083b8:	4605      	mov	r5, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	b913      	cbnz	r3, 80083c4 <_fflush_r+0x10>
 80083be:	2500      	movs	r5, #0
 80083c0:	4628      	mov	r0, r5
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	b118      	cbz	r0, 80083ce <_fflush_r+0x1a>
 80083c6:	6983      	ldr	r3, [r0, #24]
 80083c8:	b90b      	cbnz	r3, 80083ce <_fflush_r+0x1a>
 80083ca:	f7ff fa19 	bl	8007800 <__sinit>
 80083ce:	4b14      	ldr	r3, [pc, #80]	; (8008420 <_fflush_r+0x6c>)
 80083d0:	429c      	cmp	r4, r3
 80083d2:	d11b      	bne.n	800840c <_fflush_r+0x58>
 80083d4:	686c      	ldr	r4, [r5, #4]
 80083d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0ef      	beq.n	80083be <_fflush_r+0xa>
 80083de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083e0:	07d0      	lsls	r0, r2, #31
 80083e2:	d404      	bmi.n	80083ee <_fflush_r+0x3a>
 80083e4:	0599      	lsls	r1, r3, #22
 80083e6:	d402      	bmi.n	80083ee <_fflush_r+0x3a>
 80083e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083ea:	f7ff faa7 	bl	800793c <__retarget_lock_acquire_recursive>
 80083ee:	4628      	mov	r0, r5
 80083f0:	4621      	mov	r1, r4
 80083f2:	f7ff ff5d 	bl	80082b0 <__sflush_r>
 80083f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083f8:	4605      	mov	r5, r0
 80083fa:	07da      	lsls	r2, r3, #31
 80083fc:	d4e0      	bmi.n	80083c0 <_fflush_r+0xc>
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	059b      	lsls	r3, r3, #22
 8008402:	d4dd      	bmi.n	80083c0 <_fflush_r+0xc>
 8008404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008406:	f7ff fa9a 	bl	800793e <__retarget_lock_release_recursive>
 800840a:	e7d9      	b.n	80083c0 <_fflush_r+0xc>
 800840c:	4b05      	ldr	r3, [pc, #20]	; (8008424 <_fflush_r+0x70>)
 800840e:	429c      	cmp	r4, r3
 8008410:	d101      	bne.n	8008416 <_fflush_r+0x62>
 8008412:	68ac      	ldr	r4, [r5, #8]
 8008414:	e7df      	b.n	80083d6 <_fflush_r+0x22>
 8008416:	4b04      	ldr	r3, [pc, #16]	; (8008428 <_fflush_r+0x74>)
 8008418:	429c      	cmp	r4, r3
 800841a:	bf08      	it	eq
 800841c:	68ec      	ldreq	r4, [r5, #12]
 800841e:	e7da      	b.n	80083d6 <_fflush_r+0x22>
 8008420:	080086fc 	.word	0x080086fc
 8008424:	0800871c 	.word	0x0800871c
 8008428:	080086dc 	.word	0x080086dc

0800842c <_lseek_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4604      	mov	r4, r0
 8008430:	4608      	mov	r0, r1
 8008432:	4611      	mov	r1, r2
 8008434:	2200      	movs	r2, #0
 8008436:	4d05      	ldr	r5, [pc, #20]	; (800844c <_lseek_r+0x20>)
 8008438:	602a      	str	r2, [r5, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	f7f8 f983 	bl	8000746 <_lseek>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_lseek_r+0x1e>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_lseek_r+0x1e>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	200013c0 	.word	0x200013c0

08008450 <__swhatbuf_r>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	460e      	mov	r6, r1
 8008454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008458:	4614      	mov	r4, r2
 800845a:	2900      	cmp	r1, #0
 800845c:	461d      	mov	r5, r3
 800845e:	b096      	sub	sp, #88	; 0x58
 8008460:	da08      	bge.n	8008474 <__swhatbuf_r+0x24>
 8008462:	2200      	movs	r2, #0
 8008464:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008468:	602a      	str	r2, [r5, #0]
 800846a:	061a      	lsls	r2, r3, #24
 800846c:	d410      	bmi.n	8008490 <__swhatbuf_r+0x40>
 800846e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008472:	e00e      	b.n	8008492 <__swhatbuf_r+0x42>
 8008474:	466a      	mov	r2, sp
 8008476:	f000 f8c5 	bl	8008604 <_fstat_r>
 800847a:	2800      	cmp	r0, #0
 800847c:	dbf1      	blt.n	8008462 <__swhatbuf_r+0x12>
 800847e:	9a01      	ldr	r2, [sp, #4]
 8008480:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008484:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008488:	425a      	negs	r2, r3
 800848a:	415a      	adcs	r2, r3
 800848c:	602a      	str	r2, [r5, #0]
 800848e:	e7ee      	b.n	800846e <__swhatbuf_r+0x1e>
 8008490:	2340      	movs	r3, #64	; 0x40
 8008492:	2000      	movs	r0, #0
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	b016      	add	sp, #88	; 0x58
 8008498:	bd70      	pop	{r4, r5, r6, pc}
	...

0800849c <__smakebuf_r>:
 800849c:	898b      	ldrh	r3, [r1, #12]
 800849e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084a0:	079d      	lsls	r5, r3, #30
 80084a2:	4606      	mov	r6, r0
 80084a4:	460c      	mov	r4, r1
 80084a6:	d507      	bpl.n	80084b8 <__smakebuf_r+0x1c>
 80084a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	6123      	str	r3, [r4, #16]
 80084b0:	2301      	movs	r3, #1
 80084b2:	6163      	str	r3, [r4, #20]
 80084b4:	b002      	add	sp, #8
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
 80084b8:	466a      	mov	r2, sp
 80084ba:	ab01      	add	r3, sp, #4
 80084bc:	f7ff ffc8 	bl	8008450 <__swhatbuf_r>
 80084c0:	9900      	ldr	r1, [sp, #0]
 80084c2:	4605      	mov	r5, r0
 80084c4:	4630      	mov	r0, r6
 80084c6:	f7ff fa5b 	bl	8007980 <_malloc_r>
 80084ca:	b948      	cbnz	r0, 80084e0 <__smakebuf_r+0x44>
 80084cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084d0:	059a      	lsls	r2, r3, #22
 80084d2:	d4ef      	bmi.n	80084b4 <__smakebuf_r+0x18>
 80084d4:	f023 0303 	bic.w	r3, r3, #3
 80084d8:	f043 0302 	orr.w	r3, r3, #2
 80084dc:	81a3      	strh	r3, [r4, #12]
 80084de:	e7e3      	b.n	80084a8 <__smakebuf_r+0xc>
 80084e0:	4b0d      	ldr	r3, [pc, #52]	; (8008518 <__smakebuf_r+0x7c>)
 80084e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	6020      	str	r0, [r4, #0]
 80084e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ec:	81a3      	strh	r3, [r4, #12]
 80084ee:	9b00      	ldr	r3, [sp, #0]
 80084f0:	6120      	str	r0, [r4, #16]
 80084f2:	6163      	str	r3, [r4, #20]
 80084f4:	9b01      	ldr	r3, [sp, #4]
 80084f6:	b15b      	cbz	r3, 8008510 <__smakebuf_r+0x74>
 80084f8:	4630      	mov	r0, r6
 80084fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084fe:	f000 f893 	bl	8008628 <_isatty_r>
 8008502:	b128      	cbz	r0, 8008510 <__smakebuf_r+0x74>
 8008504:	89a3      	ldrh	r3, [r4, #12]
 8008506:	f023 0303 	bic.w	r3, r3, #3
 800850a:	f043 0301 	orr.w	r3, r3, #1
 800850e:	81a3      	strh	r3, [r4, #12]
 8008510:	89a0      	ldrh	r0, [r4, #12]
 8008512:	4305      	orrs	r5, r0
 8008514:	81a5      	strh	r5, [r4, #12]
 8008516:	e7cd      	b.n	80084b4 <__smakebuf_r+0x18>
 8008518:	08007799 	.word	0x08007799

0800851c <memchr>:
 800851c:	4603      	mov	r3, r0
 800851e:	b510      	push	{r4, lr}
 8008520:	b2c9      	uxtb	r1, r1
 8008522:	4402      	add	r2, r0
 8008524:	4293      	cmp	r3, r2
 8008526:	4618      	mov	r0, r3
 8008528:	d101      	bne.n	800852e <memchr+0x12>
 800852a:	2000      	movs	r0, #0
 800852c:	e003      	b.n	8008536 <memchr+0x1a>
 800852e:	7804      	ldrb	r4, [r0, #0]
 8008530:	3301      	adds	r3, #1
 8008532:	428c      	cmp	r4, r1
 8008534:	d1f6      	bne.n	8008524 <memchr+0x8>
 8008536:	bd10      	pop	{r4, pc}

08008538 <__malloc_lock>:
 8008538:	4801      	ldr	r0, [pc, #4]	; (8008540 <__malloc_lock+0x8>)
 800853a:	f7ff b9ff 	b.w	800793c <__retarget_lock_acquire_recursive>
 800853e:	bf00      	nop
 8008540:	200013b4 	.word	0x200013b4

08008544 <__malloc_unlock>:
 8008544:	4801      	ldr	r0, [pc, #4]	; (800854c <__malloc_unlock+0x8>)
 8008546:	f7ff b9fa 	b.w	800793e <__retarget_lock_release_recursive>
 800854a:	bf00      	nop
 800854c:	200013b4 	.word	0x200013b4

08008550 <_free_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4605      	mov	r5, r0
 8008554:	2900      	cmp	r1, #0
 8008556:	d040      	beq.n	80085da <_free_r+0x8a>
 8008558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800855c:	1f0c      	subs	r4, r1, #4
 800855e:	2b00      	cmp	r3, #0
 8008560:	bfb8      	it	lt
 8008562:	18e4      	addlt	r4, r4, r3
 8008564:	f7ff ffe8 	bl	8008538 <__malloc_lock>
 8008568:	4a1c      	ldr	r2, [pc, #112]	; (80085dc <_free_r+0x8c>)
 800856a:	6813      	ldr	r3, [r2, #0]
 800856c:	b933      	cbnz	r3, 800857c <_free_r+0x2c>
 800856e:	6063      	str	r3, [r4, #4]
 8008570:	6014      	str	r4, [r2, #0]
 8008572:	4628      	mov	r0, r5
 8008574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008578:	f7ff bfe4 	b.w	8008544 <__malloc_unlock>
 800857c:	42a3      	cmp	r3, r4
 800857e:	d908      	bls.n	8008592 <_free_r+0x42>
 8008580:	6820      	ldr	r0, [r4, #0]
 8008582:	1821      	adds	r1, r4, r0
 8008584:	428b      	cmp	r3, r1
 8008586:	bf01      	itttt	eq
 8008588:	6819      	ldreq	r1, [r3, #0]
 800858a:	685b      	ldreq	r3, [r3, #4]
 800858c:	1809      	addeq	r1, r1, r0
 800858e:	6021      	streq	r1, [r4, #0]
 8008590:	e7ed      	b.n	800856e <_free_r+0x1e>
 8008592:	461a      	mov	r2, r3
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	b10b      	cbz	r3, 800859c <_free_r+0x4c>
 8008598:	42a3      	cmp	r3, r4
 800859a:	d9fa      	bls.n	8008592 <_free_r+0x42>
 800859c:	6811      	ldr	r1, [r2, #0]
 800859e:	1850      	adds	r0, r2, r1
 80085a0:	42a0      	cmp	r0, r4
 80085a2:	d10b      	bne.n	80085bc <_free_r+0x6c>
 80085a4:	6820      	ldr	r0, [r4, #0]
 80085a6:	4401      	add	r1, r0
 80085a8:	1850      	adds	r0, r2, r1
 80085aa:	4283      	cmp	r3, r0
 80085ac:	6011      	str	r1, [r2, #0]
 80085ae:	d1e0      	bne.n	8008572 <_free_r+0x22>
 80085b0:	6818      	ldr	r0, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	4401      	add	r1, r0
 80085b6:	6011      	str	r1, [r2, #0]
 80085b8:	6053      	str	r3, [r2, #4]
 80085ba:	e7da      	b.n	8008572 <_free_r+0x22>
 80085bc:	d902      	bls.n	80085c4 <_free_r+0x74>
 80085be:	230c      	movs	r3, #12
 80085c0:	602b      	str	r3, [r5, #0]
 80085c2:	e7d6      	b.n	8008572 <_free_r+0x22>
 80085c4:	6820      	ldr	r0, [r4, #0]
 80085c6:	1821      	adds	r1, r4, r0
 80085c8:	428b      	cmp	r3, r1
 80085ca:	bf01      	itttt	eq
 80085cc:	6819      	ldreq	r1, [r3, #0]
 80085ce:	685b      	ldreq	r3, [r3, #4]
 80085d0:	1809      	addeq	r1, r1, r0
 80085d2:	6021      	streq	r1, [r4, #0]
 80085d4:	6063      	str	r3, [r4, #4]
 80085d6:	6054      	str	r4, [r2, #4]
 80085d8:	e7cb      	b.n	8008572 <_free_r+0x22>
 80085da:	bd38      	pop	{r3, r4, r5, pc}
 80085dc:	200013b8 	.word	0x200013b8

080085e0 <_read_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4604      	mov	r4, r0
 80085e4:	4608      	mov	r0, r1
 80085e6:	4611      	mov	r1, r2
 80085e8:	2200      	movs	r2, #0
 80085ea:	4d05      	ldr	r5, [pc, #20]	; (8008600 <_read_r+0x20>)
 80085ec:	602a      	str	r2, [r5, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	f7f8 f84c 	bl	800068c <_read>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	d102      	bne.n	80085fe <_read_r+0x1e>
 80085f8:	682b      	ldr	r3, [r5, #0]
 80085fa:	b103      	cbz	r3, 80085fe <_read_r+0x1e>
 80085fc:	6023      	str	r3, [r4, #0]
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	200013c0 	.word	0x200013c0

08008604 <_fstat_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	2300      	movs	r3, #0
 8008608:	4d06      	ldr	r5, [pc, #24]	; (8008624 <_fstat_r+0x20>)
 800860a:	4604      	mov	r4, r0
 800860c:	4608      	mov	r0, r1
 800860e:	4611      	mov	r1, r2
 8008610:	602b      	str	r3, [r5, #0]
 8008612:	f7f8 f87f 	bl	8000714 <_fstat>
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	d102      	bne.n	8008620 <_fstat_r+0x1c>
 800861a:	682b      	ldr	r3, [r5, #0]
 800861c:	b103      	cbz	r3, 8008620 <_fstat_r+0x1c>
 800861e:	6023      	str	r3, [r4, #0]
 8008620:	bd38      	pop	{r3, r4, r5, pc}
 8008622:	bf00      	nop
 8008624:	200013c0 	.word	0x200013c0

08008628 <_isatty_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	2300      	movs	r3, #0
 800862c:	4d05      	ldr	r5, [pc, #20]	; (8008644 <_isatty_r+0x1c>)
 800862e:	4604      	mov	r4, r0
 8008630:	4608      	mov	r0, r1
 8008632:	602b      	str	r3, [r5, #0]
 8008634:	f7f8 f87d 	bl	8000732 <_isatty>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d102      	bne.n	8008642 <_isatty_r+0x1a>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	b103      	cbz	r3, 8008642 <_isatty_r+0x1a>
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	200013c0 	.word	0x200013c0

08008648 <_init>:
 8008648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800864a:	bf00      	nop
 800864c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800864e:	bc08      	pop	{r3}
 8008650:	469e      	mov	lr, r3
 8008652:	4770      	bx	lr

08008654 <_fini>:
 8008654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008656:	bf00      	nop
 8008658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865a:	bc08      	pop	{r3}
 800865c:	469e      	mov	lr, r3
 800865e:	4770      	bx	lr
