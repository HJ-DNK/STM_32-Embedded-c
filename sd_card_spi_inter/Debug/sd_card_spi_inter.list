
sd_card_spi_inter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008188  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  080082c4  080082c4  000182c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ab0  08008ab0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008ab0  08008ab0  00018ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ab8  08008ab8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ab8  08008ab8  00018ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008abc  08008abc  00018abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002420  20000088  08008b48  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024a8  08008b48  000224a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000daa0  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002259  00000000  00000000  0002db51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002fdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  000309d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170f1  00000000  00000000  000314f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d88  00000000  00000000  000485e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085722  00000000  00000000  00059371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dea93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035fc  00000000  00000000  000deae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000088 	.word	0x20000088
 8000158:	00000000 	.word	0x00000000
 800015c:	080082ac 	.word	0x080082ac

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000008c 	.word	0x2000008c
 8000178:	080082ac 	.word	0x080082ac

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_dmul>:
 800018c:	b570      	push	{r4, r5, r6, lr}
 800018e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000192:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000196:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800019a:	bf1d      	ittte	ne
 800019c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001a0:	ea94 0f0c 	teqne	r4, ip
 80001a4:	ea95 0f0c 	teqne	r5, ip
 80001a8:	f000 f8de 	bleq	8000368 <__aeabi_dmul+0x1dc>
 80001ac:	442c      	add	r4, r5
 80001ae:	ea81 0603 	eor.w	r6, r1, r3
 80001b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001be:	bf18      	it	ne
 80001c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001cc:	d038      	beq.n	8000240 <__aeabi_dmul+0xb4>
 80001ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80001d2:	f04f 0500 	mov.w	r5, #0
 80001d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001e2:	f04f 0600 	mov.w	r6, #0
 80001e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ea:	f09c 0f00 	teq	ip, #0
 80001ee:	bf18      	it	ne
 80001f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000200:	d204      	bcs.n	800020c <__aeabi_dmul+0x80>
 8000202:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000206:	416d      	adcs	r5, r5
 8000208:	eb46 0606 	adc.w	r6, r6, r6
 800020c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000210:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000214:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000218:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800021c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000220:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000224:	bf88      	it	hi
 8000226:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800022a:	d81e      	bhi.n	800026a <__aeabi_dmul+0xde>
 800022c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000230:	bf08      	it	eq
 8000232:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000236:	f150 0000 	adcs.w	r0, r0, #0
 800023a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800023e:	bd70      	pop	{r4, r5, r6, pc}
 8000240:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000244:	ea46 0101 	orr.w	r1, r6, r1
 8000248:	ea40 0002 	orr.w	r0, r0, r2
 800024c:	ea81 0103 	eor.w	r1, r1, r3
 8000250:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000254:	bfc2      	ittt	gt
 8000256:	ebd4 050c 	rsbsgt	r5, r4, ip
 800025a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800025e:	bd70      	popgt	{r4, r5, r6, pc}
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f04f 0e00 	mov.w	lr, #0
 8000268:	3c01      	subs	r4, #1
 800026a:	f300 80ab 	bgt.w	80003c4 <__aeabi_dmul+0x238>
 800026e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000272:	bfde      	ittt	le
 8000274:	2000      	movle	r0, #0
 8000276:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800027a:	bd70      	pople	{r4, r5, r6, pc}
 800027c:	f1c4 0400 	rsb	r4, r4, #0
 8000280:	3c20      	subs	r4, #32
 8000282:	da35      	bge.n	80002f0 <__aeabi_dmul+0x164>
 8000284:	340c      	adds	r4, #12
 8000286:	dc1b      	bgt.n	80002c0 <__aeabi_dmul+0x134>
 8000288:	f104 0414 	add.w	r4, r4, #20
 800028c:	f1c4 0520 	rsb	r5, r4, #32
 8000290:	fa00 f305 	lsl.w	r3, r0, r5
 8000294:	fa20 f004 	lsr.w	r0, r0, r4
 8000298:	fa01 f205 	lsl.w	r2, r1, r5
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002ac:	fa21 f604 	lsr.w	r6, r1, r4
 80002b0:	eb42 0106 	adc.w	r1, r2, r6
 80002b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b8:	bf08      	it	eq
 80002ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f1c4 040c 	rsb	r4, r4, #12
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f304 	lsl.w	r3, r0, r4
 80002cc:	fa20 f005 	lsr.w	r0, r0, r5
 80002d0:	fa01 f204 	lsl.w	r2, r1, r4
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e8:	bf08      	it	eq
 80002ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ee:	bd70      	pop	{r4, r5, r6, pc}
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f205 	lsl.w	r2, r0, r5
 80002f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002fc:	fa20 f304 	lsr.w	r3, r0, r4
 8000300:	fa01 f205 	lsl.w	r2, r1, r5
 8000304:	ea43 0302 	orr.w	r3, r3, r2
 8000308:	fa21 f004 	lsr.w	r0, r1, r4
 800030c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000310:	fa21 f204 	lsr.w	r2, r1, r4
 8000314:	ea20 0002 	bic.w	r0, r0, r2
 8000318:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800031c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000320:	bf08      	it	eq
 8000322:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000326:	bd70      	pop	{r4, r5, r6, pc}
 8000328:	f094 0f00 	teq	r4, #0
 800032c:	d10f      	bne.n	800034e <__aeabi_dmul+0x1c2>
 800032e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000332:	0040      	lsls	r0, r0, #1
 8000334:	eb41 0101 	adc.w	r1, r1, r1
 8000338:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033c:	bf08      	it	eq
 800033e:	3c01      	subeq	r4, #1
 8000340:	d0f7      	beq.n	8000332 <__aeabi_dmul+0x1a6>
 8000342:	ea41 0106 	orr.w	r1, r1, r6
 8000346:	f095 0f00 	teq	r5, #0
 800034a:	bf18      	it	ne
 800034c:	4770      	bxne	lr
 800034e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000352:	0052      	lsls	r2, r2, #1
 8000354:	eb43 0303 	adc.w	r3, r3, r3
 8000358:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800035c:	bf08      	it	eq
 800035e:	3d01      	subeq	r5, #1
 8000360:	d0f7      	beq.n	8000352 <__aeabi_dmul+0x1c6>
 8000362:	ea43 0306 	orr.w	r3, r3, r6
 8000366:	4770      	bx	lr
 8000368:	ea94 0f0c 	teq	r4, ip
 800036c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000370:	bf18      	it	ne
 8000372:	ea95 0f0c 	teqne	r5, ip
 8000376:	d00c      	beq.n	8000392 <__aeabi_dmul+0x206>
 8000378:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037c:	bf18      	it	ne
 800037e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000382:	d1d1      	bne.n	8000328 <__aeabi_dmul+0x19c>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f04f 0000 	mov.w	r0, #0
 8000390:	bd70      	pop	{r4, r5, r6, pc}
 8000392:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000396:	bf06      	itte	eq
 8000398:	4610      	moveq	r0, r2
 800039a:	4619      	moveq	r1, r3
 800039c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003a0:	d019      	beq.n	80003d6 <__aeabi_dmul+0x24a>
 80003a2:	ea94 0f0c 	teq	r4, ip
 80003a6:	d102      	bne.n	80003ae <__aeabi_dmul+0x222>
 80003a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003ac:	d113      	bne.n	80003d6 <__aeabi_dmul+0x24a>
 80003ae:	ea95 0f0c 	teq	r5, ip
 80003b2:	d105      	bne.n	80003c0 <__aeabi_dmul+0x234>
 80003b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003b8:	bf1c      	itt	ne
 80003ba:	4610      	movne	r0, r2
 80003bc:	4619      	movne	r1, r3
 80003be:	d10a      	bne.n	80003d6 <__aeabi_dmul+0x24a>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003de:	bd70      	pop	{r4, r5, r6, pc}

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_d2uiz>:
 8000758:	004a      	lsls	r2, r1, #1
 800075a:	d211      	bcs.n	8000780 <__aeabi_d2uiz+0x28>
 800075c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000760:	d211      	bcs.n	8000786 <__aeabi_d2uiz+0x2e>
 8000762:	d50d      	bpl.n	8000780 <__aeabi_d2uiz+0x28>
 8000764:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000768:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800076c:	d40e      	bmi.n	800078c <__aeabi_d2uiz+0x34>
 800076e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000772:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000776:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800077a:	fa23 f002 	lsr.w	r0, r3, r2
 800077e:	4770      	bx	lr
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	4770      	bx	lr
 8000786:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800078a:	d102      	bne.n	8000792 <__aeabi_d2uiz+0x3a>
 800078c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000790:	4770      	bx	lr
 8000792:	f04f 0000 	mov.w	r0, #0
 8000796:	4770      	bx	lr

08000798 <__aeabi_uldivmod>:
 8000798:	b953      	cbnz	r3, 80007b0 <__aeabi_uldivmod+0x18>
 800079a:	b94a      	cbnz	r2, 80007b0 <__aeabi_uldivmod+0x18>
 800079c:	2900      	cmp	r1, #0
 800079e:	bf08      	it	eq
 80007a0:	2800      	cmpeq	r0, #0
 80007a2:	bf1c      	itt	ne
 80007a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80007a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80007ac:	f000 b976 	b.w	8000a9c <__aeabi_idiv0>
 80007b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007b8:	f000 f806 	bl	80007c8 <__udivmoddi4>
 80007bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007c4:	b004      	add	sp, #16
 80007c6:	4770      	bx	lr

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9e08      	ldr	r6, [sp, #32]
 80007ce:	460d      	mov	r5, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	4688      	mov	r8, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14d      	bne.n	8000874 <__udivmoddi4+0xac>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4694      	mov	ip, r2
 80007dc:	d968      	bls.n	80008b0 <__udivmoddi4+0xe8>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b152      	cbz	r2, 80007fa <__udivmoddi4+0x32>
 80007e4:	fa01 f302 	lsl.w	r3, r1, r2
 80007e8:	f1c2 0120 	rsb	r1, r2, #32
 80007ec:	fa20 f101 	lsr.w	r1, r0, r1
 80007f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f4:	ea41 0803 	orr.w	r8, r1, r3
 80007f8:	4094      	lsls	r4, r2
 80007fa:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80007fe:	fbb8 f7f1 	udiv	r7, r8, r1
 8000802:	fa1f fe8c 	uxth.w	lr, ip
 8000806:	fb01 8817 	mls	r8, r1, r7, r8
 800080a:	fb07 f00e 	mul.w	r0, r7, lr
 800080e:	0c23      	lsrs	r3, r4, #16
 8000810:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000814:	4298      	cmp	r0, r3
 8000816:	d90a      	bls.n	800082e <__udivmoddi4+0x66>
 8000818:	eb1c 0303 	adds.w	r3, ip, r3
 800081c:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000820:	f080 811e 	bcs.w	8000a60 <__udivmoddi4+0x298>
 8000824:	4298      	cmp	r0, r3
 8000826:	f240 811b 	bls.w	8000a60 <__udivmoddi4+0x298>
 800082a:	3f02      	subs	r7, #2
 800082c:	4463      	add	r3, ip
 800082e:	1a1b      	subs	r3, r3, r0
 8000830:	fbb3 f0f1 	udiv	r0, r3, r1
 8000834:	fb01 3310 	mls	r3, r1, r0, r3
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	b2a4      	uxth	r4, r4
 800083e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000842:	45a6      	cmp	lr, r4
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x94>
 8000846:	eb1c 0404 	adds.w	r4, ip, r4
 800084a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800084e:	f080 8109 	bcs.w	8000a64 <__udivmoddi4+0x29c>
 8000852:	45a6      	cmp	lr, r4
 8000854:	f240 8106 	bls.w	8000a64 <__udivmoddi4+0x29c>
 8000858:	4464      	add	r4, ip
 800085a:	3802      	subs	r0, #2
 800085c:	2100      	movs	r1, #0
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000866:	b11e      	cbz	r6, 8000870 <__udivmoddi4+0xa8>
 8000868:	2300      	movs	r3, #0
 800086a:	40d4      	lsrs	r4, r2
 800086c:	e9c6 4300 	strd	r4, r3, [r6]
 8000870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000874:	428b      	cmp	r3, r1
 8000876:	d908      	bls.n	800088a <__udivmoddi4+0xc2>
 8000878:	2e00      	cmp	r6, #0
 800087a:	f000 80ee 	beq.w	8000a5a <__udivmoddi4+0x292>
 800087e:	2100      	movs	r1, #0
 8000880:	e9c6 0500 	strd	r0, r5, [r6]
 8000884:	4608      	mov	r0, r1
 8000886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088a:	fab3 f183 	clz	r1, r3
 800088e:	2900      	cmp	r1, #0
 8000890:	d14a      	bne.n	8000928 <__udivmoddi4+0x160>
 8000892:	42ab      	cmp	r3, r5
 8000894:	d302      	bcc.n	800089c <__udivmoddi4+0xd4>
 8000896:	4282      	cmp	r2, r0
 8000898:	f200 80fc 	bhi.w	8000a94 <__udivmoddi4+0x2cc>
 800089c:	1a84      	subs	r4, r0, r2
 800089e:	eb65 0303 	sbc.w	r3, r5, r3
 80008a2:	2001      	movs	r0, #1
 80008a4:	4698      	mov	r8, r3
 80008a6:	2e00      	cmp	r6, #0
 80008a8:	d0e2      	beq.n	8000870 <__udivmoddi4+0xa8>
 80008aa:	e9c6 4800 	strd	r4, r8, [r6]
 80008ae:	e7df      	b.n	8000870 <__udivmoddi4+0xa8>
 80008b0:	b902      	cbnz	r2, 80008b4 <__udivmoddi4+0xec>
 80008b2:	deff      	udf	#255	; 0xff
 80008b4:	fab2 f282 	clz	r2, r2
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	f040 8091 	bne.w	80009e0 <__udivmoddi4+0x218>
 80008be:	eba1 000c 	sub.w	r0, r1, ip
 80008c2:	2101      	movs	r1, #1
 80008c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c8:	fa1f fe8c 	uxth.w	lr, ip
 80008cc:	fbb0 f3f7 	udiv	r3, r0, r7
 80008d0:	fb07 0013 	mls	r0, r7, r3, r0
 80008d4:	0c25      	lsrs	r5, r4, #16
 80008d6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008da:	fb0e f003 	mul.w	r0, lr, r3
 80008de:	42a8      	cmp	r0, r5
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x12c>
 80008e2:	eb1c 0505 	adds.w	r5, ip, r5
 80008e6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x12a>
 80008ec:	42a8      	cmp	r0, r5
 80008ee:	f200 80ce 	bhi.w	8000a8e <__udivmoddi4+0x2c6>
 80008f2:	4643      	mov	r3, r8
 80008f4:	1a2d      	subs	r5, r5, r0
 80008f6:	fbb5 f0f7 	udiv	r0, r5, r7
 80008fa:	fb07 5510 	mls	r5, r7, r0, r5
 80008fe:	fb0e fe00 	mul.w	lr, lr, r0
 8000902:	b2a4      	uxth	r4, r4
 8000904:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000908:	45a6      	cmp	lr, r4
 800090a:	d908      	bls.n	800091e <__udivmoddi4+0x156>
 800090c:	eb1c 0404 	adds.w	r4, ip, r4
 8000910:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000914:	d202      	bcs.n	800091c <__udivmoddi4+0x154>
 8000916:	45a6      	cmp	lr, r4
 8000918:	f200 80b6 	bhi.w	8000a88 <__udivmoddi4+0x2c0>
 800091c:	4628      	mov	r0, r5
 800091e:	eba4 040e 	sub.w	r4, r4, lr
 8000922:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000926:	e79e      	b.n	8000866 <__udivmoddi4+0x9e>
 8000928:	f1c1 0720 	rsb	r7, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000932:	ea4c 0c03 	orr.w	ip, ip, r3
 8000936:	fa25 fa07 	lsr.w	sl, r5, r7
 800093a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800093e:	fbba f8f9 	udiv	r8, sl, r9
 8000942:	fa20 f307 	lsr.w	r3, r0, r7
 8000946:	fb09 aa18 	mls	sl, r9, r8, sl
 800094a:	408d      	lsls	r5, r1
 800094c:	fa1f fe8c 	uxth.w	lr, ip
 8000950:	431d      	orrs	r5, r3
 8000952:	fa00 f301 	lsl.w	r3, r0, r1
 8000956:	fb08 f00e 	mul.w	r0, r8, lr
 800095a:	0c2c      	lsrs	r4, r5, #16
 800095c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000960:	42a0      	cmp	r0, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90b      	bls.n	8000980 <__udivmoddi4+0x1b8>
 8000968:	eb1c 0404 	adds.w	r4, ip, r4
 800096c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000970:	f080 8088 	bcs.w	8000a84 <__udivmoddi4+0x2bc>
 8000974:	42a0      	cmp	r0, r4
 8000976:	f240 8085 	bls.w	8000a84 <__udivmoddi4+0x2bc>
 800097a:	f1a8 0802 	sub.w	r8, r8, #2
 800097e:	4464      	add	r4, ip
 8000980:	1a24      	subs	r4, r4, r0
 8000982:	fbb4 f0f9 	udiv	r0, r4, r9
 8000986:	fb09 4410 	mls	r4, r9, r0, r4
 800098a:	fb00 fe0e 	mul.w	lr, r0, lr
 800098e:	b2ad      	uxth	r5, r5
 8000990:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000994:	45a6      	cmp	lr, r4
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x1e2>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80009a0:	d26c      	bcs.n	8000a7c <__udivmoddi4+0x2b4>
 80009a2:	45a6      	cmp	lr, r4
 80009a4:	d96a      	bls.n	8000a7c <__udivmoddi4+0x2b4>
 80009a6:	3802      	subs	r0, #2
 80009a8:	4464      	add	r4, ip
 80009aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009ae:	fba0 9502 	umull	r9, r5, r0, r2
 80009b2:	eba4 040e 	sub.w	r4, r4, lr
 80009b6:	42ac      	cmp	r4, r5
 80009b8:	46c8      	mov	r8, r9
 80009ba:	46ae      	mov	lr, r5
 80009bc:	d356      	bcc.n	8000a6c <__udivmoddi4+0x2a4>
 80009be:	d053      	beq.n	8000a68 <__udivmoddi4+0x2a0>
 80009c0:	2e00      	cmp	r6, #0
 80009c2:	d069      	beq.n	8000a98 <__udivmoddi4+0x2d0>
 80009c4:	ebb3 0208 	subs.w	r2, r3, r8
 80009c8:	eb64 040e 	sbc.w	r4, r4, lr
 80009cc:	fa22 f301 	lsr.w	r3, r2, r1
 80009d0:	fa04 f707 	lsl.w	r7, r4, r7
 80009d4:	431f      	orrs	r7, r3
 80009d6:	40cc      	lsrs	r4, r1
 80009d8:	e9c6 7400 	strd	r7, r4, [r6]
 80009dc:	2100      	movs	r1, #0
 80009de:	e747      	b.n	8000870 <__udivmoddi4+0xa8>
 80009e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e4:	f1c2 0120 	rsb	r1, r2, #32
 80009e8:	fa25 f301 	lsr.w	r3, r5, r1
 80009ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f0:	fa20 f101 	lsr.w	r1, r0, r1
 80009f4:	4095      	lsls	r5, r2
 80009f6:	430d      	orrs	r5, r1
 80009f8:	fbb3 f1f7 	udiv	r1, r3, r7
 80009fc:	fb07 3311 	mls	r3, r7, r1, r3
 8000a00:	fa1f fe8c 	uxth.w	lr, ip
 8000a04:	0c28      	lsrs	r0, r5, #16
 8000a06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a0a:	fb01 f30e 	mul.w	r3, r1, lr
 8000a0e:	4283      	cmp	r3, r0
 8000a10:	fa04 f402 	lsl.w	r4, r4, r2
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x260>
 8000a16:	eb1c 0000 	adds.w	r0, ip, r0
 8000a1a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000a1e:	d22f      	bcs.n	8000a80 <__udivmoddi4+0x2b8>
 8000a20:	4283      	cmp	r3, r0
 8000a22:	d92d      	bls.n	8000a80 <__udivmoddi4+0x2b8>
 8000a24:	3902      	subs	r1, #2
 8000a26:	4460      	add	r0, ip
 8000a28:	1ac0      	subs	r0, r0, r3
 8000a2a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a2e:	fb07 0013 	mls	r0, r7, r3, r0
 8000a32:	b2ad      	uxth	r5, r5
 8000a34:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a38:	fb03 f00e 	mul.w	r0, r3, lr
 8000a3c:	42a8      	cmp	r0, r5
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x28a>
 8000a40:	eb1c 0505 	adds.w	r5, ip, r5
 8000a44:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a48:	d216      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4a:	42a8      	cmp	r0, r5
 8000a4c:	d914      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4e:	3b02      	subs	r3, #2
 8000a50:	4465      	add	r5, ip
 8000a52:	1a28      	subs	r0, r5, r0
 8000a54:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a58:	e738      	b.n	80008cc <__udivmoddi4+0x104>
 8000a5a:	4631      	mov	r1, r6
 8000a5c:	4630      	mov	r0, r6
 8000a5e:	e707      	b.n	8000870 <__udivmoddi4+0xa8>
 8000a60:	462f      	mov	r7, r5
 8000a62:	e6e4      	b.n	800082e <__udivmoddi4+0x66>
 8000a64:	4618      	mov	r0, r3
 8000a66:	e6f9      	b.n	800085c <__udivmoddi4+0x94>
 8000a68:	454b      	cmp	r3, r9
 8000a6a:	d2a9      	bcs.n	80009c0 <__udivmoddi4+0x1f8>
 8000a6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a70:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a74:	3801      	subs	r0, #1
 8000a76:	e7a3      	b.n	80009c0 <__udivmoddi4+0x1f8>
 8000a78:	4643      	mov	r3, r8
 8000a7a:	e7ea      	b.n	8000a52 <__udivmoddi4+0x28a>
 8000a7c:	4628      	mov	r0, r5
 8000a7e:	e794      	b.n	80009aa <__udivmoddi4+0x1e2>
 8000a80:	4641      	mov	r1, r8
 8000a82:	e7d1      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a84:	46d0      	mov	r8, sl
 8000a86:	e77b      	b.n	8000980 <__udivmoddi4+0x1b8>
 8000a88:	4464      	add	r4, ip
 8000a8a:	3802      	subs	r0, #2
 8000a8c:	e747      	b.n	800091e <__udivmoddi4+0x156>
 8000a8e:	3b02      	subs	r3, #2
 8000a90:	4465      	add	r5, ip
 8000a92:	e72f      	b.n	80008f4 <__udivmoddi4+0x12c>
 8000a94:	4608      	mov	r0, r1
 8000a96:	e706      	b.n	80008a6 <__udivmoddi4+0xde>
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e6e9      	b.n	8000870 <__udivmoddi4+0xa8>

08000a9c <__aeabi_idiv0>:
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aaa:	4804      	ldr	r0, [pc, #16]	; (8000abc <SELECT+0x1c>)
 8000aac:	f001 fc28 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f001 f99f 	bl	8001df4 <HAL_Delay>
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40020400 	.word	0x40020400

08000ac0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aca:	4804      	ldr	r0, [pc, #16]	; (8000adc <DESELECT+0x1c>)
 8000acc:	f001 fc18 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f001 f98f 	bl	8001df4 <HAL_Delay>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40020400 	.word	0x40020400

08000ae0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000aea:	bf00      	nop
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <SPI_TxByte+0x30>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d1f8      	bne.n	8000aec <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000afa:	1df9      	adds	r1, r7, #7
 8000afc:	2364      	movs	r3, #100	; 0x64
 8000afe:	2201      	movs	r2, #1
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <SPI_TxByte+0x30>)
 8000b02:	f002 fa94 	bl	800302e <HAL_SPI_Transmit>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000a8 	.word	0x200000a8

08000b14 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b20:	bf00      	nop
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <SPI_TxBuffer+0x30>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d1f8      	bne.n	8000b22 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000b30:	887a      	ldrh	r2, [r7, #2]
 8000b32:	2364      	movs	r3, #100	; 0x64
 8000b34:	6879      	ldr	r1, [r7, #4]
 8000b36:	4803      	ldr	r0, [pc, #12]	; (8000b44 <SPI_TxBuffer+0x30>)
 8000b38:	f002 fa79 	bl	800302e <HAL_SPI_Transmit>
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200000a8 	.word	0x200000a8

08000b48 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000b4e:	23ff      	movs	r3, #255	; 0xff
 8000b50:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b52:	bf00      	nop
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <SPI_RxByte+0x34>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d1f8      	bne.n	8000b54 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000b62:	1dba      	adds	r2, r7, #6
 8000b64:	1df9      	adds	r1, r7, #7
 8000b66:	2364      	movs	r3, #100	; 0x64
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	4803      	ldr	r0, [pc, #12]	; (8000b7c <SPI_RxByte+0x34>)
 8000b6e:	f002 fba1 	bl	80032b4 <HAL_SPI_TransmitReceive>

	return data;
 8000b72:	79bb      	ldrb	r3, [r7, #6]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000a8 	.word	0x200000a8

08000b80 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000b88:	f7ff ffde 	bl	8000b48 <SPI_RxByte>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	461a      	mov	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	701a      	strb	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <SD_ReadyWait+0x30>)
 8000ba4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ba8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000baa:	f7ff ffcd 	bl	8000b48 <SPI_RxByte>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2bff      	cmp	r3, #255	; 0xff
 8000bb6:	d004      	beq.n	8000bc2 <SD_ReadyWait+0x26>
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <SD_ReadyWait+0x30>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1f3      	bne.n	8000baa <SD_ReadyWait+0xe>

	return res;
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20002250 	.word	0x20002250

08000bd0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000bd6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000bda:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000bdc:	f7ff ff70 	bl	8000ac0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	e005      	b.n	8000bf2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000be6:	20ff      	movs	r0, #255	; 0xff
 8000be8:	f7ff ff7a 	bl	8000ae0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	ddf6      	ble.n	8000be6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000bf8:	f7ff ff52 	bl	8000aa0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000bfc:	2340      	movs	r3, #64	; 0x40
 8000bfe:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000c10:	2395      	movs	r3, #149	; 0x95
 8000c12:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000c14:	463b      	mov	r3, r7
 8000c16:	2106      	movs	r1, #6
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff7b 	bl	8000b14 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000c1e:	e002      	b.n	8000c26 <SD_PowerOn+0x56>
	{
		cnt--;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000c26:	f7ff ff8f 	bl	8000b48 <SPI_RxByte>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d002      	beq.n	8000c36 <SD_PowerOn+0x66>
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1f4      	bne.n	8000c20 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000c36:	f7ff ff43 	bl	8000ac0 <DESELECT>
	SPI_TxByte(0XFF);
 8000c3a:	20ff      	movs	r0, #255	; 0xff
 8000c3c:	f7ff ff50 	bl	8000ae0 <SPI_TxByte>

	PowerFlag = 1;
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <SD_PowerOn+0x80>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200000a5 	.word	0x200000a5

08000c54 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <SD_PowerOff+0x14>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	200000a5 	.word	0x200000a5

08000c6c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <SD_CheckPower+0x10>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	200000a5 	.word	0x200000a5

08000c80 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <SD_RxDataBlock+0x5c>)
 8000c8c:	22c8      	movs	r2, #200	; 0xc8
 8000c8e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000c90:	f7ff ff5a 	bl	8000b48 <SPI_RxByte>
 8000c94:	4603      	mov	r3, r0
 8000c96:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	2bff      	cmp	r3, #255	; 0xff
 8000c9c:	d104      	bne.n	8000ca8 <SD_RxDataBlock+0x28>
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <SD_RxDataBlock+0x5c>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1f3      	bne.n	8000c90 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	2bfe      	cmp	r3, #254	; 0xfe
 8000cac:	d001      	beq.n	8000cb2 <SD_RxDataBlock+0x32>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e00f      	b.n	8000cd2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff61 	bl	8000b80 <SPI_RxBytePtr>
	} while(len--);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	1e5a      	subs	r2, r3, #1
 8000cc2:	603a      	str	r2, [r7, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1f4      	bne.n	8000cb2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000cc8:	f7ff ff3e 	bl	8000b48 <SPI_RxByte>
	SPI_RxByte();
 8000ccc:	f7ff ff3c 	bl	8000b48 <SPI_RxByte>

	return TRUE;
 8000cd0:	2301      	movs	r3, #1
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000224e 	.word	0x2000224e

08000ce0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000cf0:	f7ff ff54 	bl	8000b9c <SD_ReadyWait>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2bff      	cmp	r3, #255	; 0xff
 8000cf8:	d001      	beq.n	8000cfe <SD_TxDataBlock+0x1e>
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e02f      	b.n	8000d5e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000cfe:	78fb      	ldrb	r3, [r7, #3]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff feed 	bl	8000ae0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000d06:	78fb      	ldrb	r3, [r7, #3]
 8000d08:	2bfd      	cmp	r3, #253	; 0xfd
 8000d0a:	d020      	beq.n	8000d4e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff feff 	bl	8000b14 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000d16:	f7ff ff17 	bl	8000b48 <SPI_RxByte>
		SPI_RxByte();
 8000d1a:	f7ff ff15 	bl	8000b48 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000d1e:	e00b      	b.n	8000d38 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000d20:	f7ff ff12 	bl	8000b48 <SPI_RxByte>
 8000d24:	4603      	mov	r3, r0
 8000d26:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	f003 031f 	and.w	r3, r3, #31
 8000d2e:	2b05      	cmp	r3, #5
 8000d30:	d006      	beq.n	8000d40 <SD_TxDataBlock+0x60>
			i++;
 8000d32:	7bbb      	ldrb	r3, [r7, #14]
 8000d34:	3301      	adds	r3, #1
 8000d36:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000d38:	7bbb      	ldrb	r3, [r7, #14]
 8000d3a:	2b40      	cmp	r3, #64	; 0x40
 8000d3c:	d9f0      	bls.n	8000d20 <SD_TxDataBlock+0x40>
 8000d3e:	e000      	b.n	8000d42 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000d40:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000d42:	bf00      	nop
 8000d44:	f7ff ff00 	bl	8000b48 <SPI_RxByte>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0fa      	beq.n	8000d44 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	f003 031f 	and.w	r3, r3, #31
 8000d54:	2b05      	cmp	r3, #5
 8000d56:	d101      	bne.n	8000d5c <SD_TxDataBlock+0x7c>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <SD_TxDataBlock+0x7e>

	return FALSE;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b084      	sub	sp, #16
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	6039      	str	r1, [r7, #0]
 8000d70:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000d72:	f7ff ff13 	bl	8000b9c <SD_ReadyWait>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2bff      	cmp	r3, #255	; 0xff
 8000d7a:	d001      	beq.n	8000d80 <SD_SendCmd+0x1a>
 8000d7c:	23ff      	movs	r3, #255	; 0xff
 8000d7e:	e042      	b.n	8000e06 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff feac 	bl	8000ae0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	0e1b      	lsrs	r3, r3, #24
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fea6 	bl	8000ae0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	0c1b      	lsrs	r3, r3, #16
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fea0 	bl	8000ae0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	0a1b      	lsrs	r3, r3, #8
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fe9a 	bl	8000ae0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fe95 	bl	8000ae0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b40      	cmp	r3, #64	; 0x40
 8000dba:	d102      	bne.n	8000dc2 <SD_SendCmd+0x5c>
 8000dbc:	2395      	movs	r3, #149	; 0x95
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e007      	b.n	8000dd2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b48      	cmp	r3, #72	; 0x48
 8000dc6:	d102      	bne.n	8000dce <SD_SendCmd+0x68>
 8000dc8:	2387      	movs	r3, #135	; 0x87
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e001      	b.n	8000dd2 <SD_SendCmd+0x6c>
	else crc = 1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fe83 	bl	8000ae0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b4c      	cmp	r3, #76	; 0x4c
 8000dde:	d101      	bne.n	8000de4 <SD_SendCmd+0x7e>
 8000de0:	f7ff feb2 	bl	8000b48 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000de4:	230a      	movs	r3, #10
 8000de6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000de8:	f7ff feae 	bl	8000b48 <SPI_RxByte>
 8000dec:	4603      	mov	r3, r0
 8000dee:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000df0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	da05      	bge.n	8000e04 <SD_SendCmd+0x9e>
 8000df8:	7bbb      	ldrb	r3, [r7, #14]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	73bb      	strb	r3, [r7, #14]
 8000dfe:	7bbb      	ldrb	r3, [r7, #14]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1f1      	bne.n	8000de8 <SD_SendCmd+0x82>

	return res;
 8000e04:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SD_disk_initialize+0x14>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e0d6      	b.n	8000fd2 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000e24:	4b6d      	ldr	r3, [pc, #436]	; (8000fdc <SD_disk_initialize+0x1cc>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <SD_disk_initialize+0x2a>
 8000e32:	4b6a      	ldr	r3, [pc, #424]	; (8000fdc <SD_disk_initialize+0x1cc>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	e0cb      	b.n	8000fd2 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000e3a:	f7ff fec9 	bl	8000bd0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000e3e:	f7ff fe2f 	bl	8000aa0 <SELECT>

	/* check disk type */
	type = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000e46:	2100      	movs	r1, #0
 8000e48:	2040      	movs	r0, #64	; 0x40
 8000e4a:	f7ff ff8c 	bl	8000d66 <SD_SendCmd>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	f040 80a6 	bne.w	8000fa2 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000e56:	4b62      	ldr	r3, [pc, #392]	; (8000fe0 <SD_disk_initialize+0x1d0>)
 8000e58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e5c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000e5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000e62:	2048      	movs	r0, #72	; 0x48
 8000e64:	f7ff ff7f 	bl	8000d66 <SD_SendCmd>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d158      	bne.n	8000f20 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	73fb      	strb	r3, [r7, #15]
 8000e72:	e00c      	b.n	8000e8e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000e74:	7bfc      	ldrb	r4, [r7, #15]
 8000e76:	f7ff fe67 	bl	8000b48 <SPI_RxByte>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	f104 0310 	add.w	r3, r4, #16
 8000e82:	443b      	add	r3, r7
 8000e84:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	2b03      	cmp	r3, #3
 8000e92:	d9ef      	bls.n	8000e74 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000e94:	7abb      	ldrb	r3, [r7, #10]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	f040 8083 	bne.w	8000fa2 <SD_disk_initialize+0x192>
 8000e9c:	7afb      	ldrb	r3, [r7, #11]
 8000e9e:	2baa      	cmp	r3, #170	; 0xaa
 8000ea0:	d17f      	bne.n	8000fa2 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2077      	movs	r0, #119	; 0x77
 8000ea6:	f7ff ff5e 	bl	8000d66 <SD_SendCmd>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d807      	bhi.n	8000ec0 <SD_disk_initialize+0xb0>
 8000eb0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000eb4:	2069      	movs	r0, #105	; 0x69
 8000eb6:	f7ff ff56 	bl	8000d66 <SD_SendCmd>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d005      	beq.n	8000ecc <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000ec0:	4b47      	ldr	r3, [pc, #284]	; (8000fe0 <SD_disk_initialize+0x1d0>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1eb      	bne.n	8000ea2 <SD_disk_initialize+0x92>
 8000eca:	e000      	b.n	8000ece <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000ecc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000ece:	4b44      	ldr	r3, [pc, #272]	; (8000fe0 <SD_disk_initialize+0x1d0>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d064      	beq.n	8000fa2 <SD_disk_initialize+0x192>
 8000ed8:	2100      	movs	r1, #0
 8000eda:	207a      	movs	r0, #122	; 0x7a
 8000edc:	f7ff ff43 	bl	8000d66 <SD_SendCmd>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d15d      	bne.n	8000fa2 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	e00c      	b.n	8000f06 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000eec:	7bfc      	ldrb	r4, [r7, #15]
 8000eee:	f7ff fe2b 	bl	8000b48 <SPI_RxByte>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	f104 0310 	add.w	r3, r4, #16
 8000efa:	443b      	add	r3, r7
 8000efc:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	3301      	adds	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d9ef      	bls.n	8000eec <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000f0c:	7a3b      	ldrb	r3, [r7, #8]
 8000f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SD_disk_initialize+0x10a>
 8000f16:	230c      	movs	r3, #12
 8000f18:	e000      	b.n	8000f1c <SD_disk_initialize+0x10c>
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	73bb      	strb	r3, [r7, #14]
 8000f1e:	e040      	b.n	8000fa2 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000f20:	2100      	movs	r1, #0
 8000f22:	2077      	movs	r0, #119	; 0x77
 8000f24:	f7ff ff1f 	bl	8000d66 <SD_SendCmd>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d808      	bhi.n	8000f40 <SD_disk_initialize+0x130>
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2069      	movs	r0, #105	; 0x69
 8000f32:	f7ff ff18 	bl	8000d66 <SD_SendCmd>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d801      	bhi.n	8000f40 <SD_disk_initialize+0x130>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	e000      	b.n	8000f42 <SD_disk_initialize+0x132>
 8000f40:	2301      	movs	r3, #1
 8000f42:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d10e      	bne.n	8000f68 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2077      	movs	r0, #119	; 0x77
 8000f4e:	f7ff ff0a 	bl	8000d66 <SD_SendCmd>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d80e      	bhi.n	8000f76 <SD_disk_initialize+0x166>
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2069      	movs	r0, #105	; 0x69
 8000f5c:	f7ff ff03 	bl	8000d66 <SD_SendCmd>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d107      	bne.n	8000f76 <SD_disk_initialize+0x166>
 8000f66:	e00d      	b.n	8000f84 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2041      	movs	r0, #65	; 0x41
 8000f6c:	f7ff fefb 	bl	8000d66 <SD_SendCmd>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d005      	beq.n	8000f82 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000f76:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <SD_disk_initialize+0x1d0>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1e1      	bne.n	8000f44 <SD_disk_initialize+0x134>
 8000f80:	e000      	b.n	8000f84 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000f82:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <SD_disk_initialize+0x1d0>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d007      	beq.n	8000f9e <SD_disk_initialize+0x18e>
 8000f8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f92:	2050      	movs	r0, #80	; 0x50
 8000f94:	f7ff fee7 	bl	8000d66 <SD_SendCmd>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SD_disk_initialize+0x192>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <SD_disk_initialize+0x1d4>)
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000fa8:	f7ff fd8a 	bl	8000ac0 <DESELECT>
	SPI_RxByte();
 8000fac:	f7ff fdcc 	bl	8000b48 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d008      	beq.n	8000fc8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <SD_disk_initialize+0x1cc>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f023 0301 	bic.w	r3, r3, #1
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <SD_disk_initialize+0x1cc>)
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	e001      	b.n	8000fcc <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000fc8:	f7ff fe44 	bl	8000c54 <SD_PowerOff>
	}

	return Stat;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <SD_disk_initialize+0x1cc>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b2db      	uxtb	r3, r3
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd90      	pop	{r4, r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	2000224e 	.word	0x2000224e
 8000fe4:	200000a4 	.word	0x200000a4

08000fe8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SD_disk_status+0x14>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e002      	b.n	8001002 <SD_disk_status+0x1a>
	return Stat;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <SD_disk_status+0x24>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b2db      	uxtb	r3, r3
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	20000000 	.word	0x20000000

08001010 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	4603      	mov	r3, r0
 800101e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d102      	bne.n	800102c <SD_disk_read+0x1c>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <SD_disk_read+0x20>
 800102c:	2304      	movs	r3, #4
 800102e:	e051      	b.n	80010d4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <SD_disk_read+0xcc>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SD_disk_read+0x32>
 800103e:	2303      	movs	r3, #3
 8001040:	e048      	b.n	80010d4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <SD_disk_read+0xd0>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <SD_disk_read+0x44>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	025b      	lsls	r3, r3, #9
 8001052:	607b      	str	r3, [r7, #4]

	SELECT();
 8001054:	f7ff fd24 	bl	8000aa0 <SELECT>

	if (count == 1)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d111      	bne.n	8001082 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	2051      	movs	r0, #81	; 0x51
 8001062:	f7ff fe80 	bl	8000d66 <SD_SendCmd>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d129      	bne.n	80010c0 <SD_disk_read+0xb0>
 800106c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001070:	68b8      	ldr	r0, [r7, #8]
 8001072:	f7ff fe05 	bl	8000c80 <SD_RxDataBlock>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d021      	beq.n	80010c0 <SD_disk_read+0xb0>
 800107c:	2300      	movs	r3, #0
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	e01e      	b.n	80010c0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	2052      	movs	r0, #82	; 0x52
 8001086:	f7ff fe6e 	bl	8000d66 <SD_SendCmd>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d117      	bne.n	80010c0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001090:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001094:	68b8      	ldr	r0, [r7, #8]
 8001096:	f7ff fdf3 	bl	8000c80 <SD_RxDataBlock>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00a      	beq.n	80010b6 <SD_disk_read+0xa6>
				buff += 512;
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80010a6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1ed      	bne.n	8001090 <SD_disk_read+0x80>
 80010b4:	e000      	b.n	80010b8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80010b6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80010b8:	2100      	movs	r1, #0
 80010ba:	204c      	movs	r0, #76	; 0x4c
 80010bc:	f7ff fe53 	bl	8000d66 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80010c0:	f7ff fcfe 	bl	8000ac0 <DESELECT>
	SPI_RxByte();
 80010c4:	f7ff fd40 	bl	8000b48 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	bf14      	ite	ne
 80010ce:	2301      	movne	r3, #1
 80010d0:	2300      	moveq	r3, #0
 80010d2:	b2db      	uxtb	r3, r3
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000000 	.word	0x20000000
 80010e0:	200000a4 	.word	0x200000a4

080010e4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	4603      	mov	r3, r0
 80010f2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <SD_disk_write+0x1c>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <SD_disk_write+0x20>
 8001100:	2304      	movs	r3, #4
 8001102:	e06b      	b.n	80011dc <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001104:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <SD_disk_write+0x100>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SD_disk_write+0x32>
 8001112:	2303      	movs	r3, #3
 8001114:	e062      	b.n	80011dc <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001116:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <SD_disk_write+0x100>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SD_disk_write+0x44>
 8001124:	2302      	movs	r3, #2
 8001126:	e059      	b.n	80011dc <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001128:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <SD_disk_write+0x104>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <SD_disk_write+0x56>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	025b      	lsls	r3, r3, #9
 8001138:	607b      	str	r3, [r7, #4]

	SELECT();
 800113a:	f7ff fcb1 	bl	8000aa0 <SELECT>

	if (count == 1)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d110      	bne.n	8001166 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	2058      	movs	r0, #88	; 0x58
 8001148:	f7ff fe0d 	bl	8000d66 <SD_SendCmd>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d13a      	bne.n	80011c8 <SD_disk_write+0xe4>
 8001152:	21fe      	movs	r1, #254	; 0xfe
 8001154:	68b8      	ldr	r0, [r7, #8]
 8001156:	f7ff fdc3 	bl	8000ce0 <SD_TxDataBlock>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d033      	beq.n	80011c8 <SD_disk_write+0xe4>
			count = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	e030      	b.n	80011c8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <SD_disk_write+0x104>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d007      	beq.n	8001182 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001172:	2100      	movs	r1, #0
 8001174:	2077      	movs	r0, #119	; 0x77
 8001176:	f7ff fdf6 	bl	8000d66 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	2057      	movs	r0, #87	; 0x57
 800117e:	f7ff fdf2 	bl	8000d66 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	2059      	movs	r0, #89	; 0x59
 8001186:	f7ff fdee 	bl	8000d66 <SD_SendCmd>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d11b      	bne.n	80011c8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001190:	21fc      	movs	r1, #252	; 0xfc
 8001192:	68b8      	ldr	r0, [r7, #8]
 8001194:	f7ff fda4 	bl	8000ce0 <SD_TxDataBlock>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00a      	beq.n	80011b4 <SD_disk_write+0xd0>
				buff += 512;
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011a4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1ee      	bne.n	8001190 <SD_disk_write+0xac>
 80011b2:	e000      	b.n	80011b6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80011b4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80011b6:	21fd      	movs	r1, #253	; 0xfd
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff fd91 	bl	8000ce0 <SD_TxDataBlock>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <SD_disk_write+0xe4>
			{
				count = 1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80011c8:	f7ff fc7a 	bl	8000ac0 <DESELECT>
	SPI_RxByte();
 80011cc:	f7ff fcbc 	bl	8000b48 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	bf14      	ite	ne
 80011d6:	2301      	movne	r3, #1
 80011d8:	2300      	moveq	r3, #0
 80011da:	b2db      	uxtb	r3, r3
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000000 	.word	0x20000000
 80011e8:	200000a4 	.word	0x200000a4

080011ec <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b08b      	sub	sp, #44	; 0x2c
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	603a      	str	r2, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	460b      	mov	r3, r1
 80011fa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SD_disk_ioctl+0x1e>
 8001206:	2304      	movs	r3, #4
 8001208:	e115      	b.n	8001436 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001210:	79bb      	ldrb	r3, [r7, #6]
 8001212:	2b05      	cmp	r3, #5
 8001214:	d124      	bne.n	8001260 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d012      	beq.n	8001244 <SD_disk_ioctl+0x58>
 800121e:	2b02      	cmp	r3, #2
 8001220:	dc1a      	bgt.n	8001258 <SD_disk_ioctl+0x6c>
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <SD_disk_ioctl+0x40>
 8001226:	2b01      	cmp	r3, #1
 8001228:	d006      	beq.n	8001238 <SD_disk_ioctl+0x4c>
 800122a:	e015      	b.n	8001258 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800122c:	f7ff fd12 	bl	8000c54 <SD_PowerOff>
			res = RES_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001236:	e0fc      	b.n	8001432 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001238:	f7ff fcca 	bl	8000bd0 <SD_PowerOn>
			res = RES_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001242:	e0f6      	b.n	8001432 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	1c5c      	adds	r4, r3, #1
 8001248:	f7ff fd10 	bl	8000c6c <SD_CheckPower>
 800124c:	4603      	mov	r3, r0
 800124e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001250:	2300      	movs	r3, #0
 8001252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001256:	e0ec      	b.n	8001432 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001258:	2304      	movs	r3, #4
 800125a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800125e:	e0e8      	b.n	8001432 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001260:	4b77      	ldr	r3, [pc, #476]	; (8001440 <SD_disk_ioctl+0x254>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SD_disk_ioctl+0x86>
 800126e:	2303      	movs	r3, #3
 8001270:	e0e1      	b.n	8001436 <SD_disk_ioctl+0x24a>

		SELECT();
 8001272:	f7ff fc15 	bl	8000aa0 <SELECT>

		switch (ctrl)
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	2b0d      	cmp	r3, #13
 800127a:	f200 80cb 	bhi.w	8001414 <SD_disk_ioctl+0x228>
 800127e:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <SD_disk_ioctl+0x98>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	0800137f 	.word	0x0800137f
 8001288:	080012bd 	.word	0x080012bd
 800128c:	0800136f 	.word	0x0800136f
 8001290:	08001415 	.word	0x08001415
 8001294:	08001415 	.word	0x08001415
 8001298:	08001415 	.word	0x08001415
 800129c:	08001415 	.word	0x08001415
 80012a0:	08001415 	.word	0x08001415
 80012a4:	08001415 	.word	0x08001415
 80012a8:	08001415 	.word	0x08001415
 80012ac:	08001415 	.word	0x08001415
 80012b0:	08001391 	.word	0x08001391
 80012b4:	080013b5 	.word	0x080013b5
 80012b8:	080013d9 	.word	0x080013d9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80012bc:	2100      	movs	r1, #0
 80012be:	2049      	movs	r0, #73	; 0x49
 80012c0:	f7ff fd51 	bl	8000d66 <SD_SendCmd>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f040 80a8 	bne.w	800141c <SD_disk_ioctl+0x230>
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2110      	movs	r1, #16
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fcd4 	bl	8000c80 <SD_RxDataBlock>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 809e 	beq.w	800141c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80012e0:	7b3b      	ldrb	r3, [r7, #12]
 80012e2:	099b      	lsrs	r3, r3, #6
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d10e      	bne.n	8001308 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80012ea:	7d7b      	ldrb	r3, [r7, #21]
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	7d3b      	ldrb	r3, [r7, #20]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80012fe:	8bfb      	ldrh	r3, [r7, #30]
 8001300:	029a      	lsls	r2, r3, #10
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e02e      	b.n	8001366 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001308:	7c7b      	ldrb	r3, [r7, #17]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	b2da      	uxtb	r2, r3
 8001310:	7dbb      	ldrb	r3, [r7, #22]
 8001312:	09db      	lsrs	r3, r3, #7
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4413      	add	r3, r2
 8001318:	b2da      	uxtb	r2, r3
 800131a:	7d7b      	ldrb	r3, [r7, #21]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f003 0306 	and.w	r3, r3, #6
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4413      	add	r3, r2
 8001328:	b2db      	uxtb	r3, r3
 800132a:	3302      	adds	r3, #2
 800132c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001330:	7d3b      	ldrb	r3, [r7, #20]
 8001332:	099b      	lsrs	r3, r3, #6
 8001334:	b2db      	uxtb	r3, r3
 8001336:	b29a      	uxth	r2, r3
 8001338:	7cfb      	ldrb	r3, [r7, #19]
 800133a:	b29b      	uxth	r3, r3
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	b29b      	uxth	r3, r3
 8001340:	4413      	add	r3, r2
 8001342:	b29a      	uxth	r2, r3
 8001344:	7cbb      	ldrb	r3, [r7, #18]
 8001346:	029b      	lsls	r3, r3, #10
 8001348:	b29b      	uxth	r3, r3
 800134a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800134e:	b29b      	uxth	r3, r3
 8001350:	4413      	add	r3, r2
 8001352:	b29b      	uxth	r3, r3
 8001354:	3301      	adds	r3, #1
 8001356:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001358:	8bfa      	ldrh	r2, [r7, #30]
 800135a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800135e:	3b09      	subs	r3, #9
 8001360:	409a      	lsls	r2, r3
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800136c:	e056      	b.n	800141c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001374:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800137c:	e055      	b.n	800142a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800137e:	f7ff fc0d 	bl	8000b9c <SD_ReadyWait>
 8001382:	4603      	mov	r3, r0
 8001384:	2bff      	cmp	r3, #255	; 0xff
 8001386:	d14b      	bne.n	8001420 <SD_disk_ioctl+0x234>
 8001388:	2300      	movs	r3, #0
 800138a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800138e:	e047      	b.n	8001420 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001390:	2100      	movs	r1, #0
 8001392:	2049      	movs	r0, #73	; 0x49
 8001394:	f7ff fce7 	bl	8000d66 <SD_SendCmd>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d142      	bne.n	8001424 <SD_disk_ioctl+0x238>
 800139e:	2110      	movs	r1, #16
 80013a0:	6a38      	ldr	r0, [r7, #32]
 80013a2:	f7ff fc6d 	bl	8000c80 <SD_RxDataBlock>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d03b      	beq.n	8001424 <SD_disk_ioctl+0x238>
 80013ac:	2300      	movs	r3, #0
 80013ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013b2:	e037      	b.n	8001424 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80013b4:	2100      	movs	r1, #0
 80013b6:	204a      	movs	r0, #74	; 0x4a
 80013b8:	f7ff fcd5 	bl	8000d66 <SD_SendCmd>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d132      	bne.n	8001428 <SD_disk_ioctl+0x23c>
 80013c2:	2110      	movs	r1, #16
 80013c4:	6a38      	ldr	r0, [r7, #32]
 80013c6:	f7ff fc5b 	bl	8000c80 <SD_RxDataBlock>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d02b      	beq.n	8001428 <SD_disk_ioctl+0x23c>
 80013d0:	2300      	movs	r3, #0
 80013d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013d6:	e027      	b.n	8001428 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80013d8:	2100      	movs	r1, #0
 80013da:	207a      	movs	r0, #122	; 0x7a
 80013dc:	f7ff fcc3 	bl	8000d66 <SD_SendCmd>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d116      	bne.n	8001414 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013ec:	e00b      	b.n	8001406 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80013ee:	6a3c      	ldr	r4, [r7, #32]
 80013f0:	1c63      	adds	r3, r4, #1
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	f7ff fba8 	bl	8000b48 <SPI_RxByte>
 80013f8:	4603      	mov	r3, r0
 80013fa:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80013fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001400:	3301      	adds	r3, #1
 8001402:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001406:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800140a:	2b03      	cmp	r3, #3
 800140c:	d9ef      	bls.n	80013ee <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001414:	2304      	movs	r3, #4
 8001416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800141a:	e006      	b.n	800142a <SD_disk_ioctl+0x23e>
			break;
 800141c:	bf00      	nop
 800141e:	e004      	b.n	800142a <SD_disk_ioctl+0x23e>
			break;
 8001420:	bf00      	nop
 8001422:	e002      	b.n	800142a <SD_disk_ioctl+0x23e>
			break;
 8001424:	bf00      	nop
 8001426:	e000      	b.n	800142a <SD_disk_ioctl+0x23e>
			break;
 8001428:	bf00      	nop
		}

		DESELECT();
 800142a:	f7ff fb49 	bl	8000ac0 <DESELECT>
		SPI_RxByte();
 800142e:	f7ff fb8b 	bl	8000b48 <SPI_RxByte>
	}

	return res;
 8001432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001436:	4618      	mov	r0, r3
 8001438:	372c      	adds	r7, #44	; 0x2c
 800143a:	46bd      	mov	sp, r7
 800143c:	bd90      	pop	{r4, r7, pc}
 800143e:	bf00      	nop
 8001440:	20000000 	.word	0x20000000

08001444 <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	int i=0;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8001450:	e002      	b.n	8001458 <bufsize+0x14>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	3301      	adds	r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f6      	bne.n	8001452 <bufsize+0xe>
	return i;
 8001464:	68fb      	ldr	r3, [r7, #12]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <clear_buffer>:

void clear_buffer (void)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	e007      	b.n	800148c <clear_buffer+0x1c>
 800147c:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <clear_buffer+0x30>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3301      	adds	r3, #1
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b7f      	cmp	r3, #127	; 0x7f
 8001490:	ddf4      	ble.n	800147c <clear_buffer+0xc>
}
 8001492:	bf00      	nop
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	200021cc 	.word	0x200021cc

080014a4 <send_uart>:

void send_uart (char *string)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7fe fe65 	bl	800017c <strlen>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4803      	ldr	r0, [pc, #12]	; (80014d0 <send_uart+0x2c>)
 80014c2:	f002 f9c1 	bl	8003848 <HAL_UART_Transmit>
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000100 	.word	0x20000100

080014d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d8:	f000 fc1d 	bl	8001d16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014dc:	f000 f9b0 	bl	8001840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e0:	f000 fa5c 	bl	800199c <MX_GPIO_Init>
  MX_SPI2_Init();
 80014e4:	f000 f9fa 	bl	80018dc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80014e8:	f000 fa2e 	bl	8001948 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80014ec:	f002 fb82 	bl	8003bf4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay (500);
 80014f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f4:	f000 fc7e 	bl	8001df4 <HAL_Delay>


   fresult = f_mount(&fs,"/", 1);
 80014f8:	2201      	movs	r2, #1
 80014fa:	49af      	ldr	r1, [pc, #700]	; (80017b8 <main+0x2e4>)
 80014fc:	48af      	ldr	r0, [pc, #700]	; (80017bc <main+0x2e8>)
 80014fe:	f004 ff05 	bl	800630c <f_mount>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	4bae      	ldr	r3, [pc, #696]	; (80017c0 <main+0x2ec>)
 8001508:	701a      	strb	r2, [r3, #0]
   	if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 800150a:	4bad      	ldr	r3, [pc, #692]	; (80017c0 <main+0x2ec>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <main+0x46>
 8001512:	48ac      	ldr	r0, [pc, #688]	; (80017c4 <main+0x2f0>)
 8001514:	f7ff ffc6 	bl	80014a4 <send_uart>
 8001518:	e002      	b.n	8001520 <main+0x4c>
   	else send_uart("SD CARD mounted successfully...\n\n");
 800151a:	48ab      	ldr	r0, [pc, #684]	; (80017c8 <main+0x2f4>)
 800151c:	f7ff ffc2 	bl	80014a4 <send_uart>


   	/*************** Card capacity details ********************/

   	/* Check free space */
   	f_getfree("", &fre_clust, &pfs);
 8001520:	4aaa      	ldr	r2, [pc, #680]	; (80017cc <main+0x2f8>)
 8001522:	49ab      	ldr	r1, [pc, #684]	; (80017d0 <main+0x2fc>)
 8001524:	48ab      	ldr	r0, [pc, #684]	; (80017d4 <main+0x300>)
 8001526:	f005 fec2 	bl	80072ae <f_getfree>

   	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800152a:	4ba8      	ldr	r3, [pc, #672]	; (80017cc <main+0x2f8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	3b02      	subs	r3, #2
 8001532:	4aa6      	ldr	r2, [pc, #664]	; (80017cc <main+0x2f8>)
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	8952      	ldrh	r2, [r2, #10]
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f891 	bl	8000664 <__aeabi_ui2d>
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4ba4      	ldr	r3, [pc, #656]	; (80017d8 <main+0x304>)
 8001548:	f7fe fe20 	bl	800018c <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f7ff f900 	bl	8000758 <__aeabi_d2uiz>
 8001558:	4603      	mov	r3, r0
 800155a:	4aa0      	ldr	r2, [pc, #640]	; (80017dc <main+0x308>)
 800155c:	6013      	str	r3, [r2, #0]
   	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 800155e:	4b9f      	ldr	r3, [pc, #636]	; (80017dc <main+0x308>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	499e      	ldr	r1, [pc, #632]	; (80017e0 <main+0x30c>)
 8001566:	489f      	ldr	r0, [pc, #636]	; (80017e4 <main+0x310>)
 8001568:	f006 fa34 	bl	80079d4 <siprintf>
   	send_uart(buffer);
 800156c:	489d      	ldr	r0, [pc, #628]	; (80017e4 <main+0x310>)
 800156e:	f7ff ff99 	bl	80014a4 <send_uart>
   	clear_buffer();
 8001572:	f7ff ff7d 	bl	8001470 <clear_buffer>
   	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001576:	4b95      	ldr	r3, [pc, #596]	; (80017cc <main+0x2f8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	895b      	ldrh	r3, [r3, #10]
 800157c:	461a      	mov	r2, r3
 800157e:	4b94      	ldr	r3, [pc, #592]	; (80017d0 <main+0x2fc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	fb02 f303 	mul.w	r3, r2, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff f86c 	bl	8000664 <__aeabi_ui2d>
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	4b91      	ldr	r3, [pc, #580]	; (80017d8 <main+0x304>)
 8001592:	f7fe fdfb 	bl	800018c <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f7ff f8db 	bl	8000758 <__aeabi_d2uiz>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4a90      	ldr	r2, [pc, #576]	; (80017e8 <main+0x314>)
 80015a6:	6013      	str	r3, [r2, #0]
   	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 80015a8:	4b8f      	ldr	r3, [pc, #572]	; (80017e8 <main+0x314>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	498f      	ldr	r1, [pc, #572]	; (80017ec <main+0x318>)
 80015b0:	488c      	ldr	r0, [pc, #560]	; (80017e4 <main+0x310>)
 80015b2:	f006 fa0f 	bl	80079d4 <siprintf>
   	send_uart(buffer);
 80015b6:	488b      	ldr	r0, [pc, #556]	; (80017e4 <main+0x310>)
 80015b8:	f7ff ff74 	bl	80014a4 <send_uart>
   	clear_buffer();
 80015bc:	f7ff ff58 	bl	8001470 <clear_buffer>


   	/************* The following operation is using PUTS and GETS *********************/

   	/* Open file to write/ create a file if it doesn't exist */
       fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80015c0:	2213      	movs	r2, #19
 80015c2:	498b      	ldr	r1, [pc, #556]	; (80017f0 <main+0x31c>)
 80015c4:	488b      	ldr	r0, [pc, #556]	; (80017f4 <main+0x320>)
 80015c6:	f004 fee7 	bl	8006398 <f_open>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b7c      	ldr	r3, [pc, #496]	; (80017c0 <main+0x2ec>)
 80015d0:	701a      	strb	r2, [r3, #0]

   	/* Writing text */
   	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
 80015d2:	4988      	ldr	r1, [pc, #544]	; (80017f4 <main+0x320>)
 80015d4:	4888      	ldr	r0, [pc, #544]	; (80017f8 <main+0x324>)
 80015d6:	f006 f87d 	bl	80076d4 <f_puts>

   	/* Close file */
   	fresult = f_close(&fil);
 80015da:	4886      	ldr	r0, [pc, #536]	; (80017f4 <main+0x320>)
 80015dc:	f005 fc19 	bl	8006e12 <f_close>
 80015e0:	4603      	mov	r3, r0
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b76      	ldr	r3, [pc, #472]	; (80017c0 <main+0x2ec>)
 80015e6:	701a      	strb	r2, [r3, #0]

   	if (fresult == FR_OK)send_uart ("File1.txt created and the data is written \n");
 80015e8:	4b75      	ldr	r3, [pc, #468]	; (80017c0 <main+0x2ec>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <main+0x122>
 80015f0:	4882      	ldr	r0, [pc, #520]	; (80017fc <main+0x328>)
 80015f2:	f7ff ff57 	bl	80014a4 <send_uart>

   	/* Open file to read */
   	fresult = f_open(&fil, "file1.txt", FA_READ);
 80015f6:	2201      	movs	r2, #1
 80015f8:	497d      	ldr	r1, [pc, #500]	; (80017f0 <main+0x31c>)
 80015fa:	487e      	ldr	r0, [pc, #504]	; (80017f4 <main+0x320>)
 80015fc:	f004 fecc 	bl	8006398 <f_open>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	4b6e      	ldr	r3, [pc, #440]	; (80017c0 <main+0x2ec>)
 8001606:	701a      	strb	r2, [r3, #0]

   	/* Read string from the file */
   	f_gets(buffer, f_size(&fil), &fil);
 8001608:	4b7a      	ldr	r3, [pc, #488]	; (80017f4 <main+0x320>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4a79      	ldr	r2, [pc, #484]	; (80017f4 <main+0x320>)
 800160e:	4619      	mov	r1, r3
 8001610:	4874      	ldr	r0, [pc, #464]	; (80017e4 <main+0x310>)
 8001612:	f005 ffac 	bl	800756e <f_gets>

   	send_uart("File1.txt is opened and it contains the data as shown below\n");
 8001616:	487a      	ldr	r0, [pc, #488]	; (8001800 <main+0x32c>)
 8001618:	f7ff ff44 	bl	80014a4 <send_uart>
   	send_uart(buffer);
 800161c:	4871      	ldr	r0, [pc, #452]	; (80017e4 <main+0x310>)
 800161e:	f7ff ff41 	bl	80014a4 <send_uart>
   	send_uart("\n\n");
 8001622:	4878      	ldr	r0, [pc, #480]	; (8001804 <main+0x330>)
 8001624:	f7ff ff3e 	bl	80014a4 <send_uart>

   	/* Close file */
   	f_close(&fil);
 8001628:	4872      	ldr	r0, [pc, #456]	; (80017f4 <main+0x320>)
 800162a:	f005 fbf2 	bl	8006e12 <f_close>

   	clear_buffer();
 800162e:	f7ff ff1f 	bl	8001470 <clear_buffer>


   	/**************** The following operation is using f_write and f_read **************************/

   	/* Create second file with read write access and open it */
   	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001632:	220a      	movs	r2, #10
 8001634:	4974      	ldr	r1, [pc, #464]	; (8001808 <main+0x334>)
 8001636:	486f      	ldr	r0, [pc, #444]	; (80017f4 <main+0x320>)
 8001638:	f004 feae 	bl	8006398 <f_open>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <main+0x2ec>)
 8001642:	701a      	strb	r2, [r3, #0]

   	/* Writing text */
   	strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello from Controllerstech\n");
 8001644:	4a67      	ldr	r2, [pc, #412]	; (80017e4 <main+0x310>)
 8001646:	4b71      	ldr	r3, [pc, #452]	; (800180c <main+0x338>)
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	2357      	movs	r3, #87	; 0x57
 800164e:	461a      	mov	r2, r3
 8001650:	f006 f9aa 	bl	80079a8 <memcpy>

   	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001654:	4863      	ldr	r0, [pc, #396]	; (80017e4 <main+0x310>)
 8001656:	f7ff fef5 	bl	8001444 <bufsize>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	4b6c      	ldr	r3, [pc, #432]	; (8001810 <main+0x33c>)
 8001660:	4960      	ldr	r1, [pc, #384]	; (80017e4 <main+0x310>)
 8001662:	4864      	ldr	r0, [pc, #400]	; (80017f4 <main+0x320>)
 8001664:	f005 f9c3 	bl	80069ee <f_write>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	4b54      	ldr	r3, [pc, #336]	; (80017c0 <main+0x2ec>)
 800166e:	701a      	strb	r2, [r3, #0]

   	send_uart ("File2.txt created and data is written\n");
 8001670:	4868      	ldr	r0, [pc, #416]	; (8001814 <main+0x340>)
 8001672:	f7ff ff17 	bl	80014a4 <send_uart>

   	/* Close file */
   	f_close(&fil);
 8001676:	485f      	ldr	r0, [pc, #380]	; (80017f4 <main+0x320>)
 8001678:	f005 fbcb 	bl	8006e12 <f_close>



   	// clearing buffer to show that result obtained is from the file
   	clear_buffer();
 800167c:	f7ff fef8 	bl	8001470 <clear_buffer>

   	/* Open second file to read */
   	fresult = f_open(&fil, "file2.txt", FA_READ);
 8001680:	2201      	movs	r2, #1
 8001682:	4961      	ldr	r1, [pc, #388]	; (8001808 <main+0x334>)
 8001684:	485b      	ldr	r0, [pc, #364]	; (80017f4 <main+0x320>)
 8001686:	f004 fe87 	bl	8006398 <f_open>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	4b4c      	ldr	r3, [pc, #304]	; (80017c0 <main+0x2ec>)
 8001690:	701a      	strb	r2, [r3, #0]
   	if (fresult == FR_OK)send_uart ("file2.txt is open and the data is shown below\n");
 8001692:	4b4b      	ldr	r3, [pc, #300]	; (80017c0 <main+0x2ec>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d102      	bne.n	80016a0 <main+0x1cc>
 800169a:	485f      	ldr	r0, [pc, #380]	; (8001818 <main+0x344>)
 800169c:	f7ff ff02 	bl	80014a4 <send_uart>

   	/* Read data from the file
   	 * Please see the function details for the arguments */
   	f_read (&fil, buffer, f_size(&fil), &br);
 80016a0:	4b54      	ldr	r3, [pc, #336]	; (80017f4 <main+0x320>)
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	4b5d      	ldr	r3, [pc, #372]	; (800181c <main+0x348>)
 80016a6:	494f      	ldr	r1, [pc, #316]	; (80017e4 <main+0x310>)
 80016a8:	4852      	ldr	r0, [pc, #328]	; (80017f4 <main+0x320>)
 80016aa:	f005 f841 	bl	8006730 <f_read>
   	send_uart(buffer);
 80016ae:	484d      	ldr	r0, [pc, #308]	; (80017e4 <main+0x310>)
 80016b0:	f7ff fef8 	bl	80014a4 <send_uart>
   	send_uart("\n\n");
 80016b4:	4853      	ldr	r0, [pc, #332]	; (8001804 <main+0x330>)
 80016b6:	f7ff fef5 	bl	80014a4 <send_uart>

   	/* Close file */
   	f_close(&fil);
 80016ba:	484e      	ldr	r0, [pc, #312]	; (80017f4 <main+0x320>)
 80016bc:	f005 fba9 	bl	8006e12 <f_close>

   	clear_buffer();
 80016c0:	f7ff fed6 	bl	8001470 <clear_buffer>


   	/*********************UPDATING an existing file ***************************/

   	/* Open the file with write access */
   	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80016c4:	2203      	movs	r2, #3
 80016c6:	4950      	ldr	r1, [pc, #320]	; (8001808 <main+0x334>)
 80016c8:	484a      	ldr	r0, [pc, #296]	; (80017f4 <main+0x320>)
 80016ca:	f004 fe65 	bl	8006398 <f_open>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <main+0x2ec>)
 80016d4:	701a      	strb	r2, [r3, #0]

   	/* Move to offset to the end of the file */
   	fresult = f_lseek(&fil, f_size(&fil));
 80016d6:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <main+0x320>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	4619      	mov	r1, r3
 80016dc:	4845      	ldr	r0, [pc, #276]	; (80017f4 <main+0x320>)
 80016de:	f005 fbc2 	bl	8006e66 <f_lseek>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <main+0x2ec>)
 80016e8:	701a      	strb	r2, [r3, #0]

   	if (fresult == FR_OK)send_uart ("About to update the file2.txt\n");
 80016ea:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <main+0x2ec>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d102      	bne.n	80016f8 <main+0x224>
 80016f2:	484b      	ldr	r0, [pc, #300]	; (8001820 <main+0x34c>)
 80016f4:	f7ff fed6 	bl	80014a4 <send_uart>

   	/* write the string to the file */
   	fresult = f_puts("This is updated data and it should be in the end", &fil);
 80016f8:	493e      	ldr	r1, [pc, #248]	; (80017f4 <main+0x320>)
 80016fa:	484a      	ldr	r0, [pc, #296]	; (8001824 <main+0x350>)
 80016fc:	f005 ffea 	bl	80076d4 <f_puts>
 8001700:	4603      	mov	r3, r0
 8001702:	b2da      	uxtb	r2, r3
 8001704:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <main+0x2ec>)
 8001706:	701a      	strb	r2, [r3, #0]

   	f_close (&fil);
 8001708:	483a      	ldr	r0, [pc, #232]	; (80017f4 <main+0x320>)
 800170a:	f005 fb82 	bl	8006e12 <f_close>

   	clear_buffer();
 800170e:	f7ff feaf 	bl	8001470 <clear_buffer>

   	/* Open to read the file */
   	fresult = f_open (&fil, "file2.txt", FA_READ);
 8001712:	2201      	movs	r2, #1
 8001714:	493c      	ldr	r1, [pc, #240]	; (8001808 <main+0x334>)
 8001716:	4837      	ldr	r0, [pc, #220]	; (80017f4 <main+0x320>)
 8001718:	f004 fe3e 	bl	8006398 <f_open>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <main+0x2ec>)
 8001722:	701a      	strb	r2, [r3, #0]

   	/* Read string from the file */
   	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 8001724:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <main+0x320>)
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	4b3c      	ldr	r3, [pc, #240]	; (800181c <main+0x348>)
 800172a:	492e      	ldr	r1, [pc, #184]	; (80017e4 <main+0x310>)
 800172c:	4831      	ldr	r0, [pc, #196]	; (80017f4 <main+0x320>)
 800172e:	f004 ffff 	bl	8006730 <f_read>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <main+0x2ec>)
 8001738:	701a      	strb	r2, [r3, #0]
   	if (fresult == FR_OK)send_uart ("Below is the data from updated file2.txt\n");
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <main+0x2ec>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <main+0x274>
 8001742:	4839      	ldr	r0, [pc, #228]	; (8001828 <main+0x354>)
 8001744:	f7ff feae 	bl	80014a4 <send_uart>
   	send_uart(buffer);
 8001748:	4826      	ldr	r0, [pc, #152]	; (80017e4 <main+0x310>)
 800174a:	f7ff feab 	bl	80014a4 <send_uart>
   	send_uart("\n\n");
 800174e:	482d      	ldr	r0, [pc, #180]	; (8001804 <main+0x330>)
 8001750:	f7ff fea8 	bl	80014a4 <send_uart>

   	/* Close file */
   	f_close(&fil);
 8001754:	4827      	ldr	r0, [pc, #156]	; (80017f4 <main+0x320>)
 8001756:	f005 fb5c 	bl	8006e12 <f_close>

   	clear_buffer();
 800175a:	f7ff fe89 	bl	8001470 <clear_buffer>


   	/*************************REMOVING FILES FROM THE DIRECTORY ****************************/

   	fresult = f_unlink("/file1.txt");
 800175e:	4833      	ldr	r0, [pc, #204]	; (800182c <main+0x358>)
 8001760:	f005 fe5a 	bl	8007418 <f_unlink>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <main+0x2ec>)
 800176a:	701a      	strb	r2, [r3, #0]
   	if (fresult == FR_OK) send_uart("file1.txt removed successfully...\n");
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <main+0x2ec>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <main+0x2a6>
 8001774:	482e      	ldr	r0, [pc, #184]	; (8001830 <main+0x35c>)
 8001776:	f7ff fe95 	bl	80014a4 <send_uart>

   	fresult = f_unlink("/file2.txt");
 800177a:	482e      	ldr	r0, [pc, #184]	; (8001834 <main+0x360>)
 800177c:	f005 fe4c 	bl	8007418 <f_unlink>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <main+0x2ec>)
 8001786:	701a      	strb	r2, [r3, #0]
   	if (fresult == FR_OK) send_uart("file2.txt removed successfully...\n");
 8001788:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <main+0x2ec>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d102      	bne.n	8001796 <main+0x2c2>
 8001790:	4829      	ldr	r0, [pc, #164]	; (8001838 <main+0x364>)
 8001792:	f7ff fe87 	bl	80014a4 <send_uart>

   	/* Unmount SDCARD */
   	fresult = f_mount(NULL, "/", 1);
 8001796:	2201      	movs	r2, #1
 8001798:	4907      	ldr	r1, [pc, #28]	; (80017b8 <main+0x2e4>)
 800179a:	2000      	movs	r0, #0
 800179c:	f004 fdb6 	bl	800630c <f_mount>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <main+0x2ec>)
 80017a6:	701a      	strb	r2, [r3, #0]
   	if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <main+0x2ec>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <main+0x2e2>
 80017b0:	4822      	ldr	r0, [pc, #136]	; (800183c <main+0x368>)
 80017b2:	f7ff fe77 	bl	80014a4 <send_uart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <main+0x2e2>
 80017b8:	080082c4 	.word	0x080082c4
 80017bc:	20000148 	.word	0x20000148
 80017c0:	200021b0 	.word	0x200021b0
 80017c4:	080082c8 	.word	0x080082c8
 80017c8:	080082ec 	.word	0x080082ec
 80017cc:	200021bc 	.word	0x200021bc
 80017d0:	200021c0 	.word	0x200021c0
 80017d4:	08008310 	.word	0x08008310
 80017d8:	3fe00000 	.word	0x3fe00000
 80017dc:	200021c4 	.word	0x200021c4
 80017e0:	08008314 	.word	0x08008314
 80017e4:	200021cc 	.word	0x200021cc
 80017e8:	200021c8 	.word	0x200021c8
 80017ec:	08008330 	.word	0x08008330
 80017f0:	0800834c 	.word	0x0800834c
 80017f4:	20001180 	.word	0x20001180
 80017f8:	08008358 	.word	0x08008358
 80017fc:	080083a0 	.word	0x080083a0
 8001800:	080083cc 	.word	0x080083cc
 8001804:	0800840c 	.word	0x0800840c
 8001808:	08008410 	.word	0x08008410
 800180c:	0800841c 	.word	0x0800841c
 8001810:	200021b8 	.word	0x200021b8
 8001814:	08008474 	.word	0x08008474
 8001818:	0800849c 	.word	0x0800849c
 800181c:	200021b4 	.word	0x200021b4
 8001820:	080084cc 	.word	0x080084cc
 8001824:	080084ec 	.word	0x080084ec
 8001828:	08008520 	.word	0x08008520
 800182c:	0800854c 	.word	0x0800854c
 8001830:	08008558 	.word	0x08008558
 8001834:	0800857c 	.word	0x0800857c
 8001838:	08008588 	.word	0x08008588
 800183c:	080085ac 	.word	0x080085ac

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b092      	sub	sp, #72	; 0x48
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	2234      	movs	r2, #52	; 0x34
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f006 f8b8 	bl	80079c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	463b      	mov	r3, r7
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001862:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <SystemClock_Config+0x98>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800186a:	4a1b      	ldr	r2, [pc, #108]	; (80018d8 <SystemClock_Config+0x98>)
 800186c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001870:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001872:	2302      	movs	r3, #2
 8001874:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001876:	2301      	movs	r3, #1
 8001878:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800187a:	2310      	movs	r3, #16
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187e:	2302      	movs	r3, #2
 8001880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001882:	2300      	movs	r3, #0
 8001884:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001886:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800188a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800188c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001890:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fd4a 	bl	8002330 <HAL_RCC_OscConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80018a2:	f000 f8bb 	bl	8001a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a6:	230f      	movs	r3, #15
 80018a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018aa:	2303      	movs	r3, #3
 80018ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018ba:	463b      	mov	r3, r7
 80018bc:	2101      	movs	r1, #1
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 f866 	bl	8002990 <HAL_RCC_ClockConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80018ca:	f000 f8a7 	bl	8001a1c <Error_Handler>
  }
}
 80018ce:	bf00      	nop
 80018d0:	3748      	adds	r7, #72	; 0x48
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40007000 	.word	0x40007000

080018dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <MX_SPI2_Init+0x64>)
 80018e2:	4a18      	ldr	r2, [pc, #96]	; (8001944 <MX_SPI2_Init+0x68>)
 80018e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <MX_SPI2_Init+0x64>)
 80018e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <MX_SPI2_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <MX_SPI2_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <MX_SPI2_Init+0x64>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <MX_SPI2_Init+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <MX_SPI2_Init+0x64>)
 8001908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800190c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_SPI2_Init+0x64>)
 8001910:	2200      	movs	r2, #0
 8001912:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <MX_SPI2_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_SPI2_Init+0x64>)
 800191c:	2200      	movs	r2, #0
 800191e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <MX_SPI2_Init+0x64>)
 8001922:	2200      	movs	r2, #0
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_SPI2_Init+0x64>)
 8001928:	220a      	movs	r2, #10
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800192c:	4804      	ldr	r0, [pc, #16]	; (8001940 <MX_SPI2_Init+0x64>)
 800192e:	f001 faf5 	bl	8002f1c <HAL_SPI_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001938:	f000 f870 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200000a8 	.word	0x200000a8
 8001944:	40003800 	.word	0x40003800

08001948 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <MX_USART2_UART_Init+0x50>)
 8001950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001980:	f001 ff12 	bl	80037a8 <HAL_UART_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800198a:	f000 f847 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000100 	.word	0x20000100
 8001998:	40004400 	.word	0x40004400

0800199c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
 80019b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <MX_GPIO_Init+0x78>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <MX_GPIO_Init+0x78>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	61d3      	str	r3, [r2, #28]
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <MX_GPIO_Init+0x78>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <MX_GPIO_Init+0x78>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <MX_GPIO_Init+0x78>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_GPIO_Init+0x78>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(cs_pin_GPIO_Port, cs_pin_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e8:	480b      	ldr	r0, [pc, #44]	; (8001a18 <MX_GPIO_Init+0x7c>)
 80019ea:	f000 fc89 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : cs_pin_Pin */
  GPIO_InitStruct.Pin = cs_pin_Pin;
 80019ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(cs_pin_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	4619      	mov	r1, r3
 8001a06:	4804      	ldr	r0, [pc, #16]	; (8001a18 <MX_GPIO_Init+0x7c>)
 8001a08:	f000 fafa 	bl	8002000 <HAL_GPIO_Init>

}
 8001a0c:	bf00      	nop
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020400 	.word	0x40020400

08001a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a20:	b672      	cpsid	i
}
 8001a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <Error_Handler+0x8>
	...

08001a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_MspInit+0x5c>)
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <HAL_MspInit+0x5c>)
 8001a34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a38:	6253      	str	r3, [r2, #36]	; 0x24
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_MspInit+0x5c>)
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_MspInit+0x5c>)
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <HAL_MspInit+0x5c>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6213      	str	r3, [r2, #32]
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_MspInit+0x5c>)
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_MspInit+0x5c>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	4a08      	ldr	r2, [pc, #32]	; (8001a84 <HAL_MspInit+0x5c>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6253      	str	r3, [r2, #36]	; 0x24
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_MspInit+0x5c>)
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a76:	2007      	movs	r0, #7
 8001a78:	f000 fa8e 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40023800 	.word	0x40023800

08001a88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <HAL_SPI_MspInit+0x7c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d128      	bne.n	8001afc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_SPI_MspInit+0x80>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	4a16      	ldr	r2, [pc, #88]	; (8001b08 <HAL_SPI_MspInit+0x80>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab4:	6253      	str	r3, [r2, #36]	; 0x24
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <HAL_SPI_MspInit+0x80>)
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_SPI_MspInit+0x80>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4a10      	ldr	r2, [pc, #64]	; (8001b08 <HAL_SPI_MspInit+0x80>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	61d3      	str	r3, [r2, #28]
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_SPI_MspInit+0x80>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ada:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aec:	2305      	movs	r3, #5
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <HAL_SPI_MspInit+0x84>)
 8001af8:	f000 fa82 	bl	8002000 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40003800 	.word	0x40003800
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020400 	.word	0x40020400

08001b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <HAL_UART_MspInit+0x7c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d127      	bne.n	8001b82 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b32:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_UART_MspInit+0x80>)
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	4a16      	ldr	r2, [pc, #88]	; (8001b90 <HAL_UART_MspInit+0x80>)
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3c:	6253      	str	r3, [r2, #36]	; 0x24
 8001b3e:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <HAL_UART_MspInit+0x80>)
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_UART_MspInit+0x80>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <HAL_UART_MspInit+0x80>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	61d3      	str	r3, [r2, #28]
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_UART_MspInit+0x80>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b62:	230c      	movs	r3, #12
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b72:	2307      	movs	r3, #7
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4805      	ldr	r0, [pc, #20]	; (8001b94 <HAL_UART_MspInit+0x84>)
 8001b7e:	f000 fa3f 	bl	8002000 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	3728      	adds	r7, #40	; 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40004400 	.word	0x40004400
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000

08001b98 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <SDTimer_Handler+0x3c>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d006      	beq.n	8001bb4 <SDTimer_Handler+0x1c>
    Timer1--;
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <SDTimer_Handler+0x3c>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <SDTimer_Handler+0x3c>)
 8001bb2:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <SDTimer_Handler+0x40>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d006      	beq.n	8001bcc <SDTimer_Handler+0x34>
    Timer2--;
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <SDTimer_Handler+0x40>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <SDTimer_Handler+0x40>)
 8001bca:	801a      	strh	r2, [r3, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	2000224e 	.word	0x2000224e
 8001bd8:	20002250 	.word	0x20002250

08001bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <NMI_Handler+0x4>

08001be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <HardFault_Handler+0x4>

08001be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <MemManage_Handler+0x4>

08001bee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <BusFault_Handler+0x4>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <UsageFault_Handler+0x4>

08001bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr

08001c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
	...

08001c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c24:	f000 f8ca 	bl	8001dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  FatFsCnt++;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <SysTick_Handler+0x30>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <SysTick_Handler+0x30>)
 8001c34:	701a      	strb	r2, [r3, #0]
  	  if(FatFsCnt >= 10)
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <SysTick_Handler+0x30>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b09      	cmp	r3, #9
 8001c3e:	d904      	bls.n	8001c4a <SysTick_Handler+0x2a>
  	  {
  	    FatFsCnt = 0;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <SysTick_Handler+0x30>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
  	    SDTimer_Handler();
 8001c46:	f7ff ffa7 	bl	8001b98 <SDTimer_Handler>




  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000224c 	.word	0x2000224c

08001c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c5c:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <_sbrk+0x5c>)
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <_sbrk+0x60>)
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <_sbrk+0x64>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <_sbrk+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d207      	bcs.n	8001c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c84:	f005 fe66 	bl	8007954 <__errno>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c92:	e009      	b.n	8001ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <_sbrk+0x64>)
 8001ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20008000 	.word	0x20008000
 8001cb4:	00000400 	.word	0x00000400
 8001cb8:	20002254 	.word	0x20002254
 8001cbc:	200024a8 	.word	0x200024a8

08001cc0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ccc:	f7ff fff8 	bl	8001cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd0:	480b      	ldr	r0, [pc, #44]	; (8001d00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cd2:	490c      	ldr	r1, [pc, #48]	; (8001d04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd8:	e002      	b.n	8001ce0 <LoopCopyDataInit>

08001cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cde:	3304      	adds	r3, #4

08001ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce4:	d3f9      	bcc.n	8001cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce6:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ce8:	4c09      	ldr	r4, [pc, #36]	; (8001d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cec:	e001      	b.n	8001cf2 <LoopFillZerobss>

08001cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf0:	3204      	adds	r2, #4

08001cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf4:	d3fb      	bcc.n	8001cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cf6:	f005 fe33 	bl	8007960 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cfa:	f7ff fbeb 	bl	80014d4 <main>
  bx lr
 8001cfe:	4770      	bx	lr
  ldr r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d04:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001d08:	08008ac0 	.word	0x08008ac0
  ldr r2, =_sbss
 8001d0c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001d10:	200024a8 	.word	0x200024a8

08001d14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC1_IRQHandler>

08001d16 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f000 f939 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d26:	2000      	movs	r0, #0
 8001d28:	f000 f80e 	bl	8001d48 <HAL_InitTick>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	e001      	b.n	8001d3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d38:	f7ff fe76 	bl	8001a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_InitTick+0x68>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d022      	beq.n	8001da2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d5c:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_InitTick+0x6c>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <HAL_InitTick+0x68>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 f938 	bl	8001fe6 <HAL_SYSTICK_Config>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10f      	bne.n	8001d9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b0f      	cmp	r3, #15
 8001d80:	d809      	bhi.n	8001d96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d82:	2200      	movs	r2, #0
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d8a:	f000 f910 	bl	8001fae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_InitTick+0x70>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	e007      	b.n	8001da6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	e004      	b.n	8001da6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	e001      	b.n	8001da6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	2000000c 	.word	0x2000000c
 8001db4:	20000004 	.word	0x20000004
 8001db8:	20000008 	.word	0x20000008

08001dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_IncTick+0x1c>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_IncTick+0x20>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4413      	add	r3, r2
 8001dca:	4a03      	ldr	r2, [pc, #12]	; (8001dd8 <HAL_IncTick+0x1c>)
 8001dcc:	6013      	str	r3, [r2, #0]
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20002258 	.word	0x20002258
 8001ddc:	2000000c 	.word	0x2000000c

08001de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return uwTick;
 8001de4:	4b02      	ldr	r3, [pc, #8]	; (8001df0 <HAL_GetTick+0x10>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	20002258 	.word	0x20002258

08001df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dfc:	f7ff fff0 	bl	8001de0 <HAL_GetTick>
 8001e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e0c:	d004      	beq.n	8001e18 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_Delay+0x40>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e18:	bf00      	nop
 8001e1a:	f7ff ffe1 	bl	8001de0 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d8f7      	bhi.n	8001e1a <HAL_Delay+0x26>
  {
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	2000000c 	.word	0x2000000c

08001e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	60d3      	str	r3, [r2, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <__NVIC_GetPriorityGrouping+0x18>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	f003 0307 	and.w	r3, r3, #7
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	db0a      	blt.n	8001ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	490c      	ldr	r1, [pc, #48]	; (8001ee8 <__NVIC_SetPriority+0x4c>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	0112      	lsls	r2, r2, #4
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec4:	e00a      	b.n	8001edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4908      	ldr	r1, [pc, #32]	; (8001eec <__NVIC_SetPriority+0x50>)
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	3b04      	subs	r3, #4
 8001ed4:	0112      	lsls	r2, r2, #4
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	440b      	add	r3, r1
 8001eda:	761a      	strb	r2, [r3, #24]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f1c3 0307 	rsb	r3, r3, #7
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	bf28      	it	cs
 8001f0e:	2304      	movcs	r3, #4
 8001f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3304      	adds	r3, #4
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d902      	bls.n	8001f20 <NVIC_EncodePriority+0x30>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3b03      	subs	r3, #3
 8001f1e:	e000      	b.n	8001f22 <NVIC_EncodePriority+0x32>
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	401a      	ands	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	4313      	orrs	r3, r2
         );
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f64:	d301      	bcc.n	8001f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00f      	b.n	8001f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <SysTick_Config+0x40>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f72:	210f      	movs	r1, #15
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f78:	f7ff ff90 	bl	8001e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SysTick_Config+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <SysTick_Config+0x40>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff49 	bl	8001e38 <__NVIC_SetPriorityGrouping>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc0:	f7ff ff5e 	bl	8001e80 <__NVIC_GetPriorityGrouping>
 8001fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	6978      	ldr	r0, [r7, #20]
 8001fcc:	f7ff ff90 	bl	8001ef0 <NVIC_EncodePriority>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff5f 	bl	8001e9c <__NVIC_SetPriority>
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ffb0 	bl	8001f54 <SysTick_Config>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002016:	e154      	b.n	80022c2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2101      	movs	r1, #1
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	4013      	ands	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8146 	beq.w	80022bc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b01      	cmp	r3, #1
 800203a:	d005      	beq.n	8002048 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002044:	2b02      	cmp	r3, #2
 8002046:	d130      	bne.n	80020aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	2203      	movs	r2, #3
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800207e:	2201      	movs	r2, #1
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	f003 0201 	and.w	r2, r3, #1
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d017      	beq.n	80020e6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	2203      	movs	r2, #3
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d123      	bne.n	800213a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	08da      	lsrs	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3208      	adds	r2, #8
 80020fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	220f      	movs	r2, #15
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	08da      	lsrs	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3208      	adds	r2, #8
 8002134:	6939      	ldr	r1, [r7, #16]
 8002136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	2203      	movs	r2, #3
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0203 	and.w	r2, r3, #3
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 80a0 	beq.w	80022bc <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217c:	4b58      	ldr	r3, [pc, #352]	; (80022e0 <HAL_GPIO_Init+0x2e0>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a57      	ldr	r2, [pc, #348]	; (80022e0 <HAL_GPIO_Init+0x2e0>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6213      	str	r3, [r2, #32]
 8002188:	4b55      	ldr	r3, [pc, #340]	; (80022e0 <HAL_GPIO_Init+0x2e0>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002194:	4a53      	ldr	r2, [pc, #332]	; (80022e4 <HAL_GPIO_Init+0x2e4>)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	089b      	lsrs	r3, r3, #2
 800219a:	3302      	adds	r3, #2
 800219c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	220f      	movs	r2, #15
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a4b      	ldr	r2, [pc, #300]	; (80022e8 <HAL_GPIO_Init+0x2e8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d019      	beq.n	80021f4 <HAL_GPIO_Init+0x1f4>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a4a      	ldr	r2, [pc, #296]	; (80022ec <HAL_GPIO_Init+0x2ec>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d013      	beq.n	80021f0 <HAL_GPIO_Init+0x1f0>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a49      	ldr	r2, [pc, #292]	; (80022f0 <HAL_GPIO_Init+0x2f0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d00d      	beq.n	80021ec <HAL_GPIO_Init+0x1ec>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a48      	ldr	r2, [pc, #288]	; (80022f4 <HAL_GPIO_Init+0x2f4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d007      	beq.n	80021e8 <HAL_GPIO_Init+0x1e8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a47      	ldr	r2, [pc, #284]	; (80022f8 <HAL_GPIO_Init+0x2f8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d101      	bne.n	80021e4 <HAL_GPIO_Init+0x1e4>
 80021e0:	2304      	movs	r3, #4
 80021e2:	e008      	b.n	80021f6 <HAL_GPIO_Init+0x1f6>
 80021e4:	2305      	movs	r3, #5
 80021e6:	e006      	b.n	80021f6 <HAL_GPIO_Init+0x1f6>
 80021e8:	2303      	movs	r3, #3
 80021ea:	e004      	b.n	80021f6 <HAL_GPIO_Init+0x1f6>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e002      	b.n	80021f6 <HAL_GPIO_Init+0x1f6>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_GPIO_Init+0x1f6>
 80021f4:	2300      	movs	r3, #0
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	f002 0203 	and.w	r2, r2, #3
 80021fc:	0092      	lsls	r2, r2, #2
 80021fe:	4093      	lsls	r3, r2
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002206:	4937      	ldr	r1, [pc, #220]	; (80022e4 <HAL_GPIO_Init+0x2e4>)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002214:	4b39      	ldr	r3, [pc, #228]	; (80022fc <HAL_GPIO_Init+0x2fc>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002238:	4a30      	ldr	r2, [pc, #192]	; (80022fc <HAL_GPIO_Init+0x2fc>)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800223e:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <HAL_GPIO_Init+0x2fc>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002262:	4a26      	ldr	r2, [pc, #152]	; (80022fc <HAL_GPIO_Init+0x2fc>)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002268:	4b24      	ldr	r3, [pc, #144]	; (80022fc <HAL_GPIO_Init+0x2fc>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800228c:	4a1b      	ldr	r2, [pc, #108]	; (80022fc <HAL_GPIO_Init+0x2fc>)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002292:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <HAL_GPIO_Init+0x2fc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022b6:	4a11      	ldr	r2, [pc, #68]	; (80022fc <HAL_GPIO_Init+0x2fc>)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3301      	adds	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f47f aea3 	bne.w	8002018 <HAL_GPIO_Init+0x18>
  }
}
 80022d2:	bf00      	nop
 80022d4:	bf00      	nop
 80022d6:	371c      	adds	r7, #28
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40010000 	.word	0x40010000
 80022e8:	40020000 	.word	0x40020000
 80022ec:	40020400 	.word	0x40020400
 80022f0:	40020800 	.word	0x40020800
 80022f4:	40020c00 	.word	0x40020c00
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40010400 	.word	0x40010400

08002300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
 800230c:	4613      	mov	r3, r2
 800230e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002310:	787b      	ldrb	r3, [r7, #1]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800231c:	e003      	b.n	8002326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800231e:	887b      	ldrh	r3, [r7, #2]
 8002320:	041a      	lsls	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	619a      	str	r2, [r3, #24]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e31d      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002342:	4b94      	ldr	r3, [pc, #592]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800234c:	4b91      	ldr	r3, [pc, #580]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002354:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d07b      	beq.n	800245a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d006      	beq.n	8002376 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2b0c      	cmp	r3, #12
 800236c:	d10f      	bne.n	800238e <HAL_RCC_OscConfig+0x5e>
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002374:	d10b      	bne.n	800238e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002376:	4b87      	ldr	r3, [pc, #540]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d06a      	beq.n	8002458 <HAL_RCC_OscConfig+0x128>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d166      	bne.n	8002458 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e2f7      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d106      	bne.n	80023a4 <HAL_RCC_OscConfig+0x74>
 8002396:	4b7f      	ldr	r3, [pc, #508]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a7e      	ldr	r2, [pc, #504]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e02d      	b.n	8002400 <HAL_RCC_OscConfig+0xd0>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10c      	bne.n	80023c6 <HAL_RCC_OscConfig+0x96>
 80023ac:	4b79      	ldr	r3, [pc, #484]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a78      	ldr	r2, [pc, #480]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 80023b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	4b76      	ldr	r3, [pc, #472]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a75      	ldr	r2, [pc, #468]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 80023be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	e01c      	b.n	8002400 <HAL_RCC_OscConfig+0xd0>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0xb8>
 80023ce:	4b71      	ldr	r3, [pc, #452]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a70      	ldr	r2, [pc, #448]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 80023d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	4b6e      	ldr	r3, [pc, #440]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a6d      	ldr	r2, [pc, #436]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e00b      	b.n	8002400 <HAL_RCC_OscConfig+0xd0>
 80023e8:	4b6a      	ldr	r3, [pc, #424]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a69      	ldr	r2, [pc, #420]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 80023ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	4b67      	ldr	r3, [pc, #412]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a66      	ldr	r2, [pc, #408]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 80023fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d013      	beq.n	8002430 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7ff fcea 	bl	8001de0 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002410:	f7ff fce6 	bl	8001de0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e2ad      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002422:	4b5c      	ldr	r3, [pc, #368]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0xe0>
 800242e:	e014      	b.n	800245a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7ff fcd6 	bl	8001de0 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002438:	f7ff fcd2 	bl	8001de0 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e299      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800244a:	4b52      	ldr	r3, [pc, #328]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x108>
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d05a      	beq.n	800251c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	2b04      	cmp	r3, #4
 800246a:	d005      	beq.n	8002478 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d119      	bne.n	80024a6 <HAL_RCC_OscConfig+0x176>
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d116      	bne.n	80024a6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002478:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_OscConfig+0x160>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d001      	beq.n	8002490 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e276      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b40      	ldr	r3, [pc, #256]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	493d      	ldr	r1, [pc, #244]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a4:	e03a      	b.n	800251c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d020      	beq.n	80024f0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ae:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <HAL_RCC_OscConfig+0x268>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7ff fc94 	bl	8001de0 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024bc:	f7ff fc90 	bl	8001de0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e257      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ce:	4b31      	ldr	r3, [pc, #196]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024da:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	492a      	ldr	r1, [pc, #168]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
 80024ee:	e015      	b.n	800251c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f0:	4b29      	ldr	r3, [pc, #164]	; (8002598 <HAL_RCC_OscConfig+0x268>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7ff fc73 	bl	8001de0 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fe:	f7ff fc6f 	bl	8001de0 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e236      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002510:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80b8 	beq.w	800269a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d170      	bne.n	8002612 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002530:	4b18      	ldr	r3, [pc, #96]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_OscConfig+0x218>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e21a      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1a      	ldr	r2, [r3, #32]
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002554:	429a      	cmp	r2, r3
 8002556:	d921      	bls.n	800259c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	4618      	mov	r0, r3
 800255e:	f000 fc7d 	bl	8002e5c <RCC_SetFlashLatencyFromMSIRange>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e208      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4906      	ldr	r1, [pc, #24]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	061b      	lsls	r3, r3, #24
 800258c:	4901      	ldr	r1, [pc, #4]	; (8002594 <HAL_RCC_OscConfig+0x264>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
 8002592:	e020      	b.n	80025d6 <HAL_RCC_OscConfig+0x2a6>
 8002594:	40023800 	.word	0x40023800
 8002598:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800259c:	4b99      	ldr	r3, [pc, #612]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4996      	ldr	r1, [pc, #600]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ae:	4b95      	ldr	r3, [pc, #596]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	061b      	lsls	r3, r3, #24
 80025bc:	4991      	ldr	r1, [pc, #580]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fc48 	bl	8002e5c <RCC_SetFlashLatencyFromMSIRange>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e1d3      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	0b5b      	lsrs	r3, r3, #13
 80025dc:	3301      	adds	r3, #1
 80025de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80025e6:	4a87      	ldr	r2, [pc, #540]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80025e8:	6892      	ldr	r2, [r2, #8]
 80025ea:	0912      	lsrs	r2, r2, #4
 80025ec:	f002 020f 	and.w	r2, r2, #15
 80025f0:	4985      	ldr	r1, [pc, #532]	; (8002808 <HAL_RCC_OscConfig+0x4d8>)
 80025f2:	5c8a      	ldrb	r2, [r1, r2]
 80025f4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80025f6:	4a85      	ldr	r2, [pc, #532]	; (800280c <HAL_RCC_OscConfig+0x4dc>)
 80025f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025fa:	4b85      	ldr	r3, [pc, #532]	; (8002810 <HAL_RCC_OscConfig+0x4e0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fba2 	bl	8001d48 <HAL_InitTick>
 8002604:	4603      	mov	r3, r0
 8002606:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d045      	beq.n	800269a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	e1b5      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d029      	beq.n	800266e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800261a:	4b7e      	ldr	r3, [pc, #504]	; (8002814 <HAL_RCC_OscConfig+0x4e4>)
 800261c:	2201      	movs	r2, #1
 800261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7ff fbde 	bl	8001de0 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002628:	f7ff fbda 	bl	8001de0 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1a1      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800263a:	4b72      	ldr	r3, [pc, #456]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002646:	4b6f      	ldr	r3, [pc, #444]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	496c      	ldr	r1, [pc, #432]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002658:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	4967      	ldr	r1, [pc, #412]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
 800266c:	e015      	b.n	800269a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800266e:	4b69      	ldr	r3, [pc, #420]	; (8002814 <HAL_RCC_OscConfig+0x4e4>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7ff fbb4 	bl	8001de0 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800267c:	f7ff fbb0 	bl	8001de0 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e177      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800268e:	4b5d      	ldr	r3, [pc, #372]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d030      	beq.n	8002708 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d016      	beq.n	80026dc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ae:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b4:	f7ff fb94 	bl	8001de0 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026bc:	f7ff fb90 	bl	8001de0 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e157      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026ce:	4b4d      	ldr	r3, [pc, #308]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80026d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x38c>
 80026da:	e015      	b.n	8002708 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026dc:	4b4e      	ldr	r3, [pc, #312]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e2:	f7ff fb7d 	bl	8001de0 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ea:	f7ff fb79 	bl	8001de0 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e140      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026fc:	4b41      	ldr	r3, [pc, #260]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80026fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f0      	bne.n	80026ea <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80b5 	beq.w	8002880 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271a:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10d      	bne.n	8002742 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	4b37      	ldr	r3, [pc, #220]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	4a36      	ldr	r2, [pc, #216]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	6253      	str	r3, [r2, #36]	; 0x24
 8002732:	4b34      	ldr	r3, [pc, #208]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273e:	2301      	movs	r3, #1
 8002740:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002742:	4b36      	ldr	r3, [pc, #216]	; (800281c <HAL_RCC_OscConfig+0x4ec>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d118      	bne.n	8002780 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274e:	4b33      	ldr	r3, [pc, #204]	; (800281c <HAL_RCC_OscConfig+0x4ec>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a32      	ldr	r2, [pc, #200]	; (800281c <HAL_RCC_OscConfig+0x4ec>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7ff fb41 	bl	8001de0 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7ff fb3d 	bl	8001de0 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b64      	cmp	r3, #100	; 0x64
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e104      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	4b29      	ldr	r3, [pc, #164]	; (800281c <HAL_RCC_OscConfig+0x4ec>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d106      	bne.n	8002796 <HAL_RCC_OscConfig+0x466>
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 800278a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278c:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 800278e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002792:	6353      	str	r3, [r2, #52]	; 0x34
 8002794:	e02d      	b.n	80027f2 <HAL_RCC_OscConfig+0x4c2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x488>
 800279e:	4b19      	ldr	r3, [pc, #100]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80027a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a2:	4a18      	ldr	r2, [pc, #96]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80027a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a8:	6353      	str	r3, [r2, #52]	; 0x34
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80027ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ae:	4a15      	ldr	r2, [pc, #84]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80027b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027b4:	6353      	str	r3, [r2, #52]	; 0x34
 80027b6:	e01c      	b.n	80027f2 <HAL_RCC_OscConfig+0x4c2>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d10c      	bne.n	80027da <HAL_RCC_OscConfig+0x4aa>
 80027c0:	4b10      	ldr	r3, [pc, #64]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80027c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c4:	4a0f      	ldr	r2, [pc, #60]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80027c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ca:	6353      	str	r3, [r2, #52]	; 0x34
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80027ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d0:	4a0c      	ldr	r2, [pc, #48]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80027d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d6:	6353      	str	r3, [r2, #52]	; 0x34
 80027d8:	e00b      	b.n	80027f2 <HAL_RCC_OscConfig+0x4c2>
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80027dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027de:	4a09      	ldr	r2, [pc, #36]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80027e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027e4:	6353      	str	r3, [r2, #52]	; 0x34
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80027e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ea:	4a06      	ldr	r2, [pc, #24]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80027ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027f0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d024      	beq.n	8002844 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fa:	f7ff faf1 	bl	8001de0 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002800:	e019      	b.n	8002836 <HAL_RCC_OscConfig+0x506>
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	08008624 	.word	0x08008624
 800280c:	20000004 	.word	0x20000004
 8002810:	20000008 	.word	0x20000008
 8002814:	42470020 	.word	0x42470020
 8002818:	42470680 	.word	0x42470680
 800281c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002820:	f7ff fade 	bl	8001de0 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e0a3      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002836:	4b54      	ldr	r3, [pc, #336]	; (8002988 <HAL_RCC_OscConfig+0x658>)
 8002838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ee      	beq.n	8002820 <HAL_RCC_OscConfig+0x4f0>
 8002842:	e014      	b.n	800286e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002844:	f7ff facc 	bl	8001de0 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800284a:	e00a      	b.n	8002862 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800284c:	f7ff fac8 	bl	8001de0 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	; 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e08d      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002862:	4b49      	ldr	r3, [pc, #292]	; (8002988 <HAL_RCC_OscConfig+0x658>)
 8002864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1ee      	bne.n	800284c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800286e:	7ffb      	ldrb	r3, [r7, #31]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d105      	bne.n	8002880 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002874:	4b44      	ldr	r3, [pc, #272]	; (8002988 <HAL_RCC_OscConfig+0x658>)
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	4a43      	ldr	r2, [pc, #268]	; (8002988 <HAL_RCC_OscConfig+0x658>)
 800287a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	2b00      	cmp	r3, #0
 8002886:	d079      	beq.n	800297c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d056      	beq.n	800293c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2b02      	cmp	r3, #2
 8002894:	d13b      	bne.n	800290e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002896:	4b3d      	ldr	r3, [pc, #244]	; (800298c <HAL_RCC_OscConfig+0x65c>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7ff faa0 	bl	8001de0 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a4:	f7ff fa9c 	bl	8001de0 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e063      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028b6:	4b34      	ldr	r3, [pc, #208]	; (8002988 <HAL_RCC_OscConfig+0x658>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c2:	4b31      	ldr	r3, [pc, #196]	; (8002988 <HAL_RCC_OscConfig+0x658>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	4319      	orrs	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	430b      	orrs	r3, r1
 80028da:	492b      	ldr	r1, [pc, #172]	; (8002988 <HAL_RCC_OscConfig+0x658>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e0:	4b2a      	ldr	r3, [pc, #168]	; (800298c <HAL_RCC_OscConfig+0x65c>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7ff fa7b 	bl	8001de0 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ee:	f7ff fa77 	bl	8001de0 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e03e      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002900:	4b21      	ldr	r3, [pc, #132]	; (8002988 <HAL_RCC_OscConfig+0x658>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x5be>
 800290c:	e036      	b.n	800297c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b1f      	ldr	r3, [pc, #124]	; (800298c <HAL_RCC_OscConfig+0x65c>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7ff fa64 	bl	8001de0 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291c:	f7ff fa60 	bl	8001de0 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e027      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <HAL_RCC_OscConfig+0x658>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x5ec>
 800293a:	e01f      	b.n	800297c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e01a      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002948:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <HAL_RCC_OscConfig+0x658>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	429a      	cmp	r2, r3
 800295a:	d10d      	bne.n	8002978 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d106      	bne.n	8002978 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3720      	adds	r7, #32
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800
 800298c:	42470060 	.word	0x42470060

08002990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e11a      	b.n	8002bda <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a4:	4b8f      	ldr	r3, [pc, #572]	; (8002be4 <HAL_RCC_ClockConfig+0x254>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d919      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d105      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x34>
 80029b8:	4b8a      	ldr	r3, [pc, #552]	; (8002be4 <HAL_RCC_ClockConfig+0x254>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a89      	ldr	r2, [pc, #548]	; (8002be4 <HAL_RCC_ClockConfig+0x254>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	4b87      	ldr	r3, [pc, #540]	; (8002be4 <HAL_RCC_ClockConfig+0x254>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 0201 	bic.w	r2, r3, #1
 80029cc:	4985      	ldr	r1, [pc, #532]	; (8002be4 <HAL_RCC_ClockConfig+0x254>)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d4:	4b83      	ldr	r3, [pc, #524]	; (8002be4 <HAL_RCC_ClockConfig+0x254>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e0f9      	b.n	8002bda <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f2:	4b7d      	ldr	r3, [pc, #500]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	497a      	ldr	r1, [pc, #488]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 808e 	beq.w	8002b2e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a1a:	4b73      	ldr	r3, [pc, #460]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d121      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e0d7      	b.n	8002bda <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a32:	4b6d      	ldr	r3, [pc, #436]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d115      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0cb      	b.n	8002bda <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d107      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a4a:	4b67      	ldr	r3, [pc, #412]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e0bf      	b.n	8002bda <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a5a:	4b63      	ldr	r3, [pc, #396]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0b7      	b.n	8002bda <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6a:	4b5f      	ldr	r3, [pc, #380]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f023 0203 	bic.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	495c      	ldr	r1, [pc, #368]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a7c:	f7ff f9b0 	bl	8001de0 <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d112      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f7ff f9a8 	bl	8001de0 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e09b      	b.n	8002bda <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa2:	4b51      	ldr	r3, [pc, #324]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d1ee      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xfc>
 8002aae:	e03e      	b.n	8002b2e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d112      	bne.n	8002ade <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aba:	f7ff f991 	bl	8001de0 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e084      	b.n	8002bda <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ad0:	4b45      	ldr	r3, [pc, #276]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	d1ee      	bne.n	8002aba <HAL_RCC_ClockConfig+0x12a>
 8002adc:	e027      	b.n	8002b2e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d11d      	bne.n	8002b22 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae8:	f7ff f97a 	bl	8001de0 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e06d      	b.n	8002bda <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002afe:	4b3a      	ldr	r3, [pc, #232]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d1ee      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x158>
 8002b0a:	e010      	b.n	8002b2e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0c:	f7ff f968 	bl	8001de0 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e05b      	b.n	8002bda <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b22:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1ee      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2e:	4b2d      	ldr	r3, [pc, #180]	; (8002be4 <HAL_RCC_ClockConfig+0x254>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d219      	bcs.n	8002b70 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d105      	bne.n	8002b4e <HAL_RCC_ClockConfig+0x1be>
 8002b42:	4b28      	ldr	r3, [pc, #160]	; (8002be4 <HAL_RCC_ClockConfig+0x254>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a27      	ldr	r2, [pc, #156]	; (8002be4 <HAL_RCC_ClockConfig+0x254>)
 8002b48:	f043 0304 	orr.w	r3, r3, #4
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <HAL_RCC_ClockConfig+0x254>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 0201 	bic.w	r2, r3, #1
 8002b56:	4923      	ldr	r1, [pc, #140]	; (8002be4 <HAL_RCC_ClockConfig+0x254>)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <HAL_RCC_ClockConfig+0x254>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e034      	b.n	8002bda <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4917      	ldr	r1, [pc, #92]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b9a:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	490f      	ldr	r1, [pc, #60]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bae:	f000 f823 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <HAL_RCC_ClockConfig+0x258>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	490b      	ldr	r1, [pc, #44]	; (8002bec <HAL_RCC_ClockConfig+0x25c>)
 8002bc0:	5ccb      	ldrb	r3, [r1, r3]
 8002bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff f8ba 	bl	8001d48 <HAL_InitTick>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bd8:	7afb      	ldrb	r3, [r7, #11]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40023c00 	.word	0x40023c00
 8002be8:	40023800 	.word	0x40023800
 8002bec:	08008624 	.word	0x08008624
 8002bf0:	20000004 	.word	0x20000004
 8002bf4:	20000008 	.word	0x20000008

08002bf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bfc:	b092      	sub	sp, #72	; 0x48
 8002bfe:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002c00:	4b79      	ldr	r3, [pc, #484]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	2b0c      	cmp	r3, #12
 8002c0e:	d00d      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x34>
 8002c10:	2b0c      	cmp	r3, #12
 8002c12:	f200 80d5 	bhi.w	8002dc0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d002      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0x28>
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d003      	beq.n	8002c26 <HAL_RCC_GetSysClockFreq+0x2e>
 8002c1e:	e0cf      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c20:	4b72      	ldr	r3, [pc, #456]	; (8002dec <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002c22:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002c24:	e0da      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c26:	4b72      	ldr	r3, [pc, #456]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002c28:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002c2a:	e0d7      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c2e:	0c9b      	lsrs	r3, r3, #18
 8002c30:	f003 020f 	and.w	r2, r3, #15
 8002c34:	4b6f      	ldr	r3, [pc, #444]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002c36:	5c9b      	ldrb	r3, [r3, r2]
 8002c38:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3c:	0d9b      	lsrs	r3, r3, #22
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	3301      	adds	r3, #1
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c46:	4b68      	ldr	r3, [pc, #416]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d05d      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c54:	2200      	movs	r2, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	460d      	mov	r5, r1
 8002c5e:	4622      	mov	r2, r4
 8002c60:	462b      	mov	r3, r5
 8002c62:	f04f 0000 	mov.w	r0, #0
 8002c66:	f04f 0100 	mov.w	r1, #0
 8002c6a:	0159      	lsls	r1, r3, #5
 8002c6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c70:	0150      	lsls	r0, r2, #5
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4621      	mov	r1, r4
 8002c78:	1a51      	subs	r1, r2, r1
 8002c7a:	6139      	str	r1, [r7, #16]
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c90:	4659      	mov	r1, fp
 8002c92:	018b      	lsls	r3, r1, #6
 8002c94:	4651      	mov	r1, sl
 8002c96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c9a:	4651      	mov	r1, sl
 8002c9c:	018a      	lsls	r2, r1, #6
 8002c9e:	46d4      	mov	ip, sl
 8002ca0:	ebb2 080c 	subs.w	r8, r2, ip
 8002ca4:	4659      	mov	r1, fp
 8002ca6:	eb63 0901 	sbc.w	r9, r3, r1
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cbe:	4690      	mov	r8, r2
 8002cc0:	4699      	mov	r9, r3
 8002cc2:	4623      	mov	r3, r4
 8002cc4:	eb18 0303 	adds.w	r3, r8, r3
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	462b      	mov	r3, r5
 8002ccc:	eb49 0303 	adc.w	r3, r9, r3
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cde:	4629      	mov	r1, r5
 8002ce0:	024b      	lsls	r3, r1, #9
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002cec:	4601      	mov	r1, r0
 8002cee:	024a      	lsls	r2, r1, #9
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d00:	f7fd fd4a 	bl	8000798 <__aeabi_uldivmod>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4613      	mov	r3, r2
 8002d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d0c:	e055      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	2200      	movs	r2, #0
 8002d12:	623b      	str	r3, [r7, #32]
 8002d14:	627a      	str	r2, [r7, #36]	; 0x24
 8002d16:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d1a:	4642      	mov	r2, r8
 8002d1c:	464b      	mov	r3, r9
 8002d1e:	f04f 0000 	mov.w	r0, #0
 8002d22:	f04f 0100 	mov.w	r1, #0
 8002d26:	0159      	lsls	r1, r3, #5
 8002d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d2c:	0150      	lsls	r0, r2, #5
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	46c4      	mov	ip, r8
 8002d34:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002d38:	4640      	mov	r0, r8
 8002d3a:	4649      	mov	r1, r9
 8002d3c:	468c      	mov	ip, r1
 8002d3e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d4e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d52:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d56:	ebb2 040a 	subs.w	r4, r2, sl
 8002d5a:	eb63 050b 	sbc.w	r5, r3, fp
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	00eb      	lsls	r3, r5, #3
 8002d68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d6c:	00e2      	lsls	r2, r4, #3
 8002d6e:	4614      	mov	r4, r2
 8002d70:	461d      	mov	r5, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	18e3      	adds	r3, r4, r3
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	eb45 0303 	adc.w	r3, r5, r3
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	028b      	lsls	r3, r1, #10
 8002d90:	4620      	mov	r0, r4
 8002d92:	4629      	mov	r1, r5
 8002d94:	4604      	mov	r4, r0
 8002d96:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002d9a:	4601      	mov	r1, r0
 8002d9c:	028a      	lsls	r2, r1, #10
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da4:	2200      	movs	r2, #0
 8002da6:	61bb      	str	r3, [r7, #24]
 8002da8:	61fa      	str	r2, [r7, #28]
 8002daa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dae:	f7fd fcf3 	bl	8000798 <__aeabi_uldivmod>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4613      	mov	r3, r2
 8002db8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8002dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dbc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002dbe:	e00d      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002dc0:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	0b5b      	lsrs	r3, r3, #13
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002dda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3748      	adds	r7, #72	; 0x48
 8002de2:	46bd      	mov	sp, r7
 8002de4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002de8:	40023800 	.word	0x40023800
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	007a1200 	.word	0x007a1200
 8002df4:	08008618 	.word	0x08008618

08002df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dfc:	4b02      	ldr	r3, [pc, #8]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	20000004 	.word	0x20000004

08002e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e10:	f7ff fff2 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	0a1b      	lsrs	r3, r3, #8
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4903      	ldr	r1, [pc, #12]	; (8002e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e22:	5ccb      	ldrb	r3, [r1, r3]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	08008634 	.word	0x08008634

08002e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e38:	f7ff ffde 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	0adb      	lsrs	r3, r3, #11
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	4903      	ldr	r1, [pc, #12]	; (8002e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	08008634 	.word	0x08008634

08002e5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e64:	2300      	movs	r3, #0
 8002e66:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e68:	4b29      	ldr	r3, [pc, #164]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d12c      	bne.n	8002ece <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e74:	4b26      	ldr	r3, [pc, #152]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002e80:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e016      	b.n	8002eba <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8c:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e96:	6253      	str	r3, [r2, #36]	; 0x24
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002eac:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	4a17      	ldr	r2, [pc, #92]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002ec0:	d105      	bne.n	8002ece <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ec8:	d101      	bne.n	8002ece <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002eca:	2301      	movs	r3, #1
 8002ecc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002ed4:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0f      	ldr	r2, [pc, #60]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eda:	f043 0304 	orr.w	r3, r3, #4
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f023 0201 	bic.w	r2, r3, #1
 8002ee8:	490b      	ldr	r1, [pc, #44]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d001      	beq.n	8002f02 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	371c      	adds	r7, #28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40007000 	.word	0x40007000
 8002f18:	40023c00 	.word	0x40023c00

08002f1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e07b      	b.n	8003026 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d108      	bne.n	8002f48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f3e:	d009      	beq.n	8002f54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	61da      	str	r2, [r3, #28]
 8002f46:	e005      	b.n	8002f54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fe fd8a 	bl	8001a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd8:	ea42 0103 	orr.w	r1, r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	f003 0104 	and.w	r1, r3, #4
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	f003 0210 	and.w	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69da      	ldr	r2, [r3, #28]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003014:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b088      	sub	sp, #32
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	603b      	str	r3, [r7, #0]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_SPI_Transmit+0x22>
 800304c:	2302      	movs	r3, #2
 800304e:	e12d      	b.n	80032ac <HAL_SPI_Transmit+0x27e>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003058:	f7fe fec2 	bl	8001de0 <HAL_GetTick>
 800305c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d002      	beq.n	8003074 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800306e:	2302      	movs	r3, #2
 8003070:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003072:	e116      	b.n	80032a2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_SPI_Transmit+0x52>
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d102      	bne.n	8003086 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003084:	e10d      	b.n	80032a2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2203      	movs	r2, #3
 800308a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	88fa      	ldrh	r2, [r7, #6]
 800309e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	88fa      	ldrh	r2, [r7, #6]
 80030a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030cc:	d10f      	bne.n	80030ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	d007      	beq.n	800310c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800310a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003114:	d14f      	bne.n	80031b6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_SPI_Transmit+0xf6>
 800311e:	8afb      	ldrh	r3, [r7, #22]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d142      	bne.n	80031aa <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	881a      	ldrh	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	1c9a      	adds	r2, r3, #2
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003148:	e02f      	b.n	80031aa <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b02      	cmp	r3, #2
 8003156:	d112      	bne.n	800317e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	881a      	ldrh	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	1c9a      	adds	r2, r3, #2
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	86da      	strh	r2, [r3, #54]	; 0x36
 800317c:	e015      	b.n	80031aa <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800317e:	f7fe fe2f 	bl	8001de0 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d803      	bhi.n	8003196 <HAL_SPI_Transmit+0x168>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003194:	d102      	bne.n	800319c <HAL_SPI_Transmit+0x16e>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d106      	bne.n	80031aa <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80031a8:	e07b      	b.n	80032a2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1ca      	bne.n	800314a <HAL_SPI_Transmit+0x11c>
 80031b4:	e050      	b.n	8003258 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_SPI_Transmit+0x196>
 80031be:	8afb      	ldrh	r3, [r7, #22]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d144      	bne.n	800324e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	330c      	adds	r3, #12
 80031ce:	7812      	ldrb	r2, [r2, #0]
 80031d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031ea:	e030      	b.n	800324e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d113      	bne.n	8003222 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	330c      	adds	r3, #12
 8003204:	7812      	ldrb	r2, [r2, #0]
 8003206:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003220:	e015      	b.n	800324e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003222:	f7fe fddd 	bl	8001de0 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d803      	bhi.n	800323a <HAL_SPI_Transmit+0x20c>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003238:	d102      	bne.n	8003240 <HAL_SPI_Transmit+0x212>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d106      	bne.n	800324e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800324c:	e029      	b.n	80032a2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1c9      	bne.n	80031ec <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	6839      	ldr	r1, [r7, #0]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 fa61 	bl	8003724 <SPI_EndRxTxTransaction>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e003      	b.n	80032a2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3720      	adds	r7, #32
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08c      	sub	sp, #48	; 0x30
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032c2:	2301      	movs	r3, #1
 80032c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_SPI_TransmitReceive+0x26>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e198      	b.n	800360c <HAL_SPI_TransmitReceive+0x358>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032e2:	f7fe fd7d 	bl	8001de0 <HAL_GetTick>
 80032e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80032f8:	887b      	ldrh	r3, [r7, #2]
 80032fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003300:	2b01      	cmp	r3, #1
 8003302:	d00f      	beq.n	8003324 <HAL_SPI_TransmitReceive+0x70>
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800330a:	d107      	bne.n	800331c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d103      	bne.n	800331c <HAL_SPI_TransmitReceive+0x68>
 8003314:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003318:	2b04      	cmp	r3, #4
 800331a:	d003      	beq.n	8003324 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800331c:	2302      	movs	r3, #2
 800331e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003322:	e16d      	b.n	8003600 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_SPI_TransmitReceive+0x82>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_SPI_TransmitReceive+0x82>
 8003330:	887b      	ldrh	r3, [r7, #2]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d103      	bne.n	800333e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800333c:	e160      	b.n	8003600 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b04      	cmp	r3, #4
 8003348:	d003      	beq.n	8003352 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2205      	movs	r2, #5
 800334e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	887a      	ldrh	r2, [r7, #2]
 8003362:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	887a      	ldrh	r2, [r7, #2]
 800337a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b40      	cmp	r3, #64	; 0x40
 8003394:	d007      	beq.n	80033a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ae:	d17c      	bne.n	80034aa <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_SPI_TransmitReceive+0x10a>
 80033b8:	8b7b      	ldrh	r3, [r7, #26]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d16a      	bne.n	8003494 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	881a      	ldrh	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	1c9a      	adds	r2, r3, #2
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e2:	e057      	b.n	8003494 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d11b      	bne.n	800342a <HAL_SPI_TransmitReceive+0x176>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d016      	beq.n	800342a <HAL_SPI_TransmitReceive+0x176>
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d113      	bne.n	800342a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	881a      	ldrh	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	1c9a      	adds	r2, r3, #2
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	d119      	bne.n	800346c <HAL_SPI_TransmitReceive+0x1b8>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d014      	beq.n	800346c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	b292      	uxth	r2, r2
 800344e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	1c9a      	adds	r2, r3, #2
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003468:	2301      	movs	r3, #1
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800346c:	f7fe fcb8 	bl	8001de0 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003478:	429a      	cmp	r2, r3
 800347a:	d80b      	bhi.n	8003494 <HAL_SPI_TransmitReceive+0x1e0>
 800347c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003482:	d007      	beq.n	8003494 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003492:	e0b5      	b.n	8003600 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1a2      	bne.n	80033e4 <HAL_SPI_TransmitReceive+0x130>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d19d      	bne.n	80033e4 <HAL_SPI_TransmitReceive+0x130>
 80034a8:	e080      	b.n	80035ac <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_SPI_TransmitReceive+0x204>
 80034b2:	8b7b      	ldrh	r3, [r7, #26]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d16f      	bne.n	8003598 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	330c      	adds	r3, #12
 80034c2:	7812      	ldrb	r2, [r2, #0]
 80034c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034de:	e05b      	b.n	8003598 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d11c      	bne.n	8003528 <HAL_SPI_TransmitReceive+0x274>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d017      	beq.n	8003528 <HAL_SPI_TransmitReceive+0x274>
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d114      	bne.n	8003528 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	330c      	adds	r3, #12
 8003508:	7812      	ldrb	r2, [r2, #0]
 800350a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d119      	bne.n	800356a <HAL_SPI_TransmitReceive+0x2b6>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d014      	beq.n	800356a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003566:	2301      	movs	r3, #1
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800356a:	f7fe fc39 	bl	8001de0 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003576:	429a      	cmp	r2, r3
 8003578:	d803      	bhi.n	8003582 <HAL_SPI_TransmitReceive+0x2ce>
 800357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003580:	d102      	bne.n	8003588 <HAL_SPI_TransmitReceive+0x2d4>
 8003582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003584:	2b00      	cmp	r3, #0
 8003586:	d107      	bne.n	8003598 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003596:	e033      	b.n	8003600 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d19e      	bne.n	80034e0 <HAL_SPI_TransmitReceive+0x22c>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d199      	bne.n	80034e0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f8b7 	bl	8003724 <SPI_EndRxTxTransaction>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d006      	beq.n	80035ca <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80035c8:	e01a      	b.n	8003600 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035f6:	e003      	b.n	8003600 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003608:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800360c:	4618      	mov	r0, r3
 800360e:	3730      	adds	r7, #48	; 0x30
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	4613      	mov	r3, r2
 8003622:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003624:	f7fe fbdc 	bl	8001de0 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	4413      	add	r3, r2
 8003632:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003634:	f7fe fbd4 	bl	8001de0 <HAL_GetTick>
 8003638:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800363a:	4b39      	ldr	r3, [pc, #228]	; (8003720 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	015b      	lsls	r3, r3, #5
 8003640:	0d1b      	lsrs	r3, r3, #20
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	fb02 f303 	mul.w	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800364a:	e054      	b.n	80036f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003652:	d050      	beq.n	80036f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003654:	f7fe fbc4 	bl	8001de0 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	429a      	cmp	r2, r3
 8003662:	d902      	bls.n	800366a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d13d      	bne.n	80036e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003678:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003682:	d111      	bne.n	80036a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800368c:	d004      	beq.n	8003698 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003696:	d107      	bne.n	80036a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b0:	d10f      	bne.n	80036d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e017      	b.n	8003716 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4013      	ands	r3, r2
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	429a      	cmp	r2, r3
 8003704:	bf0c      	ite	eq
 8003706:	2301      	moveq	r3, #1
 8003708:	2300      	movne	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	429a      	cmp	r2, r3
 8003712:	d19b      	bne.n	800364c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3720      	adds	r7, #32
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000004 	.word	0x20000004

08003724 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af02      	add	r7, sp, #8
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003730:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <SPI_EndRxTxTransaction+0x7c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1b      	ldr	r2, [pc, #108]	; (80037a4 <SPI_EndRxTxTransaction+0x80>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	0d5b      	lsrs	r3, r3, #21
 800373c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003740:	fb02 f303 	mul.w	r3, r2, r3
 8003744:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800374e:	d112      	bne.n	8003776 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2200      	movs	r2, #0
 8003758:	2180      	movs	r1, #128	; 0x80
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f7ff ff5a 	bl	8003614 <SPI_WaitFlagStateUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d016      	beq.n	8003794 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376a:	f043 0220 	orr.w	r2, r3, #32
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e00f      	b.n	8003796 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	3b01      	subs	r3, #1
 8003780:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d0f2      	beq.n	8003776 <SPI_EndRxTxTransaction+0x52>
 8003790:	e000      	b.n	8003794 <SPI_EndRxTxTransaction+0x70>
        break;
 8003792:	bf00      	nop
  }

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000004 	.word	0x20000004
 80037a4:	165e9f81 	.word	0x165e9f81

080037a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e042      	b.n	8003840 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fe f99e 	bl	8001b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2224      	movs	r2, #36	; 0x24
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f91d 	bl	8003a2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695a      	ldr	r2, [r3, #20]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	; 0x28
 800384c:	af02      	add	r7, sp, #8
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b20      	cmp	r3, #32
 8003866:	d16d      	bne.n	8003944 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_UART_Transmit+0x2c>
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e066      	b.n	8003946 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2221      	movs	r2, #33	; 0x21
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003886:	f7fe faab 	bl	8001de0 <HAL_GetTick>
 800388a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	88fa      	ldrh	r2, [r7, #6]
 8003896:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a0:	d108      	bne.n	80038b4 <HAL_UART_Transmit+0x6c>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d104      	bne.n	80038b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	e003      	b.n	80038bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038bc:	e02a      	b.n	8003914 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2180      	movs	r1, #128	; 0x80
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f840 	bl	800394e <UART_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e036      	b.n	8003946 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10b      	bne.n	80038f6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	3302      	adds	r3, #2
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	e007      	b.n	8003906 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	781a      	ldrb	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	3301      	adds	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1cf      	bne.n	80038be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2200      	movs	r2, #0
 8003926:	2140      	movs	r1, #64	; 0x40
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f810 	bl	800394e <UART_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e006      	b.n	8003946 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b090      	sub	sp, #64	; 0x40
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395e:	e050      	b.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003966:	d04c      	beq.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <UART_WaitOnFlagUntilTimeout+0x30>
 800396e:	f7fe fa37 	bl	8001de0 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800397a:	429a      	cmp	r2, r3
 800397c:	d241      	bcs.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	330c      	adds	r3, #12
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	330c      	adds	r3, #12
 800399c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800399e:	637a      	str	r2, [r7, #52]	; 0x34
 80039a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e5      	bne.n	800397e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3314      	adds	r3, #20
 80039b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	e853 3f00 	ldrex	r3, [r3]
 80039c0:	613b      	str	r3, [r7, #16]
   return(result);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f023 0301 	bic.w	r3, r3, #1
 80039c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3314      	adds	r3, #20
 80039d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039d2:	623a      	str	r2, [r7, #32]
 80039d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	69f9      	ldr	r1, [r7, #28]
 80039d8:	6a3a      	ldr	r2, [r7, #32]
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	61bb      	str	r3, [r7, #24]
   return(result);
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e5      	bne.n	80039b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e00f      	b.n	8003a22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	bf0c      	ite	eq
 8003a12:	2301      	moveq	r3, #1
 8003a14:	2300      	movne	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d09f      	beq.n	8003960 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3740      	adds	r7, #64	; 0x40
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003a6c:	f023 030c 	bic.w	r3, r3, #12
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	430b      	orrs	r3, r1
 8003a78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699a      	ldr	r2, [r3, #24]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a55      	ldr	r2, [pc, #340]	; (8003bec <UART_SetConfig+0x1c0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d103      	bne.n	8003aa2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a9a:	f7ff f9cb 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	e002      	b.n	8003aa8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003aa2:	f7ff f9b3 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8003aa6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab0:	d14c      	bne.n	8003b4c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009a      	lsls	r2, r3, #2
 8003abc:	441a      	add	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	4a49      	ldr	r2, [pc, #292]	; (8003bf0 <UART_SetConfig+0x1c4>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	0119      	lsls	r1, r3, #4
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	009a      	lsls	r2, r3, #2
 8003adc:	441a      	add	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae8:	4b41      	ldr	r3, [pc, #260]	; (8003bf0 <UART_SetConfig+0x1c4>)
 8003aea:	fba3 0302 	umull	r0, r3, r3, r2
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	2064      	movs	r0, #100	; 0x64
 8003af2:	fb00 f303 	mul.w	r3, r0, r3
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	3332      	adds	r3, #50	; 0x32
 8003afc:	4a3c      	ldr	r2, [pc, #240]	; (8003bf0 <UART_SetConfig+0x1c4>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b0a:	4419      	add	r1, r3
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	009a      	lsls	r2, r3, #2
 8003b16:	441a      	add	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b22:	4b33      	ldr	r3, [pc, #204]	; (8003bf0 <UART_SetConfig+0x1c4>)
 8003b24:	fba3 0302 	umull	r0, r3, r3, r2
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	2064      	movs	r0, #100	; 0x64
 8003b2c:	fb00 f303 	mul.w	r3, r0, r3
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	3332      	adds	r3, #50	; 0x32
 8003b36:	4a2e      	ldr	r2, [pc, #184]	; (8003bf0 <UART_SetConfig+0x1c4>)
 8003b38:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3c:	095b      	lsrs	r3, r3, #5
 8003b3e:	f003 0207 	and.w	r2, r3, #7
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	440a      	add	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b4a:	e04a      	b.n	8003be2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009a      	lsls	r2, r3, #2
 8003b56:	441a      	add	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b62:	4a23      	ldr	r2, [pc, #140]	; (8003bf0 <UART_SetConfig+0x1c4>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	0119      	lsls	r1, r3, #4
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	009a      	lsls	r2, r3, #2
 8003b76:	441a      	add	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b82:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <UART_SetConfig+0x1c4>)
 8003b84:	fba3 0302 	umull	r0, r3, r3, r2
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	2064      	movs	r0, #100	; 0x64
 8003b8c:	fb00 f303 	mul.w	r3, r0, r3
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	3332      	adds	r3, #50	; 0x32
 8003b96:	4a16      	ldr	r2, [pc, #88]	; (8003bf0 <UART_SetConfig+0x1c4>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba2:	4419      	add	r1, r3
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	009a      	lsls	r2, r3, #2
 8003bae:	441a      	add	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <UART_SetConfig+0x1c4>)
 8003bbc:	fba3 0302 	umull	r0, r3, r3, r2
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	2064      	movs	r0, #100	; 0x64
 8003bc4:	fb00 f303 	mul.w	r3, r0, r3
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	3332      	adds	r3, #50	; 0x32
 8003bce:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <UART_SetConfig+0x1c4>)
 8003bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	f003 020f 	and.w	r2, r3, #15
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	440a      	add	r2, r1
 8003be0:	609a      	str	r2, [r3, #8]
}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40013800 	.word	0x40013800
 8003bf0:	51eb851f 	.word	0x51eb851f

08003bf4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003bf8:	4904      	ldr	r1, [pc, #16]	; (8003c0c <MX_FATFS_Init+0x18>)
 8003bfa:	4805      	ldr	r0, [pc, #20]	; (8003c10 <MX_FATFS_Init+0x1c>)
 8003bfc:	f003 fdd8 	bl	80077b0 <FATFS_LinkDriver>
 8003c00:	4603      	mov	r3, r0
 8003c02:	461a      	mov	r2, r3
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <MX_FATFS_Init+0x20>)
 8003c06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003c08:	bf00      	nop
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20002260 	.word	0x20002260
 8003c10:	20000010 	.word	0x20000010
 8003c14:	2000225c 	.word	0x2000225c

08003c18 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003c1c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr

08003c26 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd f8ec 	bl	8000e10 <SD_disk_initialize>
 8003c38:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	4603      	mov	r3, r0
 8003c4a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fd f9ca 	bl	8000fe8 <SD_disk_status>
 8003c54:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8003c6e:	7bf8      	ldrb	r0, [r7, #15]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	f7fd f9cb 	bl	8001010 <SD_disk_read>
 8003c7a:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	4603      	mov	r3, r0
 8003c92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8003c94:	7bf8      	ldrb	r0, [r7, #15]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	68b9      	ldr	r1, [r7, #8]
 8003c9c:	f7fd fa22 	bl	80010e4 <SD_disk_write>
 8003ca0:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	603a      	str	r2, [r7, #0]
 8003cb4:	71fb      	strb	r3, [r7, #7]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8003cba:	79b9      	ldrb	r1, [r7, #6]
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fd fa93 	bl	80011ec <SD_disk_ioctl>
 8003cc6:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	4a08      	ldr	r2, [pc, #32]	; (8003d00 <disk_status+0x30>)
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	79fa      	ldrb	r2, [r7, #7]
 8003ce8:	4905      	ldr	r1, [pc, #20]	; (8003d00 <disk_status+0x30>)
 8003cea:	440a      	add	r2, r1
 8003cec:	7a12      	ldrb	r2, [r2, #8]
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4798      	blx	r3
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	2000248c 	.word	0x2000248c

08003d04 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	4a0d      	ldr	r2, [pc, #52]	; (8003d4c <disk_initialize+0x48>)
 8003d16:	5cd3      	ldrb	r3, [r2, r3]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d111      	bne.n	8003d40 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	4a0b      	ldr	r2, [pc, #44]	; (8003d4c <disk_initialize+0x48>)
 8003d20:	2101      	movs	r1, #1
 8003d22:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <disk_initialize+0x48>)
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	79fa      	ldrb	r2, [r7, #7]
 8003d32:	4906      	ldr	r1, [pc, #24]	; (8003d4c <disk_initialize+0x48>)
 8003d34:	440a      	add	r2, r1
 8003d36:	7a12      	ldrb	r2, [r2, #8]
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4798      	blx	r3
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	2000248c 	.word	0x2000248c

08003d50 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <disk_read+0x3c>)
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	689c      	ldr	r4, [r3, #8]
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <disk_read+0x3c>)
 8003d70:	4413      	add	r3, r2
 8003d72:	7a18      	ldrb	r0, [r3, #8]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	47a0      	blx	r4
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd90      	pop	{r4, r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	2000248c 	.word	0x2000248c

08003d90 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003d90:	b590      	push	{r4, r7, lr}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <disk_write+0x3c>)
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	68dc      	ldr	r4, [r3, #12]
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	4a07      	ldr	r2, [pc, #28]	; (8003dcc <disk_write+0x3c>)
 8003db0:	4413      	add	r3, r2
 8003db2:	7a18      	ldrb	r0, [r3, #8]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	47a0      	blx	r4
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	75fb      	strb	r3, [r7, #23]
  return res;
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd90      	pop	{r4, r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	2000248c 	.word	0x2000248c

08003dd0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	603a      	str	r2, [r7, #0]
 8003dda:	71fb      	strb	r3, [r7, #7]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	4a09      	ldr	r2, [pc, #36]	; (8003e08 <disk_ioctl+0x38>)
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	79fa      	ldrb	r2, [r7, #7]
 8003dee:	4906      	ldr	r1, [pc, #24]	; (8003e08 <disk_ioctl+0x38>)
 8003df0:	440a      	add	r2, r1
 8003df2:	7a10      	ldrb	r0, [r2, #8]
 8003df4:	79b9      	ldrb	r1, [r7, #6]
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	4798      	blx	r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	73fb      	strb	r3, [r7, #15]
  return res;
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	2000248c 	.word	0x2000248c

08003e0c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3301      	adds	r3, #1
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003e1c:	89fb      	ldrh	r3, [r7, #14]
 8003e1e:	021b      	lsls	r3, r3, #8
 8003e20:	b21a      	sxth	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	b21b      	sxth	r3, r3
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	b21b      	sxth	r3, r3
 8003e2c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003e2e:	89fb      	ldrh	r3, [r7, #14]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr

08003e3a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b085      	sub	sp, #20
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3303      	adds	r3, #3
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	021b      	lsls	r3, r3, #8
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	3202      	adds	r2, #2
 8003e52:	7812      	ldrb	r2, [r2, #0]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	3201      	adds	r2, #1
 8003e60:	7812      	ldrb	r2, [r2, #0]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	7812      	ldrb	r2, [r2, #0]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
	return rv;
 8003e72:	68fb      	ldr	r3, [r7, #12]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr

08003e7e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	887a      	ldrh	r2, [r7, #2]
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]
 8003e96:	887b      	ldrh	r3, [r7, #2]
 8003e98:	0a1b      	lsrs	r3, r3, #8
 8003e9a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	887a      	ldrh	r2, [r7, #2]
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	701a      	strb	r2, [r3, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr

08003eb2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	701a      	strb	r2, [r3, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00d      	beq.n	8003f3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	1c53      	adds	r3, r2, #1
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	1c59      	adds	r1, r3, #1
 8003f2c:	6179      	str	r1, [r7, #20]
 8003f2e:	7812      	ldrb	r2, [r2, #0]
 8003f30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f1      	bne.n	8003f22 <mem_cpy+0x1a>
	}
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	617a      	str	r2, [r7, #20]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f3      	bne.n	8003f58 <mem_set+0x10>
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003f7c:	b480      	push	{r7}
 8003f7e:	b089      	sub	sp, #36	; 0x24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	61fa      	str	r2, [r7, #28]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	61ba      	str	r2, [r7, #24]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	1acb      	subs	r3, r1, r3
 8003fa8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <mem_cmp+0x40>
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0eb      	beq.n	8003f94 <mem_cmp+0x18>

	return r;
 8003fbc:	697b      	ldr	r3, [r7, #20]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3724      	adds	r7, #36	; 0x24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr

08003fc8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003fd2:	e002      	b.n	8003fda <chk_chr+0x12>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	607b      	str	r3, [r7, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <chk_chr+0x26>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d1f2      	bne.n	8003fd4 <chk_chr+0xc>
	return *str;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	e029      	b.n	8004064 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004010:	4a26      	ldr	r2, [pc, #152]	; (80040ac <chk_lock+0xb0>)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	4413      	add	r3, r2
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d01d      	beq.n	800405a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800401e:	4a23      	ldr	r2, [pc, #140]	; (80040ac <chk_lock+0xb0>)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	4413      	add	r3, r2
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	d116      	bne.n	800405e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004030:	4a1e      	ldr	r2, [pc, #120]	; (80040ac <chk_lock+0xb0>)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	4413      	add	r3, r2
 8004038:	3304      	adds	r3, #4
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004040:	429a      	cmp	r2, r3
 8004042:	d10c      	bne.n	800405e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004044:	4a19      	ldr	r2, [pc, #100]	; (80040ac <chk_lock+0xb0>)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	4413      	add	r3, r2
 800404c:	3308      	adds	r3, #8
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004054:	429a      	cmp	r2, r3
 8004056:	d102      	bne.n	800405e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004058:	e007      	b.n	800406a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800405a:	2301      	movs	r3, #1
 800405c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3301      	adds	r3, #1
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d9d2      	bls.n	8004010 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d109      	bne.n	8004084 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d102      	bne.n	800407c <chk_lock+0x80>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b02      	cmp	r3, #2
 800407a:	d101      	bne.n	8004080 <chk_lock+0x84>
 800407c:	2300      	movs	r3, #0
 800407e:	e010      	b.n	80040a2 <chk_lock+0xa6>
 8004080:	2312      	movs	r3, #18
 8004082:	e00e      	b.n	80040a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d108      	bne.n	800409c <chk_lock+0xa0>
 800408a:	4a08      	ldr	r2, [pc, #32]	; (80040ac <chk_lock+0xb0>)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	4413      	add	r3, r2
 8004092:	330c      	adds	r3, #12
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409a:	d101      	bne.n	80040a0 <chk_lock+0xa4>
 800409c:	2310      	movs	r3, #16
 800409e:	e000      	b.n	80040a2 <chk_lock+0xa6>
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr
 80040ac:	2000226c 	.word	0x2000226c

080040b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80040b6:	2300      	movs	r3, #0
 80040b8:	607b      	str	r3, [r7, #4]
 80040ba:	e002      	b.n	80040c2 <enq_lock+0x12>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3301      	adds	r3, #1
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d806      	bhi.n	80040d6 <enq_lock+0x26>
 80040c8:	4a08      	ldr	r2, [pc, #32]	; (80040ec <enq_lock+0x3c>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	4413      	add	r3, r2
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f2      	bne.n	80040bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr
 80040ec:	2000226c 	.word	0x2000226c

080040f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	e01f      	b.n	8004140 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004100:	4a41      	ldr	r2, [pc, #260]	; (8004208 <inc_lock+0x118>)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	4413      	add	r3, r2
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d113      	bne.n	800413a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004112:	4a3d      	ldr	r2, [pc, #244]	; (8004208 <inc_lock+0x118>)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	4413      	add	r3, r2
 800411a:	3304      	adds	r3, #4
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004122:	429a      	cmp	r2, r3
 8004124:	d109      	bne.n	800413a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004126:	4a38      	ldr	r2, [pc, #224]	; (8004208 <inc_lock+0x118>)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	4413      	add	r3, r2
 800412e:	3308      	adds	r3, #8
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004136:	429a      	cmp	r2, r3
 8004138:	d006      	beq.n	8004148 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3301      	adds	r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d9dc      	bls.n	8004100 <inc_lock+0x10>
 8004146:	e000      	b.n	800414a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004148:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d132      	bne.n	80041b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e002      	b.n	800415c <inc_lock+0x6c>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3301      	adds	r3, #1
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d806      	bhi.n	8004170 <inc_lock+0x80>
 8004162:	4a29      	ldr	r2, [pc, #164]	; (8004208 <inc_lock+0x118>)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	4413      	add	r3, r2
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f2      	bne.n	8004156 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d101      	bne.n	800417a <inc_lock+0x8a>
 8004176:	2300      	movs	r3, #0
 8004178:	e040      	b.n	80041fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	4922      	ldr	r1, [pc, #136]	; (8004208 <inc_lock+0x118>)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	440b      	add	r3, r1
 8004186:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	491e      	ldr	r1, [pc, #120]	; (8004208 <inc_lock+0x118>)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	440b      	add	r3, r1
 8004194:	3304      	adds	r3, #4
 8004196:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	491a      	ldr	r1, [pc, #104]	; (8004208 <inc_lock+0x118>)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	440b      	add	r3, r1
 80041a4:	3308      	adds	r3, #8
 80041a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80041a8:	4a17      	ldr	r2, [pc, #92]	; (8004208 <inc_lock+0x118>)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	4413      	add	r3, r2
 80041b0:	330c      	adds	r3, #12
 80041b2:	2200      	movs	r2, #0
 80041b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <inc_lock+0xe0>
 80041bc:	4a12      	ldr	r2, [pc, #72]	; (8004208 <inc_lock+0x118>)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	4413      	add	r3, r2
 80041c4:	330c      	adds	r3, #12
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <inc_lock+0xe0>
 80041cc:	2300      	movs	r3, #0
 80041ce:	e015      	b.n	80041fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d108      	bne.n	80041e8 <inc_lock+0xf8>
 80041d6:	4a0c      	ldr	r2, [pc, #48]	; (8004208 <inc_lock+0x118>)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	4413      	add	r3, r2
 80041de:	330c      	adds	r3, #12
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	3301      	adds	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	e001      	b.n	80041ec <inc_lock+0xfc>
 80041e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041ec:	4906      	ldr	r1, [pc, #24]	; (8004208 <inc_lock+0x118>)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	440b      	add	r3, r1
 80041f4:	330c      	adds	r3, #12
 80041f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3301      	adds	r3, #1
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	2000226c 	.word	0x2000226c

0800420c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3b01      	subs	r3, #1
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d825      	bhi.n	800426c <dec_lock+0x60>
		n = Files[i].ctr;
 8004220:	4a16      	ldr	r2, [pc, #88]	; (800427c <dec_lock+0x70>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	4413      	add	r3, r2
 8004228:	330c      	adds	r3, #12
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800422e:	89fb      	ldrh	r3, [r7, #14]
 8004230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004234:	d101      	bne.n	800423a <dec_lock+0x2e>
 8004236:	2300      	movs	r3, #0
 8004238:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800423a:	89fb      	ldrh	r3, [r7, #14]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <dec_lock+0x3a>
 8004240:	89fb      	ldrh	r3, [r7, #14]
 8004242:	3b01      	subs	r3, #1
 8004244:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004246:	4a0d      	ldr	r2, [pc, #52]	; (800427c <dec_lock+0x70>)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	4413      	add	r3, r2
 800424e:	330c      	adds	r3, #12
 8004250:	89fa      	ldrh	r2, [r7, #14]
 8004252:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004254:	89fb      	ldrh	r3, [r7, #14]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d105      	bne.n	8004266 <dec_lock+0x5a>
 800425a:	4a08      	ldr	r2, [pc, #32]	; (800427c <dec_lock+0x70>)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	4413      	add	r3, r2
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	737b      	strb	r3, [r7, #13]
 800426a:	e001      	b.n	8004270 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800426c:	2302      	movs	r3, #2
 800426e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004270:	7b7b      	ldrb	r3, [r7, #13]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr
 800427c:	2000226c 	.word	0x2000226c

08004280 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e010      	b.n	80042b0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800428e:	4a0d      	ldr	r2, [pc, #52]	; (80042c4 <clear_lock+0x44>)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	4413      	add	r3, r2
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	429a      	cmp	r2, r3
 800429c:	d105      	bne.n	80042aa <clear_lock+0x2a>
 800429e:	4a09      	ldr	r2, [pc, #36]	; (80042c4 <clear_lock+0x44>)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	4413      	add	r3, r2
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	3301      	adds	r3, #1
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d9eb      	bls.n	800428e <clear_lock+0xe>
	}
}
 80042b6:	bf00      	nop
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	2000226c 	.word	0x2000226c

080042c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	78db      	ldrb	r3, [r3, #3]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d034      	beq.n	8004346 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	7858      	ldrb	r0, [r3, #1]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80042ec:	2301      	movs	r3, #1
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	f7ff fd4e 	bl	8003d90 <disk_write>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <sync_window+0x38>
			res = FR_DISK_ERR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
 80042fe:	e022      	b.n	8004346 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	1ad2      	subs	r2, r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	429a      	cmp	r2, r3
 8004314:	d217      	bcs.n	8004346 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	789b      	ldrb	r3, [r3, #2]
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	e010      	b.n	8004340 <sync_window+0x78>
					wsect += fs->fsize;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4413      	add	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	7858      	ldrb	r0, [r3, #1]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004332:	2301      	movs	r3, #1
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	f7ff fd2b 	bl	8003d90 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	3b01      	subs	r3, #1
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d8eb      	bhi.n	800431e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004346:	7bfb      	ldrb	r3, [r7, #15]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d01b      	beq.n	80043a0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff ffad 	bl	80042c8 <sync_window>
 800436e:	4603      	mov	r3, r0
 8004370:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d113      	bne.n	80043a0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	7858      	ldrb	r0, [r3, #1]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004382:	2301      	movs	r3, #1
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	f7ff fce3 	bl	8003d50 <disk_read>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004394:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff ff87 	bl	80042c8 <sync_window>
 80043ba:	4603      	mov	r3, r0
 80043bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d159      	bne.n	8004478 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d149      	bne.n	8004460 <sync_fs+0xb4>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	791b      	ldrb	r3, [r3, #4]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d145      	bne.n	8004460 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	899b      	ldrh	r3, [r3, #12]
 80043de:	461a      	mov	r2, r3
 80043e0:	2100      	movs	r1, #0
 80043e2:	f7ff fdb1 	bl	8003f48 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3338      	adds	r3, #56	; 0x38
 80043ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80043ee:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fd43 	bl	8003e7e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3338      	adds	r3, #56	; 0x38
 80043fc:	4921      	ldr	r1, [pc, #132]	; (8004484 <sync_fs+0xd8>)
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fd57 	bl	8003eb2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3338      	adds	r3, #56	; 0x38
 8004408:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800440c:	491e      	ldr	r1, [pc, #120]	; (8004488 <sync_fs+0xdc>)
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fd4f 	bl	8003eb2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3338      	adds	r3, #56	; 0x38
 8004418:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f7ff fd45 	bl	8003eb2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3338      	adds	r3, #56	; 0x38
 800442c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	4619      	mov	r1, r3
 8004436:	4610      	mov	r0, r2
 8004438:	f7ff fd3b 	bl	8003eb2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	7858      	ldrb	r0, [r3, #1]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004454:	2301      	movs	r3, #1
 8004456:	f7ff fc9b 	bl	8003d90 <disk_write>
			fs->fsi_flag = 0;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	785b      	ldrb	r3, [r3, #1]
 8004464:	2200      	movs	r2, #0
 8004466:	2100      	movs	r1, #0
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fcb1 	bl	8003dd0 <disk_ioctl>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <sync_fs+0xcc>
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004478:	7bfb      	ldrb	r3, [r7, #15]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	41615252 	.word	0x41615252
 8004488:	61417272 	.word	0x61417272

0800448c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	3b02      	subs	r3, #2
 800449a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	3b02      	subs	r3, #2
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d301      	bcc.n	80044ac <clust2sect+0x20>
 80044a8:	2300      	movs	r3, #0
 80044aa:	e008      	b.n	80044be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	895b      	ldrh	r3, [r3, #10]
 80044b0:	461a      	mov	r2, r3
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	fb03 f202 	mul.w	r2, r3, r2
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	4413      	add	r3, r2
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr

080044c8 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d904      	bls.n	80044e8 <get_fat+0x20>
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d302      	bcc.n	80044ee <get_fat+0x26>
		val = 1;	/* Internal error */
 80044e8:	2301      	movs	r3, #1
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	e0bb      	b.n	8004666 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80044ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044f2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	f000 8083 	beq.w	8004604 <get_fat+0x13c>
 80044fe:	2b03      	cmp	r3, #3
 8004500:	f300 80a7 	bgt.w	8004652 <get_fat+0x18a>
 8004504:	2b01      	cmp	r3, #1
 8004506:	d002      	beq.n	800450e <get_fat+0x46>
 8004508:	2b02      	cmp	r3, #2
 800450a:	d056      	beq.n	80045ba <get_fat+0xf2>
 800450c:	e0a1      	b.n	8004652 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	085b      	lsrs	r3, r3, #1
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4413      	add	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	899b      	ldrh	r3, [r3, #12]
 8004524:	4619      	mov	r1, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	fbb3 f3f1 	udiv	r3, r3, r1
 800452c:	4413      	add	r3, r2
 800452e:	4619      	mov	r1, r3
 8004530:	6938      	ldr	r0, [r7, #16]
 8004532:	f7ff ff0d 	bl	8004350 <move_window>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 808d 	bne.w	8004658 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	60fa      	str	r2, [r7, #12]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	8992      	ldrh	r2, [r2, #12]
 8004548:	fbb3 f1f2 	udiv	r1, r3, r2
 800454c:	fb01 f202 	mul.w	r2, r1, r2
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800455a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	899b      	ldrh	r3, [r3, #12]
 8004564:	4619      	mov	r1, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	fbb3 f3f1 	udiv	r3, r3, r1
 800456c:	4413      	add	r3, r2
 800456e:	4619      	mov	r1, r3
 8004570:	6938      	ldr	r0, [r7, #16]
 8004572:	f7ff feed 	bl	8004350 <move_window>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d16f      	bne.n	800465c <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	899b      	ldrh	r3, [r3, #12]
 8004580:	461a      	mov	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	fbb3 f1f2 	udiv	r1, r3, r2
 8004588:	fb01 f202 	mul.w	r2, r1, r2
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4413      	add	r3, r2
 8004592:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	461a      	mov	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	4313      	orrs	r3, r2
 800459e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <get_fat+0xe8>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	e002      	b.n	80045b6 <get_fat+0xee>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b6:	617b      	str	r3, [r7, #20]
			break;
 80045b8:	e055      	b.n	8004666 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	899b      	ldrh	r3, [r3, #12]
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	4619      	mov	r1, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80045ce:	4413      	add	r3, r2
 80045d0:	4619      	mov	r1, r3
 80045d2:	6938      	ldr	r0, [r7, #16]
 80045d4:	f7ff febc 	bl	8004350 <move_window>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d140      	bne.n	8004660 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	8992      	ldrh	r2, [r2, #12]
 80045ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80045f0:	fb00 f202 	mul.w	r2, r0, r2
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	440b      	add	r3, r1
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fc07 	bl	8003e0c <ld_word>
 80045fe:	4603      	mov	r3, r0
 8004600:	617b      	str	r3, [r7, #20]
			break;
 8004602:	e030      	b.n	8004666 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	899b      	ldrh	r3, [r3, #12]
 800460c:	089b      	lsrs	r3, r3, #2
 800460e:	b29b      	uxth	r3, r3
 8004610:	4619      	mov	r1, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	fbb3 f3f1 	udiv	r3, r3, r1
 8004618:	4413      	add	r3, r2
 800461a:	4619      	mov	r1, r3
 800461c:	6938      	ldr	r0, [r7, #16]
 800461e:	f7ff fe97 	bl	8004350 <move_window>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d11d      	bne.n	8004664 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	8992      	ldrh	r2, [r2, #12]
 8004636:	fbb3 f0f2 	udiv	r0, r3, r2
 800463a:	fb00 f202 	mul.w	r2, r0, r2
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	440b      	add	r3, r1
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff fbf9 	bl	8003e3a <ld_dword>
 8004648:	4603      	mov	r3, r0
 800464a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800464e:	617b      	str	r3, [r7, #20]
			break;
 8004650:	e009      	b.n	8004666 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004652:	2301      	movs	r3, #1
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	e006      	b.n	8004666 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004658:	bf00      	nop
 800465a:	e004      	b.n	8004666 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800465c:	bf00      	nop
 800465e:	e002      	b.n	8004666 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004660:	bf00      	nop
 8004662:	e000      	b.n	8004666 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004664:	bf00      	nop
		}
	}

	return val;
 8004666:	697b      	ldr	r3, [r7, #20]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b089      	sub	sp, #36	; 0x24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800467c:	2302      	movs	r3, #2
 800467e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b01      	cmp	r3, #1
 8004684:	f240 8102 	bls.w	800488c <put_fat+0x21c>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	429a      	cmp	r2, r3
 8004690:	f080 80fc 	bcs.w	800488c <put_fat+0x21c>
		switch (fs->fs_type) {
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b03      	cmp	r3, #3
 800469a:	f000 80b6 	beq.w	800480a <put_fat+0x19a>
 800469e:	2b03      	cmp	r3, #3
 80046a0:	f300 80fd 	bgt.w	800489e <put_fat+0x22e>
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d003      	beq.n	80046b0 <put_fat+0x40>
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	f000 8083 	beq.w	80047b4 <put_fat+0x144>
 80046ae:	e0f6      	b.n	800489e <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	085b      	lsrs	r3, r3, #1
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	4413      	add	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	899b      	ldrh	r3, [r3, #12]
 80046c6:	4619      	mov	r1, r3
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80046ce:	4413      	add	r3, r2
 80046d0:	4619      	mov	r1, r3
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f7ff fe3c 	bl	8004350 <move_window>
 80046d8:	4603      	mov	r3, r0
 80046da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80046dc:	7ffb      	ldrb	r3, [r7, #31]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f040 80d6 	bne.w	8004890 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	61ba      	str	r2, [r7, #24]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	8992      	ldrh	r2, [r2, #12]
 80046f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80046f8:	fb00 f202 	mul.w	r2, r0, r2
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	440b      	add	r3, r1
 8004700:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00d      	beq.n	8004728 <put_fat+0xb8>
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	b25b      	sxtb	r3, r3
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	b25a      	sxtb	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	b25b      	sxtb	r3, r3
 8004720:	4313      	orrs	r3, r2
 8004722:	b25b      	sxtb	r3, r3
 8004724:	b2db      	uxtb	r3, r3
 8004726:	e001      	b.n	800472c <put_fat+0xbc>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	899b      	ldrh	r3, [r3, #12]
 800473e:	4619      	mov	r1, r3
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	fbb3 f3f1 	udiv	r3, r3, r1
 8004746:	4413      	add	r3, r2
 8004748:	4619      	mov	r1, r3
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7ff fe00 	bl	8004350 <move_window>
 8004750:	4603      	mov	r3, r0
 8004752:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004754:	7ffb      	ldrb	r3, [r7, #31]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f040 809c 	bne.w	8004894 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	899b      	ldrh	r3, [r3, #12]
 8004766:	461a      	mov	r2, r3
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	fbb3 f0f2 	udiv	r0, r3, r2
 800476e:	fb00 f202 	mul.w	r2, r0, r2
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	440b      	add	r3, r1
 8004776:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <put_fat+0x11a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	b2db      	uxtb	r3, r3
 8004788:	e00e      	b.n	80047a8 <put_fat+0x138>
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	b25b      	sxtb	r3, r3
 8004790:	f023 030f 	bic.w	r3, r3, #15
 8004794:	b25a      	sxtb	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	b25b      	sxtb	r3, r3
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	b25b      	sxtb	r3, r3
 80047a2:	4313      	orrs	r3, r2
 80047a4:	b25b      	sxtb	r3, r3
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	70da      	strb	r2, [r3, #3]
			break;
 80047b2:	e074      	b.n	800489e <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	899b      	ldrh	r3, [r3, #12]
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	b29b      	uxth	r3, r3
 80047c0:	4619      	mov	r1, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80047c8:	4413      	add	r3, r2
 80047ca:	4619      	mov	r1, r3
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f7ff fdbf 	bl	8004350 <move_window>
 80047d2:	4603      	mov	r3, r0
 80047d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80047d6:	7ffb      	ldrb	r3, [r7, #31]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d15d      	bne.n	8004898 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	8992      	ldrh	r2, [r2, #12]
 80047ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80047ee:	fb00 f202 	mul.w	r2, r0, r2
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	440b      	add	r3, r1
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	b292      	uxth	r2, r2
 80047fa:	4611      	mov	r1, r2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fb3e 	bl	8003e7e <st_word>
			fs->wflag = 1;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	70da      	strb	r2, [r3, #3]
			break;
 8004808:	e049      	b.n	800489e <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	899b      	ldrh	r3, [r3, #12]
 8004812:	089b      	lsrs	r3, r3, #2
 8004814:	b29b      	uxth	r3, r3
 8004816:	4619      	mov	r1, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	fbb3 f3f1 	udiv	r3, r3, r1
 800481e:	4413      	add	r3, r2
 8004820:	4619      	mov	r1, r3
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f7ff fd94 	bl	8004350 <move_window>
 8004828:	4603      	mov	r3, r0
 800482a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800482c:	7ffb      	ldrb	r3, [r7, #31]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d134      	bne.n	800489c <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	8992      	ldrh	r2, [r2, #12]
 8004846:	fbb3 f0f2 	udiv	r0, r3, r2
 800484a:	fb00 f202 	mul.w	r2, r0, r2
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	440b      	add	r3, r1
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff faf1 	bl	8003e3a <ld_dword>
 8004858:	4603      	mov	r3, r0
 800485a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800485e:	4323      	orrs	r3, r4
 8004860:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	8992      	ldrh	r2, [r2, #12]
 8004870:	fbb3 f0f2 	udiv	r0, r3, r2
 8004874:	fb00 f202 	mul.w	r2, r0, r2
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	440b      	add	r3, r1
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff fb17 	bl	8003eb2 <st_dword>
			fs->wflag = 1;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2201      	movs	r2, #1
 8004888:	70da      	strb	r2, [r3, #3]
			break;
 800488a:	e008      	b.n	800489e <put_fat+0x22e>
		}
	}
 800488c:	bf00      	nop
 800488e:	e006      	b.n	800489e <put_fat+0x22e>
			if (res != FR_OK) break;
 8004890:	bf00      	nop
 8004892:	e004      	b.n	800489e <put_fat+0x22e>
			if (res != FR_OK) break;
 8004894:	bf00      	nop
 8004896:	e002      	b.n	800489e <put_fat+0x22e>
			if (res != FR_OK) break;
 8004898:	bf00      	nop
 800489a:	e000      	b.n	800489e <put_fat+0x22e>
			if (res != FR_OK) break;
 800489c:	bf00      	nop
	return res;
 800489e:	7ffb      	ldrb	r3, [r7, #31]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3724      	adds	r7, #36	; 0x24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd90      	pop	{r4, r7, pc}

080048a8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d904      	bls.n	80048ce <remove_chain+0x26>
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d301      	bcc.n	80048d2 <remove_chain+0x2a>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e04b      	b.n	800496a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00c      	beq.n	80048f2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80048d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	69b8      	ldr	r0, [r7, #24]
 80048e0:	f7ff fec6 	bl	8004670 <put_fat>
 80048e4:	4603      	mov	r3, r0
 80048e6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80048e8:	7ffb      	ldrb	r3, [r7, #31]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <remove_chain+0x4a>
 80048ee:	7ffb      	ldrb	r3, [r7, #31]
 80048f0:	e03b      	b.n	800496a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f7ff fde7 	bl	80044c8 <get_fat>
 80048fa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d031      	beq.n	8004966 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <remove_chain+0x64>
 8004908:	2302      	movs	r3, #2
 800490a:	e02e      	b.n	800496a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004912:	d101      	bne.n	8004918 <remove_chain+0x70>
 8004914:	2301      	movs	r3, #1
 8004916:	e028      	b.n	800496a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004918:	2200      	movs	r2, #0
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	69b8      	ldr	r0, [r7, #24]
 800491e:	f7ff fea7 	bl	8004670 <put_fat>
 8004922:	4603      	mov	r3, r0
 8004924:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004926:	7ffb      	ldrb	r3, [r7, #31]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <remove_chain+0x88>
 800492c:	7ffb      	ldrb	r3, [r7, #31]
 800492e:	e01c      	b.n	800496a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	699a      	ldr	r2, [r3, #24]
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	3b02      	subs	r3, #2
 800493a:	429a      	cmp	r2, r3
 800493c:	d20b      	bcs.n	8004956 <remove_chain+0xae>
			fs->free_clst++;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	791b      	ldrb	r3, [r3, #4]
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	b2da      	uxtb	r2, r3
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	429a      	cmp	r2, r3
 8004962:	d3c6      	bcc.n	80048f2 <remove_chain+0x4a>
 8004964:	e000      	b.n	8004968 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004966:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b088      	sub	sp, #32
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10d      	bne.n	80049a4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d004      	beq.n	800499e <create_chain+0x2c>
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	429a      	cmp	r2, r3
 800499c:	d31b      	bcc.n	80049d6 <create_chain+0x64>
 800499e:	2301      	movs	r3, #1
 80049a0:	61bb      	str	r3, [r7, #24]
 80049a2:	e018      	b.n	80049d6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80049a4:	6839      	ldr	r1, [r7, #0]
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff fd8e 	bl	80044c8 <get_fat>
 80049ac:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d801      	bhi.n	80049b8 <create_chain+0x46>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e070      	b.n	8004a9a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049be:	d101      	bne.n	80049c4 <create_chain+0x52>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	e06a      	b.n	8004a9a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d201      	bcs.n	80049d2 <create_chain+0x60>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	e063      	b.n	8004a9a <create_chain+0x128>
		scl = clst;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	3301      	adds	r3, #1
 80049de:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d307      	bcc.n	80049fa <create_chain+0x88>
				ncl = 2;
 80049ea:	2302      	movs	r3, #2
 80049ec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d901      	bls.n	80049fa <create_chain+0x88>
 80049f6:	2300      	movs	r3, #0
 80049f8:	e04f      	b.n	8004a9a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80049fa:	69f9      	ldr	r1, [r7, #28]
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7ff fd63 	bl	80044c8 <get_fat>
 8004a02:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00e      	beq.n	8004a28 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d003      	beq.n	8004a18 <create_chain+0xa6>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a16:	d101      	bne.n	8004a1c <create_chain+0xaa>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	e03e      	b.n	8004a9a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d1da      	bne.n	80049da <create_chain+0x68>
 8004a24:	2300      	movs	r3, #0
 8004a26:	e038      	b.n	8004a9a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004a28:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a2e:	69f9      	ldr	r1, [r7, #28]
 8004a30:	6938      	ldr	r0, [r7, #16]
 8004a32:	f7ff fe1d 	bl	8004670 <put_fat>
 8004a36:	4603      	mov	r3, r0
 8004a38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d109      	bne.n	8004a54 <create_chain+0xe2>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d006      	beq.n	8004a54 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	6938      	ldr	r0, [r7, #16]
 8004a4c:	f7ff fe10 	bl	8004670 <put_fat>
 8004a50:	4603      	mov	r3, r0
 8004a52:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004a54:	7dfb      	ldrb	r3, [r7, #23]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d116      	bne.n	8004a88 <create_chain+0x116>
		fs->last_clst = ncl;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	699a      	ldr	r2, [r3, #24]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	3b02      	subs	r3, #2
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d804      	bhi.n	8004a78 <create_chain+0x106>
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	1e5a      	subs	r2, r3, #1
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	791b      	ldrb	r3, [r3, #4]
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	711a      	strb	r2, [r3, #4]
 8004a86:	e007      	b.n	8004a98 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004a88:	7dfb      	ldrb	r3, [r7, #23]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d102      	bne.n	8004a94 <create_chain+0x122>
 8004a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a92:	e000      	b.n	8004a96 <create_chain+0x124>
 8004a94:	2301      	movs	r3, #1
 8004a96:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004a98:	69fb      	ldr	r3, [r7, #28]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3720      	adds	r7, #32
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b087      	sub	sp, #28
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	899b      	ldrh	r3, [r3, #12]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	8952      	ldrh	r2, [r2, #10]
 8004aca:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ace:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1d1a      	adds	r2, r3, #4
 8004ad4:	613a      	str	r2, [r7, #16]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <clmt_clust+0x42>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e010      	b.n	8004b06 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d307      	bcc.n	8004afc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	3304      	adds	r3, #4
 8004af8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004afa:	e7e9      	b.n	8004ad0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004afc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	4413      	add	r3, r2
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b26:	d204      	bcs.n	8004b32 <dir_sdi+0x22>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004b32:	2302      	movs	r3, #2
 8004b34:	e071      	b.n	8004c1a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d106      	bne.n	8004b56 <dir_sdi+0x46>
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d902      	bls.n	8004b56 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10c      	bne.n	8004b76 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	8912      	ldrh	r2, [r2, #8]
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d301      	bcc.n	8004b6c <dir_sdi+0x5c>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e056      	b.n	8004c1a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	61da      	str	r2, [r3, #28]
 8004b74:	e02d      	b.n	8004bd2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	895b      	ldrh	r3, [r3, #10]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	899b      	ldrh	r3, [r3, #12]
 8004b80:	fb02 f303 	mul.w	r3, r2, r3
 8004b84:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004b86:	e019      	b.n	8004bbc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6979      	ldr	r1, [r7, #20]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff fc9b 	bl	80044c8 <get_fat>
 8004b92:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b9a:	d101      	bne.n	8004ba0 <dir_sdi+0x90>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e03c      	b.n	8004c1a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d904      	bls.n	8004bb0 <dir_sdi+0xa0>
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d301      	bcc.n	8004bb4 <dir_sdi+0xa4>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e032      	b.n	8004c1a <dir_sdi+0x10a>
			ofs -= csz;
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d2e1      	bcs.n	8004b88 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004bc4:	6979      	ldr	r1, [r7, #20]
 8004bc6:	6938      	ldr	r0, [r7, #16]
 8004bc8:	f7ff fc60 	bl	800448c <clust2sect>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <dir_sdi+0xd4>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e01a      	b.n	8004c1a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69da      	ldr	r2, [r3, #28]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	899b      	ldrh	r3, [r3, #12]
 8004bec:	4619      	mov	r1, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bf4:	441a      	add	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	899b      	ldrh	r3, [r3, #12]
 8004c04:	461a      	mov	r2, r3
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c0c:	fb00 f202 	mul.w	r2, r0, r2
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	18ca      	adds	r2, r1, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b086      	sub	sp, #24
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	3320      	adds	r3, #32
 8004c38:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <dir_next+0x28>
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c48:	d301      	bcc.n	8004c4e <dir_next+0x2c>
 8004c4a:	2304      	movs	r3, #4
 8004c4c:	e0bb      	b.n	8004dc6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	899b      	ldrh	r3, [r3, #12]
 8004c52:	461a      	mov	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c5a:	fb01 f202 	mul.w	r2, r1, r2
 8004c5e:	1a9b      	subs	r3, r3, r2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f040 809d 	bne.w	8004da0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10b      	bne.n	8004c90 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	8912      	ldrh	r2, [r2, #8]
 8004c80:	4293      	cmp	r3, r2
 8004c82:	f0c0 808d 	bcc.w	8004da0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	61da      	str	r2, [r3, #28]
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	e09a      	b.n	8004dc6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	899b      	ldrh	r3, [r3, #12]
 8004c94:	461a      	mov	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	8952      	ldrh	r2, [r2, #10]
 8004ca0:	3a01      	subs	r2, #1
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d17b      	bne.n	8004da0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	f7ff fc09 	bl	80044c8 <get_fat>
 8004cb6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d801      	bhi.n	8004cc2 <dir_next+0xa0>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e081      	b.n	8004dc6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cc8:	d101      	bne.n	8004cce <dir_next+0xac>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e07b      	b.n	8004dc6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d359      	bcc.n	8004d8c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d104      	bne.n	8004ce8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	61da      	str	r2, [r3, #28]
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	e06e      	b.n	8004dc6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f7ff fe3e 	bl	8004972 <create_chain>
 8004cf6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <dir_next+0xe0>
 8004cfe:	2307      	movs	r3, #7
 8004d00:	e061      	b.n	8004dc6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <dir_next+0xea>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e05c      	b.n	8004dc6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d12:	d101      	bne.n	8004d18 <dir_next+0xf6>
 8004d14:	2301      	movs	r3, #1
 8004d16:	e056      	b.n	8004dc6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7ff fad5 	bl	80042c8 <sync_window>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <dir_next+0x106>
 8004d24:	2301      	movs	r3, #1
 8004d26:	e04e      	b.n	8004dc6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	899b      	ldrh	r3, [r3, #12]
 8004d32:	461a      	mov	r2, r3
 8004d34:	2100      	movs	r1, #0
 8004d36:	f7ff f907 	bl	8003f48 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	6979      	ldr	r1, [r7, #20]
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7ff fba3 	bl	800448c <clust2sect>
 8004d46:	4602      	mov	r2, r0
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	635a      	str	r2, [r3, #52]	; 0x34
 8004d4c:	e012      	b.n	8004d74 <dir_next+0x152>
						fs->wflag = 1;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff fab7 	bl	80042c8 <sync_window>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <dir_next+0x142>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e030      	b.n	8004dc6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	3301      	adds	r3, #1
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	635a      	str	r2, [r3, #52]	; 0x34
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	895b      	ldrh	r3, [r3, #10]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d3e6      	bcc.n	8004d4e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad2      	subs	r2, r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004d92:	6979      	ldr	r1, [r7, #20]
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff fb79 	bl	800448c <clust2sect>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	899b      	ldrh	r3, [r3, #12]
 8004db0:	461a      	mov	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	fbb3 f0f2 	udiv	r0, r3, r2
 8004db8:	fb00 f202 	mul.w	r2, r0, r2
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	18ca      	adds	r2, r1, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b086      	sub	sp, #24
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004dde:	2100      	movs	r1, #0
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff fe95 	bl	8004b10 <dir_sdi>
 8004de6:	4603      	mov	r3, r0
 8004de8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d12b      	bne.n	8004e48 <dir_alloc+0x7a>
		n = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7ff faa8 	bl	8004350 <move_window>
 8004e00:	4603      	mov	r3, r0
 8004e02:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d11d      	bne.n	8004e46 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2be5      	cmp	r3, #229	; 0xe5
 8004e12:	d004      	beq.n	8004e1e <dir_alloc+0x50>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d107      	bne.n	8004e2e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	3301      	adds	r3, #1
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d102      	bne.n	8004e32 <dir_alloc+0x64>
 8004e2c:	e00c      	b.n	8004e48 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004e2e:	2300      	movs	r3, #0
 8004e30:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004e32:	2101      	movs	r1, #1
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff fef4 	bl	8004c22 <dir_next>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0d7      	beq.n	8004df4 <dir_alloc+0x26>
 8004e44:	e000      	b.n	8004e48 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004e46:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d101      	bne.n	8004e52 <dir_alloc+0x84>
 8004e4e:	2307      	movs	r3, #7
 8004e50:	75fb      	strb	r3, [r7, #23]
	return res;
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	331a      	adds	r3, #26
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe ffce 	bl	8003e0c <ld_word>
 8004e70:	4603      	mov	r3, r0
 8004e72:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d109      	bne.n	8004e90 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	3314      	adds	r3, #20
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fe ffc3 	bl	8003e0c <ld_word>
 8004e86:	4603      	mov	r3, r0
 8004e88:	041b      	lsls	r3, r3, #16
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004e90:	68fb      	ldr	r3, [r7, #12]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	331a      	adds	r3, #26
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	b292      	uxth	r2, r2
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fe ffe4 	bl	8003e7e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d109      	bne.n	8004ed2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f103 0214 	add.w	r2, r3, #20
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	0c1b      	lsrs	r3, r3, #16
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f7fe ffd6 	bl	8003e7e <st_word>
	}
}
 8004ed2:	bf00      	nop
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	331a      	adds	r3, #26
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fe ff8e 	bl	8003e0c <ld_word>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <cmp_lfn+0x1e>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e059      	b.n	8004fae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f02:	1e5a      	subs	r2, r3, #1
 8004f04:	4613      	mov	r3, r2
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004f10:	2301      	movs	r3, #1
 8004f12:	81fb      	strh	r3, [r7, #14]
 8004f14:	2300      	movs	r3, #0
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	e033      	b.n	8004f82 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004f1a:	4a27      	ldr	r2, [pc, #156]	; (8004fb8 <cmp_lfn+0xdc>)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	4413      	add	r3, r2
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	4413      	add	r3, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fe ff6f 	bl	8003e0c <ld_word>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8004f32:	89fb      	ldrh	r3, [r7, #14]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01a      	beq.n	8004f6e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2bfe      	cmp	r3, #254	; 0xfe
 8004f3c:	d812      	bhi.n	8004f64 <cmp_lfn+0x88>
 8004f3e:	89bb      	ldrh	r3, [r7, #12]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f002 fc7f 	bl	8007844 <ff_wtoupper>
 8004f46:	4603      	mov	r3, r0
 8004f48:	461c      	mov	r4, r3
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	617a      	str	r2, [r7, #20]
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	4413      	add	r3, r2
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f002 fc73 	bl	8007844 <ff_wtoupper>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	429c      	cmp	r4, r3
 8004f62:	d001      	beq.n	8004f68 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004f64:	2300      	movs	r3, #0
 8004f66:	e022      	b.n	8004fae <cmp_lfn+0xd2>
			}
			wc = uc;
 8004f68:	89bb      	ldrh	r3, [r7, #12]
 8004f6a:	81fb      	strh	r3, [r7, #14]
 8004f6c:	e006      	b.n	8004f7c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004f6e:	89bb      	ldrh	r3, [r7, #12]
 8004f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d001      	beq.n	8004f7c <cmp_lfn+0xa0>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	e018      	b.n	8004fae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b0c      	cmp	r3, #12
 8004f86:	d9c8      	bls.n	8004f1a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <cmp_lfn+0xd0>
 8004f94:	89fb      	ldrh	r3, [r7, #14]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d008      	beq.n	8004fac <cmp_lfn+0xd0>
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <cmp_lfn+0xd0>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e000      	b.n	8004fae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004fac:	2301      	movs	r3, #1
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd90      	pop	{r4, r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	080086bc 	.word	0x080086bc

08004fbc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	331a      	adds	r3, #26
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fe ff1e 	bl	8003e0c <ld_word>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <pick_lfn+0x1e>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e04d      	b.n	8005076 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe2:	1e5a      	subs	r2, r3, #1
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	81fb      	strh	r3, [r7, #14]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	e028      	b.n	800504c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004ffa:	4a21      	ldr	r2, [pc, #132]	; (8005080 <pick_lfn+0xc4>)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4413      	add	r3, r2
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	4413      	add	r3, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f7fe feff 	bl	8003e0c <ld_word>
 800500e:	4603      	mov	r3, r0
 8005010:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005012:	89fb      	ldrh	r3, [r7, #14]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00f      	beq.n	8005038 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2bfe      	cmp	r3, #254	; 0xfe
 800501c:	d901      	bls.n	8005022 <pick_lfn+0x66>
 800501e:	2300      	movs	r3, #0
 8005020:	e029      	b.n	8005076 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8005022:	89bb      	ldrh	r3, [r7, #12]
 8005024:	81fb      	strh	r3, [r7, #14]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	617a      	str	r2, [r7, #20]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	4413      	add	r3, r2
 8005032:	89fa      	ldrh	r2, [r7, #14]
 8005034:	801a      	strh	r2, [r3, #0]
 8005036:	e006      	b.n	8005046 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005038:	89bb      	ldrh	r3, [r7, #12]
 800503a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800503e:	4293      	cmp	r3, r2
 8005040:	d001      	beq.n	8005046 <pick_lfn+0x8a>
 8005042:	2300      	movs	r3, #0
 8005044:	e017      	b.n	8005076 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	3301      	adds	r3, #1
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	2b0c      	cmp	r3, #12
 8005050:	d9d3      	bls.n	8004ffa <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2bfe      	cmp	r3, #254	; 0xfe
 8005062:	d901      	bls.n	8005068 <pick_lfn+0xac>
 8005064:	2300      	movs	r3, #0
 8005066:	e006      	b.n	8005076 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	4413      	add	r3, r2
 8005070:	2200      	movs	r2, #0
 8005072:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8005074:	2301      	movs	r3, #1
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	080086bc 	.word	0x080086bc

08005084 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	4611      	mov	r1, r2
 8005090:	461a      	mov	r2, r3
 8005092:	460b      	mov	r3, r1
 8005094:	71fb      	strb	r3, [r7, #7]
 8005096:	4613      	mov	r3, r2
 8005098:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	330d      	adds	r3, #13
 800509e:	79ba      	ldrb	r2, [r7, #6]
 80050a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	330b      	adds	r3, #11
 80050a6:	220f      	movs	r2, #15
 80050a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	330c      	adds	r3, #12
 80050ae:	2200      	movs	r2, #0
 80050b0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	331a      	adds	r3, #26
 80050b6:	2100      	movs	r1, #0
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fe fee0 	bl	8003e7e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	1e5a      	subs	r2, r3, #1
 80050c2:	4613      	mov	r3, r2
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	82fb      	strh	r3, [r7, #22]
 80050d2:	2300      	movs	r3, #0
 80050d4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80050d6:	8afb      	ldrh	r3, [r7, #22]
 80050d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050dc:	4293      	cmp	r3, r2
 80050de:	d007      	beq.n	80050f0 <put_lfn+0x6c>
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	61fa      	str	r2, [r7, #28]
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80050f0:	4a17      	ldr	r2, [pc, #92]	; (8005150 <put_lfn+0xcc>)
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	4413      	add	r3, r2
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4413      	add	r3, r2
 80050fe:	8afa      	ldrh	r2, [r7, #22]
 8005100:	4611      	mov	r1, r2
 8005102:	4618      	mov	r0, r3
 8005104:	f7fe febb 	bl	8003e7e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005108:	8afb      	ldrh	r3, [r7, #22]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d102      	bne.n	8005114 <put_lfn+0x90>
 800510e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005112:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	3301      	adds	r3, #1
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	2b0c      	cmp	r3, #12
 800511e:	d9da      	bls.n	80050d6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005120:	8afb      	ldrh	r3, [r7, #22]
 8005122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005126:	4293      	cmp	r3, r2
 8005128:	d006      	beq.n	8005138 <put_lfn+0xb4>
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d103      	bne.n	8005140 <put_lfn+0xbc>
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800513e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	79fa      	ldrb	r2, [r7, #7]
 8005144:	701a      	strb	r2, [r3, #0]
}
 8005146:	bf00      	nop
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	080086bc 	.word	0x080086bc

08005154 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08c      	sub	sp, #48	; 0x30
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005162:	220b      	movs	r2, #11
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7fe fece 	bl	8003f08 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b05      	cmp	r3, #5
 8005170:	d92b      	bls.n	80051ca <gen_numname+0x76>
		sr = seq;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005176:	e022      	b.n	80051be <gen_numname+0x6a>
			wc = *lfn++;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	1c9a      	adds	r2, r3, #2
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005182:	2300      	movs	r3, #0
 8005184:	62bb      	str	r3, [r7, #40]	; 0x28
 8005186:	e017      	b.n	80051b8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	005a      	lsls	r2, r3, #1
 800518c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	4413      	add	r3, r2
 8005194:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005196:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <gen_numname+0x5e>
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80051ac:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80051b0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	3301      	adds	r3, #1
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	2b0f      	cmp	r3, #15
 80051bc:	d9e4      	bls.n	8005188 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1d8      	bne.n	8005178 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80051ca:	2307      	movs	r3, #7
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	3330      	adds	r3, #48	; 0x30
 80051da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80051de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051e2:	2b39      	cmp	r3, #57	; 0x39
 80051e4:	d904      	bls.n	80051f0 <gen_numname+0x9c>
 80051e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051ea:	3307      	adds	r3, #7
 80051ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	1e5a      	subs	r2, r3, #1
 80051f4:	62ba      	str	r2, [r7, #40]	; 0x28
 80051f6:	3330      	adds	r3, #48	; 0x30
 80051f8:	443b      	add	r3, r7
 80051fa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80051fe:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1df      	bne.n	80051ce <gen_numname+0x7a>
	ns[i] = '~';
 800520e:	f107 0214 	add.w	r2, r7, #20
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	4413      	add	r3, r2
 8005216:	227e      	movs	r2, #126	; 0x7e
 8005218:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800521a:	2300      	movs	r3, #0
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
 800521e:	e002      	b.n	8005226 <gen_numname+0xd2>
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	3301      	adds	r3, #1
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
 8005226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	429a      	cmp	r2, r3
 800522c:	d205      	bcs.n	800523a <gen_numname+0xe6>
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	4413      	add	r3, r2
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b20      	cmp	r3, #32
 8005238:	d1f2      	bne.n	8005220 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	2b07      	cmp	r3, #7
 800523e:	d807      	bhi.n	8005250 <gen_numname+0xfc>
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	62ba      	str	r2, [r7, #40]	; 0x28
 8005246:	3330      	adds	r3, #48	; 0x30
 8005248:	443b      	add	r3, r7
 800524a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800524e:	e000      	b.n	8005252 <gen_numname+0xfe>
 8005250:	2120      	movs	r1, #32
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	627a      	str	r2, [r7, #36]	; 0x24
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	460a      	mov	r2, r1
 800525e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	2b07      	cmp	r3, #7
 8005264:	d9e9      	bls.n	800523a <gen_numname+0xe6>
}
 8005266:	bf00      	nop
 8005268:	bf00      	nop
 800526a:	3730      	adds	r7, #48	; 0x30
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005278:	2300      	movs	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800527c:	230b      	movs	r3, #11
 800527e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	b2da      	uxtb	r2, r3
 8005284:	0852      	lsrs	r2, r2, #1
 8005286:	01db      	lsls	r3, r3, #7
 8005288:	4313      	orrs	r3, r2
 800528a:	b2da      	uxtb	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	1c59      	adds	r1, r3, #1
 8005290:	6079      	str	r1, [r7, #4]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	4413      	add	r3, r2
 8005296:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	3b01      	subs	r3, #1
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1ed      	bne.n	8005280 <sum_sfn+0x10>
	return sum;
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80052ba:	2304      	movs	r3, #4
 80052bc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80052c4:	23ff      	movs	r3, #255	; 0xff
 80052c6:	757b      	strb	r3, [r7, #21]
 80052c8:	23ff      	movs	r3, #255	; 0xff
 80052ca:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80052cc:	e081      	b.n	80053d2 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	4619      	mov	r1, r3
 80052d4:	6938      	ldr	r0, [r7, #16]
 80052d6:	f7ff f83b 	bl	8004350 <move_window>
 80052da:	4603      	mov	r3, r0
 80052dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d17c      	bne.n	80053de <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80052ec:	7dbb      	ldrb	r3, [r7, #22]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d102      	bne.n	80052f8 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80052f2:	2304      	movs	r3, #4
 80052f4:	75fb      	strb	r3, [r7, #23]
 80052f6:	e077      	b.n	80053e8 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	330b      	adds	r3, #11
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005304:	73fb      	strb	r3, [r7, #15]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	7bfa      	ldrb	r2, [r7, #15]
 800530a:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800530c:	7dbb      	ldrb	r3, [r7, #22]
 800530e:	2be5      	cmp	r3, #229	; 0xe5
 8005310:	d00e      	beq.n	8005330 <dir_read+0x80>
 8005312:	7dbb      	ldrb	r3, [r7, #22]
 8005314:	2b2e      	cmp	r3, #46	; 0x2e
 8005316:	d00b      	beq.n	8005330 <dir_read+0x80>
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	f023 0320 	bic.w	r3, r3, #32
 800531e:	2b08      	cmp	r3, #8
 8005320:	bf0c      	ite	eq
 8005322:	2301      	moveq	r3, #1
 8005324:	2300      	movne	r3, #0
 8005326:	b2db      	uxtb	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	4293      	cmp	r3, r2
 800532e:	d002      	beq.n	8005336 <dir_read+0x86>
				ord = 0xFF;
 8005330:	23ff      	movs	r3, #255	; 0xff
 8005332:	757b      	strb	r3, [r7, #21]
 8005334:	e044      	b.n	80053c0 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8005336:	7bfb      	ldrb	r3, [r7, #15]
 8005338:	2b0f      	cmp	r3, #15
 800533a:	d12f      	bne.n	800539c <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800533c:	7dbb      	ldrb	r3, [r7, #22]
 800533e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00d      	beq.n	8005362 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	7b5b      	ldrb	r3, [r3, #13]
 800534c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800534e:	7dbb      	ldrb	r3, [r7, #22]
 8005350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005354:	75bb      	strb	r3, [r7, #22]
 8005356:	7dbb      	ldrb	r3, [r7, #22]
 8005358:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005362:	7dba      	ldrb	r2, [r7, #22]
 8005364:	7d7b      	ldrb	r3, [r7, #21]
 8005366:	429a      	cmp	r2, r3
 8005368:	d115      	bne.n	8005396 <dir_read+0xe6>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	330d      	adds	r3, #13
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	7d3a      	ldrb	r2, [r7, #20]
 8005374:	429a      	cmp	r2, r3
 8005376:	d10e      	bne.n	8005396 <dir_read+0xe6>
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	4619      	mov	r1, r3
 8005382:	4610      	mov	r0, r2
 8005384:	f7ff fe1a 	bl	8004fbc <pick_lfn>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <dir_read+0xe6>
 800538e:	7d7b      	ldrb	r3, [r7, #21]
 8005390:	3b01      	subs	r3, #1
 8005392:	b2db      	uxtb	r3, r3
 8005394:	e000      	b.n	8005398 <dir_read+0xe8>
 8005396:	23ff      	movs	r3, #255	; 0xff
 8005398:	757b      	strb	r3, [r7, #21]
 800539a:	e011      	b.n	80053c0 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800539c:	7d7b      	ldrb	r3, [r7, #21]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d109      	bne.n	80053b6 <dir_read+0x106>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff ff62 	bl	8005270 <sum_sfn>
 80053ac:	4603      	mov	r3, r0
 80053ae:	461a      	mov	r2, r3
 80053b0:	7d3b      	ldrb	r3, [r7, #20]
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d015      	beq.n	80053e2 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053bc:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80053be:	e010      	b.n	80053e2 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80053c0:	2100      	movs	r1, #0
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff fc2d 	bl	8004c22 <dir_next>
 80053c8:	4603      	mov	r3, r0
 80053ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <dir_read+0x136>
	while (dp->sect) {
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f47f af79 	bne.w	80052ce <dir_read+0x1e>
 80053dc:	e004      	b.n	80053e8 <dir_read+0x138>
		if (res != FR_OK) break;
 80053de:	bf00      	nop
 80053e0:	e002      	b.n	80053e8 <dir_read+0x138>
					break;
 80053e2:	bf00      	nop
 80053e4:	e000      	b.n	80053e8 <dir_read+0x138>
		if (res != FR_OK) break;
 80053e6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80053e8:	7dfb      	ldrb	r3, [r7, #23]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <dir_read+0x144>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	61da      	str	r2, [r3, #28]
	return res;
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b086      	sub	sp, #24
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800540c:	2100      	movs	r1, #0
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff fb7e 	bl	8004b10 <dir_sdi>
 8005414:	4603      	mov	r3, r0
 8005416:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005418:	7dfb      	ldrb	r3, [r7, #23]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <dir_find+0x24>
 800541e:	7dfb      	ldrb	r3, [r7, #23]
 8005420:	e0a9      	b.n	8005576 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005422:	23ff      	movs	r3, #255	; 0xff
 8005424:	753b      	strb	r3, [r7, #20]
 8005426:	7d3b      	ldrb	r3, [r7, #20]
 8005428:	757b      	strb	r3, [r7, #21]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005430:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	4619      	mov	r1, r3
 8005438:	6938      	ldr	r0, [r7, #16]
 800543a:	f7fe ff89 	bl	8004350 <move_window>
 800543e:	4603      	mov	r3, r0
 8005440:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005442:	7dfb      	ldrb	r3, [r7, #23]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f040 8090 	bne.w	800556a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005452:	7dbb      	ldrb	r3, [r7, #22]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <dir_find+0x60>
 8005458:	2304      	movs	r3, #4
 800545a:	75fb      	strb	r3, [r7, #23]
 800545c:	e08a      	b.n	8005574 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	330b      	adds	r3, #11
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800546a:	73fb      	strb	r3, [r7, #15]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	7bfa      	ldrb	r2, [r7, #15]
 8005470:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005472:	7dbb      	ldrb	r3, [r7, #22]
 8005474:	2be5      	cmp	r3, #229	; 0xe5
 8005476:	d007      	beq.n	8005488 <dir_find+0x8a>
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <dir_find+0x98>
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	2b0f      	cmp	r3, #15
 8005486:	d006      	beq.n	8005496 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005488:	23ff      	movs	r3, #255	; 0xff
 800548a:	757b      	strb	r3, [r7, #21]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005492:	631a      	str	r2, [r3, #48]	; 0x30
 8005494:	e05e      	b.n	8005554 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	2b0f      	cmp	r3, #15
 800549a:	d136      	bne.n	800550a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80054a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d154      	bne.n	8005554 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80054aa:	7dbb      	ldrb	r3, [r7, #22]
 80054ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00d      	beq.n	80054d0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	7b5b      	ldrb	r3, [r3, #13]
 80054ba:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80054bc:	7dbb      	ldrb	r3, [r7, #22]
 80054be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c2:	75bb      	strb	r3, [r7, #22]
 80054c4:	7dbb      	ldrb	r3, [r7, #22]
 80054c6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	695a      	ldr	r2, [r3, #20]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80054d0:	7dba      	ldrb	r2, [r7, #22]
 80054d2:	7d7b      	ldrb	r3, [r7, #21]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d115      	bne.n	8005504 <dir_find+0x106>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	330d      	adds	r3, #13
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	7d3a      	ldrb	r2, [r7, #20]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d10e      	bne.n	8005504 <dir_find+0x106>
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	4619      	mov	r1, r3
 80054f0:	4610      	mov	r0, r2
 80054f2:	f7ff fcf3 	bl	8004edc <cmp_lfn>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <dir_find+0x106>
 80054fc:	7d7b      	ldrb	r3, [r7, #21]
 80054fe:	3b01      	subs	r3, #1
 8005500:	b2db      	uxtb	r3, r3
 8005502:	e000      	b.n	8005506 <dir_find+0x108>
 8005504:	23ff      	movs	r3, #255	; 0xff
 8005506:	757b      	strb	r3, [r7, #21]
 8005508:	e024      	b.n	8005554 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800550a:	7d7b      	ldrb	r3, [r7, #21]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d109      	bne.n	8005524 <dir_find+0x126>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff feab 	bl	8005270 <sum_sfn>
 800551a:	4603      	mov	r3, r0
 800551c:	461a      	mov	r2, r3
 800551e:	7d3b      	ldrb	r3, [r7, #20]
 8005520:	4293      	cmp	r3, r2
 8005522:	d024      	beq.n	800556e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <dir_find+0x14a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a18      	ldr	r0, [r3, #32]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3324      	adds	r3, #36	; 0x24
 800553a:	220b      	movs	r2, #11
 800553c:	4619      	mov	r1, r3
 800553e:	f7fe fd1d 	bl	8003f7c <mem_cmp>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d014      	beq.n	8005572 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005548:	23ff      	movs	r3, #255	; 0xff
 800554a:	757b      	strb	r3, [r7, #21]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005552:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005554:	2100      	movs	r1, #0
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff fb63 	bl	8004c22 <dir_next>
 800555c:	4603      	mov	r3, r0
 800555e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005560:	7dfb      	ldrb	r3, [r7, #23]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f43f af65 	beq.w	8005432 <dir_find+0x34>
 8005568:	e004      	b.n	8005574 <dir_find+0x176>
		if (res != FR_OK) break;
 800556a:	bf00      	nop
 800556c:	e002      	b.n	8005574 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800556e:	bf00      	nop
 8005570:	e000      	b.n	8005574 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005572:	bf00      	nop

	return res;
 8005574:	7dfb      	ldrb	r3, [r7, #23]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08c      	sub	sp, #48	; 0x30
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005594:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <dir_register+0x20>
 800559c:	2306      	movs	r3, #6
 800559e:	e0e0      	b.n	8005762 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80055a0:	2300      	movs	r3, #0
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
 80055a4:	e002      	b.n	80055ac <dir_register+0x2c>
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	3301      	adds	r3, #1
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	4413      	add	r3, r2
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f4      	bne.n	80055a6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80055c2:	f107 030c 	add.w	r3, r7, #12
 80055c6:	220c      	movs	r2, #12
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fe fc9d 	bl	8003f08 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80055ce:	7dfb      	ldrb	r3, [r7, #23]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d032      	beq.n	800563e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2240      	movs	r2, #64	; 0x40
 80055dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80055e0:	2301      	movs	r3, #1
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e4:	e016      	b.n	8005614 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	f107 010c 	add.w	r1, r7, #12
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	f7ff fdad 	bl	8005154 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff feff 	bl	80053fe <dir_find>
 8005600:	4603      	mov	r3, r0
 8005602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005606:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800560a:	2b00      	cmp	r3, #0
 800560c:	d106      	bne.n	800561c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	3301      	adds	r3, #1
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	2b63      	cmp	r3, #99	; 0x63
 8005618:	d9e5      	bls.n	80055e6 <dir_register+0x66>
 800561a:	e000      	b.n	800561e <dir_register+0x9e>
			if (res != FR_OK) break;
 800561c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	2b64      	cmp	r3, #100	; 0x64
 8005622:	d101      	bne.n	8005628 <dir_register+0xa8>
 8005624:	2307      	movs	r3, #7
 8005626:	e09c      	b.n	8005762 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800562c:	2b04      	cmp	r3, #4
 800562e:	d002      	beq.n	8005636 <dir_register+0xb6>
 8005630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005634:	e095      	b.n	8005762 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005636:	7dfa      	ldrb	r2, [r7, #23]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d007      	beq.n	8005658 <dir_register+0xd8>
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	330c      	adds	r3, #12
 800564c:	4a47      	ldr	r2, [pc, #284]	; (800576c <dir_register+0x1ec>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	089b      	lsrs	r3, r3, #2
 8005654:	3301      	adds	r3, #1
 8005656:	e000      	b.n	800565a <dir_register+0xda>
 8005658:	2301      	movs	r3, #1
 800565a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800565c:	6a39      	ldr	r1, [r7, #32]
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff fbb5 	bl	8004dce <dir_alloc>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800566a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800566e:	2b00      	cmp	r3, #0
 8005670:	d148      	bne.n	8005704 <dir_register+0x184>
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	3b01      	subs	r3, #1
 8005676:	623b      	str	r3, [r7, #32]
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d042      	beq.n	8005704 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	015b      	lsls	r3, r3, #5
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	4619      	mov	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff fa40 	bl	8004b10 <dir_sdi>
 8005690:	4603      	mov	r3, r0
 8005692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800569a:	2b00      	cmp	r3, #0
 800569c:	d132      	bne.n	8005704 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3324      	adds	r3, #36	; 0x24
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff fde4 	bl	8005270 <sum_sfn>
 80056a8:	4603      	mov	r3, r0
 80056aa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	4619      	mov	r1, r3
 80056b2:	69f8      	ldr	r0, [r7, #28]
 80056b4:	f7fe fe4c 	bl	8004350 <move_window>
 80056b8:	4603      	mov	r3, r0
 80056ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80056be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d11d      	bne.n	8005702 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	6918      	ldr	r0, [r3, #16]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a19      	ldr	r1, [r3, #32]
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	7efb      	ldrb	r3, [r7, #27]
 80056d4:	f7ff fcd6 	bl	8005084 <put_lfn>
				fs->wflag = 1;
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	2201      	movs	r2, #1
 80056dc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80056de:	2100      	movs	r1, #0
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff fa9e 	bl	8004c22 <dir_next>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80056ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d107      	bne.n	8005704 <dir_register+0x184>
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	623b      	str	r3, [r7, #32]
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1d5      	bne.n	80056ac <dir_register+0x12c>
 8005700:	e000      	b.n	8005704 <dir_register+0x184>
				if (res != FR_OK) break;
 8005702:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005708:	2b00      	cmp	r3, #0
 800570a:	d128      	bne.n	800575e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	4619      	mov	r1, r3
 8005712:	69f8      	ldr	r0, [r7, #28]
 8005714:	f7fe fe1c 	bl	8004350 <move_window>
 8005718:	4603      	mov	r3, r0
 800571a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800571e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005722:	2b00      	cmp	r3, #0
 8005724:	d11b      	bne.n	800575e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	2220      	movs	r2, #32
 800572c:	2100      	movs	r1, #0
 800572e:	4618      	mov	r0, r3
 8005730:	f7fe fc0a 	bl	8003f48 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a18      	ldr	r0, [r3, #32]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3324      	adds	r3, #36	; 0x24
 800573c:	220b      	movs	r2, #11
 800573e:	4619      	mov	r1, r3
 8005740:	f7fe fbe2 	bl	8003f08 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	330c      	adds	r3, #12
 8005750:	f002 0218 	and.w	r2, r2, #24
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	2201      	movs	r2, #1
 800575c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800575e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005762:	4618      	mov	r0, r3
 8005764:	3730      	adds	r7, #48	; 0x30
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	4ec4ec4f 	.word	0x4ec4ec4f

08005770 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800578c:	d007      	beq.n	800579e <dir_remove+0x2e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff f9bb 	bl	8004b10 <dir_sdi>
 800579a:	4603      	mov	r3, r0
 800579c:	e000      	b.n	80057a0 <dir_remove+0x30>
 800579e:	2300      	movs	r3, #0
 80057a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80057a2:	7dfb      	ldrb	r3, [r7, #23]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d128      	bne.n	80057fa <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	4619      	mov	r1, r3
 80057ae:	6938      	ldr	r0, [r7, #16]
 80057b0:	f7fe fdce 	bl	8004350 <move_window>
 80057b4:	4603      	mov	r3, r0
 80057b6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d115      	bne.n	80057ea <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	22e5      	movs	r2, #229	; 0xe5
 80057c4:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2201      	movs	r2, #1
 80057ca:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d90b      	bls.n	80057ee <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 80057d6:	2100      	movs	r1, #0
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff fa22 	bl	8004c22 <dir_next>
 80057de:	4603      	mov	r3, r0
 80057e0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 80057e2:	7dfb      	ldrb	r3, [r7, #23]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0df      	beq.n	80057a8 <dir_remove+0x38>
 80057e8:	e002      	b.n	80057f0 <dir_remove+0x80>
			if (res != FR_OK) break;
 80057ea:	bf00      	nop
 80057ec:	e000      	b.n	80057f0 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80057ee:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d101      	bne.n	80057fa <dir_remove+0x8a>
 80057f6:	2302      	movs	r3, #2
 80057f8:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08a      	sub	sp, #40	; 0x28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	61ba      	str	r2, [r7, #24]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4413      	add	r3, r2
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005834:	2b1f      	cmp	r3, #31
 8005836:	d940      	bls.n	80058ba <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800583a:	2b2f      	cmp	r3, #47	; 0x2f
 800583c:	d006      	beq.n	800584c <create_name+0x48>
 800583e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005840:	2b5c      	cmp	r3, #92	; 0x5c
 8005842:	d110      	bne.n	8005866 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005844:	e002      	b.n	800584c <create_name+0x48>
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	3301      	adds	r3, #1
 800584a:	61bb      	str	r3, [r7, #24]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	4413      	add	r3, r2
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b2f      	cmp	r3, #47	; 0x2f
 8005856:	d0f6      	beq.n	8005846 <create_name+0x42>
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	4413      	add	r3, r2
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b5c      	cmp	r3, #92	; 0x5c
 8005862:	d0f0      	beq.n	8005846 <create_name+0x42>
			break;
 8005864:	e02a      	b.n	80058bc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2bfe      	cmp	r3, #254	; 0xfe
 800586a:	d901      	bls.n	8005870 <create_name+0x6c>
 800586c:	2306      	movs	r3, #6
 800586e:	e17d      	b.n	8005b6c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005872:	b2db      	uxtb	r3, r3
 8005874:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005876:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005878:	2101      	movs	r1, #1
 800587a:	4618      	mov	r0, r3
 800587c:	f001 ffa8 	bl	80077d0 <ff_convert>
 8005880:	4603      	mov	r3, r0
 8005882:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005884:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <create_name+0x8a>
 800588a:	2306      	movs	r3, #6
 800588c:	e16e      	b.n	8005b6c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800588e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005890:	2b7f      	cmp	r3, #127	; 0x7f
 8005892:	d809      	bhi.n	80058a8 <create_name+0xa4>
 8005894:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005896:	4619      	mov	r1, r3
 8005898:	488d      	ldr	r0, [pc, #564]	; (8005ad0 <create_name+0x2cc>)
 800589a:	f7fe fb95 	bl	8003fc8 <chk_chr>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <create_name+0xa4>
 80058a4:	2306      	movs	r3, #6
 80058a6:	e161      	b.n	8005b6c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	617a      	str	r2, [r7, #20]
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058b6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80058b8:	e7b4      	b.n	8005824 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80058ba:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	441a      	add	r2, r3
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80058c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058c8:	2b1f      	cmp	r3, #31
 80058ca:	d801      	bhi.n	80058d0 <create_name+0xcc>
 80058cc:	2304      	movs	r3, #4
 80058ce:	e000      	b.n	80058d2 <create_name+0xce>
 80058d0:	2300      	movs	r3, #0
 80058d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80058d6:	e011      	b.n	80058fc <create_name+0xf8>
		w = lfn[di - 1];
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80058de:	3b01      	subs	r3, #1
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4413      	add	r3, r2
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80058ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	d002      	beq.n	80058f6 <create_name+0xf2>
 80058f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058f2:	2b2e      	cmp	r3, #46	; 0x2e
 80058f4:	d106      	bne.n	8005904 <create_name+0x100>
		di--;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1ea      	bne.n	80058d8 <create_name+0xd4>
 8005902:	e000      	b.n	8005906 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005904:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	2200      	movs	r2, #0
 8005910:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <create_name+0x118>
 8005918:	2306      	movs	r3, #6
 800591a:	e127      	b.n	8005b6c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3324      	adds	r3, #36	; 0x24
 8005920:	220b      	movs	r2, #11
 8005922:	2120      	movs	r1, #32
 8005924:	4618      	mov	r0, r3
 8005926:	f7fe fb0f 	bl	8003f48 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800592a:	2300      	movs	r3, #0
 800592c:	61bb      	str	r3, [r7, #24]
 800592e:	e002      	b.n	8005936 <create_name+0x132>
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	3301      	adds	r3, #1
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	2b20      	cmp	r3, #32
 8005942:	d0f5      	beq.n	8005930 <create_name+0x12c>
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	2b2e      	cmp	r3, #46	; 0x2e
 8005950:	d0ee      	beq.n	8005930 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d009      	beq.n	800596c <create_name+0x168>
 8005958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800595c:	f043 0303 	orr.w	r3, r3, #3
 8005960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005964:	e002      	b.n	800596c <create_name+0x168>
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	3b01      	subs	r3, #1
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <create_name+0x182>
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005978:	3b01      	subs	r3, #1
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4413      	add	r3, r2
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	2b2e      	cmp	r3, #46	; 0x2e
 8005984:	d1ef      	bne.n	8005966 <create_name+0x162>

	i = b = 0; ni = 8;
 8005986:	2300      	movs	r3, #0
 8005988:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800598c:	2300      	movs	r3, #0
 800598e:	623b      	str	r3, [r7, #32]
 8005990:	2308      	movs	r3, #8
 8005992:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	61ba      	str	r2, [r7, #24]
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80059a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 8090 	beq.w	8005acc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80059ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	d006      	beq.n	80059c0 <create_name+0x1bc>
 80059b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059b4:	2b2e      	cmp	r3, #46	; 0x2e
 80059b6:	d10a      	bne.n	80059ce <create_name+0x1ca>
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d006      	beq.n	80059ce <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80059c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059c4:	f043 0303 	orr.w	r3, r3, #3
 80059c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059cc:	e07d      	b.n	8005aca <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80059ce:	6a3a      	ldr	r2, [r7, #32]
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d203      	bcs.n	80059de <create_name+0x1da>
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d123      	bne.n	8005a26 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	2b0b      	cmp	r3, #11
 80059e2:	d106      	bne.n	80059f2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80059e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059e8:	f043 0303 	orr.w	r3, r3, #3
 80059ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059f0:	e075      	b.n	8005ade <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d005      	beq.n	8005a06 <create_name+0x202>
 80059fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059fe:	f043 0303 	orr.w	r3, r3, #3
 8005a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d866      	bhi.n	8005adc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	2308      	movs	r3, #8
 8005a14:	623b      	str	r3, [r7, #32]
 8005a16:	230b      	movs	r3, #11
 8005a18:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005a1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a24:	e051      	b.n	8005aca <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a28:	2b7f      	cmp	r3, #127	; 0x7f
 8005a2a:	d914      	bls.n	8005a56 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005a2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a2e:	2100      	movs	r1, #0
 8005a30:	4618      	mov	r0, r3
 8005a32:	f001 fecd 	bl	80077d0 <ff_convert>
 8005a36:	4603      	mov	r3, r0
 8005a38:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <create_name+0x246>
 8005a40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a42:	3b80      	subs	r3, #128	; 0x80
 8005a44:	4a23      	ldr	r2, [pc, #140]	; (8005ad4 <create_name+0x2d0>)
 8005a46:	5cd3      	ldrb	r3, [r2, r3]
 8005a48:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a4e:	f043 0302 	orr.w	r3, r3, #2
 8005a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d007      	beq.n	8005a6c <create_name+0x268>
 8005a5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a5e:	4619      	mov	r1, r3
 8005a60:	481d      	ldr	r0, [pc, #116]	; (8005ad8 <create_name+0x2d4>)
 8005a62:	f7fe fab1 	bl	8003fc8 <chk_chr>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005a6c:	235f      	movs	r3, #95	; 0x5f
 8005a6e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a74:	f043 0303 	orr.w	r3, r3, #3
 8005a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a7c:	e01b      	b.n	8005ab6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005a7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	d909      	bls.n	8005a98 <create_name+0x294>
 8005a84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a86:	2b5a      	cmp	r3, #90	; 0x5a
 8005a88:	d806      	bhi.n	8005a98 <create_name+0x294>
					b |= 2;
 8005a8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a8e:	f043 0302 	orr.w	r3, r3, #2
 8005a92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a96:	e00e      	b.n	8005ab6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005a98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a9a:	2b60      	cmp	r3, #96	; 0x60
 8005a9c:	d90b      	bls.n	8005ab6 <create_name+0x2b2>
 8005a9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aa0:	2b7a      	cmp	r3, #122	; 0x7a
 8005aa2:	d808      	bhi.n	8005ab6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005aa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005aa8:	f043 0301 	orr.w	r3, r3, #1
 8005aac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005ab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ab2:	3b20      	subs	r3, #32
 8005ab4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	623a      	str	r2, [r7, #32]
 8005abc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005abe:	b2d1      	uxtb	r1, r2
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	460a      	mov	r2, r1
 8005ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005aca:	e763      	b.n	8005994 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005acc:	bf00      	nop
 8005ace:	e006      	b.n	8005ade <create_name+0x2da>
 8005ad0:	080085d0 	.word	0x080085d0
 8005ad4:	0800863c 	.word	0x0800863c
 8005ad8:	080085dc 	.word	0x080085dc
			if (si > di) break;			/* No extension */
 8005adc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ae4:	2be5      	cmp	r3, #229	; 0xe5
 8005ae6:	d103      	bne.n	8005af0 <create_name+0x2ec>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2205      	movs	r2, #5
 8005aec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d104      	bne.n	8005b00 <create_name+0x2fc>
 8005af6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005b00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b04:	f003 030c 	and.w	r3, r3, #12
 8005b08:	2b0c      	cmp	r3, #12
 8005b0a:	d005      	beq.n	8005b18 <create_name+0x314>
 8005b0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d105      	bne.n	8005b24 <create_name+0x320>
 8005b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b1c:	f043 0302 	orr.w	r3, r3, #2
 8005b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d117      	bne.n	8005b60 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005b30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d105      	bne.n	8005b48 <create_name+0x344>
 8005b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b40:	f043 0310 	orr.w	r3, r3, #16
 8005b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005b48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b4c:	f003 030c 	and.w	r3, r3, #12
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d105      	bne.n	8005b60 <create_name+0x35c>
 8005b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b58:	f043 0308 	orr.w	r3, r3, #8
 8005b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005b6a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3728      	adds	r7, #40	; 0x28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005b88:	e002      	b.n	8005b90 <follow_path+0x1c>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b2f      	cmp	r3, #47	; 0x2f
 8005b96:	d0f8      	beq.n	8005b8a <follow_path+0x16>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b5c      	cmp	r3, #92	; 0x5c
 8005b9e:	d0f4      	beq.n	8005b8a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b1f      	cmp	r3, #31
 8005bac:	d80a      	bhi.n	8005bc4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2280      	movs	r2, #128	; 0x80
 8005bb2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fe ffa9 	bl	8004b10 <dir_sdi>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	75fb      	strb	r3, [r7, #23]
 8005bc2:	e048      	b.n	8005c56 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff fe1b 	bl	8005804 <create_name>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005bd2:	7dfb      	ldrb	r3, [r7, #23]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d139      	bne.n	8005c4c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff fc10 	bl	80053fe <dir_find>
 8005bde:	4603      	mov	r3, r0
 8005be0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005be8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00a      	beq.n	8005c06 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d12c      	bne.n	8005c50 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005bf6:	7afb      	ldrb	r3, [r7, #11]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d127      	bne.n	8005c50 <follow_path+0xdc>
 8005c00:	2305      	movs	r3, #5
 8005c02:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005c04:	e024      	b.n	8005c50 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005c06:	7afb      	ldrb	r3, [r7, #11]
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d121      	bne.n	8005c54 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	799b      	ldrb	r3, [r3, #6]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d102      	bne.n	8005c22 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005c1c:	2305      	movs	r3, #5
 8005c1e:	75fb      	strb	r3, [r7, #23]
 8005c20:	e019      	b.n	8005c56 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	8992      	ldrh	r2, [r2, #12]
 8005c30:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c34:	fb00 f202 	mul.w	r2, r0, r2
 8005c38:	1a9b      	subs	r3, r3, r2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f7ff f90c 	bl	8004e5c <ld_clust>
 8005c44:	4602      	mov	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005c4a:	e7bb      	b.n	8005bc4 <follow_path+0x50>
			if (res != FR_OK) break;
 8005c4c:	bf00      	nop
 8005c4e:	e002      	b.n	8005c56 <follow_path+0xe2>
				break;
 8005c50:	bf00      	nop
 8005c52:	e000      	b.n	8005c56 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005c54:	bf00      	nop
			}
		}
	}

	return res;
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c6c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d031      	beq.n	8005cda <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	e002      	b.n	8005c84 <get_ldnumber+0x24>
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	3301      	adds	r3, #1
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b1f      	cmp	r3, #31
 8005c8a:	d903      	bls.n	8005c94 <get_ldnumber+0x34>
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b3a      	cmp	r3, #58	; 0x3a
 8005c92:	d1f4      	bne.n	8005c7e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b3a      	cmp	r3, #58	; 0x3a
 8005c9a:	d11c      	bne.n	8005cd6 <get_ldnumber+0x76>
			tp = *path;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	60fa      	str	r2, [r7, #12]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	3b30      	subs	r3, #48	; 0x30
 8005cac:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b09      	cmp	r3, #9
 8005cb2:	d80e      	bhi.n	8005cd2 <get_ldnumber+0x72>
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d10a      	bne.n	8005cd2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d107      	bne.n	8005cd2 <get_ldnumber+0x72>
					vol = (int)i;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	617b      	str	r3, [r7, #20]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	e002      	b.n	8005cdc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005cda:	693b      	ldr	r3, [r7, #16]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	371c      	adds	r7, #28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr
	...

08005ce8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	70da      	strb	r2, [r3, #3]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cfe:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fe fb24 	bl	8004350 <move_window>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <check_fs+0x2a>
 8005d0e:	2304      	movs	r3, #4
 8005d10:	e038      	b.n	8005d84 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	3338      	adds	r3, #56	; 0x38
 8005d16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fe f876 	bl	8003e0c <ld_word>
 8005d20:	4603      	mov	r3, r0
 8005d22:	461a      	mov	r2, r3
 8005d24:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d001      	beq.n	8005d30 <check_fs+0x48>
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e029      	b.n	8005d84 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d36:	2be9      	cmp	r3, #233	; 0xe9
 8005d38:	d009      	beq.n	8005d4e <check_fs+0x66>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d40:	2beb      	cmp	r3, #235	; 0xeb
 8005d42:	d11e      	bne.n	8005d82 <check_fs+0x9a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d4a:	2b90      	cmp	r3, #144	; 0x90
 8005d4c:	d119      	bne.n	8005d82 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3338      	adds	r3, #56	; 0x38
 8005d52:	3336      	adds	r3, #54	; 0x36
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fe f870 	bl	8003e3a <ld_dword>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d60:	4a0a      	ldr	r2, [pc, #40]	; (8005d8c <check_fs+0xa4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d101      	bne.n	8005d6a <check_fs+0x82>
 8005d66:	2300      	movs	r3, #0
 8005d68:	e00c      	b.n	8005d84 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3338      	adds	r3, #56	; 0x38
 8005d6e:	3352      	adds	r3, #82	; 0x52
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fe f862 	bl	8003e3a <ld_dword>
 8005d76:	4603      	mov	r3, r0
 8005d78:	4a05      	ldr	r2, [pc, #20]	; (8005d90 <check_fs+0xa8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d101      	bne.n	8005d82 <check_fs+0x9a>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e000      	b.n	8005d84 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005d82:	2302      	movs	r3, #2
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	00544146 	.word	0x00544146
 8005d90:	33544146 	.word	0x33544146

08005d94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b096      	sub	sp, #88	; 0x58
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2200      	movs	r2, #0
 8005da6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f7ff ff59 	bl	8005c60 <get_ldnumber>
 8005dae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	da01      	bge.n	8005dba <find_volume+0x26>
 8005db6:	230b      	movs	r3, #11
 8005db8:	e265      	b.n	8006286 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005dba:	4a9f      	ldr	r2, [pc, #636]	; (8006038 <find_volume+0x2a4>)
 8005dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <find_volume+0x3a>
 8005dca:	230c      	movs	r3, #12
 8005dcc:	e25b      	b.n	8006286 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dd2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	f023 0301 	bic.w	r3, r3, #1
 8005dda:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01a      	beq.n	8005e1a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fd ff71 	bl	8003cd0 <disk_status>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005df4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10c      	bne.n	8005e1a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d007      	beq.n	8005e16 <find_volume+0x82>
 8005e06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005e12:	230a      	movs	r3, #10
 8005e14:	e237      	b.n	8006286 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005e16:	2300      	movs	r3, #0
 8005e18:	e235      	b.n	8006286 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	785b      	ldrb	r3, [r3, #1]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fd ff69 	bl	8003d04 <disk_initialize>
 8005e32:	4603      	mov	r3, r0
 8005e34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005e38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005e44:	2303      	movs	r3, #3
 8005e46:	e21e      	b.n	8006286 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d007      	beq.n	8005e5e <find_volume+0xca>
 8005e4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005e5a:	230a      	movs	r3, #10
 8005e5c:	e213      	b.n	8006286 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	7858      	ldrb	r0, [r3, #1]
 8005e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e64:	330c      	adds	r3, #12
 8005e66:	461a      	mov	r2, r3
 8005e68:	2102      	movs	r1, #2
 8005e6a:	f7fd ffb1 	bl	8003dd0 <disk_ioctl>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <find_volume+0xe4>
 8005e74:	2301      	movs	r3, #1
 8005e76:	e206      	b.n	8006286 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	899b      	ldrh	r3, [r3, #12]
 8005e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e80:	d80d      	bhi.n	8005e9e <find_volume+0x10a>
 8005e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e84:	899b      	ldrh	r3, [r3, #12]
 8005e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e8a:	d308      	bcc.n	8005e9e <find_volume+0x10a>
 8005e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8e:	899b      	ldrh	r3, [r3, #12]
 8005e90:	461a      	mov	r2, r3
 8005e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e94:	899b      	ldrh	r3, [r3, #12]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	4013      	ands	r3, r2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <find_volume+0x10e>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e1f1      	b.n	8006286 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005ea6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ea8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005eaa:	f7ff ff1d 	bl	8005ce8 <check_fs>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005eb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d149      	bne.n	8005f50 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8005ec0:	e01e      	b.n	8005f00 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005ed0:	4413      	add	r3, r2
 8005ed2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d006      	beq.n	8005eec <find_volume+0x158>
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fd ffa9 	bl	8003e3a <ld_dword>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	e000      	b.n	8005eee <find_volume+0x15a>
 8005eec:	2200      	movs	r2, #0
 8005eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	3358      	adds	r3, #88	; 0x58
 8005ef4:	443b      	add	r3, r7
 8005ef6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005efc:	3301      	adds	r3, #1
 8005efe:	643b      	str	r3, [r7, #64]	; 0x40
 8005f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d9dd      	bls.n	8005ec2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005f06:	2300      	movs	r3, #0
 8005f08:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <find_volume+0x182>
 8005f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f12:	3b01      	subs	r3, #1
 8005f14:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	3358      	adds	r3, #88	; 0x58
 8005f1c:	443b      	add	r3, r7
 8005f1e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005f22:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d005      	beq.n	8005f36 <find_volume+0x1a2>
 8005f2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f2e:	f7ff fedb 	bl	8005ce8 <check_fs>
 8005f32:	4603      	mov	r3, r0
 8005f34:	e000      	b.n	8005f38 <find_volume+0x1a4>
 8005f36:	2303      	movs	r3, #3
 8005f38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005f3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d905      	bls.n	8005f50 <find_volume+0x1bc>
 8005f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f46:	3301      	adds	r3, #1
 8005f48:	643b      	str	r3, [r7, #64]	; 0x40
 8005f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d9e2      	bls.n	8005f16 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005f50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d101      	bne.n	8005f5c <find_volume+0x1c8>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e194      	b.n	8006286 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005f5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d901      	bls.n	8005f68 <find_volume+0x1d4>
 8005f64:	230d      	movs	r3, #13
 8005f66:	e18e      	b.n	8006286 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6a:	3338      	adds	r3, #56	; 0x38
 8005f6c:	330b      	adds	r3, #11
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fd ff4c 	bl	8003e0c <ld_word>
 8005f74:	4603      	mov	r3, r0
 8005f76:	461a      	mov	r2, r3
 8005f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7a:	899b      	ldrh	r3, [r3, #12]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d001      	beq.n	8005f84 <find_volume+0x1f0>
 8005f80:	230d      	movs	r3, #13
 8005f82:	e180      	b.n	8006286 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	3338      	adds	r3, #56	; 0x38
 8005f88:	3316      	adds	r3, #22
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fd ff3e 	bl	8003e0c <ld_word>
 8005f90:	4603      	mov	r3, r0
 8005f92:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <find_volume+0x214>
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	3338      	adds	r3, #56	; 0x38
 8005f9e:	3324      	adds	r3, #36	; 0x24
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fd ff4a 	bl	8003e3a <ld_dword>
 8005fa6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fac:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fba:	789b      	ldrb	r3, [r3, #2]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d005      	beq.n	8005fcc <find_volume+0x238>
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	789b      	ldrb	r3, [r3, #2]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d001      	beq.n	8005fcc <find_volume+0x238>
 8005fc8:	230d      	movs	r3, #13
 8005fca:	e15c      	b.n	8006286 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fce:	789b      	ldrb	r3, [r3, #2]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd4:	fb02 f303 	mul.w	r3, r2, r3
 8005fd8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe8:	895b      	ldrh	r3, [r3, #10]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d008      	beq.n	8006000 <find_volume+0x26c>
 8005fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff0:	895b      	ldrh	r3, [r3, #10]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	895b      	ldrh	r3, [r3, #10]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <find_volume+0x270>
 8006000:	230d      	movs	r3, #13
 8006002:	e140      	b.n	8006286 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	3338      	adds	r3, #56	; 0x38
 8006008:	3311      	adds	r3, #17
 800600a:	4618      	mov	r0, r3
 800600c:	f7fd fefe 	bl	8003e0c <ld_word>
 8006010:	4603      	mov	r3, r0
 8006012:	461a      	mov	r2, r3
 8006014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006016:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	891b      	ldrh	r3, [r3, #8]
 800601c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800601e:	8992      	ldrh	r2, [r2, #12]
 8006020:	0952      	lsrs	r2, r2, #5
 8006022:	b292      	uxth	r2, r2
 8006024:	fbb3 f1f2 	udiv	r1, r3, r2
 8006028:	fb01 f202 	mul.w	r2, r1, r2
 800602c:	1a9b      	subs	r3, r3, r2
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <find_volume+0x2a8>
 8006034:	230d      	movs	r3, #13
 8006036:	e126      	b.n	8006286 <find_volume+0x4f2>
 8006038:	20002264 	.word	0x20002264

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800603c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603e:	3338      	adds	r3, #56	; 0x38
 8006040:	3313      	adds	r3, #19
 8006042:	4618      	mov	r0, r3
 8006044:	f7fd fee2 	bl	8003e0c <ld_word>
 8006048:	4603      	mov	r3, r0
 800604a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800604c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <find_volume+0x2cc>
 8006052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006054:	3338      	adds	r3, #56	; 0x38
 8006056:	3320      	adds	r3, #32
 8006058:	4618      	mov	r0, r3
 800605a:	f7fd feee 	bl	8003e3a <ld_dword>
 800605e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	3338      	adds	r3, #56	; 0x38
 8006064:	330e      	adds	r3, #14
 8006066:	4618      	mov	r0, r3
 8006068:	f7fd fed0 	bl	8003e0c <ld_word>
 800606c:	4603      	mov	r3, r0
 800606e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006070:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <find_volume+0x2e6>
 8006076:	230d      	movs	r3, #13
 8006078:	e105      	b.n	8006286 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800607a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800607c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800607e:	4413      	add	r3, r2
 8006080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006082:	8911      	ldrh	r1, [r2, #8]
 8006084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006086:	8992      	ldrh	r2, [r2, #12]
 8006088:	0952      	lsrs	r2, r2, #5
 800608a:	b292      	uxth	r2, r2
 800608c:	fbb1 f2f2 	udiv	r2, r1, r2
 8006090:	b292      	uxth	r2, r2
 8006092:	4413      	add	r3, r2
 8006094:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	429a      	cmp	r2, r3
 800609c:	d201      	bcs.n	80060a2 <find_volume+0x30e>
 800609e:	230d      	movs	r3, #13
 80060a0:	e0f1      	b.n	8006286 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80060a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060aa:	8952      	ldrh	r2, [r2, #10]
 80060ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <find_volume+0x328>
 80060b8:	230d      	movs	r3, #13
 80060ba:	e0e4      	b.n	8006286 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80060bc:	2303      	movs	r3, #3
 80060be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d802      	bhi.n	80060d2 <find_volume+0x33e>
 80060cc:	2302      	movs	r3, #2
 80060ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80060d8:	4293      	cmp	r3, r2
 80060da:	d802      	bhi.n	80060e2 <find_volume+0x34e>
 80060dc:	2301      	movs	r3, #1
 80060de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	1c9a      	adds	r2, r3, #2
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060ee:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80060f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80060f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f4:	441a      	add	r2, r3
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80060fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	441a      	add	r2, r3
 8006100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006102:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006104:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006108:	2b03      	cmp	r3, #3
 800610a:	d11e      	bne.n	800614a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	3338      	adds	r3, #56	; 0x38
 8006110:	332a      	adds	r3, #42	; 0x2a
 8006112:	4618      	mov	r0, r3
 8006114:	f7fd fe7a 	bl	8003e0c <ld_word>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <find_volume+0x38e>
 800611e:	230d      	movs	r3, #13
 8006120:	e0b1      	b.n	8006286 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	891b      	ldrh	r3, [r3, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <find_volume+0x39a>
 800612a:	230d      	movs	r3, #13
 800612c:	e0ab      	b.n	8006286 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800612e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006130:	3338      	adds	r3, #56	; 0x38
 8006132:	332c      	adds	r3, #44	; 0x2c
 8006134:	4618      	mov	r0, r3
 8006136:	f7fd fe80 	bl	8003e3a <ld_dword>
 800613a:	4602      	mov	r2, r0
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	647b      	str	r3, [r7, #68]	; 0x44
 8006148:	e01f      	b.n	800618a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	891b      	ldrh	r3, [r3, #8]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <find_volume+0x3c2>
 8006152:	230d      	movs	r3, #13
 8006154:	e097      	b.n	8006286 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800615a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800615c:	441a      	add	r2, r3
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006162:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006166:	2b02      	cmp	r3, #2
 8006168:	d103      	bne.n	8006172 <find_volume+0x3de>
 800616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	e00a      	b.n	8006188 <find_volume+0x3f4>
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	69da      	ldr	r2, [r3, #28]
 8006176:	4613      	mov	r3, r2
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	4413      	add	r3, r2
 800617c:	085a      	lsrs	r2, r3, #1
 800617e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006188:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800618a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618c:	6a1a      	ldr	r2, [r3, #32]
 800618e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006190:	899b      	ldrh	r3, [r3, #12]
 8006192:	4619      	mov	r1, r3
 8006194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006196:	440b      	add	r3, r1
 8006198:	3b01      	subs	r3, #1
 800619a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800619c:	8989      	ldrh	r1, [r1, #12]
 800619e:	fbb3 f3f1 	udiv	r3, r3, r1
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d201      	bcs.n	80061aa <find_volume+0x416>
 80061a6:	230d      	movs	r3, #13
 80061a8:	e06d      	b.n	8006286 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80061aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061b0:	619a      	str	r2, [r3, #24]
 80061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	2280      	movs	r2, #128	; 0x80
 80061be:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80061c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d149      	bne.n	800625c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	3338      	adds	r3, #56	; 0x38
 80061cc:	3330      	adds	r3, #48	; 0x30
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fd fe1c 	bl	8003e0c <ld_word>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d140      	bne.n	800625c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80061da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061dc:	3301      	adds	r3, #1
 80061de:	4619      	mov	r1, r3
 80061e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061e2:	f7fe f8b5 	bl	8004350 <move_window>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d137      	bne.n	800625c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	2200      	movs	r2, #0
 80061f0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80061f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f4:	3338      	adds	r3, #56	; 0x38
 80061f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fd fe06 	bl	8003e0c <ld_word>
 8006200:	4603      	mov	r3, r0
 8006202:	461a      	mov	r2, r3
 8006204:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006208:	429a      	cmp	r2, r3
 800620a:	d127      	bne.n	800625c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	3338      	adds	r3, #56	; 0x38
 8006210:	4618      	mov	r0, r3
 8006212:	f7fd fe12 	bl	8003e3a <ld_dword>
 8006216:	4603      	mov	r3, r0
 8006218:	4a1d      	ldr	r2, [pc, #116]	; (8006290 <find_volume+0x4fc>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d11e      	bne.n	800625c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	3338      	adds	r3, #56	; 0x38
 8006222:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006226:	4618      	mov	r0, r3
 8006228:	f7fd fe07 	bl	8003e3a <ld_dword>
 800622c:	4603      	mov	r3, r0
 800622e:	4a19      	ldr	r2, [pc, #100]	; (8006294 <find_volume+0x500>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d113      	bne.n	800625c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006236:	3338      	adds	r3, #56	; 0x38
 8006238:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800623c:	4618      	mov	r0, r3
 800623e:	f7fd fdfc 	bl	8003e3a <ld_dword>
 8006242:	4602      	mov	r2, r0
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	3338      	adds	r3, #56	; 0x38
 800624c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006250:	4618      	mov	r0, r3
 8006252:	f7fd fdf2 	bl	8003e3a <ld_dword>
 8006256:	4602      	mov	r2, r0
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006262:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006264:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <find_volume+0x504>)
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	3301      	adds	r3, #1
 800626a:	b29a      	uxth	r2, r3
 800626c:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <find_volume+0x504>)
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	4b09      	ldr	r3, [pc, #36]	; (8006298 <find_volume+0x504>)
 8006272:	881a      	ldrh	r2, [r3, #0]
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627a:	4a08      	ldr	r2, [pc, #32]	; (800629c <find_volume+0x508>)
 800627c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800627e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006280:	f7fd fffe 	bl	8004280 <clear_lock>
#endif
	return FR_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3758      	adds	r7, #88	; 0x58
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	41615252 	.word	0x41615252
 8006294:	61417272 	.word	0x61417272
 8006298:	20002268 	.word	0x20002268
 800629c:	2000228c 	.word	0x2000228c

080062a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80062aa:	2309      	movs	r3, #9
 80062ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d01c      	beq.n	80062ee <validate+0x4e>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d018      	beq.n	80062ee <validate+0x4e>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d013      	beq.n	80062ee <validate+0x4e>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	889a      	ldrh	r2, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	88db      	ldrh	r3, [r3, #6]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d10c      	bne.n	80062ee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	785b      	ldrb	r3, [r3, #1]
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fd fcf8 	bl	8003cd0 <disk_status>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <validate+0x4e>
			res = FR_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <validate+0x5a>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	e000      	b.n	80062fc <validate+0x5c>
 80062fa:	2300      	movs	r3, #0
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	6013      	str	r3, [r2, #0]
	return res;
 8006300:	7bfb      	ldrb	r3, [r7, #15]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800631e:	f107 0310 	add.w	r3, r7, #16
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff fc9c 	bl	8005c60 <get_ldnumber>
 8006328:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	2b00      	cmp	r3, #0
 800632e:	da01      	bge.n	8006334 <f_mount+0x28>
 8006330:	230b      	movs	r3, #11
 8006332:	e02b      	b.n	800638c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006334:	4a17      	ldr	r2, [pc, #92]	; (8006394 <f_mount+0x88>)
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800633c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006344:	69b8      	ldr	r0, [r7, #24]
 8006346:	f7fd ff9b 	bl	8004280 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	2200      	movs	r2, #0
 800634e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	490d      	ldr	r1, [pc, #52]	; (8006394 <f_mount+0x88>)
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d002      	beq.n	8006372 <f_mount+0x66>
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d001      	beq.n	8006376 <f_mount+0x6a>
 8006372:	2300      	movs	r3, #0
 8006374:	e00a      	b.n	800638c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006376:	f107 010c 	add.w	r1, r7, #12
 800637a:	f107 0308 	add.w	r3, r7, #8
 800637e:	2200      	movs	r2, #0
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff fd07 	bl	8005d94 <find_volume>
 8006386:	4603      	mov	r3, r0
 8006388:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800638a:	7dfb      	ldrb	r3, [r7, #23]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3720      	adds	r7, #32
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	20002264 	.word	0x20002264

08006398 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b09a      	sub	sp, #104	; 0x68
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	4613      	mov	r3, r2
 80063a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <f_open+0x18>
 80063ac:	2309      	movs	r3, #9
 80063ae:	e1bb      	b.n	8006728 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80063b0:	79fb      	ldrb	r3, [r7, #7]
 80063b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80063b8:	79fa      	ldrb	r2, [r7, #7]
 80063ba:	f107 0114 	add.w	r1, r7, #20
 80063be:	f107 0308 	add.w	r3, r7, #8
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff fce6 	bl	8005d94 <find_volume>
 80063c8:	4603      	mov	r3, r0
 80063ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80063ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f040 819f 	bne.w	8006716 <f_open+0x37e>
		dj.obj.fs = fs;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	f107 0318 	add.w	r3, r7, #24
 80063e2:	4611      	mov	r1, r2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff fbc5 	bl	8005b74 <follow_path>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80063f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d11a      	bne.n	800642e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80063f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80063fc:	b25b      	sxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	da03      	bge.n	800640a <f_open+0x72>
				res = FR_INVALID_NAME;
 8006402:	2306      	movs	r3, #6
 8006404:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006408:	e011      	b.n	800642e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800640a:	79fb      	ldrb	r3, [r7, #7]
 800640c:	f023 0301 	bic.w	r3, r3, #1
 8006410:	2b00      	cmp	r3, #0
 8006412:	bf14      	ite	ne
 8006414:	2301      	movne	r3, #1
 8006416:	2300      	moveq	r3, #0
 8006418:	b2db      	uxtb	r3, r3
 800641a:	461a      	mov	r2, r3
 800641c:	f107 0318 	add.w	r3, r7, #24
 8006420:	4611      	mov	r1, r2
 8006422:	4618      	mov	r0, r3
 8006424:	f7fd fdea 	bl	8003ffc <chk_lock>
 8006428:	4603      	mov	r3, r0
 800642a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800642e:	79fb      	ldrb	r3, [r7, #7]
 8006430:	f003 031c 	and.w	r3, r3, #28
 8006434:	2b00      	cmp	r3, #0
 8006436:	d07f      	beq.n	8006538 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006438:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800643c:	2b00      	cmp	r3, #0
 800643e:	d017      	beq.n	8006470 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006440:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006444:	2b04      	cmp	r3, #4
 8006446:	d10e      	bne.n	8006466 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006448:	f7fd fe32 	bl	80040b0 <enq_lock>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d006      	beq.n	8006460 <f_open+0xc8>
 8006452:	f107 0318 	add.w	r3, r7, #24
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff f892 	bl	8005580 <dir_register>
 800645c:	4603      	mov	r3, r0
 800645e:	e000      	b.n	8006462 <f_open+0xca>
 8006460:	2312      	movs	r3, #18
 8006462:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	f043 0308 	orr.w	r3, r3, #8
 800646c:	71fb      	strb	r3, [r7, #7]
 800646e:	e010      	b.n	8006492 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006470:	7fbb      	ldrb	r3, [r7, #30]
 8006472:	f003 0311 	and.w	r3, r3, #17
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <f_open+0xea>
					res = FR_DENIED;
 800647a:	2307      	movs	r3, #7
 800647c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006480:	e007      	b.n	8006492 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006482:	79fb      	ldrb	r3, [r7, #7]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <f_open+0xfa>
 800648c:	2308      	movs	r3, #8
 800648e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006492:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006496:	2b00      	cmp	r3, #0
 8006498:	d168      	bne.n	800656c <f_open+0x1d4>
 800649a:	79fb      	ldrb	r3, [r7, #7]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d063      	beq.n	800656c <f_open+0x1d4>
				dw = GET_FATTIME();
 80064a4:	f7fd fbb8 	bl	8003c18 <get_fattime>
 80064a8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ac:	330e      	adds	r3, #14
 80064ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fd fcfe 	bl	8003eb2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b8:	3316      	adds	r3, #22
 80064ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fd fcf8 	bl	8003eb2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	330b      	adds	r3, #11
 80064c6:	2220      	movs	r2, #32
 80064c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064ce:	4611      	mov	r1, r2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fe fcc3 	bl	8004e5c <ld_clust>
 80064d6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064dc:	2200      	movs	r2, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fcdb 	bl	8004e9a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80064e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e6:	331c      	adds	r3, #28
 80064e8:	2100      	movs	r1, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fd fce1 	bl	8003eb2 <st_dword>
					fs->wflag = 1;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2201      	movs	r2, #1
 80064f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80064f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d037      	beq.n	800656c <f_open+0x1d4>
						dw = fs->winsect;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006500:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006502:	f107 0318 	add.w	r3, r7, #24
 8006506:	2200      	movs	r2, #0
 8006508:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800650a:	4618      	mov	r0, r3
 800650c:	f7fe f9cc 	bl	80048a8 <remove_chain>
 8006510:	4603      	mov	r3, r0
 8006512:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006516:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800651a:	2b00      	cmp	r3, #0
 800651c:	d126      	bne.n	800656c <f_open+0x1d4>
							res = move_window(fs, dw);
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006522:	4618      	mov	r0, r3
 8006524:	f7fd ff14 	bl	8004350 <move_window>
 8006528:	4603      	mov	r3, r0
 800652a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006532:	3a01      	subs	r2, #1
 8006534:	615a      	str	r2, [r3, #20]
 8006536:	e019      	b.n	800656c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006538:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800653c:	2b00      	cmp	r3, #0
 800653e:	d115      	bne.n	800656c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006540:	7fbb      	ldrb	r3, [r7, #30]
 8006542:	f003 0310 	and.w	r3, r3, #16
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <f_open+0x1ba>
					res = FR_NO_FILE;
 800654a:	2304      	movs	r3, #4
 800654c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006550:	e00c      	b.n	800656c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d007      	beq.n	800656c <f_open+0x1d4>
 800655c:	7fbb      	ldrb	r3, [r7, #30]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <f_open+0x1d4>
						res = FR_DENIED;
 8006566:	2307      	movs	r3, #7
 8006568:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800656c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006570:	2b00      	cmp	r3, #0
 8006572:	d128      	bne.n	80065c6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800657e:	79fb      	ldrb	r3, [r7, #7]
 8006580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006584:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800658e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	f023 0301 	bic.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	bf14      	ite	ne
 800659e:	2301      	movne	r3, #1
 80065a0:	2300      	moveq	r3, #0
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	461a      	mov	r2, r3
 80065a6:	f107 0318 	add.w	r3, r7, #24
 80065aa:	4611      	mov	r1, r2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fd fd9f 	bl	80040f0 <inc_lock>
 80065b2:	4602      	mov	r2, r0
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d102      	bne.n	80065c6 <f_open+0x22e>
 80065c0:	2302      	movs	r3, #2
 80065c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80065c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f040 80a3 	bne.w	8006716 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe fc40 	bl	8004e5c <ld_clust>
 80065dc:	4602      	mov	r2, r0
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	331c      	adds	r3, #28
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fd fc27 	bl	8003e3a <ld_dword>
 80065ec:	4602      	mov	r2, r0
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	88da      	ldrh	r2, [r3, #6]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	79fa      	ldrb	r2, [r7, #7]
 800660a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3330      	adds	r3, #48	; 0x30
 8006622:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006626:	2100      	movs	r1, #0
 8006628:	4618      	mov	r0, r3
 800662a:	f7fd fc8d 	bl	8003f48 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800662e:	79fb      	ldrb	r3, [r7, #7]
 8006630:	f003 0320 	and.w	r3, r3, #32
 8006634:	2b00      	cmp	r3, #0
 8006636:	d06e      	beq.n	8006716 <f_open+0x37e>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d06a      	beq.n	8006716 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	895b      	ldrh	r3, [r3, #10]
 800664c:	461a      	mov	r2, r3
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	899b      	ldrh	r3, [r3, #12]
 8006652:	fb02 f303 	mul.w	r3, r2, r3
 8006656:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006664:	e016      	b.n	8006694 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800666a:	4618      	mov	r0, r3
 800666c:	f7fd ff2c 	bl	80044c8 <get_fat>
 8006670:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006674:	2b01      	cmp	r3, #1
 8006676:	d802      	bhi.n	800667e <f_open+0x2e6>
 8006678:	2302      	movs	r3, #2
 800667a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800667e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006684:	d102      	bne.n	800668c <f_open+0x2f4>
 8006686:	2301      	movs	r3, #1
 8006688:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800668c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800668e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006694:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006698:	2b00      	cmp	r3, #0
 800669a:	d103      	bne.n	80066a4 <f_open+0x30c>
 800669c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800669e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d8e0      	bhi.n	8006666 <f_open+0x2ce>
				}
				fp->clust = clst;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80066aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d131      	bne.n	8006716 <f_open+0x37e>
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	899b      	ldrh	r3, [r3, #12]
 80066b6:	461a      	mov	r2, r3
 80066b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80066be:	fb01 f202 	mul.w	r2, r1, r2
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d026      	beq.n	8006716 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fd fedd 	bl	800448c <clust2sect>
 80066d2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80066d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d103      	bne.n	80066e2 <f_open+0x34a>
						res = FR_INT_ERR;
 80066da:	2302      	movs	r3, #2
 80066dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80066e0:	e019      	b.n	8006716 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	899b      	ldrh	r3, [r3, #12]
 80066e6:	461a      	mov	r2, r3
 80066e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80066ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f0:	441a      	add	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	7858      	ldrb	r0, [r3, #1]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a1a      	ldr	r2, [r3, #32]
 8006704:	2301      	movs	r3, #1
 8006706:	f7fd fb23 	bl	8003d50 <disk_read>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <f_open+0x37e>
 8006710:	2301      	movs	r3, #1
 8006712:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006716:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <f_open+0x38c>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006724:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006728:	4618      	mov	r0, r3
 800672a:	3768      	adds	r7, #104	; 0x68
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08e      	sub	sp, #56	; 0x38
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f107 0214 	add.w	r2, r7, #20
 800674e:	4611      	mov	r1, r2
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff fda5 	bl	80062a0 <validate>
 8006756:	4603      	mov	r3, r0
 8006758:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800675c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006760:	2b00      	cmp	r3, #0
 8006762:	d107      	bne.n	8006774 <f_read+0x44>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	7d5b      	ldrb	r3, [r3, #21]
 8006768:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800676c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <f_read+0x4a>
 8006774:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006778:	e135      	b.n	80069e6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	7d1b      	ldrb	r3, [r3, #20]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <f_read+0x5a>
 8006786:	2307      	movs	r3, #7
 8006788:	e12d      	b.n	80069e6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	429a      	cmp	r2, r3
 800679c:	f240 811e 	bls.w	80069dc <f_read+0x2ac>
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80067a4:	e11a      	b.n	80069dc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	8992      	ldrh	r2, [r2, #12]
 80067ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80067b2:	fb01 f202 	mul.w	r2, r1, r2
 80067b6:	1a9b      	subs	r3, r3, r2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f040 80d5 	bne.w	8006968 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	8992      	ldrh	r2, [r2, #12]
 80067c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	8952      	ldrh	r2, [r2, #10]
 80067ce:	3a01      	subs	r2, #1
 80067d0:	4013      	ands	r3, r2
 80067d2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d12f      	bne.n	800683a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d103      	bne.n	80067ea <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	633b      	str	r3, [r7, #48]	; 0x30
 80067e8:	e013      	b.n	8006812 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d007      	beq.n	8006802 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	4619      	mov	r1, r3
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f7fe f952 	bl	8004aa2 <clmt_clust>
 80067fe:	6338      	str	r0, [r7, #48]	; 0x30
 8006800:	e007      	b.n	8006812 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	4619      	mov	r1, r3
 800680a:	4610      	mov	r0, r2
 800680c:	f7fd fe5c 	bl	80044c8 <get_fat>
 8006810:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	2b01      	cmp	r3, #1
 8006816:	d804      	bhi.n	8006822 <f_read+0xf2>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2202      	movs	r2, #2
 800681c:	755a      	strb	r2, [r3, #21]
 800681e:	2302      	movs	r3, #2
 8006820:	e0e1      	b.n	80069e6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006828:	d104      	bne.n	8006834 <f_read+0x104>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2201      	movs	r2, #1
 800682e:	755a      	strb	r2, [r3, #21]
 8006830:	2301      	movs	r3, #1
 8006832:	e0d8      	b.n	80069e6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006838:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	4619      	mov	r1, r3
 8006842:	4610      	mov	r0, r2
 8006844:	f7fd fe22 	bl	800448c <clust2sect>
 8006848:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <f_read+0x12a>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2202      	movs	r2, #2
 8006854:	755a      	strb	r2, [r3, #21]
 8006856:	2302      	movs	r3, #2
 8006858:	e0c5      	b.n	80069e6 <f_read+0x2b6>
			sect += csect;
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	4413      	add	r3, r2
 8006860:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	899b      	ldrh	r3, [r3, #12]
 8006866:	461a      	mov	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	fbb3 f3f2 	udiv	r3, r3, r2
 800686e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	2b00      	cmp	r3, #0
 8006874:	d041      	beq.n	80068fa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006876:	69fa      	ldr	r2, [r7, #28]
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	4413      	add	r3, r2
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	8952      	ldrh	r2, [r2, #10]
 8006880:	4293      	cmp	r3, r2
 8006882:	d905      	bls.n	8006890 <f_read+0x160>
					cc = fs->csize - csect;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	895b      	ldrh	r3, [r3, #10]
 8006888:	461a      	mov	r2, r3
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	7858      	ldrb	r0, [r3, #1]
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800689a:	f7fd fa59 	bl	8003d50 <disk_read>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d004      	beq.n	80068ae <f_read+0x17e>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2201      	movs	r2, #1
 80068a8:	755a      	strb	r2, [r3, #21]
 80068aa:	2301      	movs	r3, #1
 80068ac:	e09b      	b.n	80069e6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	7d1b      	ldrb	r3, [r3, #20]
 80068b2:	b25b      	sxtb	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	da18      	bge.n	80068ea <f_read+0x1ba>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a1a      	ldr	r2, [r3, #32]
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d911      	bls.n	80068ea <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a1a      	ldr	r2, [r3, #32]
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	8992      	ldrh	r2, [r2, #12]
 80068d2:	fb02 f303 	mul.w	r3, r2, r3
 80068d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d8:	18d0      	adds	r0, r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	899b      	ldrh	r3, [r3, #12]
 80068e4:	461a      	mov	r2, r3
 80068e6:	f7fd fb0f 	bl	8003f08 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	899b      	ldrh	r3, [r3, #12]
 80068ee:	461a      	mov	r2, r3
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	fb02 f303 	mul.w	r3, r2, r3
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80068f8:	e05c      	b.n	80069b4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	429a      	cmp	r2, r3
 8006902:	d02e      	beq.n	8006962 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	7d1b      	ldrb	r3, [r3, #20]
 8006908:	b25b      	sxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	da18      	bge.n	8006940 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	7858      	ldrb	r0, [r3, #1]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6a1a      	ldr	r2, [r3, #32]
 800691c:	2301      	movs	r3, #1
 800691e:	f7fd fa37 	bl	8003d90 <disk_write>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d004      	beq.n	8006932 <f_read+0x202>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2201      	movs	r2, #1
 800692c:	755a      	strb	r2, [r3, #21]
 800692e:	2301      	movs	r3, #1
 8006930:	e059      	b.n	80069e6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	7d1b      	ldrb	r3, [r3, #20]
 8006936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800693a:	b2da      	uxtb	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	7858      	ldrb	r0, [r3, #1]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800694a:	2301      	movs	r3, #1
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	f7fd f9ff 	bl	8003d50 <disk_read>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d004      	beq.n	8006962 <f_read+0x232>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2201      	movs	r2, #1
 800695c:	755a      	strb	r2, [r3, #21]
 800695e:	2301      	movs	r3, #1
 8006960:	e041      	b.n	80069e6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	899b      	ldrh	r3, [r3, #12]
 800696c:	4618      	mov	r0, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	8992      	ldrh	r2, [r2, #12]
 8006976:	fbb3 f1f2 	udiv	r1, r3, r2
 800697a:	fb01 f202 	mul.w	r2, r1, r2
 800697e:	1a9b      	subs	r3, r3, r2
 8006980:	1ac3      	subs	r3, r0, r3
 8006982:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	429a      	cmp	r2, r3
 800698a:	d901      	bls.n	8006990 <f_read+0x260>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	8992      	ldrh	r2, [r2, #12]
 800699e:	fbb3 f0f2 	udiv	r0, r3, r2
 80069a2:	fb00 f202 	mul.w	r2, r0, r2
 80069a6:	1a9b      	subs	r3, r3, r2
 80069a8:	440b      	add	r3, r1
 80069aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ac:	4619      	mov	r1, r3
 80069ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069b0:	f7fd faaa 	bl	8003f08 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80069b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b8:	4413      	add	r3, r2
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	699a      	ldr	r2, [r3, #24]
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	441a      	add	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	619a      	str	r2, [r3, #24]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	441a      	add	r2, r3
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f47f aee1 	bne.w	80067a6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3738      	adds	r7, #56	; 0x38
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b08c      	sub	sp, #48	; 0x30
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	60b9      	str	r1, [r7, #8]
 80069f8:	607a      	str	r2, [r7, #4]
 80069fa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f107 0210 	add.w	r2, r7, #16
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff fc46 	bl	80062a0 <validate>
 8006a14:	4603      	mov	r3, r0
 8006a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d107      	bne.n	8006a32 <f_write+0x44>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	7d5b      	ldrb	r3, [r3, #21]
 8006a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <f_write+0x4a>
 8006a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a36:	e16a      	b.n	8006d0e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	7d1b      	ldrb	r3, [r3, #20]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <f_write+0x5a>
 8006a44:	2307      	movs	r3, #7
 8006a46:	e162      	b.n	8006d0e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	699a      	ldr	r2, [r3, #24]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	441a      	add	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	f080 814c 	bcs.w	8006cf2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	43db      	mvns	r3, r3
 8006a60:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006a62:	e146      	b.n	8006cf2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	8992      	ldrh	r2, [r2, #12]
 8006a6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a70:	fb01 f202 	mul.w	r2, r1, r2
 8006a74:	1a9b      	subs	r3, r3, r2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f040 80f1 	bne.w	8006c5e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	8992      	ldrh	r2, [r2, #12]
 8006a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	8952      	ldrh	r2, [r2, #10]
 8006a8c:	3a01      	subs	r2, #1
 8006a8e:	4013      	ands	r3, r2
 8006a90:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d143      	bne.n	8006b20 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10c      	bne.n	8006aba <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d11a      	bne.n	8006ae2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2100      	movs	r1, #0
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fd ff5e 	bl	8004972 <create_chain>
 8006ab6:	62b8      	str	r0, [r7, #40]	; 0x28
 8006ab8:	e013      	b.n	8006ae2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d007      	beq.n	8006ad2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f7fd ffea 	bl	8004aa2 <clmt_clust>
 8006ace:	62b8      	str	r0, [r7, #40]	; 0x28
 8006ad0:	e007      	b.n	8006ae2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4610      	mov	r0, r2
 8006adc:	f7fd ff49 	bl	8004972 <create_chain>
 8006ae0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8109 	beq.w	8006cfc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d104      	bne.n	8006afa <f_write+0x10c>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2202      	movs	r2, #2
 8006af4:	755a      	strb	r2, [r3, #21]
 8006af6:	2302      	movs	r3, #2
 8006af8:	e109      	b.n	8006d0e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b00:	d104      	bne.n	8006b0c <f_write+0x11e>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2201      	movs	r2, #1
 8006b06:	755a      	strb	r2, [r3, #21]
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e100      	b.n	8006d0e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b10:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d102      	bne.n	8006b20 <f_write+0x132>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b1e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	7d1b      	ldrb	r3, [r3, #20]
 8006b24:	b25b      	sxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	da18      	bge.n	8006b5c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	7858      	ldrb	r0, [r3, #1]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a1a      	ldr	r2, [r3, #32]
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f7fd f929 	bl	8003d90 <disk_write>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d004      	beq.n	8006b4e <f_write+0x160>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2201      	movs	r2, #1
 8006b48:	755a      	strb	r2, [r3, #21]
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e0df      	b.n	8006d0e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	7d1b      	ldrb	r3, [r3, #20]
 8006b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f7fd fc91 	bl	800448c <clust2sect>
 8006b6a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d104      	bne.n	8006b7c <f_write+0x18e>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2202      	movs	r2, #2
 8006b76:	755a      	strb	r2, [r3, #21]
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e0c8      	b.n	8006d0e <f_write+0x320>
			sect += csect;
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	4413      	add	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	899b      	ldrh	r3, [r3, #12]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b90:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d043      	beq.n	8006c20 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	8952      	ldrh	r2, [r2, #10]
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d905      	bls.n	8006bb2 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	895b      	ldrh	r3, [r3, #10]
 8006baa:	461a      	mov	r2, r3
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	7858      	ldrb	r0, [r3, #1]
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	69f9      	ldr	r1, [r7, #28]
 8006bbc:	f7fd f8e8 	bl	8003d90 <disk_write>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d004      	beq.n	8006bd0 <f_write+0x1e2>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	755a      	strb	r2, [r3, #21]
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e09e      	b.n	8006d0e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a1a      	ldr	r2, [r3, #32]
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	6a3a      	ldr	r2, [r7, #32]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d918      	bls.n	8006c10 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a1a      	ldr	r2, [r3, #32]
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	8992      	ldrh	r2, [r2, #12]
 8006bf0:	fb02 f303 	mul.w	r3, r2, r3
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	18d1      	adds	r1, r2, r3
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	899b      	ldrh	r3, [r3, #12]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	f7fd f983 	bl	8003f08 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	7d1b      	ldrb	r3, [r3, #20]
 8006c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	899b      	ldrh	r3, [r3, #12]
 8006c14:	461a      	mov	r2, r3
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	fb02 f303 	mul.w	r3, r2, r3
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006c1e:	e04b      	b.n	8006cb8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d016      	beq.n	8006c58 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d210      	bcs.n	8006c58 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	7858      	ldrb	r0, [r3, #1]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c40:	2301      	movs	r3, #1
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	f7fd f884 	bl	8003d50 <disk_read>
 8006c48:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d004      	beq.n	8006c58 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2201      	movs	r2, #1
 8006c52:	755a      	strb	r2, [r3, #21]
 8006c54:	2301      	movs	r3, #1
 8006c56:	e05a      	b.n	8006d0e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	899b      	ldrh	r3, [r3, #12]
 8006c62:	4618      	mov	r0, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	8992      	ldrh	r2, [r2, #12]
 8006c6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c70:	fb01 f202 	mul.w	r2, r1, r2
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	1ac3      	subs	r3, r0, r3
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d901      	bls.n	8006c86 <f_write+0x298>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	8992      	ldrh	r2, [r2, #12]
 8006c94:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c98:	fb00 f202 	mul.w	r2, r0, r2
 8006c9c:	1a9b      	subs	r3, r3, r2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca2:	69f9      	ldr	r1, [r7, #28]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fd f92f 	bl	8003f08 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	7d1b      	ldrb	r3, [r3, #20]
 8006cae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006cb8:	69fa      	ldr	r2, [r7, #28]
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	4413      	add	r3, r2
 8006cbe:	61fb      	str	r3, [r7, #28]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	699a      	ldr	r2, [r3, #24]
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	441a      	add	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	619a      	str	r2, [r3, #24]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	bf38      	it	cc
 8006cd8:	461a      	movcc	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	60da      	str	r2, [r3, #12]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	441a      	add	r2, r3
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f47f aeb5 	bne.w	8006a64 <f_write+0x76>
 8006cfa:	e000      	b.n	8006cfe <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006cfc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	7d1b      	ldrb	r3, [r3, #20]
 8006d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3730      	adds	r7, #48	; 0x30
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b086      	sub	sp, #24
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f107 0208 	add.w	r2, r7, #8
 8006d24:	4611      	mov	r1, r2
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff faba 	bl	80062a0 <validate>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d168      	bne.n	8006e08 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	7d1b      	ldrb	r3, [r3, #20]
 8006d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d062      	beq.n	8006e08 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	7d1b      	ldrb	r3, [r3, #20]
 8006d46:	b25b      	sxtb	r3, r3
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	da15      	bge.n	8006d78 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	7858      	ldrb	r0, [r3, #1]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1a      	ldr	r2, [r3, #32]
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	f7fd f818 	bl	8003d90 <disk_write>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <f_sync+0x54>
 8006d66:	2301      	movs	r3, #1
 8006d68:	e04f      	b.n	8006e0a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	7d1b      	ldrb	r3, [r3, #20]
 8006d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006d78:	f7fc ff4e 	bl	8003c18 <get_fattime>
 8006d7c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	4619      	mov	r1, r3
 8006d86:	4610      	mov	r0, r2
 8006d88:	f7fd fae2 	bl	8004350 <move_window>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d138      	bne.n	8006e08 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	330b      	adds	r3, #11
 8006da0:	781a      	ldrb	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	330b      	adds	r3, #11
 8006da6:	f042 0220 	orr.w	r2, r2, #32
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6818      	ldr	r0, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	461a      	mov	r2, r3
 8006db8:	68f9      	ldr	r1, [r7, #12]
 8006dba:	f7fe f86e 	bl	8004e9a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f103 021c 	add.w	r2, r3, #28
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4610      	mov	r0, r2
 8006dcc:	f7fd f871 	bl	8003eb2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3316      	adds	r3, #22
 8006dd4:	6939      	ldr	r1, [r7, #16]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fd f86b 	bl	8003eb2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3312      	adds	r3, #18
 8006de0:	2100      	movs	r1, #0
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fd f84b 	bl	8003e7e <st_word>
					fs->wflag = 1;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2201      	movs	r2, #1
 8006dec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fd fadb 	bl	80043ac <sync_fs>
 8006df6:	4603      	mov	r3, r0
 8006df8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	7d1b      	ldrb	r3, [r3, #20]
 8006dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7ff ff7b 	bl	8006d16 <f_sync>
 8006e20:	4603      	mov	r3, r0
 8006e22:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d118      	bne.n	8006e5c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f107 0208 	add.w	r2, r7, #8
 8006e30:	4611      	mov	r1, r2
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff fa34 	bl	80062a0 <validate>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10c      	bne.n	8006e5c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fd f9e0 	bl	800420c <dec_lock>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d102      	bne.n	8006e5c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b090      	sub	sp, #64	; 0x40
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f107 0208 	add.w	r2, r7, #8
 8006e76:	4611      	mov	r1, r2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7ff fa11 	bl	80062a0 <validate>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006e84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d103      	bne.n	8006e94 <f_lseek+0x2e>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	7d5b      	ldrb	r3, [r3, #21]
 8006e90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006e94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <f_lseek+0x3c>
 8006e9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ea0:	e201      	b.n	80072a6 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 80d9 	beq.w	800705e <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eb2:	d15a      	bne.n	8006f6a <f_lseek+0x104>
			tbl = fp->cltbl;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	1d1a      	adds	r2, r3, #4
 8006ebe:	627a      	str	r2, [r7, #36]	; 0x24
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	617b      	str	r3, [r7, #20]
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d03a      	beq.n	8006f4a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	613b      	str	r3, [r7, #16]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ede:	3302      	adds	r3, #2
 8006ee0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	60fb      	str	r3, [r7, #12]
 8006ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee8:	3301      	adds	r3, #1
 8006eea:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7fd fae9 	bl	80044c8 <get_fat>
 8006ef6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d804      	bhi.n	8006f08 <f_lseek+0xa2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2202      	movs	r2, #2
 8006f02:	755a      	strb	r2, [r3, #21]
 8006f04:	2302      	movs	r3, #2
 8006f06:	e1ce      	b.n	80072a6 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f0e:	d104      	bne.n	8006f1a <f_lseek+0xb4>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	755a      	strb	r2, [r3, #21]
 8006f16:	2301      	movs	r3, #1
 8006f18:	e1c5      	b.n	80072a6 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d0de      	beq.n	8006ee2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d809      	bhi.n	8006f40 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	1d1a      	adds	r2, r3, #4
 8006f30:	627a      	str	r2, [r7, #36]	; 0x24
 8006f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	1d1a      	adds	r2, r3, #4
 8006f3a:	627a      	str	r2, [r7, #36]	; 0x24
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d3c4      	bcc.n	8006ed4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f50:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d803      	bhi.n	8006f62 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	e19f      	b.n	80072a2 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006f62:	2311      	movs	r3, #17
 8006f64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006f68:	e19b      	b.n	80072a2 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d902      	bls.n	8006f7a <f_lseek+0x114>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 818d 	beq.w	80072a2 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7fd fd87 	bl	8004aa2 <clmt_clust>
 8006f94:	4602      	mov	r2, r0
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	f7fd fa72 	bl	800448c <clust2sect>
 8006fa8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d104      	bne.n	8006fba <f_lseek+0x154>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	755a      	strb	r2, [r3, #21]
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e175      	b.n	80072a6 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	8992      	ldrh	r2, [r2, #12]
 8006fc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	8952      	ldrh	r2, [r2, #10]
 8006fca:	3a01      	subs	r2, #1
 8006fcc:	4013      	ands	r3, r2
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	8992      	ldrh	r2, [r2, #12]
 8006fdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fe0:	fb01 f202 	mul.w	r2, r1, r2
 8006fe4:	1a9b      	subs	r3, r3, r2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 815b 	beq.w	80072a2 <f_lseek+0x43c>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a1b      	ldr	r3, [r3, #32]
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	f000 8155 	beq.w	80072a2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	7d1b      	ldrb	r3, [r3, #20]
 8006ffc:	b25b      	sxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	da18      	bge.n	8007034 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	7858      	ldrb	r0, [r3, #1]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a1a      	ldr	r2, [r3, #32]
 8007010:	2301      	movs	r3, #1
 8007012:	f7fc febd 	bl	8003d90 <disk_write>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d004      	beq.n	8007026 <f_lseek+0x1c0>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	755a      	strb	r2, [r3, #21]
 8007022:	2301      	movs	r3, #1
 8007024:	e13f      	b.n	80072a6 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	7d1b      	ldrb	r3, [r3, #20]
 800702a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702e:	b2da      	uxtb	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	7858      	ldrb	r0, [r3, #1]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800703e:	2301      	movs	r3, #1
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	f7fc fe85 	bl	8003d50 <disk_read>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d004      	beq.n	8007056 <f_lseek+0x1f0>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	755a      	strb	r2, [r3, #21]
 8007052:	2301      	movs	r3, #1
 8007054:	e127      	b.n	80072a6 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	621a      	str	r2, [r3, #32]
 800705c:	e121      	b.n	80072a2 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d908      	bls.n	800707a <f_lseek+0x214>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	7d1b      	ldrb	r3, [r3, #20]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d102      	bne.n	800707a <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	637b      	str	r3, [r7, #52]	; 0x34
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007088:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 80b5 	beq.w	80071fc <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	895b      	ldrh	r3, [r3, #10]
 8007096:	461a      	mov	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	899b      	ldrh	r3, [r3, #12]
 800709c:	fb02 f303 	mul.w	r3, r2, r3
 80070a0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d01b      	beq.n	80070e0 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	1e5a      	subs	r2, r3, #1
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	1e59      	subs	r1, r3, #1
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80070bc:	429a      	cmp	r2, r3
 80070be:	d30f      	bcc.n	80070e0 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	1e5a      	subs	r2, r3, #1
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	425b      	negs	r3, r3
 80070c8:	401a      	ands	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80070de:	e022      	b.n	8007126 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80070e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d119      	bne.n	8007120 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2100      	movs	r1, #0
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fd fc3e 	bl	8004972 <create_chain>
 80070f6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80070f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d104      	bne.n	8007108 <f_lseek+0x2a2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2202      	movs	r2, #2
 8007102:	755a      	strb	r2, [r3, #21]
 8007104:	2302      	movs	r3, #2
 8007106:	e0ce      	b.n	80072a6 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800710e:	d104      	bne.n	800711a <f_lseek+0x2b4>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	755a      	strb	r2, [r3, #21]
 8007116:	2301      	movs	r3, #1
 8007118:	e0c5      	b.n	80072a6 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800711e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007124:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	2b00      	cmp	r3, #0
 800712a:	d067      	beq.n	80071fc <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800712c:	e03a      	b.n	80071a4 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	603b      	str	r3, [r7, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699a      	ldr	r2, [r3, #24]
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	441a      	add	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	7d1b      	ldrb	r3, [r3, #20]
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00b      	beq.n	8007166 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007152:	4618      	mov	r0, r3
 8007154:	f7fd fc0d 	bl	8004972 <create_chain>
 8007158:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	2b00      	cmp	r3, #0
 800715e:	d108      	bne.n	8007172 <f_lseek+0x30c>
							ofs = 0; break;
 8007160:	2300      	movs	r3, #0
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	e022      	b.n	80071ac <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800716a:	4618      	mov	r0, r3
 800716c:	f7fd f9ac 	bl	80044c8 <get_fat>
 8007170:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007178:	d104      	bne.n	8007184 <f_lseek+0x31e>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	755a      	strb	r2, [r3, #21]
 8007180:	2301      	movs	r3, #1
 8007182:	e090      	b.n	80072a6 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	2b01      	cmp	r3, #1
 8007188:	d904      	bls.n	8007194 <f_lseek+0x32e>
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007190:	429a      	cmp	r2, r3
 8007192:	d304      	bcc.n	800719e <f_lseek+0x338>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	755a      	strb	r2, [r3, #21]
 800719a:	2302      	movs	r3, #2
 800719c:	e083      	b.n	80072a6 <f_lseek+0x440>
					fp->clust = clst;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071a2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d8c0      	bhi.n	800712e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	699a      	ldr	r2, [r3, #24]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	441a      	add	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	899b      	ldrh	r3, [r3, #12]
 80071bc:	461a      	mov	r2, r3
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80071c4:	fb01 f202 	mul.w	r2, r1, r2
 80071c8:	1a9b      	subs	r3, r3, r2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d016      	beq.n	80071fc <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fd f95a 	bl	800448c <clust2sect>
 80071d8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80071da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <f_lseek+0x384>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	755a      	strb	r2, [r3, #21]
 80071e6:	2302      	movs	r3, #2
 80071e8:	e05d      	b.n	80072a6 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	899b      	ldrh	r3, [r3, #12]
 80071ee:	461a      	mov	r2, r3
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80071f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071f8:	4413      	add	r3, r2
 80071fa:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	699a      	ldr	r2, [r3, #24]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	429a      	cmp	r2, r3
 8007206:	d90a      	bls.n	800721e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	699a      	ldr	r2, [r3, #24]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	7d1b      	ldrb	r3, [r3, #20]
 8007214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007218:	b2da      	uxtb	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	8992      	ldrh	r2, [r2, #12]
 8007226:	fbb3 f1f2 	udiv	r1, r3, r2
 800722a:	fb01 f202 	mul.w	r2, r1, r2
 800722e:	1a9b      	subs	r3, r3, r2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d036      	beq.n	80072a2 <f_lseek+0x43c>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800723a:	429a      	cmp	r2, r3
 800723c:	d031      	beq.n	80072a2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	7d1b      	ldrb	r3, [r3, #20]
 8007242:	b25b      	sxtb	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	da18      	bge.n	800727a <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	7858      	ldrb	r0, [r3, #1]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1a      	ldr	r2, [r3, #32]
 8007256:	2301      	movs	r3, #1
 8007258:	f7fc fd9a 	bl	8003d90 <disk_write>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d004      	beq.n	800726c <f_lseek+0x406>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	755a      	strb	r2, [r3, #21]
 8007268:	2301      	movs	r3, #1
 800726a:	e01c      	b.n	80072a6 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	7d1b      	ldrb	r3, [r3, #20]
 8007270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007274:	b2da      	uxtb	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	7858      	ldrb	r0, [r3, #1]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007284:	2301      	movs	r3, #1
 8007286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007288:	f7fc fd62 	bl	8003d50 <disk_read>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <f_lseek+0x436>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	755a      	strb	r2, [r3, #21]
 8007298:	2301      	movs	r3, #1
 800729a:	e004      	b.n	80072a6 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072a0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80072a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3740      	adds	r7, #64	; 0x40
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b092      	sub	sp, #72	; 0x48
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	60f8      	str	r0, [r7, #12]
 80072b6:	60b9      	str	r1, [r7, #8]
 80072b8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80072ba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80072be:	f107 030c 	add.w	r3, r7, #12
 80072c2:	2200      	movs	r2, #0
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fe fd65 	bl	8005d94 <find_volume>
 80072ca:	4603      	mov	r3, r0
 80072cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80072d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f040 8099 	bne.w	800740c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80072da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80072e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e2:	699a      	ldr	r2, [r3, #24]
 80072e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	3b02      	subs	r3, #2
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d804      	bhi.n	80072f8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80072ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f0:	699a      	ldr	r2, [r3, #24]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	e089      	b.n	800740c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80072f8:	2300      	movs	r3, #0
 80072fa:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80072fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d128      	bne.n	8007356 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007304:	2302      	movs	r3, #2
 8007306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800730c:	f107 0314 	add.w	r3, r7, #20
 8007310:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007312:	4618      	mov	r0, r3
 8007314:	f7fd f8d8 	bl	80044c8 <get_fat>
 8007318:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007320:	d103      	bne.n	800732a <f_getfree+0x7c>
 8007322:	2301      	movs	r3, #1
 8007324:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007328:	e063      	b.n	80073f2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	2b01      	cmp	r3, #1
 800732e:	d103      	bne.n	8007338 <f_getfree+0x8a>
 8007330:	2302      	movs	r3, #2
 8007332:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007336:	e05c      	b.n	80073f2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d102      	bne.n	8007344 <f_getfree+0x96>
 800733e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007340:	3301      	adds	r3, #1
 8007342:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8007344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007346:	3301      	adds	r3, #1
 8007348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007350:	429a      	cmp	r2, r3
 8007352:	d3db      	bcc.n	800730c <f_getfree+0x5e>
 8007354:	e04d      	b.n	80073f2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007360:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8007362:	2300      	movs	r3, #0
 8007364:	637b      	str	r3, [r7, #52]	; 0x34
 8007366:	2300      	movs	r3, #0
 8007368:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800736a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736c:	2b00      	cmp	r3, #0
 800736e:	d113      	bne.n	8007398 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	63ba      	str	r2, [r7, #56]	; 0x38
 8007378:	4619      	mov	r1, r3
 800737a:	f7fc ffe9 	bl	8004350 <move_window>
 800737e:	4603      	mov	r3, r0
 8007380:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8007384:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007388:	2b00      	cmp	r3, #0
 800738a:	d131      	bne.n	80073f0 <f_getfree+0x142>
							p = fs->win;
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738e:	3338      	adds	r3, #56	; 0x38
 8007390:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8007392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007394:	899b      	ldrh	r3, [r3, #12]
 8007396:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b02      	cmp	r3, #2
 800739e:	d10f      	bne.n	80073c0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80073a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073a2:	f7fc fd33 	bl	8003e0c <ld_word>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d102      	bne.n	80073b2 <f_getfree+0x104>
 80073ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ae:	3301      	adds	r3, #1
 80073b0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	3302      	adds	r3, #2
 80073b6:	633b      	str	r3, [r7, #48]	; 0x30
 80073b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ba:	3b02      	subs	r3, #2
 80073bc:	637b      	str	r3, [r7, #52]	; 0x34
 80073be:	e010      	b.n	80073e2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80073c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073c2:	f7fc fd3a 	bl	8003e3a <ld_dword>
 80073c6:	4603      	mov	r3, r0
 80073c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d102      	bne.n	80073d6 <f_getfree+0x128>
 80073d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d2:	3301      	adds	r3, #1
 80073d4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	3304      	adds	r3, #4
 80073da:	633b      	str	r3, [r7, #48]	; 0x30
 80073dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073de:	3b04      	subs	r3, #4
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80073e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e4:	3b01      	subs	r3, #1
 80073e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1bd      	bne.n	800736a <f_getfree+0xbc>
 80073ee:	e000      	b.n	80073f2 <f_getfree+0x144>
							if (res != FR_OK) break;
 80073f0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073f6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80073f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073fc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	791a      	ldrb	r2, [r3, #4]
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	f042 0201 	orr.w	r2, r2, #1
 8007408:	b2d2      	uxtb	r2, r2
 800740a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800740c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007410:	4618      	mov	r0, r3
 8007412:	3748      	adds	r7, #72	; 0x48
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b0a0      	sub	sp, #128	; 0x80
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8007424:	f107 010c 	add.w	r1, r7, #12
 8007428:	1d3b      	adds	r3, r7, #4
 800742a:	2202      	movs	r2, #2
 800742c:	4618      	mov	r0, r3
 800742e:	f7fe fcb1 	bl	8005d94 <find_volume>
 8007432:	4603      	mov	r3, r0
 8007434:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800743c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007440:	2b00      	cmp	r3, #0
 8007442:	f040 808e 	bne.w	8007562 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800744c:	4611      	mov	r1, r2
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fb90 	bl	8005b74 <follow_path>
 8007454:	4603      	mov	r3, r0
 8007456:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800745a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800745e:	2b00      	cmp	r3, #0
 8007460:	d108      	bne.n	8007474 <f_unlink+0x5c>
 8007462:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007466:	2102      	movs	r1, #2
 8007468:	4618      	mov	r0, r3
 800746a:	f7fc fdc7 	bl	8003ffc <chk_lock>
 800746e:	4603      	mov	r3, r0
 8007470:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8007474:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007478:	2b00      	cmp	r3, #0
 800747a:	d172      	bne.n	8007562 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800747c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8007480:	b25b      	sxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	da03      	bge.n	800748e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8007486:	2306      	movs	r3, #6
 8007488:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800748c:	e008      	b.n	80074a0 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800748e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800749a:	2307      	movs	r3, #7
 800749c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 80074a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d134      	bne.n	8007512 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80074ac:	4611      	mov	r1, r2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fd fcd4 	bl	8004e5c <ld_clust>
 80074b4:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80074b6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80074ba:	f003 0310 	and.w	r3, r3, #16
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d027      	beq.n	8007512 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80074c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074c8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80074ca:	f107 0310 	add.w	r3, r7, #16
 80074ce:	2100      	movs	r1, #0
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fd fb1d 	bl	8004b10 <dir_sdi>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 80074dc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d116      	bne.n	8007512 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80074e4:	f107 0310 	add.w	r3, r7, #16
 80074e8:	2100      	movs	r1, #0
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fd fee0 	bl	80052b0 <dir_read>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80074f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d102      	bne.n	8007504 <f_unlink+0xec>
 80074fe:	2307      	movs	r3, #7
 8007500:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8007504:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007508:	2b04      	cmp	r3, #4
 800750a:	d102      	bne.n	8007512 <f_unlink+0xfa>
 800750c:	2300      	movs	r3, #0
 800750e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8007512:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007516:	2b00      	cmp	r3, #0
 8007518:	d123      	bne.n	8007562 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800751a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe f926 	bl	8005770 <dir_remove>
 8007524:	4603      	mov	r3, r0
 8007526:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800752a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10c      	bne.n	800754c <f_unlink+0x134>
 8007532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007534:	2b00      	cmp	r3, #0
 8007536:	d009      	beq.n	800754c <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8007538:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800753c:	2200      	movs	r2, #0
 800753e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007540:	4618      	mov	r0, r3
 8007542:	f7fd f9b1 	bl	80048a8 <remove_chain>
 8007546:	4603      	mov	r3, r0
 8007548:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800754c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007550:	2b00      	cmp	r3, #0
 8007552:	d106      	bne.n	8007562 <f_unlink+0x14a>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4618      	mov	r0, r3
 8007558:	f7fc ff28 	bl	80043ac <sync_fs>
 800755c:	4603      	mov	r3, r0
 800755e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8007562:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007566:	4618      	mov	r0, r3
 8007568:	3780      	adds	r7, #128	; 0x80
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b088      	sub	sp, #32
 8007572:	af00      	add	r7, sp, #0
 8007574:	60f8      	str	r0, [r7, #12]
 8007576:	60b9      	str	r1, [r7, #8]
 8007578:	607a      	str	r2, [r7, #4]
	int n = 0;
 800757a:	2300      	movs	r3, #0
 800757c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007582:	e01b      	b.n	80075bc <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007584:	f107 0310 	add.w	r3, r7, #16
 8007588:	f107 0114 	add.w	r1, r7, #20
 800758c:	2201      	movs	r2, #1
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff f8ce 	bl	8006730 <f_read>
		if (rc != 1) break;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d116      	bne.n	80075c8 <f_gets+0x5a>
		c = s[0];
 800759a:	7d3b      	ldrb	r3, [r7, #20]
 800759c:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	2b0d      	cmp	r3, #13
 80075a2:	d100      	bne.n	80075a6 <f_gets+0x38>
 80075a4:	e00a      	b.n	80075bc <f_gets+0x4e>
		*p++ = c;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	61ba      	str	r2, [r7, #24]
 80075ac:	7dfa      	ldrb	r2, [r7, #23]
 80075ae:	701a      	strb	r2, [r3, #0]
		n++;
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	3301      	adds	r3, #1
 80075b4:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	2b0a      	cmp	r3, #10
 80075ba:	d007      	beq.n	80075cc <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	3b01      	subs	r3, #1
 80075c0:	69fa      	ldr	r2, [r7, #28]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	dbde      	blt.n	8007584 <f_gets+0x16>
 80075c6:	e002      	b.n	80075ce <f_gets+0x60>
		if (rc != 1) break;
 80075c8:	bf00      	nop
 80075ca:	e000      	b.n	80075ce <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80075cc:	bf00      	nop
	}
	*p = 0;
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	2200      	movs	r2, #0
 80075d2:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <f_gets+0x70>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	e000      	b.n	80075e0 <f_gets+0x72>
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3720      	adds	r7, #32
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	2b0a      	cmp	r3, #10
 80075f8:	d103      	bne.n	8007602 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80075fa:	210d      	movs	r1, #13
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff fff3 	bl	80075e8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	db25      	blt.n	800765a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	1c5a      	adds	r2, r3, #1
 8007612:	60fa      	str	r2, [r7, #12]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	4413      	add	r3, r2
 8007618:	78fa      	ldrb	r2, [r7, #3]
 800761a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b3c      	cmp	r3, #60	; 0x3c
 8007620:	dd12      	ble.n	8007648 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6818      	ldr	r0, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f103 010c 	add.w	r1, r3, #12
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	f107 0308 	add.w	r3, r7, #8
 8007632:	f7ff f9dc 	bl	80069ee <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	429a      	cmp	r2, r3
 800763c:	d101      	bne.n	8007642 <putc_bfd+0x5a>
 800763e:	2300      	movs	r3, #0
 8007640:	e001      	b.n	8007646 <putc_bfd+0x5e>
 8007642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007646:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	609a      	str	r2, [r3, #8]
 8007658:	e000      	b.n	800765c <putc_bfd+0x74>
	if (i < 0) return;
 800765a:	bf00      	nop
}
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	db16      	blt.n	80076a0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6818      	ldr	r0, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f103 010c 	add.w	r1, r3, #12
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	461a      	mov	r2, r3
 8007682:	f107 030c 	add.w	r3, r7, #12
 8007686:	f7ff f9b2 	bl	80069ee <f_write>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d107      	bne.n	80076a0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	4293      	cmp	r3, r2
 8007698:	d102      	bne.n	80076a0 <putc_flush+0x3e>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	e001      	b.n	80076a4 <putc_flush+0x42>
	return EOF;
 80076a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	605a      	str	r2, [r3, #4]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	609a      	str	r2, [r3, #8]
}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bc80      	pop	{r7}
 80076d2:	4770      	bx	lr

080076d4 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b096      	sub	sp, #88	; 0x58
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80076de:	f107 030c 	add.w	r3, r7, #12
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7ff ffe1 	bl	80076ac <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80076ea:	e009      	b.n	8007700 <f_puts+0x2c>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	1c5a      	adds	r2, r3, #1
 80076f0:	607a      	str	r2, [r7, #4]
 80076f2:	781a      	ldrb	r2, [r3, #0]
 80076f4:	f107 030c 	add.w	r3, r7, #12
 80076f8:	4611      	mov	r1, r2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff ff74 	bl	80075e8 <putc_bfd>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1f1      	bne.n	80076ec <f_puts+0x18>
	return putc_flush(&pb);
 8007708:	f107 030c 	add.w	r3, r7, #12
 800770c:	4618      	mov	r0, r3
 800770e:	f7ff ffa8 	bl	8007662 <putc_flush>
 8007712:	4603      	mov	r3, r0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3758      	adds	r7, #88	; 0x58
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	4613      	mov	r3, r2
 8007728:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800772a:	2301      	movs	r3, #1
 800772c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007732:	4b1e      	ldr	r3, [pc, #120]	; (80077ac <FATFS_LinkDriverEx+0x90>)
 8007734:	7a5b      	ldrb	r3, [r3, #9]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d131      	bne.n	80077a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800773c:	4b1b      	ldr	r3, [pc, #108]	; (80077ac <FATFS_LinkDriverEx+0x90>)
 800773e:	7a5b      	ldrb	r3, [r3, #9]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	461a      	mov	r2, r3
 8007744:	4b19      	ldr	r3, [pc, #100]	; (80077ac <FATFS_LinkDriverEx+0x90>)
 8007746:	2100      	movs	r1, #0
 8007748:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800774a:	4b18      	ldr	r3, [pc, #96]	; (80077ac <FATFS_LinkDriverEx+0x90>)
 800774c:	7a5b      	ldrb	r3, [r3, #9]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	4a16      	ldr	r2, [pc, #88]	; (80077ac <FATFS_LinkDriverEx+0x90>)
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800775a:	4b14      	ldr	r3, [pc, #80]	; (80077ac <FATFS_LinkDriverEx+0x90>)
 800775c:	7a5b      	ldrb	r3, [r3, #9]
 800775e:	b2db      	uxtb	r3, r3
 8007760:	461a      	mov	r2, r3
 8007762:	4b12      	ldr	r3, [pc, #72]	; (80077ac <FATFS_LinkDriverEx+0x90>)
 8007764:	4413      	add	r3, r2
 8007766:	79fa      	ldrb	r2, [r7, #7]
 8007768:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800776a:	4b10      	ldr	r3, [pc, #64]	; (80077ac <FATFS_LinkDriverEx+0x90>)
 800776c:	7a5b      	ldrb	r3, [r3, #9]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	b2d1      	uxtb	r1, r2
 8007774:	4a0d      	ldr	r2, [pc, #52]	; (80077ac <FATFS_LinkDriverEx+0x90>)
 8007776:	7251      	strb	r1, [r2, #9]
 8007778:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800777a:	7dbb      	ldrb	r3, [r7, #22]
 800777c:	3330      	adds	r3, #48	; 0x30
 800777e:	b2da      	uxtb	r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	3301      	adds	r3, #1
 8007788:	223a      	movs	r2, #58	; 0x3a
 800778a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	3302      	adds	r3, #2
 8007790:	222f      	movs	r2, #47	; 0x2f
 8007792:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	3303      	adds	r3, #3
 8007798:	2200      	movs	r2, #0
 800779a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800779c:	2300      	movs	r3, #0
 800779e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	371c      	adds	r7, #28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bc80      	pop	{r7}
 80077aa:	4770      	bx	lr
 80077ac:	2000248c 	.word	0x2000248c

080077b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80077ba:	2200      	movs	r2, #0
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff ffac 	bl	800771c <FATFS_LinkDriverEx>
 80077c4:	4603      	mov	r3, r0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	6039      	str	r1, [r7, #0]
 80077da:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80077dc:	88fb      	ldrh	r3, [r7, #6]
 80077de:	2b7f      	cmp	r3, #127	; 0x7f
 80077e0:	d802      	bhi.n	80077e8 <ff_convert+0x18>
		c = chr;
 80077e2:	88fb      	ldrh	r3, [r7, #6]
 80077e4:	81fb      	strh	r3, [r7, #14]
 80077e6:	e025      	b.n	8007834 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00b      	beq.n	8007806 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80077ee:	88fb      	ldrh	r3, [r7, #6]
 80077f0:	2bff      	cmp	r3, #255	; 0xff
 80077f2:	d805      	bhi.n	8007800 <ff_convert+0x30>
 80077f4:	88fb      	ldrh	r3, [r7, #6]
 80077f6:	3b80      	subs	r3, #128	; 0x80
 80077f8:	4a11      	ldr	r2, [pc, #68]	; (8007840 <ff_convert+0x70>)
 80077fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077fe:	e000      	b.n	8007802 <ff_convert+0x32>
 8007800:	2300      	movs	r3, #0
 8007802:	81fb      	strh	r3, [r7, #14]
 8007804:	e016      	b.n	8007834 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007806:	2300      	movs	r3, #0
 8007808:	81fb      	strh	r3, [r7, #14]
 800780a:	e009      	b.n	8007820 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800780c:	89fb      	ldrh	r3, [r7, #14]
 800780e:	4a0c      	ldr	r2, [pc, #48]	; (8007840 <ff_convert+0x70>)
 8007810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007814:	88fa      	ldrh	r2, [r7, #6]
 8007816:	429a      	cmp	r2, r3
 8007818:	d006      	beq.n	8007828 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800781a:	89fb      	ldrh	r3, [r7, #14]
 800781c:	3301      	adds	r3, #1
 800781e:	81fb      	strh	r3, [r7, #14]
 8007820:	89fb      	ldrh	r3, [r7, #14]
 8007822:	2b7f      	cmp	r3, #127	; 0x7f
 8007824:	d9f2      	bls.n	800780c <ff_convert+0x3c>
 8007826:	e000      	b.n	800782a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007828:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800782a:	89fb      	ldrh	r3, [r7, #14]
 800782c:	3380      	adds	r3, #128	; 0x80
 800782e:	b29b      	uxth	r3, r3
 8007830:	b2db      	uxtb	r3, r3
 8007832:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007834:	89fb      	ldrh	r3, [r7, #14]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	bc80      	pop	{r7}
 800783e:	4770      	bx	lr
 8007840:	080086cc 	.word	0x080086cc

08007844 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800784e:	88fb      	ldrh	r3, [r7, #6]
 8007850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007854:	d201      	bcs.n	800785a <ff_wtoupper+0x16>
 8007856:	4b3d      	ldr	r3, [pc, #244]	; (800794c <ff_wtoupper+0x108>)
 8007858:	e000      	b.n	800785c <ff_wtoupper+0x18>
 800785a:	4b3d      	ldr	r3, [pc, #244]	; (8007950 <ff_wtoupper+0x10c>)
 800785c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	1c9a      	adds	r2, r3, #2
 8007862:	617a      	str	r2, [r7, #20]
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007868:	8a7b      	ldrh	r3, [r7, #18]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d068      	beq.n	8007940 <ff_wtoupper+0xfc>
 800786e:	88fa      	ldrh	r2, [r7, #6]
 8007870:	8a7b      	ldrh	r3, [r7, #18]
 8007872:	429a      	cmp	r2, r3
 8007874:	d364      	bcc.n	8007940 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	1c9a      	adds	r2, r3, #2
 800787a:	617a      	str	r2, [r7, #20]
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	823b      	strh	r3, [r7, #16]
 8007880:	8a3b      	ldrh	r3, [r7, #16]
 8007882:	0a1b      	lsrs	r3, r3, #8
 8007884:	81fb      	strh	r3, [r7, #14]
 8007886:	8a3b      	ldrh	r3, [r7, #16]
 8007888:	b2db      	uxtb	r3, r3
 800788a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800788c:	88fa      	ldrh	r2, [r7, #6]
 800788e:	8a79      	ldrh	r1, [r7, #18]
 8007890:	8a3b      	ldrh	r3, [r7, #16]
 8007892:	440b      	add	r3, r1
 8007894:	429a      	cmp	r2, r3
 8007896:	da49      	bge.n	800792c <ff_wtoupper+0xe8>
			switch (cmd) {
 8007898:	89fb      	ldrh	r3, [r7, #14]
 800789a:	2b08      	cmp	r3, #8
 800789c:	d84f      	bhi.n	800793e <ff_wtoupper+0xfa>
 800789e:	a201      	add	r2, pc, #4	; (adr r2, 80078a4 <ff_wtoupper+0x60>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	080078c9 	.word	0x080078c9
 80078a8:	080078db 	.word	0x080078db
 80078ac:	080078f1 	.word	0x080078f1
 80078b0:	080078f9 	.word	0x080078f9
 80078b4:	08007901 	.word	0x08007901
 80078b8:	08007909 	.word	0x08007909
 80078bc:	08007911 	.word	0x08007911
 80078c0:	08007919 	.word	0x08007919
 80078c4:	08007921 	.word	0x08007921
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80078c8:	88fa      	ldrh	r2, [r7, #6]
 80078ca:	8a7b      	ldrh	r3, [r7, #18]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	4413      	add	r3, r2
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	80fb      	strh	r3, [r7, #6]
 80078d8:	e027      	b.n	800792a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80078da:	88fa      	ldrh	r2, [r7, #6]
 80078dc:	8a7b      	ldrh	r3, [r7, #18]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	88fa      	ldrh	r2, [r7, #6]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	80fb      	strh	r3, [r7, #6]
 80078ee:	e01c      	b.n	800792a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80078f0:	88fb      	ldrh	r3, [r7, #6]
 80078f2:	3b10      	subs	r3, #16
 80078f4:	80fb      	strh	r3, [r7, #6]
 80078f6:	e018      	b.n	800792a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80078f8:	88fb      	ldrh	r3, [r7, #6]
 80078fa:	3b20      	subs	r3, #32
 80078fc:	80fb      	strh	r3, [r7, #6]
 80078fe:	e014      	b.n	800792a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007900:	88fb      	ldrh	r3, [r7, #6]
 8007902:	3b30      	subs	r3, #48	; 0x30
 8007904:	80fb      	strh	r3, [r7, #6]
 8007906:	e010      	b.n	800792a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007908:	88fb      	ldrh	r3, [r7, #6]
 800790a:	3b1a      	subs	r3, #26
 800790c:	80fb      	strh	r3, [r7, #6]
 800790e:	e00c      	b.n	800792a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007910:	88fb      	ldrh	r3, [r7, #6]
 8007912:	3308      	adds	r3, #8
 8007914:	80fb      	strh	r3, [r7, #6]
 8007916:	e008      	b.n	800792a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007918:	88fb      	ldrh	r3, [r7, #6]
 800791a:	3b50      	subs	r3, #80	; 0x50
 800791c:	80fb      	strh	r3, [r7, #6]
 800791e:	e004      	b.n	800792a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007920:	88fb      	ldrh	r3, [r7, #6]
 8007922:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007926:	80fb      	strh	r3, [r7, #6]
 8007928:	bf00      	nop
			}
			break;
 800792a:	e008      	b.n	800793e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800792c:	89fb      	ldrh	r3, [r7, #14]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d195      	bne.n	800785e <ff_wtoupper+0x1a>
 8007932:	8a3b      	ldrh	r3, [r7, #16]
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	4413      	add	r3, r2
 800793a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800793c:	e78f      	b.n	800785e <ff_wtoupper+0x1a>
			break;
 800793e:	bf00      	nop
	}

	return chr;
 8007940:	88fb      	ldrh	r3, [r7, #6]
}
 8007942:	4618      	mov	r0, r3
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	bc80      	pop	{r7}
 800794a:	4770      	bx	lr
 800794c:	080087cc 	.word	0x080087cc
 8007950:	080089c0 	.word	0x080089c0

08007954 <__errno>:
 8007954:	4b01      	ldr	r3, [pc, #4]	; (800795c <__errno+0x8>)
 8007956:	6818      	ldr	r0, [r3, #0]
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	20000024 	.word	0x20000024

08007960 <__libc_init_array>:
 8007960:	b570      	push	{r4, r5, r6, lr}
 8007962:	2600      	movs	r6, #0
 8007964:	4d0c      	ldr	r5, [pc, #48]	; (8007998 <__libc_init_array+0x38>)
 8007966:	4c0d      	ldr	r4, [pc, #52]	; (800799c <__libc_init_array+0x3c>)
 8007968:	1b64      	subs	r4, r4, r5
 800796a:	10a4      	asrs	r4, r4, #2
 800796c:	42a6      	cmp	r6, r4
 800796e:	d109      	bne.n	8007984 <__libc_init_array+0x24>
 8007970:	f000 fc9c 	bl	80082ac <_init>
 8007974:	2600      	movs	r6, #0
 8007976:	4d0a      	ldr	r5, [pc, #40]	; (80079a0 <__libc_init_array+0x40>)
 8007978:	4c0a      	ldr	r4, [pc, #40]	; (80079a4 <__libc_init_array+0x44>)
 800797a:	1b64      	subs	r4, r4, r5
 800797c:	10a4      	asrs	r4, r4, #2
 800797e:	42a6      	cmp	r6, r4
 8007980:	d105      	bne.n	800798e <__libc_init_array+0x2e>
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	f855 3b04 	ldr.w	r3, [r5], #4
 8007988:	4798      	blx	r3
 800798a:	3601      	adds	r6, #1
 800798c:	e7ee      	b.n	800796c <__libc_init_array+0xc>
 800798e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007992:	4798      	blx	r3
 8007994:	3601      	adds	r6, #1
 8007996:	e7f2      	b.n	800797e <__libc_init_array+0x1e>
 8007998:	08008ab8 	.word	0x08008ab8
 800799c:	08008ab8 	.word	0x08008ab8
 80079a0:	08008ab8 	.word	0x08008ab8
 80079a4:	08008abc 	.word	0x08008abc

080079a8 <memcpy>:
 80079a8:	440a      	add	r2, r1
 80079aa:	4291      	cmp	r1, r2
 80079ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80079b0:	d100      	bne.n	80079b4 <memcpy+0xc>
 80079b2:	4770      	bx	lr
 80079b4:	b510      	push	{r4, lr}
 80079b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ba:	4291      	cmp	r1, r2
 80079bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079c0:	d1f9      	bne.n	80079b6 <memcpy+0xe>
 80079c2:	bd10      	pop	{r4, pc}

080079c4 <memset>:
 80079c4:	4603      	mov	r3, r0
 80079c6:	4402      	add	r2, r0
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d100      	bne.n	80079ce <memset+0xa>
 80079cc:	4770      	bx	lr
 80079ce:	f803 1b01 	strb.w	r1, [r3], #1
 80079d2:	e7f9      	b.n	80079c8 <memset+0x4>

080079d4 <siprintf>:
 80079d4:	b40e      	push	{r1, r2, r3}
 80079d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079da:	b500      	push	{lr}
 80079dc:	b09c      	sub	sp, #112	; 0x70
 80079de:	ab1d      	add	r3, sp, #116	; 0x74
 80079e0:	9002      	str	r0, [sp, #8]
 80079e2:	9006      	str	r0, [sp, #24]
 80079e4:	9107      	str	r1, [sp, #28]
 80079e6:	9104      	str	r1, [sp, #16]
 80079e8:	4808      	ldr	r0, [pc, #32]	; (8007a0c <siprintf+0x38>)
 80079ea:	4909      	ldr	r1, [pc, #36]	; (8007a10 <siprintf+0x3c>)
 80079ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80079f0:	9105      	str	r1, [sp, #20]
 80079f2:	6800      	ldr	r0, [r0, #0]
 80079f4:	a902      	add	r1, sp, #8
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	f000 f868 	bl	8007acc <_svfiprintf_r>
 80079fc:	2200      	movs	r2, #0
 80079fe:	9b02      	ldr	r3, [sp, #8]
 8007a00:	701a      	strb	r2, [r3, #0]
 8007a02:	b01c      	add	sp, #112	; 0x70
 8007a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a08:	b003      	add	sp, #12
 8007a0a:	4770      	bx	lr
 8007a0c:	20000024 	.word	0x20000024
 8007a10:	ffff0208 	.word	0xffff0208

08007a14 <__ssputs_r>:
 8007a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a18:	688e      	ldr	r6, [r1, #8]
 8007a1a:	4682      	mov	sl, r0
 8007a1c:	429e      	cmp	r6, r3
 8007a1e:	460c      	mov	r4, r1
 8007a20:	4690      	mov	r8, r2
 8007a22:	461f      	mov	r7, r3
 8007a24:	d838      	bhi.n	8007a98 <__ssputs_r+0x84>
 8007a26:	898a      	ldrh	r2, [r1, #12]
 8007a28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a2c:	d032      	beq.n	8007a94 <__ssputs_r+0x80>
 8007a2e:	6825      	ldr	r5, [r4, #0]
 8007a30:	6909      	ldr	r1, [r1, #16]
 8007a32:	3301      	adds	r3, #1
 8007a34:	eba5 0901 	sub.w	r9, r5, r1
 8007a38:	6965      	ldr	r5, [r4, #20]
 8007a3a:	444b      	add	r3, r9
 8007a3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a44:	106d      	asrs	r5, r5, #1
 8007a46:	429d      	cmp	r5, r3
 8007a48:	bf38      	it	cc
 8007a4a:	461d      	movcc	r5, r3
 8007a4c:	0553      	lsls	r3, r2, #21
 8007a4e:	d531      	bpl.n	8007ab4 <__ssputs_r+0xa0>
 8007a50:	4629      	mov	r1, r5
 8007a52:	f000 fb61 	bl	8008118 <_malloc_r>
 8007a56:	4606      	mov	r6, r0
 8007a58:	b950      	cbnz	r0, 8007a70 <__ssputs_r+0x5c>
 8007a5a:	230c      	movs	r3, #12
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a60:	f8ca 3000 	str.w	r3, [sl]
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a6a:	81a3      	strh	r3, [r4, #12]
 8007a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a70:	464a      	mov	r2, r9
 8007a72:	6921      	ldr	r1, [r4, #16]
 8007a74:	f7ff ff98 	bl	80079a8 <memcpy>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a82:	81a3      	strh	r3, [r4, #12]
 8007a84:	6126      	str	r6, [r4, #16]
 8007a86:	444e      	add	r6, r9
 8007a88:	6026      	str	r6, [r4, #0]
 8007a8a:	463e      	mov	r6, r7
 8007a8c:	6165      	str	r5, [r4, #20]
 8007a8e:	eba5 0509 	sub.w	r5, r5, r9
 8007a92:	60a5      	str	r5, [r4, #8]
 8007a94:	42be      	cmp	r6, r7
 8007a96:	d900      	bls.n	8007a9a <__ssputs_r+0x86>
 8007a98:	463e      	mov	r6, r7
 8007a9a:	4632      	mov	r2, r6
 8007a9c:	4641      	mov	r1, r8
 8007a9e:	6820      	ldr	r0, [r4, #0]
 8007aa0:	f000 fab8 	bl	8008014 <memmove>
 8007aa4:	68a3      	ldr	r3, [r4, #8]
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	1b9b      	subs	r3, r3, r6
 8007aaa:	60a3      	str	r3, [r4, #8]
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	4433      	add	r3, r6
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	e7db      	b.n	8007a6c <__ssputs_r+0x58>
 8007ab4:	462a      	mov	r2, r5
 8007ab6:	f000 fba3 	bl	8008200 <_realloc_r>
 8007aba:	4606      	mov	r6, r0
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d1e1      	bne.n	8007a84 <__ssputs_r+0x70>
 8007ac0:	4650      	mov	r0, sl
 8007ac2:	6921      	ldr	r1, [r4, #16]
 8007ac4:	f000 fac0 	bl	8008048 <_free_r>
 8007ac8:	e7c7      	b.n	8007a5a <__ssputs_r+0x46>
	...

08007acc <_svfiprintf_r>:
 8007acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad0:	4698      	mov	r8, r3
 8007ad2:	898b      	ldrh	r3, [r1, #12]
 8007ad4:	4607      	mov	r7, r0
 8007ad6:	061b      	lsls	r3, r3, #24
 8007ad8:	460d      	mov	r5, r1
 8007ada:	4614      	mov	r4, r2
 8007adc:	b09d      	sub	sp, #116	; 0x74
 8007ade:	d50e      	bpl.n	8007afe <_svfiprintf_r+0x32>
 8007ae0:	690b      	ldr	r3, [r1, #16]
 8007ae2:	b963      	cbnz	r3, 8007afe <_svfiprintf_r+0x32>
 8007ae4:	2140      	movs	r1, #64	; 0x40
 8007ae6:	f000 fb17 	bl	8008118 <_malloc_r>
 8007aea:	6028      	str	r0, [r5, #0]
 8007aec:	6128      	str	r0, [r5, #16]
 8007aee:	b920      	cbnz	r0, 8007afa <_svfiprintf_r+0x2e>
 8007af0:	230c      	movs	r3, #12
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007af8:	e0d1      	b.n	8007c9e <_svfiprintf_r+0x1d2>
 8007afa:	2340      	movs	r3, #64	; 0x40
 8007afc:	616b      	str	r3, [r5, #20]
 8007afe:	2300      	movs	r3, #0
 8007b00:	9309      	str	r3, [sp, #36]	; 0x24
 8007b02:	2320      	movs	r3, #32
 8007b04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b08:	2330      	movs	r3, #48	; 0x30
 8007b0a:	f04f 0901 	mov.w	r9, #1
 8007b0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007cb8 <_svfiprintf_r+0x1ec>
 8007b16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b1a:	4623      	mov	r3, r4
 8007b1c:	469a      	mov	sl, r3
 8007b1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b22:	b10a      	cbz	r2, 8007b28 <_svfiprintf_r+0x5c>
 8007b24:	2a25      	cmp	r2, #37	; 0x25
 8007b26:	d1f9      	bne.n	8007b1c <_svfiprintf_r+0x50>
 8007b28:	ebba 0b04 	subs.w	fp, sl, r4
 8007b2c:	d00b      	beq.n	8007b46 <_svfiprintf_r+0x7a>
 8007b2e:	465b      	mov	r3, fp
 8007b30:	4622      	mov	r2, r4
 8007b32:	4629      	mov	r1, r5
 8007b34:	4638      	mov	r0, r7
 8007b36:	f7ff ff6d 	bl	8007a14 <__ssputs_r>
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	f000 80aa 	beq.w	8007c94 <_svfiprintf_r+0x1c8>
 8007b40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b42:	445a      	add	r2, fp
 8007b44:	9209      	str	r2, [sp, #36]	; 0x24
 8007b46:	f89a 3000 	ldrb.w	r3, [sl]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 80a2 	beq.w	8007c94 <_svfiprintf_r+0x1c8>
 8007b50:	2300      	movs	r3, #0
 8007b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b5a:	f10a 0a01 	add.w	sl, sl, #1
 8007b5e:	9304      	str	r3, [sp, #16]
 8007b60:	9307      	str	r3, [sp, #28]
 8007b62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b66:	931a      	str	r3, [sp, #104]	; 0x68
 8007b68:	4654      	mov	r4, sl
 8007b6a:	2205      	movs	r2, #5
 8007b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b70:	4851      	ldr	r0, [pc, #324]	; (8007cb8 <_svfiprintf_r+0x1ec>)
 8007b72:	f000 fa41 	bl	8007ff8 <memchr>
 8007b76:	9a04      	ldr	r2, [sp, #16]
 8007b78:	b9d8      	cbnz	r0, 8007bb2 <_svfiprintf_r+0xe6>
 8007b7a:	06d0      	lsls	r0, r2, #27
 8007b7c:	bf44      	itt	mi
 8007b7e:	2320      	movmi	r3, #32
 8007b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b84:	0711      	lsls	r1, r2, #28
 8007b86:	bf44      	itt	mi
 8007b88:	232b      	movmi	r3, #43	; 0x2b
 8007b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b92:	2b2a      	cmp	r3, #42	; 0x2a
 8007b94:	d015      	beq.n	8007bc2 <_svfiprintf_r+0xf6>
 8007b96:	4654      	mov	r4, sl
 8007b98:	2000      	movs	r0, #0
 8007b9a:	f04f 0c0a 	mov.w	ip, #10
 8007b9e:	9a07      	ldr	r2, [sp, #28]
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ba6:	3b30      	subs	r3, #48	; 0x30
 8007ba8:	2b09      	cmp	r3, #9
 8007baa:	d94e      	bls.n	8007c4a <_svfiprintf_r+0x17e>
 8007bac:	b1b0      	cbz	r0, 8007bdc <_svfiprintf_r+0x110>
 8007bae:	9207      	str	r2, [sp, #28]
 8007bb0:	e014      	b.n	8007bdc <_svfiprintf_r+0x110>
 8007bb2:	eba0 0308 	sub.w	r3, r0, r8
 8007bb6:	fa09 f303 	lsl.w	r3, r9, r3
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	46a2      	mov	sl, r4
 8007bbe:	9304      	str	r3, [sp, #16]
 8007bc0:	e7d2      	b.n	8007b68 <_svfiprintf_r+0x9c>
 8007bc2:	9b03      	ldr	r3, [sp, #12]
 8007bc4:	1d19      	adds	r1, r3, #4
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	9103      	str	r1, [sp, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	bfbb      	ittet	lt
 8007bce:	425b      	neglt	r3, r3
 8007bd0:	f042 0202 	orrlt.w	r2, r2, #2
 8007bd4:	9307      	strge	r3, [sp, #28]
 8007bd6:	9307      	strlt	r3, [sp, #28]
 8007bd8:	bfb8      	it	lt
 8007bda:	9204      	strlt	r2, [sp, #16]
 8007bdc:	7823      	ldrb	r3, [r4, #0]
 8007bde:	2b2e      	cmp	r3, #46	; 0x2e
 8007be0:	d10c      	bne.n	8007bfc <_svfiprintf_r+0x130>
 8007be2:	7863      	ldrb	r3, [r4, #1]
 8007be4:	2b2a      	cmp	r3, #42	; 0x2a
 8007be6:	d135      	bne.n	8007c54 <_svfiprintf_r+0x188>
 8007be8:	9b03      	ldr	r3, [sp, #12]
 8007bea:	3402      	adds	r4, #2
 8007bec:	1d1a      	adds	r2, r3, #4
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	9203      	str	r2, [sp, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	bfb8      	it	lt
 8007bf6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007bfa:	9305      	str	r3, [sp, #20]
 8007bfc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007cbc <_svfiprintf_r+0x1f0>
 8007c00:	2203      	movs	r2, #3
 8007c02:	4650      	mov	r0, sl
 8007c04:	7821      	ldrb	r1, [r4, #0]
 8007c06:	f000 f9f7 	bl	8007ff8 <memchr>
 8007c0a:	b140      	cbz	r0, 8007c1e <_svfiprintf_r+0x152>
 8007c0c:	2340      	movs	r3, #64	; 0x40
 8007c0e:	eba0 000a 	sub.w	r0, r0, sl
 8007c12:	fa03 f000 	lsl.w	r0, r3, r0
 8007c16:	9b04      	ldr	r3, [sp, #16]
 8007c18:	3401      	adds	r4, #1
 8007c1a:	4303      	orrs	r3, r0
 8007c1c:	9304      	str	r3, [sp, #16]
 8007c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c22:	2206      	movs	r2, #6
 8007c24:	4826      	ldr	r0, [pc, #152]	; (8007cc0 <_svfiprintf_r+0x1f4>)
 8007c26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c2a:	f000 f9e5 	bl	8007ff8 <memchr>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d038      	beq.n	8007ca4 <_svfiprintf_r+0x1d8>
 8007c32:	4b24      	ldr	r3, [pc, #144]	; (8007cc4 <_svfiprintf_r+0x1f8>)
 8007c34:	bb1b      	cbnz	r3, 8007c7e <_svfiprintf_r+0x1b2>
 8007c36:	9b03      	ldr	r3, [sp, #12]
 8007c38:	3307      	adds	r3, #7
 8007c3a:	f023 0307 	bic.w	r3, r3, #7
 8007c3e:	3308      	adds	r3, #8
 8007c40:	9303      	str	r3, [sp, #12]
 8007c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c44:	4433      	add	r3, r6
 8007c46:	9309      	str	r3, [sp, #36]	; 0x24
 8007c48:	e767      	b.n	8007b1a <_svfiprintf_r+0x4e>
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	2001      	movs	r0, #1
 8007c4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c52:	e7a5      	b.n	8007ba0 <_svfiprintf_r+0xd4>
 8007c54:	2300      	movs	r3, #0
 8007c56:	f04f 0c0a 	mov.w	ip, #10
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	3401      	adds	r4, #1
 8007c5e:	9305      	str	r3, [sp, #20]
 8007c60:	4620      	mov	r0, r4
 8007c62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c66:	3a30      	subs	r2, #48	; 0x30
 8007c68:	2a09      	cmp	r2, #9
 8007c6a:	d903      	bls.n	8007c74 <_svfiprintf_r+0x1a8>
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d0c5      	beq.n	8007bfc <_svfiprintf_r+0x130>
 8007c70:	9105      	str	r1, [sp, #20]
 8007c72:	e7c3      	b.n	8007bfc <_svfiprintf_r+0x130>
 8007c74:	4604      	mov	r4, r0
 8007c76:	2301      	movs	r3, #1
 8007c78:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c7c:	e7f0      	b.n	8007c60 <_svfiprintf_r+0x194>
 8007c7e:	ab03      	add	r3, sp, #12
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	462a      	mov	r2, r5
 8007c84:	4638      	mov	r0, r7
 8007c86:	4b10      	ldr	r3, [pc, #64]	; (8007cc8 <_svfiprintf_r+0x1fc>)
 8007c88:	a904      	add	r1, sp, #16
 8007c8a:	f3af 8000 	nop.w
 8007c8e:	1c42      	adds	r2, r0, #1
 8007c90:	4606      	mov	r6, r0
 8007c92:	d1d6      	bne.n	8007c42 <_svfiprintf_r+0x176>
 8007c94:	89ab      	ldrh	r3, [r5, #12]
 8007c96:	065b      	lsls	r3, r3, #25
 8007c98:	f53f af2c 	bmi.w	8007af4 <_svfiprintf_r+0x28>
 8007c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c9e:	b01d      	add	sp, #116	; 0x74
 8007ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca4:	ab03      	add	r3, sp, #12
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	462a      	mov	r2, r5
 8007caa:	4638      	mov	r0, r7
 8007cac:	4b06      	ldr	r3, [pc, #24]	; (8007cc8 <_svfiprintf_r+0x1fc>)
 8007cae:	a904      	add	r1, sp, #16
 8007cb0:	f000 f87c 	bl	8007dac <_printf_i>
 8007cb4:	e7eb      	b.n	8007c8e <_svfiprintf_r+0x1c2>
 8007cb6:	bf00      	nop
 8007cb8:	08008a7c 	.word	0x08008a7c
 8007cbc:	08008a82 	.word	0x08008a82
 8007cc0:	08008a86 	.word	0x08008a86
 8007cc4:	00000000 	.word	0x00000000
 8007cc8:	08007a15 	.word	0x08007a15

08007ccc <_printf_common>:
 8007ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd0:	4616      	mov	r6, r2
 8007cd2:	4699      	mov	r9, r3
 8007cd4:	688a      	ldr	r2, [r1, #8]
 8007cd6:	690b      	ldr	r3, [r1, #16]
 8007cd8:	4607      	mov	r7, r0
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	bfb8      	it	lt
 8007cde:	4613      	movlt	r3, r2
 8007ce0:	6033      	str	r3, [r6, #0]
 8007ce2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cec:	b10a      	cbz	r2, 8007cf2 <_printf_common+0x26>
 8007cee:	3301      	adds	r3, #1
 8007cf0:	6033      	str	r3, [r6, #0]
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	0699      	lsls	r1, r3, #26
 8007cf6:	bf42      	ittt	mi
 8007cf8:	6833      	ldrmi	r3, [r6, #0]
 8007cfa:	3302      	addmi	r3, #2
 8007cfc:	6033      	strmi	r3, [r6, #0]
 8007cfe:	6825      	ldr	r5, [r4, #0]
 8007d00:	f015 0506 	ands.w	r5, r5, #6
 8007d04:	d106      	bne.n	8007d14 <_printf_common+0x48>
 8007d06:	f104 0a19 	add.w	sl, r4, #25
 8007d0a:	68e3      	ldr	r3, [r4, #12]
 8007d0c:	6832      	ldr	r2, [r6, #0]
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	42ab      	cmp	r3, r5
 8007d12:	dc28      	bgt.n	8007d66 <_printf_common+0x9a>
 8007d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d18:	1e13      	subs	r3, r2, #0
 8007d1a:	6822      	ldr	r2, [r4, #0]
 8007d1c:	bf18      	it	ne
 8007d1e:	2301      	movne	r3, #1
 8007d20:	0692      	lsls	r2, r2, #26
 8007d22:	d42d      	bmi.n	8007d80 <_printf_common+0xb4>
 8007d24:	4649      	mov	r1, r9
 8007d26:	4638      	mov	r0, r7
 8007d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d2c:	47c0      	blx	r8
 8007d2e:	3001      	adds	r0, #1
 8007d30:	d020      	beq.n	8007d74 <_printf_common+0xa8>
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	68e5      	ldr	r5, [r4, #12]
 8007d36:	f003 0306 	and.w	r3, r3, #6
 8007d3a:	2b04      	cmp	r3, #4
 8007d3c:	bf18      	it	ne
 8007d3e:	2500      	movne	r5, #0
 8007d40:	6832      	ldr	r2, [r6, #0]
 8007d42:	f04f 0600 	mov.w	r6, #0
 8007d46:	68a3      	ldr	r3, [r4, #8]
 8007d48:	bf08      	it	eq
 8007d4a:	1aad      	subeq	r5, r5, r2
 8007d4c:	6922      	ldr	r2, [r4, #16]
 8007d4e:	bf08      	it	eq
 8007d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d54:	4293      	cmp	r3, r2
 8007d56:	bfc4      	itt	gt
 8007d58:	1a9b      	subgt	r3, r3, r2
 8007d5a:	18ed      	addgt	r5, r5, r3
 8007d5c:	341a      	adds	r4, #26
 8007d5e:	42b5      	cmp	r5, r6
 8007d60:	d11a      	bne.n	8007d98 <_printf_common+0xcc>
 8007d62:	2000      	movs	r0, #0
 8007d64:	e008      	b.n	8007d78 <_printf_common+0xac>
 8007d66:	2301      	movs	r3, #1
 8007d68:	4652      	mov	r2, sl
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	4638      	mov	r0, r7
 8007d6e:	47c0      	blx	r8
 8007d70:	3001      	adds	r0, #1
 8007d72:	d103      	bne.n	8007d7c <_printf_common+0xb0>
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d7c:	3501      	adds	r5, #1
 8007d7e:	e7c4      	b.n	8007d0a <_printf_common+0x3e>
 8007d80:	2030      	movs	r0, #48	; 0x30
 8007d82:	18e1      	adds	r1, r4, r3
 8007d84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d8e:	4422      	add	r2, r4
 8007d90:	3302      	adds	r3, #2
 8007d92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d96:	e7c5      	b.n	8007d24 <_printf_common+0x58>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	4622      	mov	r2, r4
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	4638      	mov	r0, r7
 8007da0:	47c0      	blx	r8
 8007da2:	3001      	adds	r0, #1
 8007da4:	d0e6      	beq.n	8007d74 <_printf_common+0xa8>
 8007da6:	3601      	adds	r6, #1
 8007da8:	e7d9      	b.n	8007d5e <_printf_common+0x92>
	...

08007dac <_printf_i>:
 8007dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007db0:	7e0f      	ldrb	r7, [r1, #24]
 8007db2:	4691      	mov	r9, r2
 8007db4:	2f78      	cmp	r7, #120	; 0x78
 8007db6:	4680      	mov	r8, r0
 8007db8:	460c      	mov	r4, r1
 8007dba:	469a      	mov	sl, r3
 8007dbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007dbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dc2:	d807      	bhi.n	8007dd4 <_printf_i+0x28>
 8007dc4:	2f62      	cmp	r7, #98	; 0x62
 8007dc6:	d80a      	bhi.n	8007dde <_printf_i+0x32>
 8007dc8:	2f00      	cmp	r7, #0
 8007dca:	f000 80d9 	beq.w	8007f80 <_printf_i+0x1d4>
 8007dce:	2f58      	cmp	r7, #88	; 0x58
 8007dd0:	f000 80a4 	beq.w	8007f1c <_printf_i+0x170>
 8007dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ddc:	e03a      	b.n	8007e54 <_printf_i+0xa8>
 8007dde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007de2:	2b15      	cmp	r3, #21
 8007de4:	d8f6      	bhi.n	8007dd4 <_printf_i+0x28>
 8007de6:	a101      	add	r1, pc, #4	; (adr r1, 8007dec <_printf_i+0x40>)
 8007de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dec:	08007e45 	.word	0x08007e45
 8007df0:	08007e59 	.word	0x08007e59
 8007df4:	08007dd5 	.word	0x08007dd5
 8007df8:	08007dd5 	.word	0x08007dd5
 8007dfc:	08007dd5 	.word	0x08007dd5
 8007e00:	08007dd5 	.word	0x08007dd5
 8007e04:	08007e59 	.word	0x08007e59
 8007e08:	08007dd5 	.word	0x08007dd5
 8007e0c:	08007dd5 	.word	0x08007dd5
 8007e10:	08007dd5 	.word	0x08007dd5
 8007e14:	08007dd5 	.word	0x08007dd5
 8007e18:	08007f67 	.word	0x08007f67
 8007e1c:	08007e89 	.word	0x08007e89
 8007e20:	08007f49 	.word	0x08007f49
 8007e24:	08007dd5 	.word	0x08007dd5
 8007e28:	08007dd5 	.word	0x08007dd5
 8007e2c:	08007f89 	.word	0x08007f89
 8007e30:	08007dd5 	.word	0x08007dd5
 8007e34:	08007e89 	.word	0x08007e89
 8007e38:	08007dd5 	.word	0x08007dd5
 8007e3c:	08007dd5 	.word	0x08007dd5
 8007e40:	08007f51 	.word	0x08007f51
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	1d1a      	adds	r2, r3, #4
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	602a      	str	r2, [r5, #0]
 8007e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e54:	2301      	movs	r3, #1
 8007e56:	e0a4      	b.n	8007fa2 <_printf_i+0x1f6>
 8007e58:	6820      	ldr	r0, [r4, #0]
 8007e5a:	6829      	ldr	r1, [r5, #0]
 8007e5c:	0606      	lsls	r6, r0, #24
 8007e5e:	f101 0304 	add.w	r3, r1, #4
 8007e62:	d50a      	bpl.n	8007e7a <_printf_i+0xce>
 8007e64:	680e      	ldr	r6, [r1, #0]
 8007e66:	602b      	str	r3, [r5, #0]
 8007e68:	2e00      	cmp	r6, #0
 8007e6a:	da03      	bge.n	8007e74 <_printf_i+0xc8>
 8007e6c:	232d      	movs	r3, #45	; 0x2d
 8007e6e:	4276      	negs	r6, r6
 8007e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e74:	230a      	movs	r3, #10
 8007e76:	485e      	ldr	r0, [pc, #376]	; (8007ff0 <_printf_i+0x244>)
 8007e78:	e019      	b.n	8007eae <_printf_i+0x102>
 8007e7a:	680e      	ldr	r6, [r1, #0]
 8007e7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e80:	602b      	str	r3, [r5, #0]
 8007e82:	bf18      	it	ne
 8007e84:	b236      	sxthne	r6, r6
 8007e86:	e7ef      	b.n	8007e68 <_printf_i+0xbc>
 8007e88:	682b      	ldr	r3, [r5, #0]
 8007e8a:	6820      	ldr	r0, [r4, #0]
 8007e8c:	1d19      	adds	r1, r3, #4
 8007e8e:	6029      	str	r1, [r5, #0]
 8007e90:	0601      	lsls	r1, r0, #24
 8007e92:	d501      	bpl.n	8007e98 <_printf_i+0xec>
 8007e94:	681e      	ldr	r6, [r3, #0]
 8007e96:	e002      	b.n	8007e9e <_printf_i+0xf2>
 8007e98:	0646      	lsls	r6, r0, #25
 8007e9a:	d5fb      	bpl.n	8007e94 <_printf_i+0xe8>
 8007e9c:	881e      	ldrh	r6, [r3, #0]
 8007e9e:	2f6f      	cmp	r7, #111	; 0x6f
 8007ea0:	bf0c      	ite	eq
 8007ea2:	2308      	moveq	r3, #8
 8007ea4:	230a      	movne	r3, #10
 8007ea6:	4852      	ldr	r0, [pc, #328]	; (8007ff0 <_printf_i+0x244>)
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eae:	6865      	ldr	r5, [r4, #4]
 8007eb0:	2d00      	cmp	r5, #0
 8007eb2:	bfa8      	it	ge
 8007eb4:	6821      	ldrge	r1, [r4, #0]
 8007eb6:	60a5      	str	r5, [r4, #8]
 8007eb8:	bfa4      	itt	ge
 8007eba:	f021 0104 	bicge.w	r1, r1, #4
 8007ebe:	6021      	strge	r1, [r4, #0]
 8007ec0:	b90e      	cbnz	r6, 8007ec6 <_printf_i+0x11a>
 8007ec2:	2d00      	cmp	r5, #0
 8007ec4:	d04d      	beq.n	8007f62 <_printf_i+0x1b6>
 8007ec6:	4615      	mov	r5, r2
 8007ec8:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ecc:	fb03 6711 	mls	r7, r3, r1, r6
 8007ed0:	5dc7      	ldrb	r7, [r0, r7]
 8007ed2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ed6:	4637      	mov	r7, r6
 8007ed8:	42bb      	cmp	r3, r7
 8007eda:	460e      	mov	r6, r1
 8007edc:	d9f4      	bls.n	8007ec8 <_printf_i+0x11c>
 8007ede:	2b08      	cmp	r3, #8
 8007ee0:	d10b      	bne.n	8007efa <_printf_i+0x14e>
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	07de      	lsls	r6, r3, #31
 8007ee6:	d508      	bpl.n	8007efa <_printf_i+0x14e>
 8007ee8:	6923      	ldr	r3, [r4, #16]
 8007eea:	6861      	ldr	r1, [r4, #4]
 8007eec:	4299      	cmp	r1, r3
 8007eee:	bfde      	ittt	le
 8007ef0:	2330      	movle	r3, #48	; 0x30
 8007ef2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ef6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007efa:	1b52      	subs	r2, r2, r5
 8007efc:	6122      	str	r2, [r4, #16]
 8007efe:	464b      	mov	r3, r9
 8007f00:	4621      	mov	r1, r4
 8007f02:	4640      	mov	r0, r8
 8007f04:	f8cd a000 	str.w	sl, [sp]
 8007f08:	aa03      	add	r2, sp, #12
 8007f0a:	f7ff fedf 	bl	8007ccc <_printf_common>
 8007f0e:	3001      	adds	r0, #1
 8007f10:	d14c      	bne.n	8007fac <_printf_i+0x200>
 8007f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f16:	b004      	add	sp, #16
 8007f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1c:	4834      	ldr	r0, [pc, #208]	; (8007ff0 <_printf_i+0x244>)
 8007f1e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f22:	6829      	ldr	r1, [r5, #0]
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f2a:	6029      	str	r1, [r5, #0]
 8007f2c:	061d      	lsls	r5, r3, #24
 8007f2e:	d514      	bpl.n	8007f5a <_printf_i+0x1ae>
 8007f30:	07df      	lsls	r7, r3, #31
 8007f32:	bf44      	itt	mi
 8007f34:	f043 0320 	orrmi.w	r3, r3, #32
 8007f38:	6023      	strmi	r3, [r4, #0]
 8007f3a:	b91e      	cbnz	r6, 8007f44 <_printf_i+0x198>
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	f023 0320 	bic.w	r3, r3, #32
 8007f42:	6023      	str	r3, [r4, #0]
 8007f44:	2310      	movs	r3, #16
 8007f46:	e7af      	b.n	8007ea8 <_printf_i+0xfc>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	f043 0320 	orr.w	r3, r3, #32
 8007f4e:	6023      	str	r3, [r4, #0]
 8007f50:	2378      	movs	r3, #120	; 0x78
 8007f52:	4828      	ldr	r0, [pc, #160]	; (8007ff4 <_printf_i+0x248>)
 8007f54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f58:	e7e3      	b.n	8007f22 <_printf_i+0x176>
 8007f5a:	0659      	lsls	r1, r3, #25
 8007f5c:	bf48      	it	mi
 8007f5e:	b2b6      	uxthmi	r6, r6
 8007f60:	e7e6      	b.n	8007f30 <_printf_i+0x184>
 8007f62:	4615      	mov	r5, r2
 8007f64:	e7bb      	b.n	8007ede <_printf_i+0x132>
 8007f66:	682b      	ldr	r3, [r5, #0]
 8007f68:	6826      	ldr	r6, [r4, #0]
 8007f6a:	1d18      	adds	r0, r3, #4
 8007f6c:	6961      	ldr	r1, [r4, #20]
 8007f6e:	6028      	str	r0, [r5, #0]
 8007f70:	0635      	lsls	r5, r6, #24
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	d501      	bpl.n	8007f7a <_printf_i+0x1ce>
 8007f76:	6019      	str	r1, [r3, #0]
 8007f78:	e002      	b.n	8007f80 <_printf_i+0x1d4>
 8007f7a:	0670      	lsls	r0, r6, #25
 8007f7c:	d5fb      	bpl.n	8007f76 <_printf_i+0x1ca>
 8007f7e:	8019      	strh	r1, [r3, #0]
 8007f80:	2300      	movs	r3, #0
 8007f82:	4615      	mov	r5, r2
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	e7ba      	b.n	8007efe <_printf_i+0x152>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	1d1a      	adds	r2, r3, #4
 8007f8e:	602a      	str	r2, [r5, #0]
 8007f90:	681d      	ldr	r5, [r3, #0]
 8007f92:	6862      	ldr	r2, [r4, #4]
 8007f94:	4628      	mov	r0, r5
 8007f96:	f000 f82f 	bl	8007ff8 <memchr>
 8007f9a:	b108      	cbz	r0, 8007fa0 <_printf_i+0x1f4>
 8007f9c:	1b40      	subs	r0, r0, r5
 8007f9e:	6060      	str	r0, [r4, #4]
 8007fa0:	6863      	ldr	r3, [r4, #4]
 8007fa2:	6123      	str	r3, [r4, #16]
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007faa:	e7a8      	b.n	8007efe <_printf_i+0x152>
 8007fac:	462a      	mov	r2, r5
 8007fae:	4649      	mov	r1, r9
 8007fb0:	4640      	mov	r0, r8
 8007fb2:	6923      	ldr	r3, [r4, #16]
 8007fb4:	47d0      	blx	sl
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	d0ab      	beq.n	8007f12 <_printf_i+0x166>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	079b      	lsls	r3, r3, #30
 8007fbe:	d413      	bmi.n	8007fe8 <_printf_i+0x23c>
 8007fc0:	68e0      	ldr	r0, [r4, #12]
 8007fc2:	9b03      	ldr	r3, [sp, #12]
 8007fc4:	4298      	cmp	r0, r3
 8007fc6:	bfb8      	it	lt
 8007fc8:	4618      	movlt	r0, r3
 8007fca:	e7a4      	b.n	8007f16 <_printf_i+0x16a>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	4632      	mov	r2, r6
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	47d0      	blx	sl
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	d09b      	beq.n	8007f12 <_printf_i+0x166>
 8007fda:	3501      	adds	r5, #1
 8007fdc:	68e3      	ldr	r3, [r4, #12]
 8007fde:	9903      	ldr	r1, [sp, #12]
 8007fe0:	1a5b      	subs	r3, r3, r1
 8007fe2:	42ab      	cmp	r3, r5
 8007fe4:	dcf2      	bgt.n	8007fcc <_printf_i+0x220>
 8007fe6:	e7eb      	b.n	8007fc0 <_printf_i+0x214>
 8007fe8:	2500      	movs	r5, #0
 8007fea:	f104 0619 	add.w	r6, r4, #25
 8007fee:	e7f5      	b.n	8007fdc <_printf_i+0x230>
 8007ff0:	08008a8d 	.word	0x08008a8d
 8007ff4:	08008a9e 	.word	0x08008a9e

08007ff8 <memchr>:
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	b510      	push	{r4, lr}
 8007ffc:	b2c9      	uxtb	r1, r1
 8007ffe:	4402      	add	r2, r0
 8008000:	4293      	cmp	r3, r2
 8008002:	4618      	mov	r0, r3
 8008004:	d101      	bne.n	800800a <memchr+0x12>
 8008006:	2000      	movs	r0, #0
 8008008:	e003      	b.n	8008012 <memchr+0x1a>
 800800a:	7804      	ldrb	r4, [r0, #0]
 800800c:	3301      	adds	r3, #1
 800800e:	428c      	cmp	r4, r1
 8008010:	d1f6      	bne.n	8008000 <memchr+0x8>
 8008012:	bd10      	pop	{r4, pc}

08008014 <memmove>:
 8008014:	4288      	cmp	r0, r1
 8008016:	b510      	push	{r4, lr}
 8008018:	eb01 0402 	add.w	r4, r1, r2
 800801c:	d902      	bls.n	8008024 <memmove+0x10>
 800801e:	4284      	cmp	r4, r0
 8008020:	4623      	mov	r3, r4
 8008022:	d807      	bhi.n	8008034 <memmove+0x20>
 8008024:	1e43      	subs	r3, r0, #1
 8008026:	42a1      	cmp	r1, r4
 8008028:	d008      	beq.n	800803c <memmove+0x28>
 800802a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800802e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008032:	e7f8      	b.n	8008026 <memmove+0x12>
 8008034:	4601      	mov	r1, r0
 8008036:	4402      	add	r2, r0
 8008038:	428a      	cmp	r2, r1
 800803a:	d100      	bne.n	800803e <memmove+0x2a>
 800803c:	bd10      	pop	{r4, pc}
 800803e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008046:	e7f7      	b.n	8008038 <memmove+0x24>

08008048 <_free_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4605      	mov	r5, r0
 800804c:	2900      	cmp	r1, #0
 800804e:	d040      	beq.n	80080d2 <_free_r+0x8a>
 8008050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008054:	1f0c      	subs	r4, r1, #4
 8008056:	2b00      	cmp	r3, #0
 8008058:	bfb8      	it	lt
 800805a:	18e4      	addlt	r4, r4, r3
 800805c:	f000 f910 	bl	8008280 <__malloc_lock>
 8008060:	4a1c      	ldr	r2, [pc, #112]	; (80080d4 <_free_r+0x8c>)
 8008062:	6813      	ldr	r3, [r2, #0]
 8008064:	b933      	cbnz	r3, 8008074 <_free_r+0x2c>
 8008066:	6063      	str	r3, [r4, #4]
 8008068:	6014      	str	r4, [r2, #0]
 800806a:	4628      	mov	r0, r5
 800806c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008070:	f000 b90c 	b.w	800828c <__malloc_unlock>
 8008074:	42a3      	cmp	r3, r4
 8008076:	d908      	bls.n	800808a <_free_r+0x42>
 8008078:	6820      	ldr	r0, [r4, #0]
 800807a:	1821      	adds	r1, r4, r0
 800807c:	428b      	cmp	r3, r1
 800807e:	bf01      	itttt	eq
 8008080:	6819      	ldreq	r1, [r3, #0]
 8008082:	685b      	ldreq	r3, [r3, #4]
 8008084:	1809      	addeq	r1, r1, r0
 8008086:	6021      	streq	r1, [r4, #0]
 8008088:	e7ed      	b.n	8008066 <_free_r+0x1e>
 800808a:	461a      	mov	r2, r3
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	b10b      	cbz	r3, 8008094 <_free_r+0x4c>
 8008090:	42a3      	cmp	r3, r4
 8008092:	d9fa      	bls.n	800808a <_free_r+0x42>
 8008094:	6811      	ldr	r1, [r2, #0]
 8008096:	1850      	adds	r0, r2, r1
 8008098:	42a0      	cmp	r0, r4
 800809a:	d10b      	bne.n	80080b4 <_free_r+0x6c>
 800809c:	6820      	ldr	r0, [r4, #0]
 800809e:	4401      	add	r1, r0
 80080a0:	1850      	adds	r0, r2, r1
 80080a2:	4283      	cmp	r3, r0
 80080a4:	6011      	str	r1, [r2, #0]
 80080a6:	d1e0      	bne.n	800806a <_free_r+0x22>
 80080a8:	6818      	ldr	r0, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	4401      	add	r1, r0
 80080ae:	6011      	str	r1, [r2, #0]
 80080b0:	6053      	str	r3, [r2, #4]
 80080b2:	e7da      	b.n	800806a <_free_r+0x22>
 80080b4:	d902      	bls.n	80080bc <_free_r+0x74>
 80080b6:	230c      	movs	r3, #12
 80080b8:	602b      	str	r3, [r5, #0]
 80080ba:	e7d6      	b.n	800806a <_free_r+0x22>
 80080bc:	6820      	ldr	r0, [r4, #0]
 80080be:	1821      	adds	r1, r4, r0
 80080c0:	428b      	cmp	r3, r1
 80080c2:	bf01      	itttt	eq
 80080c4:	6819      	ldreq	r1, [r3, #0]
 80080c6:	685b      	ldreq	r3, [r3, #4]
 80080c8:	1809      	addeq	r1, r1, r0
 80080ca:	6021      	streq	r1, [r4, #0]
 80080cc:	6063      	str	r3, [r4, #4]
 80080ce:	6054      	str	r4, [r2, #4]
 80080d0:	e7cb      	b.n	800806a <_free_r+0x22>
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	20002498 	.word	0x20002498

080080d8 <sbrk_aligned>:
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	4e0e      	ldr	r6, [pc, #56]	; (8008114 <sbrk_aligned+0x3c>)
 80080dc:	460c      	mov	r4, r1
 80080de:	6831      	ldr	r1, [r6, #0]
 80080e0:	4605      	mov	r5, r0
 80080e2:	b911      	cbnz	r1, 80080ea <sbrk_aligned+0x12>
 80080e4:	f000 f8bc 	bl	8008260 <_sbrk_r>
 80080e8:	6030      	str	r0, [r6, #0]
 80080ea:	4621      	mov	r1, r4
 80080ec:	4628      	mov	r0, r5
 80080ee:	f000 f8b7 	bl	8008260 <_sbrk_r>
 80080f2:	1c43      	adds	r3, r0, #1
 80080f4:	d00a      	beq.n	800810c <sbrk_aligned+0x34>
 80080f6:	1cc4      	adds	r4, r0, #3
 80080f8:	f024 0403 	bic.w	r4, r4, #3
 80080fc:	42a0      	cmp	r0, r4
 80080fe:	d007      	beq.n	8008110 <sbrk_aligned+0x38>
 8008100:	1a21      	subs	r1, r4, r0
 8008102:	4628      	mov	r0, r5
 8008104:	f000 f8ac 	bl	8008260 <_sbrk_r>
 8008108:	3001      	adds	r0, #1
 800810a:	d101      	bne.n	8008110 <sbrk_aligned+0x38>
 800810c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008110:	4620      	mov	r0, r4
 8008112:	bd70      	pop	{r4, r5, r6, pc}
 8008114:	2000249c 	.word	0x2000249c

08008118 <_malloc_r>:
 8008118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800811c:	1ccd      	adds	r5, r1, #3
 800811e:	f025 0503 	bic.w	r5, r5, #3
 8008122:	3508      	adds	r5, #8
 8008124:	2d0c      	cmp	r5, #12
 8008126:	bf38      	it	cc
 8008128:	250c      	movcc	r5, #12
 800812a:	2d00      	cmp	r5, #0
 800812c:	4607      	mov	r7, r0
 800812e:	db01      	blt.n	8008134 <_malloc_r+0x1c>
 8008130:	42a9      	cmp	r1, r5
 8008132:	d905      	bls.n	8008140 <_malloc_r+0x28>
 8008134:	230c      	movs	r3, #12
 8008136:	2600      	movs	r6, #0
 8008138:	603b      	str	r3, [r7, #0]
 800813a:	4630      	mov	r0, r6
 800813c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008140:	4e2e      	ldr	r6, [pc, #184]	; (80081fc <_malloc_r+0xe4>)
 8008142:	f000 f89d 	bl	8008280 <__malloc_lock>
 8008146:	6833      	ldr	r3, [r6, #0]
 8008148:	461c      	mov	r4, r3
 800814a:	bb34      	cbnz	r4, 800819a <_malloc_r+0x82>
 800814c:	4629      	mov	r1, r5
 800814e:	4638      	mov	r0, r7
 8008150:	f7ff ffc2 	bl	80080d8 <sbrk_aligned>
 8008154:	1c43      	adds	r3, r0, #1
 8008156:	4604      	mov	r4, r0
 8008158:	d14d      	bne.n	80081f6 <_malloc_r+0xde>
 800815a:	6834      	ldr	r4, [r6, #0]
 800815c:	4626      	mov	r6, r4
 800815e:	2e00      	cmp	r6, #0
 8008160:	d140      	bne.n	80081e4 <_malloc_r+0xcc>
 8008162:	6823      	ldr	r3, [r4, #0]
 8008164:	4631      	mov	r1, r6
 8008166:	4638      	mov	r0, r7
 8008168:	eb04 0803 	add.w	r8, r4, r3
 800816c:	f000 f878 	bl	8008260 <_sbrk_r>
 8008170:	4580      	cmp	r8, r0
 8008172:	d13a      	bne.n	80081ea <_malloc_r+0xd2>
 8008174:	6821      	ldr	r1, [r4, #0]
 8008176:	3503      	adds	r5, #3
 8008178:	1a6d      	subs	r5, r5, r1
 800817a:	f025 0503 	bic.w	r5, r5, #3
 800817e:	3508      	adds	r5, #8
 8008180:	2d0c      	cmp	r5, #12
 8008182:	bf38      	it	cc
 8008184:	250c      	movcc	r5, #12
 8008186:	4638      	mov	r0, r7
 8008188:	4629      	mov	r1, r5
 800818a:	f7ff ffa5 	bl	80080d8 <sbrk_aligned>
 800818e:	3001      	adds	r0, #1
 8008190:	d02b      	beq.n	80081ea <_malloc_r+0xd2>
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	442b      	add	r3, r5
 8008196:	6023      	str	r3, [r4, #0]
 8008198:	e00e      	b.n	80081b8 <_malloc_r+0xa0>
 800819a:	6822      	ldr	r2, [r4, #0]
 800819c:	1b52      	subs	r2, r2, r5
 800819e:	d41e      	bmi.n	80081de <_malloc_r+0xc6>
 80081a0:	2a0b      	cmp	r2, #11
 80081a2:	d916      	bls.n	80081d2 <_malloc_r+0xba>
 80081a4:	1961      	adds	r1, r4, r5
 80081a6:	42a3      	cmp	r3, r4
 80081a8:	6025      	str	r5, [r4, #0]
 80081aa:	bf18      	it	ne
 80081ac:	6059      	strne	r1, [r3, #4]
 80081ae:	6863      	ldr	r3, [r4, #4]
 80081b0:	bf08      	it	eq
 80081b2:	6031      	streq	r1, [r6, #0]
 80081b4:	5162      	str	r2, [r4, r5]
 80081b6:	604b      	str	r3, [r1, #4]
 80081b8:	4638      	mov	r0, r7
 80081ba:	f104 060b 	add.w	r6, r4, #11
 80081be:	f000 f865 	bl	800828c <__malloc_unlock>
 80081c2:	f026 0607 	bic.w	r6, r6, #7
 80081c6:	1d23      	adds	r3, r4, #4
 80081c8:	1af2      	subs	r2, r6, r3
 80081ca:	d0b6      	beq.n	800813a <_malloc_r+0x22>
 80081cc:	1b9b      	subs	r3, r3, r6
 80081ce:	50a3      	str	r3, [r4, r2]
 80081d0:	e7b3      	b.n	800813a <_malloc_r+0x22>
 80081d2:	6862      	ldr	r2, [r4, #4]
 80081d4:	42a3      	cmp	r3, r4
 80081d6:	bf0c      	ite	eq
 80081d8:	6032      	streq	r2, [r6, #0]
 80081da:	605a      	strne	r2, [r3, #4]
 80081dc:	e7ec      	b.n	80081b8 <_malloc_r+0xa0>
 80081de:	4623      	mov	r3, r4
 80081e0:	6864      	ldr	r4, [r4, #4]
 80081e2:	e7b2      	b.n	800814a <_malloc_r+0x32>
 80081e4:	4634      	mov	r4, r6
 80081e6:	6876      	ldr	r6, [r6, #4]
 80081e8:	e7b9      	b.n	800815e <_malloc_r+0x46>
 80081ea:	230c      	movs	r3, #12
 80081ec:	4638      	mov	r0, r7
 80081ee:	603b      	str	r3, [r7, #0]
 80081f0:	f000 f84c 	bl	800828c <__malloc_unlock>
 80081f4:	e7a1      	b.n	800813a <_malloc_r+0x22>
 80081f6:	6025      	str	r5, [r4, #0]
 80081f8:	e7de      	b.n	80081b8 <_malloc_r+0xa0>
 80081fa:	bf00      	nop
 80081fc:	20002498 	.word	0x20002498

08008200 <_realloc_r>:
 8008200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008204:	4680      	mov	r8, r0
 8008206:	4614      	mov	r4, r2
 8008208:	460e      	mov	r6, r1
 800820a:	b921      	cbnz	r1, 8008216 <_realloc_r+0x16>
 800820c:	4611      	mov	r1, r2
 800820e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008212:	f7ff bf81 	b.w	8008118 <_malloc_r>
 8008216:	b92a      	cbnz	r2, 8008224 <_realloc_r+0x24>
 8008218:	f7ff ff16 	bl	8008048 <_free_r>
 800821c:	4625      	mov	r5, r4
 800821e:	4628      	mov	r0, r5
 8008220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008224:	f000 f838 	bl	8008298 <_malloc_usable_size_r>
 8008228:	4284      	cmp	r4, r0
 800822a:	4607      	mov	r7, r0
 800822c:	d802      	bhi.n	8008234 <_realloc_r+0x34>
 800822e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008232:	d812      	bhi.n	800825a <_realloc_r+0x5a>
 8008234:	4621      	mov	r1, r4
 8008236:	4640      	mov	r0, r8
 8008238:	f7ff ff6e 	bl	8008118 <_malloc_r>
 800823c:	4605      	mov	r5, r0
 800823e:	2800      	cmp	r0, #0
 8008240:	d0ed      	beq.n	800821e <_realloc_r+0x1e>
 8008242:	42bc      	cmp	r4, r7
 8008244:	4622      	mov	r2, r4
 8008246:	4631      	mov	r1, r6
 8008248:	bf28      	it	cs
 800824a:	463a      	movcs	r2, r7
 800824c:	f7ff fbac 	bl	80079a8 <memcpy>
 8008250:	4631      	mov	r1, r6
 8008252:	4640      	mov	r0, r8
 8008254:	f7ff fef8 	bl	8008048 <_free_r>
 8008258:	e7e1      	b.n	800821e <_realloc_r+0x1e>
 800825a:	4635      	mov	r5, r6
 800825c:	e7df      	b.n	800821e <_realloc_r+0x1e>
	...

08008260 <_sbrk_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	2300      	movs	r3, #0
 8008264:	4d05      	ldr	r5, [pc, #20]	; (800827c <_sbrk_r+0x1c>)
 8008266:	4604      	mov	r4, r0
 8008268:	4608      	mov	r0, r1
 800826a:	602b      	str	r3, [r5, #0]
 800826c:	f7f9 fcf2 	bl	8001c54 <_sbrk>
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	d102      	bne.n	800827a <_sbrk_r+0x1a>
 8008274:	682b      	ldr	r3, [r5, #0]
 8008276:	b103      	cbz	r3, 800827a <_sbrk_r+0x1a>
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	bd38      	pop	{r3, r4, r5, pc}
 800827c:	200024a0 	.word	0x200024a0

08008280 <__malloc_lock>:
 8008280:	4801      	ldr	r0, [pc, #4]	; (8008288 <__malloc_lock+0x8>)
 8008282:	f000 b811 	b.w	80082a8 <__retarget_lock_acquire_recursive>
 8008286:	bf00      	nop
 8008288:	200024a4 	.word	0x200024a4

0800828c <__malloc_unlock>:
 800828c:	4801      	ldr	r0, [pc, #4]	; (8008294 <__malloc_unlock+0x8>)
 800828e:	f000 b80c 	b.w	80082aa <__retarget_lock_release_recursive>
 8008292:	bf00      	nop
 8008294:	200024a4 	.word	0x200024a4

08008298 <_malloc_usable_size_r>:
 8008298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800829c:	1f18      	subs	r0, r3, #4
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bfbc      	itt	lt
 80082a2:	580b      	ldrlt	r3, [r1, r0]
 80082a4:	18c0      	addlt	r0, r0, r3
 80082a6:	4770      	bx	lr

080082a8 <__retarget_lock_acquire_recursive>:
 80082a8:	4770      	bx	lr

080082aa <__retarget_lock_release_recursive>:
 80082aa:	4770      	bx	lr

080082ac <_init>:
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ae:	bf00      	nop
 80082b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b2:	bc08      	pop	{r3}
 80082b4:	469e      	mov	lr, r3
 80082b6:	4770      	bx	lr

080082b8 <_fini>:
 80082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ba:	bf00      	nop
 80082bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082be:	bc08      	pop	{r3}
 80082c0:	469e      	mov	lr, r3
 80082c2:	4770      	bx	lr
